
Deaf_band_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001130c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000138d8  080114ac  080114ac  000214ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024d84  08024d84  000404b8  2**0
                  CONTENTS
  4 .ARM          00000008  08024d84  08024d84  00034d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024d8c  08024d8c  000404b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024d8c  08024d8c  00034d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024d90  08024d90  00034d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004b8  20000000  08024d94  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006bcc  200004b8  0802524c  000404b8  2**2
                  ALLOC
 10 ._user_heap_stack 00001804  20007084  0802524c  00047084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000404b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000202eb  00000000  00000000  000404e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c7d  00000000  00000000  000607d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a18  00000000  00000000  00066450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c0  00000000  00000000  00067e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d3c7  00000000  00000000  00069628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000230de  00000000  00000000  000869ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a377e  00000000  00000000  000a9acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000013f  00000000  00000000  0014d24b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007534  00000000  00000000  0014d38c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002a79  00000000  00000000  001548c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004b8 	.word	0x200004b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011494 	.word	0x08011494

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004bc 	.word	0x200004bc
 80001dc:	08011494 	.word	0x08011494

080001e0 <arm_bitreversal_32>:
 80001e0:	1c4b      	adds	r3, r1, #1
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf98      	it	ls
 80001e6:	4770      	bxls	lr
 80001e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ec:	1c91      	adds	r1, r2, #2
 80001ee:	089b      	lsrs	r3, r3, #2

080001f0 <arm_bitreversal_32_0>:
 80001f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f8:	880a      	ldrh	r2, [r1, #0]
 80001fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001fe:	4480      	add	r8, r0
 8000200:	4481      	add	r9, r0
 8000202:	4402      	add	r2, r0
 8000204:	4484      	add	ip, r0
 8000206:	f8d9 7000 	ldr.w	r7, [r9]
 800020a:	f8d8 6000 	ldr.w	r6, [r8]
 800020e:	6815      	ldr	r5, [r2, #0]
 8000210:	f8dc 4000 	ldr.w	r4, [ip]
 8000214:	f8c9 6000 	str.w	r6, [r9]
 8000218:	f8c8 7000 	str.w	r7, [r8]
 800021c:	f8cc 5000 	str.w	r5, [ip]
 8000220:	6014      	str	r4, [r2, #0]
 8000222:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000226:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800022a:	6855      	ldr	r5, [r2, #4]
 800022c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000230:	f8c9 6004 	str.w	r6, [r9, #4]
 8000234:	f8c8 7004 	str.w	r7, [r8, #4]
 8000238:	f8cc 5004 	str.w	r5, [ip, #4]
 800023c:	6054      	str	r4, [r2, #4]
 800023e:	3108      	adds	r1, #8
 8000240:	3b01      	subs	r3, #1
 8000242:	d1d5      	bne.n	80001f0 <arm_bitreversal_32_0>
 8000244:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	4770      	bx	lr

0800024a <arm_bitreversal_16>:
 800024a:	1c4b      	adds	r3, r1, #1
 800024c:	2b01      	cmp	r3, #1
 800024e:	bf98      	it	ls
 8000250:	4770      	bxls	lr
 8000252:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000256:	1c91      	adds	r1, r2, #2
 8000258:	089b      	lsrs	r3, r3, #2

0800025a <arm_bitreversal_16_0>:
 800025a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800025e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000262:	880a      	ldrh	r2, [r1, #0]
 8000264:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000268:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800026c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000270:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000274:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000278:	f8d9 7000 	ldr.w	r7, [r9]
 800027c:	f8d8 6000 	ldr.w	r6, [r8]
 8000280:	6815      	ldr	r5, [r2, #0]
 8000282:	f8dc 4000 	ldr.w	r4, [ip]
 8000286:	f8c9 6000 	str.w	r6, [r9]
 800028a:	f8c8 7000 	str.w	r7, [r8]
 800028e:	f8cc 5000 	str.w	r5, [ip]
 8000292:	6014      	str	r4, [r2, #0]
 8000294:	3108      	adds	r1, #8
 8000296:	3b01      	subs	r3, #1
 8000298:	d1df      	bne.n	800025a <arm_bitreversal_16_0>
 800029a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	4770      	bx	lr

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b974 	b.w	8000650 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	4604      	mov	r4, r0
 8000388:	468e      	mov	lr, r1
 800038a:	2b00      	cmp	r3, #0
 800038c:	d14d      	bne.n	800042a <__udivmoddi4+0xaa>
 800038e:	428a      	cmp	r2, r1
 8000390:	4694      	mov	ip, r2
 8000392:	d969      	bls.n	8000468 <__udivmoddi4+0xe8>
 8000394:	fab2 f282 	clz	r2, r2
 8000398:	b152      	cbz	r2, 80003b0 <__udivmoddi4+0x30>
 800039a:	fa01 f302 	lsl.w	r3, r1, r2
 800039e:	f1c2 0120 	rsb	r1, r2, #32
 80003a2:	fa20 f101 	lsr.w	r1, r0, r1
 80003a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003aa:	ea41 0e03 	orr.w	lr, r1, r3
 80003ae:	4094      	lsls	r4, r2
 80003b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003b4:	0c21      	lsrs	r1, r4, #16
 80003b6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ba:	fa1f f78c 	uxth.w	r7, ip
 80003be:	fb08 e316 	mls	r3, r8, r6, lr
 80003c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003c6:	fb06 f107 	mul.w	r1, r6, r7
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003d6:	f080 811f 	bcs.w	8000618 <__udivmoddi4+0x298>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 811c 	bls.w	8000618 <__udivmoddi4+0x298>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003f4:	fb00 f707 	mul.w	r7, r0, r7
 80003f8:	42a7      	cmp	r7, r4
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x92>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	f080 810a 	bcs.w	800061c <__udivmoddi4+0x29c>
 8000408:	42a7      	cmp	r7, r4
 800040a:	f240 8107 	bls.w	800061c <__udivmoddi4+0x29c>
 800040e:	4464      	add	r4, ip
 8000410:	3802      	subs	r0, #2
 8000412:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000416:	1be4      	subs	r4, r4, r7
 8000418:	2600      	movs	r6, #0
 800041a:	b11d      	cbz	r5, 8000424 <__udivmoddi4+0xa4>
 800041c:	40d4      	lsrs	r4, r2
 800041e:	2300      	movs	r3, #0
 8000420:	e9c5 4300 	strd	r4, r3, [r5]
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0xc2>
 800042e:	2d00      	cmp	r5, #0
 8000430:	f000 80ef 	beq.w	8000612 <__udivmoddi4+0x292>
 8000434:	2600      	movs	r6, #0
 8000436:	e9c5 0100 	strd	r0, r1, [r5]
 800043a:	4630      	mov	r0, r6
 800043c:	4631      	mov	r1, r6
 800043e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000442:	fab3 f683 	clz	r6, r3
 8000446:	2e00      	cmp	r6, #0
 8000448:	d14a      	bne.n	80004e0 <__udivmoddi4+0x160>
 800044a:	428b      	cmp	r3, r1
 800044c:	d302      	bcc.n	8000454 <__udivmoddi4+0xd4>
 800044e:	4282      	cmp	r2, r0
 8000450:	f200 80f9 	bhi.w	8000646 <__udivmoddi4+0x2c6>
 8000454:	1a84      	subs	r4, r0, r2
 8000456:	eb61 0303 	sbc.w	r3, r1, r3
 800045a:	2001      	movs	r0, #1
 800045c:	469e      	mov	lr, r3
 800045e:	2d00      	cmp	r5, #0
 8000460:	d0e0      	beq.n	8000424 <__udivmoddi4+0xa4>
 8000462:	e9c5 4e00 	strd	r4, lr, [r5]
 8000466:	e7dd      	b.n	8000424 <__udivmoddi4+0xa4>
 8000468:	b902      	cbnz	r2, 800046c <__udivmoddi4+0xec>
 800046a:	deff      	udf	#255	; 0xff
 800046c:	fab2 f282 	clz	r2, r2
 8000470:	2a00      	cmp	r2, #0
 8000472:	f040 8092 	bne.w	800059a <__udivmoddi4+0x21a>
 8000476:	eba1 010c 	sub.w	r1, r1, ip
 800047a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047e:	fa1f fe8c 	uxth.w	lr, ip
 8000482:	2601      	movs	r6, #1
 8000484:	0c20      	lsrs	r0, r4, #16
 8000486:	fbb1 f3f7 	udiv	r3, r1, r7
 800048a:	fb07 1113 	mls	r1, r7, r3, r1
 800048e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000492:	fb0e f003 	mul.w	r0, lr, r3
 8000496:	4288      	cmp	r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x12c>
 800049a:	eb1c 0101 	adds.w	r1, ip, r1
 800049e:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x12a>
 80004a4:	4288      	cmp	r0, r1
 80004a6:	f200 80cb 	bhi.w	8000640 <__udivmoddi4+0x2c0>
 80004aa:	4643      	mov	r3, r8
 80004ac:	1a09      	subs	r1, r1, r0
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004b4:	fb07 1110 	mls	r1, r7, r0, r1
 80004b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004bc:	fb0e fe00 	mul.w	lr, lr, r0
 80004c0:	45a6      	cmp	lr, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x156>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004cc:	d202      	bcs.n	80004d4 <__udivmoddi4+0x154>
 80004ce:	45a6      	cmp	lr, r4
 80004d0:	f200 80bb 	bhi.w	800064a <__udivmoddi4+0x2ca>
 80004d4:	4608      	mov	r0, r1
 80004d6:	eba4 040e 	sub.w	r4, r4, lr
 80004da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x9a>
 80004e0:	f1c6 0720 	rsb	r7, r6, #32
 80004e4:	40b3      	lsls	r3, r6
 80004e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ee:	fa20 f407 	lsr.w	r4, r0, r7
 80004f2:	fa01 f306 	lsl.w	r3, r1, r6
 80004f6:	431c      	orrs	r4, r3
 80004f8:	40f9      	lsrs	r1, r7
 80004fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000502:	fbb1 f8f9 	udiv	r8, r1, r9
 8000506:	0c20      	lsrs	r0, r4, #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fb09 1118 	mls	r1, r9, r8, r1
 8000510:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000514:	fb08 f00e 	mul.w	r0, r8, lr
 8000518:	4288      	cmp	r0, r1
 800051a:	fa02 f206 	lsl.w	r2, r2, r6
 800051e:	d90b      	bls.n	8000538 <__udivmoddi4+0x1b8>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f108 3aff 	add.w	sl, r8, #4294967295
 8000528:	f080 8088 	bcs.w	800063c <__udivmoddi4+0x2bc>
 800052c:	4288      	cmp	r0, r1
 800052e:	f240 8085 	bls.w	800063c <__udivmoddi4+0x2bc>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	1a09      	subs	r1, r1, r0
 800053a:	b2a4      	uxth	r4, r4
 800053c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000540:	fb09 1110 	mls	r1, r9, r0, r1
 8000544:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000548:	fb00 fe0e 	mul.w	lr, r0, lr
 800054c:	458e      	cmp	lr, r1
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x1e2>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f100 34ff 	add.w	r4, r0, #4294967295
 8000558:	d26c      	bcs.n	8000634 <__udivmoddi4+0x2b4>
 800055a:	458e      	cmp	lr, r1
 800055c:	d96a      	bls.n	8000634 <__udivmoddi4+0x2b4>
 800055e:	3802      	subs	r0, #2
 8000560:	4461      	add	r1, ip
 8000562:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000566:	fba0 9402 	umull	r9, r4, r0, r2
 800056a:	eba1 010e 	sub.w	r1, r1, lr
 800056e:	42a1      	cmp	r1, r4
 8000570:	46c8      	mov	r8, r9
 8000572:	46a6      	mov	lr, r4
 8000574:	d356      	bcc.n	8000624 <__udivmoddi4+0x2a4>
 8000576:	d053      	beq.n	8000620 <__udivmoddi4+0x2a0>
 8000578:	b15d      	cbz	r5, 8000592 <__udivmoddi4+0x212>
 800057a:	ebb3 0208 	subs.w	r2, r3, r8
 800057e:	eb61 010e 	sbc.w	r1, r1, lr
 8000582:	fa01 f707 	lsl.w	r7, r1, r7
 8000586:	fa22 f306 	lsr.w	r3, r2, r6
 800058a:	40f1      	lsrs	r1, r6
 800058c:	431f      	orrs	r7, r3
 800058e:	e9c5 7100 	strd	r7, r1, [r5]
 8000592:	2600      	movs	r6, #0
 8000594:	4631      	mov	r1, r6
 8000596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	40d8      	lsrs	r0, r3
 80005a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005a4:	fa21 f303 	lsr.w	r3, r1, r3
 80005a8:	4091      	lsls	r1, r2
 80005aa:	4301      	orrs	r1, r0
 80005ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b0:	fa1f fe8c 	uxth.w	lr, ip
 80005b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005b8:	fb07 3610 	mls	r6, r7, r0, r3
 80005bc:	0c0b      	lsrs	r3, r1, #16
 80005be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005c2:	fb00 f60e 	mul.w	r6, r0, lr
 80005c6:	429e      	cmp	r6, r3
 80005c8:	fa04 f402 	lsl.w	r4, r4, r2
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x260>
 80005ce:	eb1c 0303 	adds.w	r3, ip, r3
 80005d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005d6:	d22f      	bcs.n	8000638 <__udivmoddi4+0x2b8>
 80005d8:	429e      	cmp	r6, r3
 80005da:	d92d      	bls.n	8000638 <__udivmoddi4+0x2b8>
 80005dc:	3802      	subs	r0, #2
 80005de:	4463      	add	r3, ip
 80005e0:	1b9b      	subs	r3, r3, r6
 80005e2:	b289      	uxth	r1, r1
 80005e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005e8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005f0:	fb06 f30e 	mul.w	r3, r6, lr
 80005f4:	428b      	cmp	r3, r1
 80005f6:	d908      	bls.n	800060a <__udivmoddi4+0x28a>
 80005f8:	eb1c 0101 	adds.w	r1, ip, r1
 80005fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000600:	d216      	bcs.n	8000630 <__udivmoddi4+0x2b0>
 8000602:	428b      	cmp	r3, r1
 8000604:	d914      	bls.n	8000630 <__udivmoddi4+0x2b0>
 8000606:	3e02      	subs	r6, #2
 8000608:	4461      	add	r1, ip
 800060a:	1ac9      	subs	r1, r1, r3
 800060c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000610:	e738      	b.n	8000484 <__udivmoddi4+0x104>
 8000612:	462e      	mov	r6, r5
 8000614:	4628      	mov	r0, r5
 8000616:	e705      	b.n	8000424 <__udivmoddi4+0xa4>
 8000618:	4606      	mov	r6, r0
 800061a:	e6e3      	b.n	80003e4 <__udivmoddi4+0x64>
 800061c:	4618      	mov	r0, r3
 800061e:	e6f8      	b.n	8000412 <__udivmoddi4+0x92>
 8000620:	454b      	cmp	r3, r9
 8000622:	d2a9      	bcs.n	8000578 <__udivmoddi4+0x1f8>
 8000624:	ebb9 0802 	subs.w	r8, r9, r2
 8000628:	eb64 0e0c 	sbc.w	lr, r4, ip
 800062c:	3801      	subs	r0, #1
 800062e:	e7a3      	b.n	8000578 <__udivmoddi4+0x1f8>
 8000630:	4646      	mov	r6, r8
 8000632:	e7ea      	b.n	800060a <__udivmoddi4+0x28a>
 8000634:	4620      	mov	r0, r4
 8000636:	e794      	b.n	8000562 <__udivmoddi4+0x1e2>
 8000638:	4640      	mov	r0, r8
 800063a:	e7d1      	b.n	80005e0 <__udivmoddi4+0x260>
 800063c:	46d0      	mov	r8, sl
 800063e:	e77b      	b.n	8000538 <__udivmoddi4+0x1b8>
 8000640:	3b02      	subs	r3, #2
 8000642:	4461      	add	r1, ip
 8000644:	e732      	b.n	80004ac <__udivmoddi4+0x12c>
 8000646:	4630      	mov	r0, r6
 8000648:	e709      	b.n	800045e <__udivmoddi4+0xde>
 800064a:	4464      	add	r4, ip
 800064c:	3802      	subs	r0, #2
 800064e:	e742      	b.n	80004d6 <__udivmoddi4+0x156>

08000650 <__aeabi_idiv0>:
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop

08000654 <GetSector>:
#include "stdio.h"



static uint32_t GetSector(uint32_t Address)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a2e      	ldr	r2, [pc, #184]	; (800071c <GetSector+0xc8>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d806      	bhi.n	8000676 <GetSector+0x22>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800066e:	d302      	bcc.n	8000676 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	e04b      	b.n	800070e <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a29      	ldr	r2, [pc, #164]	; (8000720 <GetSector+0xcc>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d806      	bhi.n	800068c <GetSector+0x38>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a28      	ldr	r2, [pc, #160]	; (8000724 <GetSector+0xd0>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d302      	bcc.n	800068c <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8000686:	2301      	movs	r3, #1
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	e040      	b.n	800070e <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a26      	ldr	r2, [pc, #152]	; (8000728 <GetSector+0xd4>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d806      	bhi.n	80006a2 <GetSector+0x4e>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4a25      	ldr	r2, [pc, #148]	; (800072c <GetSector+0xd8>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d302      	bcc.n	80006a2 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 800069c:	2302      	movs	r3, #2
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	e035      	b.n	800070e <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a22      	ldr	r2, [pc, #136]	; (8000730 <GetSector+0xdc>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d206      	bcs.n	80006b8 <GetSector+0x64>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a21      	ldr	r2, [pc, #132]	; (8000734 <GetSector+0xe0>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d302      	bcc.n	80006b8 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 80006b2:	2303      	movs	r3, #3
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	e02a      	b.n	800070e <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a1f      	ldr	r2, [pc, #124]	; (8000738 <GetSector+0xe4>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d206      	bcs.n	80006ce <GetSector+0x7a>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a1b      	ldr	r2, [pc, #108]	; (8000730 <GetSector+0xdc>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d902      	bls.n	80006ce <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	e01f      	b.n	800070e <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a1a      	ldr	r2, [pc, #104]	; (800073c <GetSector+0xe8>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d206      	bcs.n	80006e4 <GetSector+0x90>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4a17      	ldr	r2, [pc, #92]	; (8000738 <GetSector+0xe4>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d902      	bls.n	80006e4 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 80006de:	2305      	movs	r3, #5
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	e014      	b.n	800070e <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4a16      	ldr	r2, [pc, #88]	; (8000740 <GetSector+0xec>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d206      	bcs.n	80006fa <GetSector+0xa6>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4a13      	ldr	r2, [pc, #76]	; (800073c <GetSector+0xe8>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d902      	bls.n	80006fa <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 80006f4:	2306      	movs	r3, #6
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	e009      	b.n	800070e <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a11      	ldr	r2, [pc, #68]	; (8000744 <GetSector+0xf0>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d205      	bcs.n	800070e <GetSector+0xba>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a0e      	ldr	r2, [pc, #56]	; (8000740 <GetSector+0xec>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d901      	bls.n	800070e <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 800070a:	2307      	movs	r3, #7
 800070c:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 800070e:	68fb      	ldr	r3, [r7, #12]
}
 8000710:	4618      	mov	r0, r3
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	08003ffe 	.word	0x08003ffe
 8000720:	08007ffe 	.word	0x08007ffe
 8000724:	08004000 	.word	0x08004000
 8000728:	0800bffe 	.word	0x0800bffe
 800072c:	08008000 	.word	0x08008000
 8000730:	0800ffff 	.word	0x0800ffff
 8000734:	0800c000 	.word	0x0800c000
 8000738:	0801ffff 	.word	0x0801ffff
 800073c:	0803ffff 	.word	0x0803ffff
 8000740:	0805ffff 	.word	0x0805ffff
 8000744:	0807ffff 	.word	0x0807ffff

08000748 <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 8000748:	b5b0      	push	{r4, r5, r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	4613      	mov	r3, r2
 8000754:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 800075a:	f008 fe17 	bl	800938c <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 800075e:	68f8      	ldr	r0, [r7, #12]
 8000760:	f7ff ff78 	bl	8000654 <GetSector>
 8000764:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 8000766:	88fb      	ldrh	r3, [r7, #6]
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	461a      	mov	r2, r3
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	4413      	add	r3, r2
 8000770:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8000772:	69f8      	ldr	r0, [r7, #28]
 8000774:	f7ff ff6e 	bl	8000654 <GetSector>
 8000778:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <Flash_Write_Data+0xb8>)
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <Flash_Write_Data+0xb8>)
 8000782:	2202      	movs	r2, #2
 8000784:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 8000786:	4a1e      	ldr	r2, [pc, #120]	; (8000800 <Flash_Write_Data+0xb8>)
 8000788:	6a3b      	ldr	r3, [r7, #32]
 800078a:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 800078c:	69ba      	ldr	r2, [r7, #24]
 800078e:	6a3b      	ldr	r3, [r7, #32]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	3301      	adds	r3, #1
 8000794:	4a1a      	ldr	r2, [pc, #104]	; (8000800 <Flash_Write_Data+0xb8>)
 8000796:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	4818      	ldr	r0, [pc, #96]	; (8000800 <Flash_Write_Data+0xb8>)
 80007a0:	f008 ff72 	bl	8009688 <HAL_FLASHEx_Erase>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d01f      	beq.n	80007ea <Flash_Write_Data+0xa2>
	  {
		  return HAL_FLASH_GetError ();
 80007aa:	f008 fe21 	bl	80093f0 <HAL_FLASH_GetError>
 80007ae:	4603      	mov	r3, r0
 80007b0:	e022      	b.n	80007f8 <Flash_Write_Data+0xb0>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 80007b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	4413      	add	r3, r2
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2200      	movs	r2, #0
 80007be:	461c      	mov	r4, r3
 80007c0:	4615      	mov	r5, r2
 80007c2:	4622      	mov	r2, r4
 80007c4:	462b      	mov	r3, r5
 80007c6:	68f9      	ldr	r1, [r7, #12]
 80007c8:	2002      	movs	r0, #2
 80007ca:	f008 fd8b 	bl	80092e4 <HAL_FLASH_Program>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d106      	bne.n	80007e2 <Flash_Write_Data+0x9a>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	3304      	adds	r3, #4
 80007d8:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	3301      	adds	r3, #1
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
 80007e0:	e003      	b.n	80007ea <Flash_Write_Data+0xa2>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 80007e2:	f008 fe05 	bl	80093f0 <HAL_FLASH_GetError>
 80007e6:	4603      	mov	r3, r0
 80007e8:	e006      	b.n	80007f8 <Flash_Write_Data+0xb0>
	   while (sofar<numberofwords)
 80007ea:	88fb      	ldrh	r3, [r7, #6]
 80007ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007ee:	429a      	cmp	r2, r3
 80007f0:	dbdf      	blt.n	80007b2 <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 80007f2:	f008 fded 	bl	80093d0 <HAL_FLASH_Lock>

	   return 0;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3728      	adds	r7, #40	; 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bdb0      	pop	{r4, r5, r7, pc}
 8000800:	200004d8 	.word	0x200004d8

08000804 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	4613      	mov	r3, r2
 8000810:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	3304      	adds	r3, #4
 800081e:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	3304      	adds	r3, #4
 8000824:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	1e5a      	subs	r2, r3, #1
 800082a:	80fa      	strh	r2, [r7, #6]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d000      	beq.n	8000832 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8000830:	e7ef      	b.n	8000812 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8000832:	bf00      	nop
	}
}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <Convert_To_Str>:

void Convert_To_Str (uint32_t *Data, char *Buf)
{
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
	int numberofbytes = ((strlen((char *)Data)/4) + ((strlen((char *)Data) % 4) != 0)) *4;
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff fd28 	bl	80002a0 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	089c      	lsrs	r4, r3, #2
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff fd23 	bl	80002a0 <strlen>
 800085a:	4603      	mov	r3, r0
 800085c:	f003 0303 	and.w	r3, r3, #3
 8000860:	2b00      	cmp	r3, #0
 8000862:	bf14      	ite	ne
 8000864:	2301      	movne	r3, #1
 8000866:	2300      	moveq	r3, #0
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4423      	add	r3, r4
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numberofbytes; i++)
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	e01b      	b.n	80008ae <Convert_To_Str+0x6e>
	{
		Buf[i] = Data[i/4]>>(8*(i%4));
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	2b00      	cmp	r3, #0
 800087a:	da00      	bge.n	800087e <Convert_To_Str+0x3e>
 800087c:	3303      	adds	r3, #3
 800087e:	109b      	asrs	r3, r3, #2
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	4259      	negs	r1, r3
 800088c:	f003 0303 	and.w	r3, r3, #3
 8000890:	f001 0103 	and.w	r1, r1, #3
 8000894:	bf58      	it	pl
 8000896:	424b      	negpl	r3, r1
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	fa22 f103 	lsr.w	r1, r2, r3
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	683a      	ldr	r2, [r7, #0]
 80008a2:	4413      	add	r3, r2
 80008a4:	b2ca      	uxtb	r2, r1
 80008a6:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<numberofbytes; i++)
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	3301      	adds	r3, #1
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	dbdf      	blt.n	8000876 <Convert_To_Str+0x36>
	}
}
 80008b6:	bf00      	nop
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd90      	pop	{r4, r7, pc}

080008c0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_CRC_Init+0x20>)
 80008c6:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <MX_CRC_Init+0x24>)
 80008c8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_CRC_Init+0x20>)
 80008cc:	f008 f97d 	bl	8008bca <HAL_CRC_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80008d6:	f002 fc93 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200004ec 	.word	0x200004ec
 80008e4:	40023000 	.word	0x40023000

080008e8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <HAL_CRC_MspInit+0x3c>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d10d      	bne.n	8000916 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <HAL_CRC_MspInit+0x40>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a09      	ldr	r2, [pc, #36]	; (8000928 <HAL_CRC_MspInit+0x40>)
 8000904:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <HAL_CRC_MspInit+0x40>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40023000 	.word	0x40023000
 8000928:	40023800 	.word	0x40023800

0800092c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_DMA_Init+0x3c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a0b      	ldr	r2, [pc, #44]	; (8000968 <MX_DMA_Init+0x3c>)
 800093c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_DMA_Init+0x3c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	200e      	movs	r0, #14
 8000954:	f008 f903 	bl	8008b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000958:	200e      	movs	r0, #14
 800095a:	f008 f91c 	bl	8008b96 <HAL_NVIC_EnableIRQ>

}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	4b31      	ldr	r3, [pc, #196]	; (8000a4c <MX_GPIO_Init+0xe0>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a30      	ldr	r2, [pc, #192]	; (8000a4c <MX_GPIO_Init+0xe0>)
 800098c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <MX_GPIO_Init+0xe0>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b2a      	ldr	r3, [pc, #168]	; (8000a4c <MX_GPIO_Init+0xe0>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a29      	ldr	r2, [pc, #164]	; (8000a4c <MX_GPIO_Init+0xe0>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <MX_GPIO_Init+0xe0>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <MX_GPIO_Init+0xe0>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <MX_GPIO_Init+0xe0>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <MX_GPIO_Init+0xe0>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED2_Pin|LED1_Pin|STBY_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80009dc:	481c      	ldr	r0, [pc, #112]	; (8000a50 <MX_GPIO_Init+0xe4>)
 80009de:	f009 f911 	bl	8009c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CONV_STD_GPIO_Port, CONV_STD_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e8:	481a      	ldr	r0, [pc, #104]	; (8000a54 <MX_GPIO_Init+0xe8>)
 80009ea:	f009 f90b 	bl	8009c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin|STBY_Pin;
 80009ee:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80009f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	4619      	mov	r1, r3
 8000a06:	4812      	ldr	r0, [pc, #72]	; (8000a50 <MX_GPIO_Init+0xe4>)
 8000a08:	f008 ff60 	bl	80098cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONV_STD_Pin;
 8000a0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CONV_STD_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	4619      	mov	r1, r3
 8000a24:	480b      	ldr	r0, [pc, #44]	; (8000a54 <MX_GPIO_Init+0xe8>)
 8000a26:	f008 ff51 	bl	80098cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000a2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a30:	2300      	movs	r3, #0
 8000a32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_GPIO_Init+0xe8>)
 8000a40:	f008 ff44 	bl	80098cc <HAL_GPIO_Init>

}
 8000a44:	bf00      	nop
 8000a46:	3720      	adds	r7, #32
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020000 	.word	0x40020000
 8000a54:	40020400 	.word	0x40020400

08000a58 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_I2S2_Init+0x54>)
 8000a5e:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <MX_I2S2_Init+0x58>)
 8000a60:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_I2S2_Init+0x54>)
 8000a64:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a68:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_I2S2_Init+0x54>)
 8000a6c:	2210      	movs	r2, #16
 8000a6e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_I2S2_Init+0x54>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <MX_I2S2_Init+0x54>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000a7c:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_I2S2_Init+0x54>)
 8000a7e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000a82:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_I2S2_Init+0x54>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_I2S2_Init+0x54>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_I2S2_Init+0x54>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_I2S2_Init+0x54>)
 8000a98:	f009 f8e8 	bl	8009c6c <HAL_I2S_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000aa2:	f002 fbad 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200004f4 	.word	0x200004f4
 8000ab0:	40003800 	.word	0x40003800

08000ab4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b090      	sub	sp, #64	; 0x40
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
 8000adc:	615a      	str	r2, [r3, #20]
  if(i2sHandle->Instance==SPI2)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a3f      	ldr	r2, [pc, #252]	; (8000be0 <HAL_I2S_MspInit+0x12c>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d177      	bne.n	8000bd8 <HAL_I2S_MspInit+0x124>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 302;
 8000aec:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8000af0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8000af2:	2310      	movs	r3, #16
 8000af4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000af6:	2302      	movs	r3, #2
 8000af8:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4618      	mov	r0, r3
 8000b00:	f00a fc42 	bl	800b388 <HAL_RCCEx_PeriphCLKConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8000b0a:	f002 fb79 	bl	8003200 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b34      	ldr	r3, [pc, #208]	; (8000be4 <HAL_I2S_MspInit+0x130>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a33      	ldr	r2, [pc, #204]	; (8000be4 <HAL_I2S_MspInit+0x130>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1e:	4b31      	ldr	r3, [pc, #196]	; (8000be4 <HAL_I2S_MspInit+0x130>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <HAL_I2S_MspInit+0x130>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a2c      	ldr	r2, [pc, #176]	; (8000be4 <HAL_I2S_MspInit+0x130>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <HAL_I2S_MspInit+0x130>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 8000b46:	f44f 4314 	mov.w	r3, #37888	; 0x9400
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b58:	2305      	movs	r3, #5
 8000b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b60:	4619      	mov	r1, r3
 8000b62:	4821      	ldr	r0, [pc, #132]	; (8000be8 <HAL_I2S_MspInit+0x134>)
 8000b64:	f008 feb2 	bl	80098cc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000b68:	4b20      	ldr	r3, [pc, #128]	; (8000bec <HAL_I2S_MspInit+0x138>)
 8000b6a:	4a21      	ldr	r2, [pc, #132]	; (8000bf0 <HAL_I2S_MspInit+0x13c>)
 8000b6c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <HAL_I2S_MspInit+0x138>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <HAL_I2S_MspInit+0x138>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <HAL_I2S_MspInit+0x138>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <HAL_I2S_MspInit+0x138>)
 8000b82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b86:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <HAL_I2S_MspInit+0x138>)
 8000b8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b8e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b90:	4b16      	ldr	r3, [pc, #88]	; (8000bec <HAL_I2S_MspInit+0x138>)
 8000b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b96:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <HAL_I2S_MspInit+0x138>)
 8000b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b9e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_I2S_MspInit+0x138>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_I2S_MspInit+0x138>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000bac:	480f      	ldr	r0, [pc, #60]	; (8000bec <HAL_I2S_MspInit+0x138>)
 8000bae:	f008 f829 	bl	8008c04 <HAL_DMA_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <HAL_I2S_MspInit+0x108>
    {
      Error_Handler();
 8000bb8:	f002 fb22 	bl	8003200 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <HAL_I2S_MspInit+0x138>)
 8000bc0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <HAL_I2S_MspInit+0x138>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2024      	movs	r0, #36	; 0x24
 8000bce:	f007 ffc6 	bl	8008b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000bd2:	2024      	movs	r0, #36	; 0x24
 8000bd4:	f007 ffdf 	bl	8008b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000bd8:	bf00      	nop
 8000bda:	3740      	adds	r7, #64	; 0x40
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40003800 	.word	0x40003800
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020400 	.word	0x40020400
 8000bec:	2000053c 	.word	0x2000053c
 8000bf0:	40026058 	.word	0x40026058

08000bf4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <MX_IWDG_Init+0x2c>)
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <MX_IWDG_Init+0x30>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <MX_IWDG_Init+0x2c>)
 8000c00:	2203      	movs	r2, #3
 8000c02:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <MX_IWDG_Init+0x2c>)
 8000c06:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000c0a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000c0c:	4804      	ldr	r0, [pc, #16]	; (8000c20 <MX_IWDG_Init+0x2c>)
 8000c0e:	f009 fde9 	bl	800a7e4 <HAL_IWDG_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000c18:	f002 faf2 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	2000059c 	.word	0x2000059c
 8000c24:	40003000 	.word	0x40003000

08000c28 <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 8000c28:	b480      	push	{r7}
 8000c2a:	b087      	sub	sp, #28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d801      	bhi.n	8000c42 <jsmn_alloc_token+0x1a>
    return NULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e014      	b.n	8000c6c <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	1c59      	adds	r1, r3, #1
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	6051      	str	r1, [r2, #4]
 8000c4c:	011b      	lsls	r3, r3, #4
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	4413      	add	r3, r2
 8000c52:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	689a      	ldr	r2, [r3, #8]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 8000c6a:	697b      	ldr	r3, [r7, #20]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	371c      	adds	r7, #28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	607a      	str	r2, [r7, #4]
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	460b      	mov	r3, r1
 8000c86:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	7afa      	ldrb	r2, [r7, #11]
 8000c8c:	701a      	strb	r2, [r3, #0]
  token->start = start;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	605a      	str	r2, [r3, #4]
  token->end = end;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	683a      	ldr	r2, [r7, #0]
 8000c98:	609a      	str	r2, [r3, #8]
  token->size = 0;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
 8000cb8:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000cc0:	e07c      	b.n	8000dbc <jsmn_parse_primitive+0x110>
    switch (js[parser->pos]) {
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	4413      	add	r3, r2
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b7d      	cmp	r3, #125	; 0x7d
 8000cce:	f000 8083 	beq.w	8000dd8 <jsmn_parse_primitive+0x12c>
 8000cd2:	2b7d      	cmp	r3, #125	; 0x7d
 8000cd4:	dc58      	bgt.n	8000d88 <jsmn_parse_primitive+0xdc>
 8000cd6:	2b5d      	cmp	r3, #93	; 0x5d
 8000cd8:	d07e      	beq.n	8000dd8 <jsmn_parse_primitive+0x12c>
 8000cda:	2b5d      	cmp	r3, #93	; 0x5d
 8000cdc:	dc54      	bgt.n	8000d88 <jsmn_parse_primitive+0xdc>
 8000cde:	2b2c      	cmp	r3, #44	; 0x2c
 8000ce0:	dc50      	bgt.n	8000d84 <jsmn_parse_primitive+0xd8>
 8000ce2:	2b09      	cmp	r3, #9
 8000ce4:	db50      	blt.n	8000d88 <jsmn_parse_primitive+0xdc>
 8000ce6:	3b09      	subs	r3, #9
 8000ce8:	2b23      	cmp	r3, #35	; 0x23
 8000cea:	d84d      	bhi.n	8000d88 <jsmn_parse_primitive+0xdc>
 8000cec:	a201      	add	r2, pc, #4	; (adr r2, 8000cf4 <jsmn_parse_primitive+0x48>)
 8000cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf2:	bf00      	nop
 8000cf4:	08000dd9 	.word	0x08000dd9
 8000cf8:	08000dd9 	.word	0x08000dd9
 8000cfc:	08000d89 	.word	0x08000d89
 8000d00:	08000d89 	.word	0x08000d89
 8000d04:	08000dd9 	.word	0x08000dd9
 8000d08:	08000d89 	.word	0x08000d89
 8000d0c:	08000d89 	.word	0x08000d89
 8000d10:	08000d89 	.word	0x08000d89
 8000d14:	08000d89 	.word	0x08000d89
 8000d18:	08000d89 	.word	0x08000d89
 8000d1c:	08000d89 	.word	0x08000d89
 8000d20:	08000d89 	.word	0x08000d89
 8000d24:	08000d89 	.word	0x08000d89
 8000d28:	08000d89 	.word	0x08000d89
 8000d2c:	08000d89 	.word	0x08000d89
 8000d30:	08000d89 	.word	0x08000d89
 8000d34:	08000d89 	.word	0x08000d89
 8000d38:	08000d89 	.word	0x08000d89
 8000d3c:	08000d89 	.word	0x08000d89
 8000d40:	08000d89 	.word	0x08000d89
 8000d44:	08000d89 	.word	0x08000d89
 8000d48:	08000d89 	.word	0x08000d89
 8000d4c:	08000d89 	.word	0x08000d89
 8000d50:	08000dd9 	.word	0x08000dd9
 8000d54:	08000d89 	.word	0x08000d89
 8000d58:	08000d89 	.word	0x08000d89
 8000d5c:	08000d89 	.word	0x08000d89
 8000d60:	08000d89 	.word	0x08000d89
 8000d64:	08000d89 	.word	0x08000d89
 8000d68:	08000d89 	.word	0x08000d89
 8000d6c:	08000d89 	.word	0x08000d89
 8000d70:	08000d89 	.word	0x08000d89
 8000d74:	08000d89 	.word	0x08000d89
 8000d78:	08000d89 	.word	0x08000d89
 8000d7c:	08000d89 	.word	0x08000d89
 8000d80:	08000dd9 	.word	0x08000dd9
 8000d84:	2b3a      	cmp	r3, #58	; 0x3a
 8000d86:	d027      	beq.n	8000dd8 <jsmn_parse_primitive+0x12c>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 8000d88:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	4413      	add	r3, r2
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b1f      	cmp	r3, #31
 8000d96:	d906      	bls.n	8000da6 <jsmn_parse_primitive+0xfa>
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	68ba      	ldr	r2, [r7, #8]
 8000d9e:	4413      	add	r3, r2
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b7e      	cmp	r3, #126	; 0x7e
 8000da4:	d905      	bls.n	8000db2 <jsmn_parse_primitive+0x106>
      parser->pos = start;
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 8000dac:	f06f 0301 	mvn.w	r3, #1
 8000db0:	e03b      	b.n	8000e2a <jsmn_parse_primitive+0x17e>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d90a      	bls.n	8000ddc <jsmn_parse_primitive+0x130>
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	4413      	add	r3, r2
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	f47f af76 	bne.w	8000cc2 <jsmn_parse_primitive+0x16>
  /* In strict mode primitive must be followed by a comma/object/array */
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
 8000dd6:	e001      	b.n	8000ddc <jsmn_parse_primitive+0x130>
      goto found;
 8000dd8:	bf00      	nop
 8000dda:	e000      	b.n	8000dde <jsmn_parse_primitive+0x132>
found:
 8000ddc:	bf00      	nop
  if (tokens == NULL) {
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d106      	bne.n	8000df2 <jsmn_parse_primitive+0x146>
    parser->pos--;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	1e5a      	subs	r2, r3, #1
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	601a      	str	r2, [r3, #0]
    return 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	e01b      	b.n	8000e2a <jsmn_parse_primitive+0x17e>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 8000df2:	6a3a      	ldr	r2, [r7, #32]
 8000df4:	6839      	ldr	r1, [r7, #0]
 8000df6:	68f8      	ldr	r0, [r7, #12]
 8000df8:	f7ff ff16 	bl	8000c28 <jsmn_alloc_token>
 8000dfc:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d105      	bne.n	8000e10 <jsmn_parse_primitive+0x164>
    parser->pos = start;
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	e00c      	b.n	8000e2a <jsmn_parse_primitive+0x17e>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	2108      	movs	r1, #8
 8000e18:	6938      	ldr	r0, [r7, #16]
 8000e1a:	f7ff ff2d 	bl	8000c78 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	1e5a      	subs	r2, r3, #1
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	601a      	str	r2, [r3, #0]
  return 0;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop

08000e34 <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
 8000e40:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	61bb      	str	r3, [r7, #24]
  
  /* Skip starting quote */
  parser->pos++;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	1c5a      	adds	r2, r3, #1
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	601a      	str	r2, [r3, #0]
  
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000e52:	e0e6      	b.n	8001022 <jsmn_parse_string+0x1ee>
    char c = js[parser->pos];
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	68ba      	ldr	r2, [r7, #8]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 8000e60:	7dfb      	ldrb	r3, [r7, #23]
 8000e62:	2b22      	cmp	r3, #34	; 0x22
 8000e64:	d11d      	bne.n	8000ea2 <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d101      	bne.n	8000e70 <jsmn_parse_string+0x3c>
        return 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	e0ea      	b.n	8001046 <jsmn_parse_string+0x212>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8000e70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e72:	6839      	ldr	r1, [r7, #0]
 8000e74:	68f8      	ldr	r0, [r7, #12]
 8000e76:	f7ff fed7 	bl	8000c28 <jsmn_alloc_token>
 8000e7a:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d105      	bne.n	8000e8e <jsmn_parse_string+0x5a>
        parser->pos = start;
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 8000e88:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8c:	e0db      	b.n	8001046 <jsmn_parse_string+0x212>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	1c5a      	adds	r2, r3, #1
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2104      	movs	r1, #4
 8000e98:	6938      	ldr	r0, [r7, #16]
 8000e9a:	f7ff feed 	bl	8000c78 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e0d1      	b.n	8001046 <jsmn_parse_string+0x212>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 8000ea2:	7dfb      	ldrb	r3, [r7, #23]
 8000ea4:	2b5c      	cmp	r3, #92	; 0x5c
 8000ea6:	f040 80b4 	bne.w	8001012 <jsmn_parse_string+0x1de>
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	f240 80ad 	bls.w	8001012 <jsmn_parse_string+0x1de>
      int i;
      parser->pos++;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	1c5a      	adds	r2, r3, #1
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	4413      	add	r3, r2
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b75      	cmp	r3, #117	; 0x75
 8000ece:	f300 809a 	bgt.w	8001006 <jsmn_parse_string+0x1d2>
 8000ed2:	2b5c      	cmp	r3, #92	; 0x5c
 8000ed4:	da06      	bge.n	8000ee4 <jsmn_parse_string+0xb0>
 8000ed6:	2b22      	cmp	r3, #34	; 0x22
 8000ed8:	f000 809d 	beq.w	8001016 <jsmn_parse_string+0x1e2>
 8000edc:	2b2f      	cmp	r3, #47	; 0x2f
 8000ede:	f000 809a 	beq.w	8001016 <jsmn_parse_string+0x1e2>
 8000ee2:	e090      	b.n	8001006 <jsmn_parse_string+0x1d2>
 8000ee4:	3b5c      	subs	r3, #92	; 0x5c
 8000ee6:	2b19      	cmp	r3, #25
 8000ee8:	f200 808d 	bhi.w	8001006 <jsmn_parse_string+0x1d2>
 8000eec:	a201      	add	r2, pc, #4	; (adr r2, 8000ef4 <jsmn_parse_string+0xc0>)
 8000eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef2:	bf00      	nop
 8000ef4:	08001017 	.word	0x08001017
 8000ef8:	08001007 	.word	0x08001007
 8000efc:	08001007 	.word	0x08001007
 8000f00:	08001007 	.word	0x08001007
 8000f04:	08001007 	.word	0x08001007
 8000f08:	08001007 	.word	0x08001007
 8000f0c:	08001017 	.word	0x08001017
 8000f10:	08001007 	.word	0x08001007
 8000f14:	08001007 	.word	0x08001007
 8000f18:	08001007 	.word	0x08001007
 8000f1c:	08001017 	.word	0x08001017
 8000f20:	08001007 	.word	0x08001007
 8000f24:	08001007 	.word	0x08001007
 8000f28:	08001007 	.word	0x08001007
 8000f2c:	08001007 	.word	0x08001007
 8000f30:	08001007 	.word	0x08001007
 8000f34:	08001007 	.word	0x08001007
 8000f38:	08001007 	.word	0x08001007
 8000f3c:	08001017 	.word	0x08001017
 8000f40:	08001007 	.word	0x08001007
 8000f44:	08001007 	.word	0x08001007
 8000f48:	08001007 	.word	0x08001007
 8000f4c:	08001017 	.word	0x08001017
 8000f50:	08001007 	.word	0x08001007
 8000f54:	08001017 	.word	0x08001017
 8000f58:	08000f5d 	.word	0x08000f5d
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	1c5a      	adds	r2, r3, #1
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
 8000f6a:	e037      	b.n	8000fdc <jsmn_parse_string+0x1a8>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	4413      	add	r3, r2
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b2f      	cmp	r3, #47	; 0x2f
 8000f78:	d906      	bls.n	8000f88 <jsmn_parse_string+0x154>
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	4413      	add	r3, r2
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b39      	cmp	r3, #57	; 0x39
 8000f86:	d921      	bls.n	8000fcc <jsmn_parse_string+0x198>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	4413      	add	r3, r2
 8000f90:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8000f92:	2b40      	cmp	r3, #64	; 0x40
 8000f94:	d906      	bls.n	8000fa4 <jsmn_parse_string+0x170>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b46      	cmp	r3, #70	; 0x46
 8000fa2:	d913      	bls.n	8000fcc <jsmn_parse_string+0x198>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	68ba      	ldr	r2, [r7, #8]
 8000faa:	4413      	add	r3, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8000fae:	2b60      	cmp	r3, #96	; 0x60
 8000fb0:	d906      	bls.n	8000fc0 <jsmn_parse_string+0x18c>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	4413      	add	r3, r2
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b66      	cmp	r3, #102	; 0x66
 8000fbe:	d905      	bls.n	8000fcc <jsmn_parse_string+0x198>
            parser->pos = start;
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 8000fc6:	f06f 0301 	mvn.w	r3, #1
 8000fca:	e03c      	b.n	8001046 <jsmn_parse_string+0x212>
          }
          parser->pos++;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	1c5a      	adds	r2, r3, #1
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	601a      	str	r2, [r3, #0]
             i++) {
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	2b03      	cmp	r3, #3
 8000fe0:	dc0b      	bgt.n	8000ffa <jsmn_parse_string+0x1c6>
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d906      	bls.n	8000ffa <jsmn_parse_string+0x1c6>
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	68ba      	ldr	r2, [r7, #8]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1b8      	bne.n	8000f6c <jsmn_parse_string+0x138>
        }
        parser->pos--;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	1e5a      	subs	r2, r3, #1
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	601a      	str	r2, [r3, #0]
        break;
 8001004:	e008      	b.n	8001018 <jsmn_parse_string+0x1e4>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 800100c:	f06f 0301 	mvn.w	r3, #1
 8001010:	e019      	b.n	8001046 <jsmn_parse_string+0x212>
      }
    }
 8001012:	bf00      	nop
 8001014:	e000      	b.n	8001018 <jsmn_parse_string+0x1e4>
        break;
 8001016:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	1c5a      	adds	r2, r3, #1
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	429a      	cmp	r2, r3
 800102a:	d907      	bls.n	800103c <jsmn_parse_string+0x208>
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	68ba      	ldr	r2, [r7, #8]
 8001032:	4413      	add	r3, r2
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	f47f af0c 	bne.w	8000e54 <jsmn_parse_string+0x20>
  }
  parser->pos = start;
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 8001042:	f06f 0302 	mvn.w	r3, #2
}
 8001046:	4618      	mov	r0, r3
 8001048:	3720      	adds	r7, #32
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop

08001050 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b08c      	sub	sp, #48	; 0x30
 8001054:	af02      	add	r7, sp, #8
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001064:	e1bf      	b.n	80013e6 <jsmn_parse+0x396>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	4413      	add	r3, r2
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 8001072:	7ffb      	ldrb	r3, [r7, #31]
 8001074:	2b7d      	cmp	r3, #125	; 0x7d
 8001076:	f000 80b9 	beq.w	80011ec <jsmn_parse+0x19c>
 800107a:	2b7d      	cmp	r3, #125	; 0x7d
 800107c:	f300 8181 	bgt.w	8001382 <jsmn_parse+0x332>
 8001080:	2b7b      	cmp	r3, #123	; 0x7b
 8001082:	d07c      	beq.n	800117e <jsmn_parse+0x12e>
 8001084:	2b7b      	cmp	r3, #123	; 0x7b
 8001086:	f300 817c 	bgt.w	8001382 <jsmn_parse+0x332>
 800108a:	2b5d      	cmp	r3, #93	; 0x5d
 800108c:	f000 80ae 	beq.w	80011ec <jsmn_parse+0x19c>
 8001090:	2b5d      	cmp	r3, #93	; 0x5d
 8001092:	f300 8176 	bgt.w	8001382 <jsmn_parse+0x332>
 8001096:	2b3a      	cmp	r3, #58	; 0x3a
 8001098:	dc6e      	bgt.n	8001178 <jsmn_parse+0x128>
 800109a:	2b09      	cmp	r3, #9
 800109c:	f2c0 8171 	blt.w	8001382 <jsmn_parse+0x332>
 80010a0:	3b09      	subs	r3, #9
 80010a2:	2b31      	cmp	r3, #49	; 0x31
 80010a4:	f200 816d 	bhi.w	8001382 <jsmn_parse+0x332>
 80010a8:	a201      	add	r2, pc, #4	; (adr r2, 80010b0 <jsmn_parse+0x60>)
 80010aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ae:	bf00      	nop
 80010b0:	080013c7 	.word	0x080013c7
 80010b4:	080013c7 	.word	0x080013c7
 80010b8:	08001383 	.word	0x08001383
 80010bc:	08001383 	.word	0x08001383
 80010c0:	080013c7 	.word	0x080013c7
 80010c4:	08001383 	.word	0x08001383
 80010c8:	08001383 	.word	0x08001383
 80010cc:	08001383 	.word	0x08001383
 80010d0:	08001383 	.word	0x08001383
 80010d4:	08001383 	.word	0x08001383
 80010d8:	08001383 	.word	0x08001383
 80010dc:	08001383 	.word	0x08001383
 80010e0:	08001383 	.word	0x08001383
 80010e4:	08001383 	.word	0x08001383
 80010e8:	08001383 	.word	0x08001383
 80010ec:	08001383 	.word	0x08001383
 80010f0:	08001383 	.word	0x08001383
 80010f4:	08001383 	.word	0x08001383
 80010f8:	08001383 	.word	0x08001383
 80010fc:	08001383 	.word	0x08001383
 8001100:	08001383 	.word	0x08001383
 8001104:	08001383 	.word	0x08001383
 8001108:	08001383 	.word	0x08001383
 800110c:	080013c7 	.word	0x080013c7
 8001110:	08001383 	.word	0x08001383
 8001114:	080012a1 	.word	0x080012a1
 8001118:	08001383 	.word	0x08001383
 800111c:	08001383 	.word	0x08001383
 8001120:	08001383 	.word	0x08001383
 8001124:	08001383 	.word	0x08001383
 8001128:	08001383 	.word	0x08001383
 800112c:	08001383 	.word	0x08001383
 8001130:	08001383 	.word	0x08001383
 8001134:	08001383 	.word	0x08001383
 8001138:	08001383 	.word	0x08001383
 800113c:	080012f5 	.word	0x080012f5
 8001140:	08001383 	.word	0x08001383
 8001144:	08001383 	.word	0x08001383
 8001148:	08001383 	.word	0x08001383
 800114c:	08001383 	.word	0x08001383
 8001150:	08001383 	.word	0x08001383
 8001154:	08001383 	.word	0x08001383
 8001158:	08001383 	.word	0x08001383
 800115c:	08001383 	.word	0x08001383
 8001160:	08001383 	.word	0x08001383
 8001164:	08001383 	.word	0x08001383
 8001168:	08001383 	.word	0x08001383
 800116c:	08001383 	.word	0x08001383
 8001170:	08001383 	.word	0x08001383
 8001174:	080012e7 	.word	0x080012e7
 8001178:	2b5b      	cmp	r3, #91	; 0x5b
 800117a:	f040 8102 	bne.w	8001382 <jsmn_parse+0x332>
    case '{':
    case '[':
      count++;
 800117e:	6a3b      	ldr	r3, [r7, #32]
 8001180:	3301      	adds	r3, #1
 8001182:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 811f 	beq.w	80013ca <jsmn_parse+0x37a>
        break;
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 800118c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800118e:	6839      	ldr	r1, [r7, #0]
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f7ff fd49 	bl	8000c28 <jsmn_alloc_token>
 8001196:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d102      	bne.n	80011a4 <jsmn_parse+0x154>
        return JSMN_ERROR_NOMEM;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	e14f      	b.n	8001444 <jsmn_parse+0x3f4>
      }
      if (parser->toksuper != -1) {
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ac:	d00a      	beq.n	80011c4 <jsmn_parse+0x174>
        jsmntok_t *t = &tokens[parser->toksuper];
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	011b      	lsls	r3, r3, #4
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	617b      	str	r3, [r7, #20]
        /* In strict mode an object or array can't become a key */
        if (t->type == JSMN_OBJECT) {
          return JSMN_ERROR_INVAL;
        }
#endif
        t->size++;
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	1c5a      	adds	r2, r3, #1
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
        token->parent = parser->toksuper;
#endif
      }
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 80011c4:	7ffb      	ldrb	r3, [r7, #31]
 80011c6:	2b7b      	cmp	r3, #123	; 0x7b
 80011c8:	d101      	bne.n	80011ce <jsmn_parse+0x17e>
 80011ca:	2201      	movs	r2, #1
 80011cc:	e000      	b.n	80011d0 <jsmn_parse+0x180>
 80011ce:	2202      	movs	r2, #2
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	461a      	mov	r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	609a      	str	r2, [r3, #8]
      break;
 80011ea:	e0f7      	b.n	80013dc <jsmn_parse+0x38c>
    case '}':
    case ']':
      if (tokens == NULL) {
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 80ed 	beq.w	80013ce <jsmn_parse+0x37e>
        break;
      }
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 80011f4:	7ffb      	ldrb	r3, [r7, #31]
 80011f6:	2b7d      	cmp	r3, #125	; 0x7d
 80011f8:	d101      	bne.n	80011fe <jsmn_parse+0x1ae>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <jsmn_parse+0x1b0>
 80011fe:	2302      	movs	r3, #2
 8001200:	77bb      	strb	r3, [r7, #30]
          break;
        }
        token = &tokens[token->parent];
      }
#else
      for (i = parser->toknext - 1; i >= 0; i--) {
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
 800120a:	e024      	b.n	8001256 <jsmn_parse+0x206>
        token = &tokens[i];
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	011b      	lsls	r3, r3, #4
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	4413      	add	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121e:	d017      	beq.n	8001250 <jsmn_parse+0x200>
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001228:	d112      	bne.n	8001250 <jsmn_parse+0x200>
          if (token->type != type) {
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	7fba      	ldrb	r2, [r7, #30]
 8001230:	429a      	cmp	r2, r3
 8001232:	d002      	beq.n	800123a <jsmn_parse+0x1ea>
            return JSMN_ERROR_INVAL;
 8001234:	f06f 0301 	mvn.w	r3, #1
 8001238:	e104      	b.n	8001444 <jsmn_parse+0x3f4>
          }
          parser->toksuper = -1;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f04f 32ff 	mov.w	r2, #4294967295
 8001240:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	461a      	mov	r2, r3
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	609a      	str	r2, [r3, #8]
          break;
 800124e:	e005      	b.n	800125c <jsmn_parse+0x20c>
      for (i = parser->toknext - 1; i >= 0; i--) {
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	3b01      	subs	r3, #1
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	2b00      	cmp	r3, #0
 800125a:	dad7      	bge.n	800120c <jsmn_parse+0x1bc>
        }
      }
      /* Error if unmatched closing bracket */
      if (i == -1) {
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001262:	d119      	bne.n	8001298 <jsmn_parse+0x248>
        return JSMN_ERROR_INVAL;
 8001264:	f06f 0301 	mvn.w	r3, #1
 8001268:	e0ec      	b.n	8001444 <jsmn_parse+0x3f4>
      }
      for (; i >= 0; i--) {
        token = &tokens[i];
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	011b      	lsls	r3, r3, #4
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	4413      	add	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800127c:	d009      	beq.n	8001292 <jsmn_parse+0x242>
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001286:	d104      	bne.n	8001292 <jsmn_parse+0x242>
          parser->toksuper = i;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800128c:	609a      	str	r2, [r3, #8]
          break;
 800128e:	bf00      	nop
        }
      }
#endif
      break;
 8001290:	e0a4      	b.n	80013dc <jsmn_parse+0x38c>
      for (; i >= 0; i--) {
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	3b01      	subs	r3, #1
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	2b00      	cmp	r3, #0
 800129c:	dae5      	bge.n	800126a <jsmn_parse+0x21a>
      break;
 800129e:	e09d      	b.n	80013dc <jsmn_parse+0x38c>
    case '\"':
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 80012a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	68b9      	ldr	r1, [r7, #8]
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f7ff fdc2 	bl	8000e34 <jsmn_parse_string>
 80012b0:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	da01      	bge.n	80012bc <jsmn_parse+0x26c>
        return r;
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	e0c3      	b.n	8001444 <jsmn_parse+0x3f4>
      }
      count++;
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	3301      	adds	r3, #1
 80012c0:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ca:	f000 8082 	beq.w	80013d2 <jsmn_parse+0x382>
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d07e      	beq.n	80013d2 <jsmn_parse+0x382>
        tokens[parser->toksuper].size++;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	4413      	add	r3, r2
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	3201      	adds	r2, #1
 80012e2:	60da      	str	r2, [r3, #12]
      }
      break;
 80012e4:	e075      	b.n	80013d2 <jsmn_parse+0x382>
    case '\r':
    case '\n':
    case ' ':
      break;
    case ':':
      parser->toksuper = parser->toknext - 1;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	461a      	mov	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	609a      	str	r2, [r3, #8]
      break;
 80012f2:	e073      	b.n	80013dc <jsmn_parse+0x38c>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d06d      	beq.n	80013d6 <jsmn_parse+0x386>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001302:	d068      	beq.n	80013d6 <jsmn_parse+0x386>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	4413      	add	r3, r2
 800130e:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 8001310:	2b02      	cmp	r3, #2
 8001312:	d060      	beq.n	80013d6 <jsmn_parse+0x386>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	4413      	add	r3, r2
 800131e:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8001320:	2b01      	cmp	r3, #1
 8001322:	d058      	beq.n	80013d6 <jsmn_parse+0x386>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	3b01      	subs	r3, #1
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
 800132c:	e025      	b.n	800137a <jsmn_parse+0x32a>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	011b      	lsls	r3, r3, #4
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d006      	beq.n	800134a <jsmn_parse+0x2fa>
 800133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133e:	011b      	lsls	r3, r3, #4
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	4413      	add	r3, r2
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d114      	bne.n	8001374 <jsmn_parse+0x324>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 800134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	4413      	add	r3, r2
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001358:	d00c      	beq.n	8001374 <jsmn_parse+0x324>
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	011b      	lsls	r3, r3, #4
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	4413      	add	r3, r2
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001368:	d104      	bne.n	8001374 <jsmn_parse+0x324>
              parser->toksuper = i;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800136e:	609a      	str	r2, [r3, #8]
              break;
 8001370:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 8001372:	e030      	b.n	80013d6 <jsmn_parse+0x386>
        for (i = parser->toknext - 1; i >= 0; i--) {
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	3b01      	subs	r3, #1
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	2b00      	cmp	r3, #0
 800137e:	dad6      	bge.n	800132e <jsmn_parse+0x2de>
      break;
 8001380:	e029      	b.n	80013d6 <jsmn_parse+0x386>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 8001382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	68b9      	ldr	r1, [r7, #8]
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f7ff fc8d 	bl	8000cac <jsmn_parse_primitive>
 8001392:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	2b00      	cmp	r3, #0
 8001398:	da01      	bge.n	800139e <jsmn_parse+0x34e>
        return r;
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	e052      	b.n	8001444 <jsmn_parse+0x3f4>
      }
      count++;
 800139e:	6a3b      	ldr	r3, [r7, #32]
 80013a0:	3301      	adds	r3, #1
 80013a2:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ac:	d015      	beq.n	80013da <jsmn_parse+0x38a>
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d012      	beq.n	80013da <jsmn_parse+0x38a>
        tokens[parser->toksuper].size++;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	011b      	lsls	r3, r3, #4
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	4413      	add	r3, r2
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	3201      	adds	r2, #1
 80013c2:	60da      	str	r2, [r3, #12]
      }
      break;
 80013c4:	e009      	b.n	80013da <jsmn_parse+0x38a>
      break;
 80013c6:	bf00      	nop
 80013c8:	e008      	b.n	80013dc <jsmn_parse+0x38c>
        break;
 80013ca:	bf00      	nop
 80013cc:	e006      	b.n	80013dc <jsmn_parse+0x38c>
        break;
 80013ce:	bf00      	nop
 80013d0:	e004      	b.n	80013dc <jsmn_parse+0x38c>
      break;
 80013d2:	bf00      	nop
 80013d4:	e002      	b.n	80013dc <jsmn_parse+0x38c>
      break;
 80013d6:	bf00      	nop
 80013d8:	e000      	b.n	80013dc <jsmn_parse+0x38c>
      break;
 80013da:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	1c5a      	adds	r2, r3, #1
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d907      	bls.n	8001400 <jsmn_parse+0x3b0>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68ba      	ldr	r2, [r7, #8]
 80013f6:	4413      	add	r3, r2
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f47f ae33 	bne.w	8001066 <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d01d      	beq.n	8001442 <jsmn_parse+0x3f2>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
 800140e:	e015      	b.n	800143c <jsmn_parse+0x3ec>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	4413      	add	r3, r2
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800141e:	d00a      	beq.n	8001436 <jsmn_parse+0x3e6>
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	011b      	lsls	r3, r3, #4
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	4413      	add	r3, r2
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800142e:	d102      	bne.n	8001436 <jsmn_parse+0x3e6>
        return JSMN_ERROR_PART;
 8001430:	f06f 0302 	mvn.w	r3, #2
 8001434:	e006      	b.n	8001444 <jsmn_parse+0x3f4>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	3b01      	subs	r3, #1
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
 800143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143e:	2b00      	cmp	r3, #0
 8001440:	dae6      	bge.n	8001410 <jsmn_parse+0x3c0>
      }
    }
  }

  return count;
 8001442:	6a3b      	ldr	r3, [r7, #32]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3728      	adds	r7, #40	; 0x28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <jsmn_init>:

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser) {
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f04f 32ff 	mov.w	r2, #4294967295
 8001466:	609a      	str	r2, [r3, #8]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <tud_cdc_available>:
{
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  return tud_cdc_n_available(0);
 8001478:	2000      	movs	r0, #0
 800147a:	f002 fbb1 	bl	8003be0 <tud_cdc_n_available>
 800147e:	4603      	mov	r3, r0
}
 8001480:	4618      	mov	r0, r3
 8001482:	bd80      	pop	{r7, pc}

08001484 <tud_cdc_read>:
{
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_read(0, buffer, bufsize);
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	2000      	movs	r0, #0
 8001494:	f002 fbbc 	bl	8003c10 <tud_cdc_n_read>
 8001498:	4603      	mov	r3, r0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <tud_cdc_write>:
{
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_write(0, buffer, bufsize);
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	2000      	movs	r0, #0
 80014b2:	f002 fbd1 	bl	8003c58 <tud_cdc_n_write>
 80014b6:	4603      	mov	r3, r0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <tud_cdc_write_flush>:
{
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
 80014c4:	2000      	movs	r0, #0
 80014c6:	f002 fbf3 	bl	8003cb0 <tud_cdc_n_write_flush>
 80014ca:	4603      	mov	r3, r0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <cdc_task>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void cdc_task(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b092      	sub	sp, #72	; 0x48
 80014d4:	af00      	add	r7, sp, #0
     // connected and there are data available
     if ( tud_cdc_available() )
 80014d6:	f7ff ffcd 	bl	8001474 <tud_cdc_available>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d029      	beq.n	8001534 <cdc_task+0x64>
     {
       // read datas
       char buf[64];
       uint32_t count = tud_cdc_read(buf, sizeof(buf));
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	2140      	movs	r1, #64	; 0x40
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ffcd 	bl	8001484 <tud_cdc_read>
 80014ea:	6478      	str	r0, [r7, #68]	; 0x44
       (void) count;

 	  memcpy(&RxBufferFromUSB[Head], buf, count);
 80014ec:	4b13      	ldr	r3, [pc, #76]	; (800153c <cdc_task+0x6c>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <cdc_task+0x70>)
 80014f4:	4413      	add	r3, r2
 80014f6:	1d39      	adds	r1, r7, #4
 80014f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80014fa:	4618      	mov	r0, r3
 80014fc:	f00e f8fe 	bl	800f6fc <memcpy>
 	  Head += 64;
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <cdc_task+0x6c>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	3340      	adds	r3, #64	; 0x40
 8001506:	b29a      	uxth	r2, r3
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <cdc_task+0x6c>)
 800150a:	801a      	strh	r2, [r3, #0]

 	  if(strstr(RxBufferFromUSB, "connection=0") != NULL){
 800150c:	490d      	ldr	r1, [pc, #52]	; (8001544 <cdc_task+0x74>)
 800150e:	480c      	ldr	r0, [pc, #48]	; (8001540 <cdc_task+0x70>)
 8001510:	f00e f9cf 	bl	800f8b2 <strstr>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d002      	beq.n	8001520 <cdc_task+0x50>

 		  RxFlagUSB = 1;
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <cdc_task+0x78>)
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
 	  }

 	  if(strstr(RxBufferFromUSB, "}") != NULL){
 8001520:	217d      	movs	r1, #125	; 0x7d
 8001522:	4807      	ldr	r0, [pc, #28]	; (8001540 <cdc_task+0x70>)
 8001524:	f00e f9a4 	bl	800f870 <strchr>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d002      	beq.n	8001534 <cdc_task+0x64>

 		  RxFlagUSB = 1;
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <cdc_task+0x78>)
 8001530:	2201      	movs	r2, #1
 8001532:	701a      	strb	r2, [r3, #0]
 	  }

       //tud_cdc_write(buf, count);
       //tud_cdc_write_flush();
     }
}
 8001534:	bf00      	nop
 8001536:	3748      	adds	r7, #72	; 0x48
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20004fd4 	.word	0x20004fd4
 8001540:	20004dd4 	.word	0x20004dd4
 8001544:	08011504 	.word	0x08011504
 8001548:	2000665c 	.word	0x2000665c

0800154c <complexABS>:

float complexABS(float real, float compl) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	ed87 0a01 	vstr	s0, [r7, #4]
 8001556:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real*real+compl*compl);
 800155a:	edd7 7a01 	vldr	s15, [r7, #4]
 800155e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001562:	edd7 7a00 	vldr	s15, [r7]
 8001566:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800156a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800156e:	eeb0 0a67 	vmov.f32	s0, s15
 8001572:	f00f faa9 	bl	8010ac8 <sqrtf>
 8001576:	eef0 7a40 	vmov.f32	s15, s0
}
 800157a:	eeb0 0a67 	vmov.f32	s0, s15
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <jsoneq>:

static int jsoneq(const char *json, jsmntok_t *tok, const char *s) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b04      	cmp	r3, #4
 8001596:	d11e      	bne.n	80015d6 <jsoneq+0x52>
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7fe fe81 	bl	80002a0 <strlen>
 800159e:	4603      	mov	r3, r0
 80015a0:	4619      	mov	r1, r3
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	4299      	cmp	r1, r3
 80015ae:	d112      	bne.n	80015d6 <jsoneq+0x52>
      strncmp(json + tok->start, s, tok->end - tok->start) == 0) {
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	461a      	mov	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	1898      	adds	r0, r3, r2
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	461a      	mov	r2, r3
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	f00e f95f 	bl	800f88a <strncmp>
 80015cc:	4603      	mov	r3, r0
  if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <jsoneq+0x52>
    return 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e001      	b.n	80015da <jsoneq+0x56>
  }
  return -1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b091      	sub	sp, #68	; 0x44
 80015e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ea:	f007 f947 	bl	800887c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ee:	f001 fbf1 	bl	8002dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f2:	f7ff f9bb 	bl	800096c <MX_GPIO_Init>
  MX_DMA_Init();
 80015f6:	f7ff f999 	bl	800092c <MX_DMA_Init>
  MX_I2S2_Init();
 80015fa:	f7ff fa2d 	bl	8000a58 <MX_I2S2_Init>
  MX_CRC_Init();
 80015fe:	f7ff f95f 	bl	80008c0 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8001602:	f00b f92d 	bl	800c860 <MX_PDM2PCM_Init>
  MX_TIM2_Init();
 8001606:	f001 ff23 	bl	8003450 <MX_TIM2_Init>
  MX_TIM3_Init();
 800160a:	f001 ffa1 	bl	8003550 <MX_TIM3_Init>
  MX_TIM4_Init();
 800160e:	f002 f81f 	bl	8003650 <MX_TIM4_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001612:	f002 f9f7 	bl	8003a04 <MX_USB_OTG_FS_PCD_Init>
  MX_IWDG_Init();
 8001616:	f7ff faed 	bl	8000bf4 <MX_IWDG_Init>
   *  PIN: BOOT1 PODLACZYC DO GND (PIN BOOT1 sprawdzamy w dokumentacji danego stm32 ktory to pin, w naszym przypadku jest to PIN: PB2)
   *  PO PODLACZENIU ZRESETOWAC STM32
   */


  if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET)
 800161a:	4baf      	ldr	r3, [pc, #700]	; (80018d8 <main+0x2f4>)
 800161c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800161e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d009      	beq.n	800163a <main+0x56>
  {
	 // SendUart(&huart2, "!!!!!IWDG RESET!!!!!\n\r");
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001626:	2108      	movs	r1, #8
 8001628:	48ac      	ldr	r0, [pc, #688]	; (80018dc <main+0x2f8>)
 800162a:	f008 fb04 	bl	8009c36 <HAL_GPIO_TogglePin>
	  __HAL_RCC_CLEAR_RESET_FLAGS();
 800162e:	4baa      	ldr	r3, [pc, #680]	; (80018d8 <main+0x2f4>)
 8001630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001632:	4aa9      	ldr	r2, [pc, #676]	; (80018d8 <main+0x2f4>)
 8001634:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001638:	6753      	str	r3, [r2, #116]	; 0x74
  }


  HAL_I2S_Receive_DMA(&hi2s2, &pdmRxBuf[0],PDM_SAMPLES);
 800163a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800163e:	49a8      	ldr	r1, [pc, #672]	; (80018e0 <main+0x2fc>)
 8001640:	48a8      	ldr	r0, [pc, #672]	; (80018e4 <main+0x300>)
 8001642:	f008 fc53 	bl	8009eec <HAL_I2S_Receive_DMA>
  arm_rfft_fast_init_f32(&FFTHandler, FFT_SAMPLES);
 8001646:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800164a:	48a7      	ldr	r0, [pc, #668]	; (80018e8 <main+0x304>)
 800164c:	f00d f858 	bl	800e700 <arm_rfft_fast_init_f32>

  tusb_init();
 8001650:	f006 ffc6 	bl	80085e0 <tusb_init>
  tud_init(BOARD_TUD_RHPORT);
 8001654:	2000      	movs	r0, #0
 8001656:	f003 ffed 	bl	8005634 <tud_init>

  InitParams();
 800165a:	f001 fd97 	bl	800318c <InitParams>

  jsmn_init(&p);
 800165e:	48a3      	ldr	r0, [pc, #652]	; (80018ec <main+0x308>)
 8001660:	f7ff fef4 	bl	800144c <jsmn_init>

  Flash_Read_Data(0x08060000, &CheckDataFlash, 1);
 8001664:	2201      	movs	r2, #1
 8001666:	49a2      	ldr	r1, [pc, #648]	; (80018f0 <main+0x30c>)
 8001668:	48a2      	ldr	r0, [pc, #648]	; (80018f4 <main+0x310>)
 800166a:	f7ff f8cb 	bl	8000804 <Flash_Read_Data>
  if(CheckDataFlash != 0xFFFFFFFF){
 800166e:	4ba0      	ldr	r3, [pc, #640]	; (80018f0 <main+0x30c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001676:	d00b      	beq.n	8001690 <main+0xac>
	  Flash_Read_Data(0x08060000 , (uint32_t *)ReadArrayFlash, 128);
 8001678:	2280      	movs	r2, #128	; 0x80
 800167a:	499f      	ldr	r1, [pc, #636]	; (80018f8 <main+0x314>)
 800167c:	489d      	ldr	r0, [pc, #628]	; (80018f4 <main+0x310>)
 800167e:	f7ff f8c1 	bl	8000804 <Flash_Read_Data>
	  Convert_To_Str((uint32_t *)ReadArrayFlash, string);
 8001682:	499e      	ldr	r1, [pc, #632]	; (80018fc <main+0x318>)
 8001684:	489c      	ldr	r0, [pc, #624]	; (80018f8 <main+0x314>)
 8001686:	f7ff f8db 	bl	8000840 <Convert_To_Str>
	  FlashFlag = 1;
 800168a:	4b9d      	ldr	r3, [pc, #628]	; (8001900 <main+0x31c>)
 800168c:	2201      	movs	r2, #1
 800168e:	701a      	strb	r2, [r3, #0]

  }

  HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, GPIO_PIN_SET);
 8001690:	2201      	movs	r2, #1
 8001692:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001696:	4891      	ldr	r0, [pc, #580]	; (80018dc <main+0x2f8>)
 8001698:	f008 fab4 	bl	8009c04 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800169c:	2100      	movs	r1, #0
 800169e:	4899      	ldr	r0, [pc, #612]	; (8001904 <main+0x320>)
 80016a0:	f00a f868 	bl	800b774 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80016a4:	2104      	movs	r1, #4
 80016a6:	4897      	ldr	r0, [pc, #604]	; (8001904 <main+0x320>)
 80016a8:	f00a f864 	bl	800b774 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80016ac:	2100      	movs	r1, #0
 80016ae:	4896      	ldr	r0, [pc, #600]	; (8001908 <main+0x324>)
 80016b0:	f00a f860 	bl	800b774 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80016b4:	2104      	movs	r1, #4
 80016b6:	4894      	ldr	r0, [pc, #592]	; (8001908 <main+0x324>)
 80016b8:	f00a f85c 	bl	800b774 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80016bc:	2100      	movs	r1, #0
 80016be:	4893      	ldr	r0, [pc, #588]	; (800190c <main+0x328>)
 80016c0:	f00a f858 	bl	800b774 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80016c4:	2104      	movs	r1, #4
 80016c6:	4891      	ldr	r0, [pc, #580]	; (800190c <main+0x328>)
 80016c8:	f00a f854 	bl	800b774 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 50);
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 50);
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 50);
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 50);
*/
  PWMTimer = HAL_GetTick();
 80016cc:	f007 f93c 	bl	8008948 <HAL_GetTick>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4a8f      	ldr	r2, [pc, #572]	; (8001910 <main+0x32c>)
 80016d4:	6013      	str	r3, [r2, #0]
  ConfigTimer = HAL_GetTick();
 80016d6:	f007 f937 	bl	8008948 <HAL_GetTick>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a8d      	ldr	r2, [pc, #564]	; (8001914 <main+0x330>)
 80016de:	6013      	str	r3, [r2, #0]
  ButtonTimer = HAL_GetTick();
 80016e0:	f007 f932 	bl	8008948 <HAL_GetTick>
 80016e4:	4603      	mov	r3, r0
 80016e6:	4a8c      	ldr	r2, [pc, #560]	; (8001918 <main+0x334>)
 80016e8:	6013      	str	r3, [r2, #0]
  TimerB = HAL_GetTick();
 80016ea:	f007 f92d 	bl	8008948 <HAL_GetTick>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4a8a      	ldr	r2, [pc, #552]	; (800191c <main+0x338>)
 80016f2:	6013      	str	r3, [r2, #0]

  Timer = HAL_GetTick();
 80016f4:	f007 f928 	bl	8008948 <HAL_GetTick>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4a89      	ldr	r2, [pc, #548]	; (8001920 <main+0x33c>)
 80016fc:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_IWDG_Refresh(&hiwdg) != HAL_OK)
 80016fe:	4889      	ldr	r0, [pc, #548]	; (8001924 <main+0x340>)
 8001700:	f009 f8b2 	bl	800a868 <HAL_IWDG_Refresh>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <main+0x12a>
	  {
		  // PRESCALER NA 32 TO PO 4 SEK BEZ ODSWIEZANIA STM32 NASTAPI RESET!
		  /* Refresh Error */
		  Error_Handler();
 800170a:	f001 fd79 	bl	8003200 <Error_Handler>
	  }



	  if((HAL_GetTick() - Timer) > 500){
 800170e:	f007 f91b 	bl	8008948 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	4b82      	ldr	r3, [pc, #520]	; (8001920 <main+0x33c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800171e:	d908      	bls.n	8001732 <main+0x14e>
		  Timer = HAL_GetTick();
 8001720:	f007 f912 	bl	8008948 <HAL_GetTick>
 8001724:	4603      	mov	r3, r0
 8001726:	4a7e      	ldr	r2, [pc, #504]	; (8001920 <main+0x33c>)
 8001728:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800172a:	2120      	movs	r1, #32
 800172c:	486b      	ldr	r0, [pc, #428]	; (80018dc <main+0x2f8>)
 800172e:	f008 fa82 	bl	8009c36 <HAL_GPIO_TogglePin>

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void)
{
  tud_task_ext(UINT32_MAX, false);
 8001732:	2100      	movs	r1, #0
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	f004 f848 	bl	80057cc <tud_task_ext>
}
 800173c:	bf00      	nop
	  }


	  tud_task();
	  cdc_task();
 800173e:	f7ff fec7 	bl	80014d0 <cdc_task>
	  led_blinking_task();
 8001742:	f001 fc7b 	bl	800303c <led_blinking_task>

	  if((HAL_GetTick() - ButtonTimer) > 100){
 8001746:	f007 f8ff 	bl	8008948 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	4b72      	ldr	r3, [pc, #456]	; (8001918 <main+0x334>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b64      	cmp	r3, #100	; 0x64
 8001754:	d937      	bls.n	80017c6 <main+0x1e2>
		  ButtonTimer = HAL_GetTick();
 8001756:	f007 f8f7 	bl	8008948 <HAL_GetTick>
 800175a:	4603      	mov	r3, r0
 800175c:	4a6e      	ldr	r2, [pc, #440]	; (8001918 <main+0x334>)
 800175e:	6013      	str	r3, [r2, #0]

	  if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET){
 8001760:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001764:	4870      	ldr	r0, [pc, #448]	; (8001928 <main+0x344>)
 8001766:	f008 fa35 	bl	8009bd4 <HAL_GPIO_ReadPin>
 800176a:	4603      	mov	r3, r0
 800176c:	2b01      	cmp	r3, #1
 800176e:	d12a      	bne.n	80017c6 <main+0x1e2>

		  HAL_GPIO_WritePin(CONV_STD_GPIO_Port, CONV_STD_Pin, GPIO_PIN_SET);
 8001770:	2201      	movs	r2, #1
 8001772:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001776:	486c      	ldr	r0, [pc, #432]	; (8001928 <main+0x344>)
 8001778:	f008 fa44 	bl	8009c04 <HAL_GPIO_WritePin>
		  if(HAL_GetTick() - TimerB > 4000){
 800177c:	f007 f8e4 	bl	8008948 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	4b66      	ldr	r3, [pc, #408]	; (800191c <main+0x338>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800178c:	d91b      	bls.n	80017c6 <main+0x1e2>
			  TimerB = HAL_GetTick();
 800178e:	f007 f8db 	bl	8008948 <HAL_GetTick>
 8001792:	4603      	mov	r3, r0
 8001794:	4a61      	ldr	r2, [pc, #388]	; (800191c <main+0x338>)
 8001796:	6013      	str	r3, [r2, #0]

		  if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET){
 8001798:	f44f 7100 	mov.w	r1, #512	; 0x200
 800179c:	4862      	ldr	r0, [pc, #392]	; (8001928 <main+0x344>)
 800179e:	f008 fa19 	bl	8009bd4 <HAL_GPIO_ReadPin>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d10e      	bne.n	80017c6 <main+0x1e2>
			  HAL_GPIO_WritePin(CONV_STD_GPIO_Port, CONV_STD_Pin, GPIO_PIN_RESET);
 80017a8:	2200      	movs	r2, #0
 80017aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ae:	485e      	ldr	r0, [pc, #376]	; (8001928 <main+0x344>)
 80017b0:	f008 fa28 	bl	8009c04 <HAL_GPIO_WritePin>

			  while(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET);
 80017b4:	bf00      	nop
 80017b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ba:	485b      	ldr	r0, [pc, #364]	; (8001928 <main+0x344>)
 80017bc:	f008 fa0a 	bl	8009bd4 <HAL_GPIO_ReadPin>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d0f7      	beq.n	80017b6 <main+0x1d2>
		  }
	  }

	  }

	  if (RxFlagUSB == 1) {
 80017c6:	4b59      	ldr	r3, [pc, #356]	; (800192c <main+0x348>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	f040 83c3 	bne.w	8001f56 <main+0x972>
	  			RxFlagUSB = 0;
 80017d0:	4b56      	ldr	r3, [pc, #344]	; (800192c <main+0x348>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
	  			if (strstr(RxBufferFromUSB, "connection=0") != NULL) {
 80017d6:	4956      	ldr	r1, [pc, #344]	; (8001930 <main+0x34c>)
 80017d8:	4856      	ldr	r0, [pc, #344]	; (8001934 <main+0x350>)
 80017da:	f00e f86a 	bl	800f8b2 <strstr>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d017      	beq.n	8001814 <main+0x230>
	  				char connected[] = "connection=1";
 80017e4:	4b54      	ldr	r3, [pc, #336]	; (8001938 <main+0x354>)
 80017e6:	f107 0414 	add.w	r4, r7, #20
 80017ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017ec:	c407      	stmia	r4!, {r0, r1, r2}
 80017ee:	7023      	strb	r3, [r4, #0]
	  				tud_cdc_write(connected, sizeof(connected));
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	210d      	movs	r1, #13
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fe53 	bl	80014a2 <tud_cdc_write>
	  				tud_cdc_write_flush();
 80017fc:	f7ff fe60 	bl	80014c0 <tud_cdc_write_flush>
	  				Head = 0;
 8001800:	4b4e      	ldr	r3, [pc, #312]	; (800193c <main+0x358>)
 8001802:	2200      	movs	r2, #0
 8001804:	801a      	strh	r2, [r3, #0]
	  				memset(&RxBufferFromUSB[0], 0, sizeof(RxBufferFromUSB));
 8001806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800180a:	2100      	movs	r1, #0
 800180c:	4849      	ldr	r0, [pc, #292]	; (8001934 <main+0x350>)
 800180e:	f00d ff83 	bl	800f718 <memset>
 8001812:	e3a0      	b.n	8001f56 <main+0x972>
	  			} else {

	  				jsmn_init(&p);
 8001814:	4835      	ldr	r0, [pc, #212]	; (80018ec <main+0x308>)
 8001816:	f7ff fe19 	bl	800144c <jsmn_init>
	  				char *ptr;

	  				r = jsmn_parse(&p, RxBufferFromUSB, strlen(RxBufferFromUSB), t,
 800181a:	4846      	ldr	r0, [pc, #280]	; (8001934 <main+0x350>)
 800181c:	f7fe fd40 	bl	80002a0 <strlen>
 8001820:	4602      	mov	r2, r0
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	4b46      	ldr	r3, [pc, #280]	; (8001940 <main+0x35c>)
 8001828:	4942      	ldr	r1, [pc, #264]	; (8001934 <main+0x350>)
 800182a:	4830      	ldr	r0, [pc, #192]	; (80018ec <main+0x308>)
 800182c:	f7ff fc10 	bl	8001050 <jsmn_parse>
 8001830:	4603      	mov	r3, r0
 8001832:	4a44      	ldr	r2, [pc, #272]	; (8001944 <main+0x360>)
 8001834:	6013      	str	r3, [r2, #0]
	  						sizeof(t) / sizeof(t[0]));
	  				if (r < 0) {
 8001836:	4b43      	ldr	r3, [pc, #268]	; (8001944 <main+0x360>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	da0d      	bge.n	800185a <main+0x276>
	  					HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800183e:	2201      	movs	r2, #1
 8001840:	2110      	movs	r1, #16
 8001842:	4826      	ldr	r0, [pc, #152]	; (80018dc <main+0x2f8>)
 8001844:	f008 f9de 	bl	8009c04 <HAL_GPIO_WritePin>
	  					printf("Failed to parse JSON: %d\n", r);
 8001848:	4b3e      	ldr	r3, [pc, #248]	; (8001944 <main+0x360>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	483e      	ldr	r0, [pc, #248]	; (8001948 <main+0x364>)
 8001850:	f00d ff6a 	bl	800f728 <iprintf>
	  					return 1;
 8001854:	2301      	movs	r3, #1
 8001856:	f001 baaa 	b.w	8002dae <main+0x17ca>
	  				}
	  				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	2110      	movs	r1, #16
 800185e:	481f      	ldr	r0, [pc, #124]	; (80018dc <main+0x2f8>)
 8001860:	f008 f9d0 	bl	8009c04 <HAL_GPIO_WritePin>
	  				/* Assume the top-level element is an object */
	  				if (r < 1 || t[0].type != JSMN_OBJECT) {
 8001864:	4b37      	ldr	r3, [pc, #220]	; (8001944 <main+0x360>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	dd03      	ble.n	8001874 <main+0x290>
 800186c:	4b34      	ldr	r3, [pc, #208]	; (8001940 <main+0x35c>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d005      	beq.n	8001880 <main+0x29c>
	  					printf("Object expected\n");
 8001874:	4835      	ldr	r0, [pc, #212]	; (800194c <main+0x368>)
 8001876:	f00d fff3 	bl	800f860 <puts>
	  					return 1;
 800187a:	2301      	movs	r3, #1
 800187c:	f001 ba97 	b.w	8002dae <main+0x17ca>
	  				}

	  				/* Loop over all keys of the root object */
	  				for (i = 1; i < r; i++) {
 8001880:	4b33      	ldr	r3, [pc, #204]	; (8001950 <main+0x36c>)
 8001882:	2201      	movs	r2, #1
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	e33d      	b.n	8001f04 <main+0x920>
	  					if (jsoneq(RxBufferFromUSB, &t[i], "F1_min") == 0) {
 8001888:	4b31      	ldr	r3, [pc, #196]	; (8001950 <main+0x36c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	4a2c      	ldr	r2, [pc, #176]	; (8001940 <main+0x35c>)
 8001890:	4413      	add	r3, r2
 8001892:	4a30      	ldr	r2, [pc, #192]	; (8001954 <main+0x370>)
 8001894:	4619      	mov	r1, r3
 8001896:	4827      	ldr	r0, [pc, #156]	; (8001934 <main+0x350>)
 8001898:	f7ff fe74 	bl	8001584 <jsoneq>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d15c      	bne.n	800195c <main+0x378>
	  						Freq_Range[0] = strtol(RxBufferFromUSB + t[i + 1].start,
 80018a2:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <main+0x36c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	3301      	adds	r3, #1
 80018a8:	4a25      	ldr	r2, [pc, #148]	; (8001940 <main+0x35c>)
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	4413      	add	r3, r2
 80018ae:	3304      	adds	r3, #4
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <main+0x350>)
 80018b6:	4413      	add	r3, r2
 80018b8:	f107 0110 	add.w	r1, r7, #16
 80018bc:	2200      	movs	r2, #0
 80018be:	4618      	mov	r0, r3
 80018c0:	f00e f890 	bl	800f9e4 <strtol>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4a24      	ldr	r2, [pc, #144]	; (8001958 <main+0x374>)
 80018c8:	6013      	str	r3, [r2, #0]
	  								&ptr, 0);

	  						i++;
 80018ca:	4b21      	ldr	r3, [pc, #132]	; (8001950 <main+0x36c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	4a1f      	ldr	r2, [pc, #124]	; (8001950 <main+0x36c>)
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	e311      	b.n	8001efa <main+0x916>
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020000 	.word	0x40020000
 80018e0:	200005a8 	.word	0x200005a8
 80018e4:	200004f4 	.word	0x200004f4
 80018e8:	20004dbc 	.word	0x20004dbc
 80018ec:	20005de4 	.word	0x20005de4
 80018f0:	20006660 	.word	0x20006660
 80018f4:	08060000 	.word	0x08060000
 80018f8:	20004fd8 	.word	0x20004fd8
 80018fc:	200051d8 	.word	0x200051d8
 8001900:	20006664 	.word	0x20006664
 8001904:	20006678 	.word	0x20006678
 8001908:	200066c0 	.word	0x200066c0
 800190c:	20006708 	.word	0x20006708
 8001910:	20006650 	.word	0x20006650
 8001914:	2000664c 	.word	0x2000664c
 8001918:	20006654 	.word	0x20006654
 800191c:	20006658 	.word	0x20006658
 8001920:	20006668 	.word	0x20006668
 8001924:	2000059c 	.word	0x2000059c
 8001928:	40020400 	.word	0x40020400
 800192c:	2000665c 	.word	0x2000665c
 8001930:	08011504 	.word	0x08011504
 8001934:	20004dd4 	.word	0x20004dd4
 8001938:	080115b8 	.word	0x080115b8
 800193c:	20004fd4 	.word	0x20004fd4
 8001940:	20005df0 	.word	0x20005df0
 8001944:	20005de0 	.word	0x20005de0
 8001948:	08011514 	.word	0x08011514
 800194c:	08011530 	.word	0x08011530
 8001950:	20005ddc 	.word	0x20005ddc
 8001954:	08011540 	.word	0x08011540
 8001958:	200065f0 	.word	0x200065f0
	  					} else if (jsoneq(RxBufferFromUSB, &t[i], "F2_min") == 0) {
 800195c:	4b9b      	ldr	r3, [pc, #620]	; (8001bcc <main+0x5e8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	4a9b      	ldr	r2, [pc, #620]	; (8001bd0 <main+0x5ec>)
 8001964:	4413      	add	r3, r2
 8001966:	4a9b      	ldr	r2, [pc, #620]	; (8001bd4 <main+0x5f0>)
 8001968:	4619      	mov	r1, r3
 800196a:	489b      	ldr	r0, [pc, #620]	; (8001bd8 <main+0x5f4>)
 800196c:	f7ff fe0a 	bl	8001584 <jsoneq>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d119      	bne.n	80019aa <main+0x3c6>
	  						Freq_Range[2] = strtol(RxBufferFromUSB + t[i + 1].start,
 8001976:	4b95      	ldr	r3, [pc, #596]	; (8001bcc <main+0x5e8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	3301      	adds	r3, #1
 800197c:	4a94      	ldr	r2, [pc, #592]	; (8001bd0 <main+0x5ec>)
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	4413      	add	r3, r2
 8001982:	3304      	adds	r3, #4
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	4b93      	ldr	r3, [pc, #588]	; (8001bd8 <main+0x5f4>)
 800198a:	4413      	add	r3, r2
 800198c:	f107 0110 	add.w	r1, r7, #16
 8001990:	2200      	movs	r2, #0
 8001992:	4618      	mov	r0, r3
 8001994:	f00e f826 	bl	800f9e4 <strtol>
 8001998:	4603      	mov	r3, r0
 800199a:	4a90      	ldr	r2, [pc, #576]	; (8001bdc <main+0x5f8>)
 800199c:	6093      	str	r3, [r2, #8]
	  								&ptr, 0);

	  						i++;
 800199e:	4b8b      	ldr	r3, [pc, #556]	; (8001bcc <main+0x5e8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	3301      	adds	r3, #1
 80019a4:	4a89      	ldr	r2, [pc, #548]	; (8001bcc <main+0x5e8>)
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	e2a7      	b.n	8001efa <main+0x916>
	  					} else if (jsoneq(RxBufferFromUSB, &t[i], "F3_min") == 0) {
 80019aa:	4b88      	ldr	r3, [pc, #544]	; (8001bcc <main+0x5e8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	4a87      	ldr	r2, [pc, #540]	; (8001bd0 <main+0x5ec>)
 80019b2:	4413      	add	r3, r2
 80019b4:	4a8a      	ldr	r2, [pc, #552]	; (8001be0 <main+0x5fc>)
 80019b6:	4619      	mov	r1, r3
 80019b8:	4887      	ldr	r0, [pc, #540]	; (8001bd8 <main+0x5f4>)
 80019ba:	f7ff fde3 	bl	8001584 <jsoneq>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d119      	bne.n	80019f8 <main+0x414>
	  						Freq_Range[4] = strtol(RxBufferFromUSB + t[i + 1].start,
 80019c4:	4b81      	ldr	r3, [pc, #516]	; (8001bcc <main+0x5e8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3301      	adds	r3, #1
 80019ca:	4a81      	ldr	r2, [pc, #516]	; (8001bd0 <main+0x5ec>)
 80019cc:	011b      	lsls	r3, r3, #4
 80019ce:	4413      	add	r3, r2
 80019d0:	3304      	adds	r3, #4
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b80      	ldr	r3, [pc, #512]	; (8001bd8 <main+0x5f4>)
 80019d8:	4413      	add	r3, r2
 80019da:	f107 0110 	add.w	r1, r7, #16
 80019de:	2200      	movs	r2, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f00d ffff 	bl	800f9e4 <strtol>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4a7c      	ldr	r2, [pc, #496]	; (8001bdc <main+0x5f8>)
 80019ea:	6113      	str	r3, [r2, #16]
	  								&ptr, 0);

	  						i++;
 80019ec:	4b77      	ldr	r3, [pc, #476]	; (8001bcc <main+0x5e8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	3301      	adds	r3, #1
 80019f2:	4a76      	ldr	r2, [pc, #472]	; (8001bcc <main+0x5e8>)
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e280      	b.n	8001efa <main+0x916>
	  					} else if (jsoneq(RxBufferFromUSB, &t[i], "F4_min") == 0) {
 80019f8:	4b74      	ldr	r3, [pc, #464]	; (8001bcc <main+0x5e8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	4a74      	ldr	r2, [pc, #464]	; (8001bd0 <main+0x5ec>)
 8001a00:	4413      	add	r3, r2
 8001a02:	4a78      	ldr	r2, [pc, #480]	; (8001be4 <main+0x600>)
 8001a04:	4619      	mov	r1, r3
 8001a06:	4874      	ldr	r0, [pc, #464]	; (8001bd8 <main+0x5f4>)
 8001a08:	f7ff fdbc 	bl	8001584 <jsoneq>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d119      	bne.n	8001a46 <main+0x462>

	  						Freq_Range[6] = strtol(RxBufferFromUSB + t[i + 1].start,
 8001a12:	4b6e      	ldr	r3, [pc, #440]	; (8001bcc <main+0x5e8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	3301      	adds	r3, #1
 8001a18:	4a6d      	ldr	r2, [pc, #436]	; (8001bd0 <main+0x5ec>)
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3304      	adds	r3, #4
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b6c      	ldr	r3, [pc, #432]	; (8001bd8 <main+0x5f4>)
 8001a26:	4413      	add	r3, r2
 8001a28:	f107 0110 	add.w	r1, r7, #16
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f00d ffd8 	bl	800f9e4 <strtol>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4a69      	ldr	r2, [pc, #420]	; (8001bdc <main+0x5f8>)
 8001a38:	6193      	str	r3, [r2, #24]
	  								&ptr, 0);

	  						i++;
 8001a3a:	4b64      	ldr	r3, [pc, #400]	; (8001bcc <main+0x5e8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	4a62      	ldr	r2, [pc, #392]	; (8001bcc <main+0x5e8>)
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	e259      	b.n	8001efa <main+0x916>
	  					} else if (jsoneq(RxBufferFromUSB, &t[i], "F5_min") == 0) {
 8001a46:	4b61      	ldr	r3, [pc, #388]	; (8001bcc <main+0x5e8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	4a60      	ldr	r2, [pc, #384]	; (8001bd0 <main+0x5ec>)
 8001a4e:	4413      	add	r3, r2
 8001a50:	4a65      	ldr	r2, [pc, #404]	; (8001be8 <main+0x604>)
 8001a52:	4619      	mov	r1, r3
 8001a54:	4860      	ldr	r0, [pc, #384]	; (8001bd8 <main+0x5f4>)
 8001a56:	f7ff fd95 	bl	8001584 <jsoneq>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d119      	bne.n	8001a94 <main+0x4b0>

	  						Freq_Range[8] = strtol(RxBufferFromUSB + t[i + 1].start,
 8001a60:	4b5a      	ldr	r3, [pc, #360]	; (8001bcc <main+0x5e8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	3301      	adds	r3, #1
 8001a66:	4a5a      	ldr	r2, [pc, #360]	; (8001bd0 <main+0x5ec>)
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b59      	ldr	r3, [pc, #356]	; (8001bd8 <main+0x5f4>)
 8001a74:	4413      	add	r3, r2
 8001a76:	f107 0110 	add.w	r1, r7, #16
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f00d ffb1 	bl	800f9e4 <strtol>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4a55      	ldr	r2, [pc, #340]	; (8001bdc <main+0x5f8>)
 8001a86:	6213      	str	r3, [r2, #32]
	  								&ptr, 0);

	  						i++;
 8001a88:	4b50      	ldr	r3, [pc, #320]	; (8001bcc <main+0x5e8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	4a4f      	ldr	r2, [pc, #316]	; (8001bcc <main+0x5e8>)
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e232      	b.n	8001efa <main+0x916>
	  					} else if (jsoneq(RxBufferFromUSB, &t[i], "F6_min") == 0) {
 8001a94:	4b4d      	ldr	r3, [pc, #308]	; (8001bcc <main+0x5e8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	4a4d      	ldr	r2, [pc, #308]	; (8001bd0 <main+0x5ec>)
 8001a9c:	4413      	add	r3, r2
 8001a9e:	4a53      	ldr	r2, [pc, #332]	; (8001bec <main+0x608>)
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	484d      	ldr	r0, [pc, #308]	; (8001bd8 <main+0x5f4>)
 8001aa4:	f7ff fd6e 	bl	8001584 <jsoneq>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d119      	bne.n	8001ae2 <main+0x4fe>

	  						Freq_Range[10] = strtol(
	  								RxBufferFromUSB + t[i + 1].start, &ptr, 0);
 8001aae:	4b47      	ldr	r3, [pc, #284]	; (8001bcc <main+0x5e8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	4a46      	ldr	r2, [pc, #280]	; (8001bd0 <main+0x5ec>)
 8001ab6:	011b      	lsls	r3, r3, #4
 8001ab8:	4413      	add	r3, r2
 8001aba:	3304      	adds	r3, #4
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
	  						Freq_Range[10] = strtol(
 8001ac0:	4b45      	ldr	r3, [pc, #276]	; (8001bd8 <main+0x5f4>)
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f107 0110 	add.w	r1, r7, #16
 8001ac8:	2200      	movs	r2, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f00d ff8a 	bl	800f9e4 <strtol>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4a42      	ldr	r2, [pc, #264]	; (8001bdc <main+0x5f8>)
 8001ad4:	6293      	str	r3, [r2, #40]	; 0x28

	  						i++;
 8001ad6:	4b3d      	ldr	r3, [pc, #244]	; (8001bcc <main+0x5e8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	4a3b      	ldr	r2, [pc, #236]	; (8001bcc <main+0x5e8>)
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	e20b      	b.n	8001efa <main+0x916>
	  					} else if (jsoneq(RxBufferFromUSB, &t[i], "F1_max") == 0) {
 8001ae2:	4b3a      	ldr	r3, [pc, #232]	; (8001bcc <main+0x5e8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	4a39      	ldr	r2, [pc, #228]	; (8001bd0 <main+0x5ec>)
 8001aea:	4413      	add	r3, r2
 8001aec:	4a40      	ldr	r2, [pc, #256]	; (8001bf0 <main+0x60c>)
 8001aee:	4619      	mov	r1, r3
 8001af0:	4839      	ldr	r0, [pc, #228]	; (8001bd8 <main+0x5f4>)
 8001af2:	f7ff fd47 	bl	8001584 <jsoneq>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d119      	bne.n	8001b30 <main+0x54c>

	  						Freq_Range[1] = strtol(RxBufferFromUSB + t[i + 1].start,
 8001afc:	4b33      	ldr	r3, [pc, #204]	; (8001bcc <main+0x5e8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	3301      	adds	r3, #1
 8001b02:	4a33      	ldr	r2, [pc, #204]	; (8001bd0 <main+0x5ec>)
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	4413      	add	r3, r2
 8001b08:	3304      	adds	r3, #4
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b32      	ldr	r3, [pc, #200]	; (8001bd8 <main+0x5f4>)
 8001b10:	4413      	add	r3, r2
 8001b12:	f107 0110 	add.w	r1, r7, #16
 8001b16:	2200      	movs	r2, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f00d ff63 	bl	800f9e4 <strtol>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a2e      	ldr	r2, [pc, #184]	; (8001bdc <main+0x5f8>)
 8001b22:	6053      	str	r3, [r2, #4]
	  								&ptr, 0);

	  						i++;
 8001b24:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <main+0x5e8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	4a28      	ldr	r2, [pc, #160]	; (8001bcc <main+0x5e8>)
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e1e4      	b.n	8001efa <main+0x916>
	  					} else if (jsoneq(RxBufferFromUSB, &t[i], "F2_max") == 0) {
 8001b30:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <main+0x5e8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	4a26      	ldr	r2, [pc, #152]	; (8001bd0 <main+0x5ec>)
 8001b38:	4413      	add	r3, r2
 8001b3a:	4a2e      	ldr	r2, [pc, #184]	; (8001bf4 <main+0x610>)
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4826      	ldr	r0, [pc, #152]	; (8001bd8 <main+0x5f4>)
 8001b40:	f7ff fd20 	bl	8001584 <jsoneq>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d119      	bne.n	8001b7e <main+0x59a>

	  						Freq_Range[3] = strtol(RxBufferFromUSB + t[i + 1].start,
 8001b4a:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <main+0x5e8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	4a1f      	ldr	r2, [pc, #124]	; (8001bd0 <main+0x5ec>)
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	4413      	add	r3, r2
 8001b56:	3304      	adds	r3, #4
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <main+0x5f4>)
 8001b5e:	4413      	add	r3, r2
 8001b60:	f107 0110 	add.w	r1, r7, #16
 8001b64:	2200      	movs	r2, #0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f00d ff3c 	bl	800f9e4 <strtol>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	4a1b      	ldr	r2, [pc, #108]	; (8001bdc <main+0x5f8>)
 8001b70:	60d3      	str	r3, [r2, #12]
	  								&ptr, 0);

	  						i++;
 8001b72:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <main+0x5e8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	3301      	adds	r3, #1
 8001b78:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <main+0x5e8>)
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	e1bd      	b.n	8001efa <main+0x916>
	  					} else if (jsoneq(RxBufferFromUSB, &t[i], "F3_max") == 0) {
 8001b7e:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <main+0x5e8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <main+0x5ec>)
 8001b86:	4413      	add	r3, r2
 8001b88:	4a1b      	ldr	r2, [pc, #108]	; (8001bf8 <main+0x614>)
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4812      	ldr	r0, [pc, #72]	; (8001bd8 <main+0x5f4>)
 8001b8e:	f7ff fcf9 	bl	8001584 <jsoneq>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d131      	bne.n	8001bfc <main+0x618>

	  						Freq_Range[5] = strtol(RxBufferFromUSB + t[i + 1].start,
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <main+0x5e8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	4a0c      	ldr	r2, [pc, #48]	; (8001bd0 <main+0x5ec>)
 8001ba0:	011b      	lsls	r3, r3, #4
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <main+0x5f4>)
 8001bac:	4413      	add	r3, r2
 8001bae:	f107 0110 	add.w	r1, r7, #16
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f00d ff15 	bl	800f9e4 <strtol>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4a07      	ldr	r2, [pc, #28]	; (8001bdc <main+0x5f8>)
 8001bbe:	6153      	str	r3, [r2, #20]
	  								&ptr, 0);

	  						i++;
 8001bc0:	4b02      	ldr	r3, [pc, #8]	; (8001bcc <main+0x5e8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	4a01      	ldr	r2, [pc, #4]	; (8001bcc <main+0x5e8>)
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	e196      	b.n	8001efa <main+0x916>
 8001bcc:	20005ddc 	.word	0x20005ddc
 8001bd0:	20005df0 	.word	0x20005df0
 8001bd4:	08011548 	.word	0x08011548
 8001bd8:	20004dd4 	.word	0x20004dd4
 8001bdc:	200065f0 	.word	0x200065f0
 8001be0:	08011550 	.word	0x08011550
 8001be4:	08011558 	.word	0x08011558
 8001be8:	08011560 	.word	0x08011560
 8001bec:	08011568 	.word	0x08011568
 8001bf0:	08011570 	.word	0x08011570
 8001bf4:	08011578 	.word	0x08011578
 8001bf8:	08011580 	.word	0x08011580
	  					} else if (jsoneq(RxBufferFromUSB, &t[i], "F4_max") == 0) {
 8001bfc:	4b9e      	ldr	r3, [pc, #632]	; (8001e78 <main+0x894>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	011b      	lsls	r3, r3, #4
 8001c02:	4a9e      	ldr	r2, [pc, #632]	; (8001e7c <main+0x898>)
 8001c04:	4413      	add	r3, r2
 8001c06:	4a9e      	ldr	r2, [pc, #632]	; (8001e80 <main+0x89c>)
 8001c08:	4619      	mov	r1, r3
 8001c0a:	489e      	ldr	r0, [pc, #632]	; (8001e84 <main+0x8a0>)
 8001c0c:	f7ff fcba 	bl	8001584 <jsoneq>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d119      	bne.n	8001c4a <main+0x666>

	  						Freq_Range[7] = strtol(RxBufferFromUSB + t[i + 1].start,
 8001c16:	4b98      	ldr	r3, [pc, #608]	; (8001e78 <main+0x894>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	4a97      	ldr	r2, [pc, #604]	; (8001e7c <main+0x898>)
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	4413      	add	r3, r2
 8001c22:	3304      	adds	r3, #4
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b96      	ldr	r3, [pc, #600]	; (8001e84 <main+0x8a0>)
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f107 0110 	add.w	r1, r7, #16
 8001c30:	2200      	movs	r2, #0
 8001c32:	4618      	mov	r0, r3
 8001c34:	f00d fed6 	bl	800f9e4 <strtol>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4a93      	ldr	r2, [pc, #588]	; (8001e88 <main+0x8a4>)
 8001c3c:	61d3      	str	r3, [r2, #28]
	  								&ptr, 0);

	  						i++;
 8001c3e:	4b8e      	ldr	r3, [pc, #568]	; (8001e78 <main+0x894>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	3301      	adds	r3, #1
 8001c44:	4a8c      	ldr	r2, [pc, #560]	; (8001e78 <main+0x894>)
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	e157      	b.n	8001efa <main+0x916>
	  					} else if (jsoneq(RxBufferFromUSB, &t[i], "F5_max") == 0) {
 8001c4a:	4b8b      	ldr	r3, [pc, #556]	; (8001e78 <main+0x894>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	4a8a      	ldr	r2, [pc, #552]	; (8001e7c <main+0x898>)
 8001c52:	4413      	add	r3, r2
 8001c54:	4a8d      	ldr	r2, [pc, #564]	; (8001e8c <main+0x8a8>)
 8001c56:	4619      	mov	r1, r3
 8001c58:	488a      	ldr	r0, [pc, #552]	; (8001e84 <main+0x8a0>)
 8001c5a:	f7ff fc93 	bl	8001584 <jsoneq>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d119      	bne.n	8001c98 <main+0x6b4>

	  						Freq_Range[9] = strtol(RxBufferFromUSB + t[i + 1].start,
 8001c64:	4b84      	ldr	r3, [pc, #528]	; (8001e78 <main+0x894>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	4a84      	ldr	r2, [pc, #528]	; (8001e7c <main+0x898>)
 8001c6c:	011b      	lsls	r3, r3, #4
 8001c6e:	4413      	add	r3, r2
 8001c70:	3304      	adds	r3, #4
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b83      	ldr	r3, [pc, #524]	; (8001e84 <main+0x8a0>)
 8001c78:	4413      	add	r3, r2
 8001c7a:	f107 0110 	add.w	r1, r7, #16
 8001c7e:	2200      	movs	r2, #0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f00d feaf 	bl	800f9e4 <strtol>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4a7f      	ldr	r2, [pc, #508]	; (8001e88 <main+0x8a4>)
 8001c8a:	6253      	str	r3, [r2, #36]	; 0x24
	  								&ptr, 0);

	  						i++;
 8001c8c:	4b7a      	ldr	r3, [pc, #488]	; (8001e78 <main+0x894>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	3301      	adds	r3, #1
 8001c92:	4a79      	ldr	r2, [pc, #484]	; (8001e78 <main+0x894>)
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e130      	b.n	8001efa <main+0x916>
	  					} else if (jsoneq(RxBufferFromUSB, &t[i], "F6_max") == 0) {
 8001c98:	4b77      	ldr	r3, [pc, #476]	; (8001e78 <main+0x894>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	4a77      	ldr	r2, [pc, #476]	; (8001e7c <main+0x898>)
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a7b      	ldr	r2, [pc, #492]	; (8001e90 <main+0x8ac>)
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4877      	ldr	r0, [pc, #476]	; (8001e84 <main+0x8a0>)
 8001ca8:	f7ff fc6c 	bl	8001584 <jsoneq>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d119      	bne.n	8001ce6 <main+0x702>

	  						Freq_Range[11] = strtol(
	  								RxBufferFromUSB + t[i + 1].start, &ptr, 0);
 8001cb2:	4b71      	ldr	r3, [pc, #452]	; (8001e78 <main+0x894>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	4a70      	ldr	r2, [pc, #448]	; (8001e7c <main+0x898>)
 8001cba:	011b      	lsls	r3, r3, #4
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
	  						Freq_Range[11] = strtol(
 8001cc4:	4b6f      	ldr	r3, [pc, #444]	; (8001e84 <main+0x8a0>)
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f107 0110 	add.w	r1, r7, #16
 8001ccc:	2200      	movs	r2, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f00d fe88 	bl	800f9e4 <strtol>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4a6c      	ldr	r2, [pc, #432]	; (8001e88 <main+0x8a4>)
 8001cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

	  						i++;
 8001cda:	4b67      	ldr	r3, [pc, #412]	; (8001e78 <main+0x894>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	4a65      	ldr	r2, [pc, #404]	; (8001e78 <main+0x894>)
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	e109      	b.n	8001efa <main+0x916>
	  					} else if (jsoneq(RxBufferFromUSB, &t[i], "G1") == 0) {
 8001ce6:	4b64      	ldr	r3, [pc, #400]	; (8001e78 <main+0x894>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	4a63      	ldr	r2, [pc, #396]	; (8001e7c <main+0x898>)
 8001cee:	4413      	add	r3, r2
 8001cf0:	4a68      	ldr	r2, [pc, #416]	; (8001e94 <main+0x8b0>)
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4863      	ldr	r0, [pc, #396]	; (8001e84 <main+0x8a0>)
 8001cf6:	f7ff fc45 	bl	8001584 <jsoneq>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d11a      	bne.n	8001d36 <main+0x752>

	  						Gain[0] = strtol(RxBufferFromUSB + t[i + 1].start, &ptr,
 8001d00:	4b5d      	ldr	r3, [pc, #372]	; (8001e78 <main+0x894>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	3301      	adds	r3, #1
 8001d06:	4a5d      	ldr	r2, [pc, #372]	; (8001e7c <main+0x898>)
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b5c      	ldr	r3, [pc, #368]	; (8001e84 <main+0x8a0>)
 8001d14:	4413      	add	r3, r2
 8001d16:	f107 0110 	add.w	r1, r7, #16
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f00d fe61 	bl	800f9e4 <strtol>
 8001d22:	4603      	mov	r3, r0
 8001d24:	b21a      	sxth	r2, r3
 8001d26:	4b5c      	ldr	r3, [pc, #368]	; (8001e98 <main+0x8b4>)
 8001d28:	801a      	strh	r2, [r3, #0]
	  								0);

	  						i++;
 8001d2a:	4b53      	ldr	r3, [pc, #332]	; (8001e78 <main+0x894>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	4a51      	ldr	r2, [pc, #324]	; (8001e78 <main+0x894>)
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	e0e1      	b.n	8001efa <main+0x916>
	  					} else if (jsoneq(RxBufferFromUSB, &t[i], "G2") == 0) {
 8001d36:	4b50      	ldr	r3, [pc, #320]	; (8001e78 <main+0x894>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	011b      	lsls	r3, r3, #4
 8001d3c:	4a4f      	ldr	r2, [pc, #316]	; (8001e7c <main+0x898>)
 8001d3e:	4413      	add	r3, r2
 8001d40:	4a56      	ldr	r2, [pc, #344]	; (8001e9c <main+0x8b8>)
 8001d42:	4619      	mov	r1, r3
 8001d44:	484f      	ldr	r0, [pc, #316]	; (8001e84 <main+0x8a0>)
 8001d46:	f7ff fc1d 	bl	8001584 <jsoneq>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d11a      	bne.n	8001d86 <main+0x7a2>

	  						Gain[1] = strtol(RxBufferFromUSB + t[i + 1].start, &ptr,
 8001d50:	4b49      	ldr	r3, [pc, #292]	; (8001e78 <main+0x894>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	3301      	adds	r3, #1
 8001d56:	4a49      	ldr	r2, [pc, #292]	; (8001e7c <main+0x898>)
 8001d58:	011b      	lsls	r3, r3, #4
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b48      	ldr	r3, [pc, #288]	; (8001e84 <main+0x8a0>)
 8001d64:	4413      	add	r3, r2
 8001d66:	f107 0110 	add.w	r1, r7, #16
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f00d fe39 	bl	800f9e4 <strtol>
 8001d72:	4603      	mov	r3, r0
 8001d74:	b21a      	sxth	r2, r3
 8001d76:	4b48      	ldr	r3, [pc, #288]	; (8001e98 <main+0x8b4>)
 8001d78:	805a      	strh	r2, [r3, #2]
	  								0);

	  						i++;
 8001d7a:	4b3f      	ldr	r3, [pc, #252]	; (8001e78 <main+0x894>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	4a3d      	ldr	r2, [pc, #244]	; (8001e78 <main+0x894>)
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	e0b9      	b.n	8001efa <main+0x916>
	  					} else if (jsoneq(RxBufferFromUSB, &t[i], "G3") == 0) {
 8001d86:	4b3c      	ldr	r3, [pc, #240]	; (8001e78 <main+0x894>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	4a3b      	ldr	r2, [pc, #236]	; (8001e7c <main+0x898>)
 8001d8e:	4413      	add	r3, r2
 8001d90:	4a43      	ldr	r2, [pc, #268]	; (8001ea0 <main+0x8bc>)
 8001d92:	4619      	mov	r1, r3
 8001d94:	483b      	ldr	r0, [pc, #236]	; (8001e84 <main+0x8a0>)
 8001d96:	f7ff fbf5 	bl	8001584 <jsoneq>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d11a      	bne.n	8001dd6 <main+0x7f2>

	  						Gain[2] = strtol(RxBufferFromUSB + t[i + 1].start, &ptr,
 8001da0:	4b35      	ldr	r3, [pc, #212]	; (8001e78 <main+0x894>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	3301      	adds	r3, #1
 8001da6:	4a35      	ldr	r2, [pc, #212]	; (8001e7c <main+0x898>)
 8001da8:	011b      	lsls	r3, r3, #4
 8001daa:	4413      	add	r3, r2
 8001dac:	3304      	adds	r3, #4
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b34      	ldr	r3, [pc, #208]	; (8001e84 <main+0x8a0>)
 8001db4:	4413      	add	r3, r2
 8001db6:	f107 0110 	add.w	r1, r7, #16
 8001dba:	2200      	movs	r2, #0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f00d fe11 	bl	800f9e4 <strtol>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	b21a      	sxth	r2, r3
 8001dc6:	4b34      	ldr	r3, [pc, #208]	; (8001e98 <main+0x8b4>)
 8001dc8:	809a      	strh	r2, [r3, #4]
	  								0);

	  						i++;
 8001dca:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <main+0x894>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	4a29      	ldr	r2, [pc, #164]	; (8001e78 <main+0x894>)
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	e091      	b.n	8001efa <main+0x916>
	  					} else if (jsoneq(RxBufferFromUSB, &t[i], "G4") == 0) {
 8001dd6:	4b28      	ldr	r3, [pc, #160]	; (8001e78 <main+0x894>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	011b      	lsls	r3, r3, #4
 8001ddc:	4a27      	ldr	r2, [pc, #156]	; (8001e7c <main+0x898>)
 8001dde:	4413      	add	r3, r2
 8001de0:	4a30      	ldr	r2, [pc, #192]	; (8001ea4 <main+0x8c0>)
 8001de2:	4619      	mov	r1, r3
 8001de4:	4827      	ldr	r0, [pc, #156]	; (8001e84 <main+0x8a0>)
 8001de6:	f7ff fbcd 	bl	8001584 <jsoneq>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d11a      	bne.n	8001e26 <main+0x842>

	  						Gain[3] = strtol(RxBufferFromUSB + t[i + 1].start, &ptr,
 8001df0:	4b21      	ldr	r3, [pc, #132]	; (8001e78 <main+0x894>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	3301      	adds	r3, #1
 8001df6:	4a21      	ldr	r2, [pc, #132]	; (8001e7c <main+0x898>)
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <main+0x8a0>)
 8001e04:	4413      	add	r3, r2
 8001e06:	f107 0110 	add.w	r1, r7, #16
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f00d fde9 	bl	800f9e4 <strtol>
 8001e12:	4603      	mov	r3, r0
 8001e14:	b21a      	sxth	r2, r3
 8001e16:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <main+0x8b4>)
 8001e18:	80da      	strh	r2, [r3, #6]
	  								0);

	  						i++;
 8001e1a:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <main+0x894>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	4a15      	ldr	r2, [pc, #84]	; (8001e78 <main+0x894>)
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	e069      	b.n	8001efa <main+0x916>
	  					} else if (jsoneq(RxBufferFromUSB, &t[i], "G5") == 0) {
 8001e26:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <main+0x894>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	4a13      	ldr	r2, [pc, #76]	; (8001e7c <main+0x898>)
 8001e2e:	4413      	add	r3, r2
 8001e30:	4a1d      	ldr	r2, [pc, #116]	; (8001ea8 <main+0x8c4>)
 8001e32:	4619      	mov	r1, r3
 8001e34:	4813      	ldr	r0, [pc, #76]	; (8001e84 <main+0x8a0>)
 8001e36:	f7ff fba5 	bl	8001584 <jsoneq>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d135      	bne.n	8001eac <main+0x8c8>

	  						Gain[4] = strtol(RxBufferFromUSB + t[i + 1].start, &ptr,
 8001e40:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <main+0x894>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	3301      	adds	r3, #1
 8001e46:	4a0d      	ldr	r2, [pc, #52]	; (8001e7c <main+0x898>)
 8001e48:	011b      	lsls	r3, r3, #4
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <main+0x8a0>)
 8001e54:	4413      	add	r3, r2
 8001e56:	f107 0110 	add.w	r1, r7, #16
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f00d fdc1 	bl	800f9e4 <strtol>
 8001e62:	4603      	mov	r3, r0
 8001e64:	b21a      	sxth	r2, r3
 8001e66:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <main+0x8b4>)
 8001e68:	811a      	strh	r2, [r3, #8]
	  								0);

	  						i++;
 8001e6a:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <main+0x894>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	4a01      	ldr	r2, [pc, #4]	; (8001e78 <main+0x894>)
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	e041      	b.n	8001efa <main+0x916>
 8001e76:	bf00      	nop
 8001e78:	20005ddc 	.word	0x20005ddc
 8001e7c:	20005df0 	.word	0x20005df0
 8001e80:	08011588 	.word	0x08011588
 8001e84:	20004dd4 	.word	0x20004dd4
 8001e88:	200065f0 	.word	0x200065f0
 8001e8c:	08011590 	.word	0x08011590
 8001e90:	08011598 	.word	0x08011598
 8001e94:	080115a0 	.word	0x080115a0
 8001e98:	20006638 	.word	0x20006638
 8001e9c:	080115a4 	.word	0x080115a4
 8001ea0:	080115a8 	.word	0x080115a8
 8001ea4:	080115ac 	.word	0x080115ac
 8001ea8:	080115b0 	.word	0x080115b0
	  					} else if (jsoneq(RxBufferFromUSB, &t[i], "G6") == 0) {
 8001eac:	4ba1      	ldr	r3, [pc, #644]	; (8002134 <main+0xb50>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	4aa1      	ldr	r2, [pc, #644]	; (8002138 <main+0xb54>)
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4aa1      	ldr	r2, [pc, #644]	; (800213c <main+0xb58>)
 8001eb8:	4619      	mov	r1, r3
 8001eba:	48a1      	ldr	r0, [pc, #644]	; (8002140 <main+0xb5c>)
 8001ebc:	f7ff fb62 	bl	8001584 <jsoneq>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d119      	bne.n	8001efa <main+0x916>

	  						Gain[5] = strtol(RxBufferFromUSB + t[i + 1].start, &ptr,
 8001ec6:	4b9b      	ldr	r3, [pc, #620]	; (8002134 <main+0xb50>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	4a9a      	ldr	r2, [pc, #616]	; (8002138 <main+0xb54>)
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4b99      	ldr	r3, [pc, #612]	; (8002140 <main+0xb5c>)
 8001eda:	4413      	add	r3, r2
 8001edc:	f107 0110 	add.w	r1, r7, #16
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f00d fd7e 	bl	800f9e4 <strtol>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	b21a      	sxth	r2, r3
 8001eec:	4b95      	ldr	r3, [pc, #596]	; (8002144 <main+0xb60>)
 8001eee:	815a      	strh	r2, [r3, #10]
	  								0);

	  						i++;
 8001ef0:	4b90      	ldr	r3, [pc, #576]	; (8002134 <main+0xb50>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	4a8f      	ldr	r2, [pc, #572]	; (8002134 <main+0xb50>)
 8001ef8:	6013      	str	r3, [r2, #0]
	  				for (i = 1; i < r; i++) {
 8001efa:	4b8e      	ldr	r3, [pc, #568]	; (8002134 <main+0xb50>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	3301      	adds	r3, #1
 8001f00:	4a8c      	ldr	r2, [pc, #560]	; (8002134 <main+0xb50>)
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	4b8b      	ldr	r3, [pc, #556]	; (8002134 <main+0xb50>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b8f      	ldr	r3, [pc, #572]	; (8002148 <main+0xb64>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	f6ff acbb 	blt.w	8001888 <main+0x2a4>
	  						//printf("Unexpected key: %.*s\n", t[i].end - t[i].start,
	  						// RxBufferFromUSB + t[i].start);
	  					}
	  				}

	  				Head = 0;
 8001f12:	4b8e      	ldr	r3, [pc, #568]	; (800214c <main+0xb68>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	801a      	strh	r2, [r3, #0]
	  				// \/ Wysyla co 64 bajty takze zeby wyslac wiecej musisz zrobic petle
	  				//tud_cdc_write(RxBufferFromUSB, sizeof(RxBufferFromUSB));
	  				//tud_cdc_write_flush();
	  				int numofwords = (strlen(RxBufferFromUSB) / 4)
 8001f18:	4889      	ldr	r0, [pc, #548]	; (8002140 <main+0xb5c>)
 8001f1a:	f7fe f9c1 	bl	80002a0 <strlen>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	089c      	lsrs	r4, r3, #2
	  						+ ((strlen(RxBufferFromUSB) % 4) != 0);
 8001f22:	4887      	ldr	r0, [pc, #540]	; (8002140 <main+0xb5c>)
 8001f24:	f7fe f9bc 	bl	80002a0 <strlen>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	bf14      	ite	ne
 8001f32:	2301      	movne	r3, #1
 8001f34:	2300      	moveq	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	4423      	add	r3, r4
	  				int numofwords = (strlen(RxBufferFromUSB) / 4)
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
	  				Flash_Write_Data(0x08060000, (uint32_t*) RxBufferFromUSB,
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	497f      	ldr	r1, [pc, #508]	; (8002140 <main+0xb5c>)
 8001f44:	4882      	ldr	r0, [pc, #520]	; (8002150 <main+0xb6c>)
 8001f46:	f7fe fbff 	bl	8000748 <Flash_Write_Data>
	  						numofwords);
	  				memset(&RxBufferFromUSB[0], 0, sizeof(RxBufferFromUSB));
 8001f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f4e:	2100      	movs	r1, #0
 8001f50:	487b      	ldr	r0, [pc, #492]	; (8002140 <main+0xb5c>)
 8001f52:	f00d fbe1 	bl	800f718 <memset>

	  			}

	  		}

	  		if (FlashFlag == 1) {
 8001f56:	4b7f      	ldr	r3, [pc, #508]	; (8002154 <main+0xb70>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	f040 8360 	bne.w	8002620 <main+0x103c>


	  			for (char *p = strchr(string, '}'); p != NULL;
 8001f60:	217d      	movs	r1, #125	; 0x7d
 8001f62:	487d      	ldr	r0, [pc, #500]	; (8002158 <main+0xb74>)
 8001f64:	f00d fc84 	bl	800f870 <strchr>
 8001f68:	6378      	str	r0, [r7, #52]	; 0x34
 8001f6a:	e00c      	b.n	8001f86 <main+0x9a2>
	  					p = strchr(p + 1, '}')) {
	  				rewritecnt = p - string;
 8001f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f6e:	4a7a      	ldr	r2, [pc, #488]	; (8002158 <main+0xb74>)
 8001f70:	1a9b      	subs	r3, r3, r2
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	4b79      	ldr	r3, [pc, #484]	; (800215c <main+0xb78>)
 8001f76:	801a      	strh	r2, [r3, #0]
	  					p = strchr(p + 1, '}')) {
 8001f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	217d      	movs	r1, #125	; 0x7d
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f00d fc76 	bl	800f870 <strchr>
 8001f84:	6378      	str	r0, [r7, #52]	; 0x34
	  			for (char *p = strchr(string, '}'); p != NULL;
 8001f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1ef      	bne.n	8001f6c <main+0x988>
	  			}

	  			memcpy(rewriteFLASH, string, (rewritecnt + 1));
 8001f8c:	4b73      	ldr	r3, [pc, #460]	; (800215c <main+0xb78>)
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	3301      	adds	r3, #1
 8001f92:	461a      	mov	r2, r3
 8001f94:	4970      	ldr	r1, [pc, #448]	; (8002158 <main+0xb74>)
 8001f96:	4872      	ldr	r0, [pc, #456]	; (8002160 <main+0xb7c>)
 8001f98:	f00d fbb0 	bl	800f6fc <memcpy>

	  			jsmn_init(&p);
 8001f9c:	4871      	ldr	r0, [pc, #452]	; (8002164 <main+0xb80>)
 8001f9e:	f7ff fa55 	bl	800144c <jsmn_init>
	  			char *ptr;

	  			r = jsmn_parse(&p, rewriteFLASH, strlen(rewriteFLASH), t, //Ta funkcja wyrzuca HardFault
 8001fa2:	486f      	ldr	r0, [pc, #444]	; (8002160 <main+0xb7c>)
 8001fa4:	f7fe f97c 	bl	80002a0 <strlen>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	4b62      	ldr	r3, [pc, #392]	; (8002138 <main+0xb54>)
 8001fb0:	496b      	ldr	r1, [pc, #428]	; (8002160 <main+0xb7c>)
 8001fb2:	486c      	ldr	r0, [pc, #432]	; (8002164 <main+0xb80>)
 8001fb4:	f7ff f84c 	bl	8001050 <jsmn_parse>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	4a63      	ldr	r2, [pc, #396]	; (8002148 <main+0xb64>)
 8001fbc:	6013      	str	r3, [r2, #0]
	  					sizeof(t) / sizeof(t[0]));// Wynika to z przepisywania danych z FLASH poniewaz wiecej przepisuje co daje to ze
	  			// Przepisuje pozniej 0xFF a jsmn parser tego nie widzi jako terminatora \0, Solution: Usun 0xFF aby zostaly same 0
	  			if (r < 0) {
 8001fbe:	4b62      	ldr	r3, [pc, #392]	; (8002148 <main+0xb64>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	da08      	bge.n	8001fd8 <main+0x9f4>
	  				printf("Failed to parse JSON: %d\n", r);
 8001fc6:	4b60      	ldr	r3, [pc, #384]	; (8002148 <main+0xb64>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4866      	ldr	r0, [pc, #408]	; (8002168 <main+0xb84>)
 8001fce:	f00d fbab 	bl	800f728 <iprintf>
	  				return 1;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	f000 beeb 	b.w	8002dae <main+0x17ca>
	  			}

	  			/* Assume the top-level element is an object */
	  			if (r < 1 || t[0].type != JSMN_OBJECT) {
 8001fd8:	4b5b      	ldr	r3, [pc, #364]	; (8002148 <main+0xb64>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	dd03      	ble.n	8001fe8 <main+0xa04>
 8001fe0:	4b55      	ldr	r3, [pc, #340]	; (8002138 <main+0xb54>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d005      	beq.n	8001ff4 <main+0xa10>
	  				printf("Object expected\n");
 8001fe8:	4860      	ldr	r0, [pc, #384]	; (800216c <main+0xb88>)
 8001fea:	f00d fc39 	bl	800f860 <puts>
	  				return 1;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	f000 bedd 	b.w	8002dae <main+0x17ca>
	  			}

	  			/* Loop over all keys of the root object */
	  			for (i = 1; i < r; i++) {
 8001ff4:	4b4f      	ldr	r3, [pc, #316]	; (8002134 <main+0xb50>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	e307      	b.n	800260c <main+0x1028>
	  				if (jsoneq(rewriteFLASH, &t[i], "F1_min") == 0) {
 8001ffc:	4b4d      	ldr	r3, [pc, #308]	; (8002134 <main+0xb50>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	4a4d      	ldr	r2, [pc, #308]	; (8002138 <main+0xb54>)
 8002004:	4413      	add	r3, r2
 8002006:	4a5a      	ldr	r2, [pc, #360]	; (8002170 <main+0xb8c>)
 8002008:	4619      	mov	r1, r3
 800200a:	4855      	ldr	r0, [pc, #340]	; (8002160 <main+0xb7c>)
 800200c:	f7ff faba 	bl	8001584 <jsoneq>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d119      	bne.n	800204a <main+0xa66>
	  					Freq_Range[0] = strtol(rewriteFLASH + t[i + 1].start, &ptr,
 8002016:	4b47      	ldr	r3, [pc, #284]	; (8002134 <main+0xb50>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	3301      	adds	r3, #1
 800201c:	4a46      	ldr	r2, [pc, #280]	; (8002138 <main+0xb54>)
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	4413      	add	r3, r2
 8002022:	3304      	adds	r3, #4
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	4b4d      	ldr	r3, [pc, #308]	; (8002160 <main+0xb7c>)
 800202a:	4413      	add	r3, r2
 800202c:	f107 010c 	add.w	r1, r7, #12
 8002030:	2200      	movs	r2, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f00d fcd6 	bl	800f9e4 <strtol>
 8002038:	4603      	mov	r3, r0
 800203a:	4a4e      	ldr	r2, [pc, #312]	; (8002174 <main+0xb90>)
 800203c:	6013      	str	r3, [r2, #0]
	  							0);

	  					i++;
 800203e:	4b3d      	ldr	r3, [pc, #244]	; (8002134 <main+0xb50>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	3301      	adds	r3, #1
 8002044:	4a3b      	ldr	r2, [pc, #236]	; (8002134 <main+0xb50>)
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	e2db      	b.n	8002602 <main+0x101e>
	  				} else if (jsoneq(rewriteFLASH, &t[i], "F2_min") == 0) {
 800204a:	4b3a      	ldr	r3, [pc, #232]	; (8002134 <main+0xb50>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	011b      	lsls	r3, r3, #4
 8002050:	4a39      	ldr	r2, [pc, #228]	; (8002138 <main+0xb54>)
 8002052:	4413      	add	r3, r2
 8002054:	4a48      	ldr	r2, [pc, #288]	; (8002178 <main+0xb94>)
 8002056:	4619      	mov	r1, r3
 8002058:	4841      	ldr	r0, [pc, #260]	; (8002160 <main+0xb7c>)
 800205a:	f7ff fa93 	bl	8001584 <jsoneq>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d119      	bne.n	8002098 <main+0xab4>
	  					Freq_Range[2] = strtol(rewriteFLASH + t[i + 1].start, &ptr,
 8002064:	4b33      	ldr	r3, [pc, #204]	; (8002134 <main+0xb50>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	3301      	adds	r3, #1
 800206a:	4a33      	ldr	r2, [pc, #204]	; (8002138 <main+0xb54>)
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	4413      	add	r3, r2
 8002070:	3304      	adds	r3, #4
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	4b3a      	ldr	r3, [pc, #232]	; (8002160 <main+0xb7c>)
 8002078:	4413      	add	r3, r2
 800207a:	f107 010c 	add.w	r1, r7, #12
 800207e:	2200      	movs	r2, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f00d fcaf 	bl	800f9e4 <strtol>
 8002086:	4603      	mov	r3, r0
 8002088:	4a3a      	ldr	r2, [pc, #232]	; (8002174 <main+0xb90>)
 800208a:	6093      	str	r3, [r2, #8]
	  							0);

	  					i++;
 800208c:	4b29      	ldr	r3, [pc, #164]	; (8002134 <main+0xb50>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	3301      	adds	r3, #1
 8002092:	4a28      	ldr	r2, [pc, #160]	; (8002134 <main+0xb50>)
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	e2b4      	b.n	8002602 <main+0x101e>
	  				} else if (jsoneq(rewriteFLASH, &t[i], "F3_min") == 0) {
 8002098:	4b26      	ldr	r3, [pc, #152]	; (8002134 <main+0xb50>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	4a26      	ldr	r2, [pc, #152]	; (8002138 <main+0xb54>)
 80020a0:	4413      	add	r3, r2
 80020a2:	4a36      	ldr	r2, [pc, #216]	; (800217c <main+0xb98>)
 80020a4:	4619      	mov	r1, r3
 80020a6:	482e      	ldr	r0, [pc, #184]	; (8002160 <main+0xb7c>)
 80020a8:	f7ff fa6c 	bl	8001584 <jsoneq>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d119      	bne.n	80020e6 <main+0xb02>
	  					Freq_Range[4] = strtol(rewriteFLASH + t[i + 1].start, &ptr,
 80020b2:	4b20      	ldr	r3, [pc, #128]	; (8002134 <main+0xb50>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	3301      	adds	r3, #1
 80020b8:	4a1f      	ldr	r2, [pc, #124]	; (8002138 <main+0xb54>)
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	4413      	add	r3, r2
 80020be:	3304      	adds	r3, #4
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	4b26      	ldr	r3, [pc, #152]	; (8002160 <main+0xb7c>)
 80020c6:	4413      	add	r3, r2
 80020c8:	f107 010c 	add.w	r1, r7, #12
 80020cc:	2200      	movs	r2, #0
 80020ce:	4618      	mov	r0, r3
 80020d0:	f00d fc88 	bl	800f9e4 <strtol>
 80020d4:	4603      	mov	r3, r0
 80020d6:	4a27      	ldr	r2, [pc, #156]	; (8002174 <main+0xb90>)
 80020d8:	6113      	str	r3, [r2, #16]
	  							0);

	  					i++;
 80020da:	4b16      	ldr	r3, [pc, #88]	; (8002134 <main+0xb50>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	3301      	adds	r3, #1
 80020e0:	4a14      	ldr	r2, [pc, #80]	; (8002134 <main+0xb50>)
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	e28d      	b.n	8002602 <main+0x101e>
	  				} else if (jsoneq(rewriteFLASH, &t[i], "F4_min") == 0) {
 80020e6:	4b13      	ldr	r3, [pc, #76]	; (8002134 <main+0xb50>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	4a12      	ldr	r2, [pc, #72]	; (8002138 <main+0xb54>)
 80020ee:	4413      	add	r3, r2
 80020f0:	4a23      	ldr	r2, [pc, #140]	; (8002180 <main+0xb9c>)
 80020f2:	4619      	mov	r1, r3
 80020f4:	481a      	ldr	r0, [pc, #104]	; (8002160 <main+0xb7c>)
 80020f6:	f7ff fa45 	bl	8001584 <jsoneq>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d141      	bne.n	8002184 <main+0xba0>

	  					Freq_Range[6] = strtol(rewriteFLASH + t[i + 1].start, &ptr,
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <main+0xb50>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	3301      	adds	r3, #1
 8002106:	4a0c      	ldr	r2, [pc, #48]	; (8002138 <main+0xb54>)
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	4413      	add	r3, r2
 800210c:	3304      	adds	r3, #4
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	4b13      	ldr	r3, [pc, #76]	; (8002160 <main+0xb7c>)
 8002114:	4413      	add	r3, r2
 8002116:	f107 010c 	add.w	r1, r7, #12
 800211a:	2200      	movs	r2, #0
 800211c:	4618      	mov	r0, r3
 800211e:	f00d fc61 	bl	800f9e4 <strtol>
 8002122:	4603      	mov	r3, r0
 8002124:	4a13      	ldr	r2, [pc, #76]	; (8002174 <main+0xb90>)
 8002126:	6193      	str	r3, [r2, #24]
	  							0);

	  					i++;
 8002128:	4b02      	ldr	r3, [pc, #8]	; (8002134 <main+0xb50>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	3301      	adds	r3, #1
 800212e:	4a01      	ldr	r2, [pc, #4]	; (8002134 <main+0xb50>)
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	e266      	b.n	8002602 <main+0x101e>
 8002134:	20005ddc 	.word	0x20005ddc
 8002138:	20005df0 	.word	0x20005df0
 800213c:	080115b4 	.word	0x080115b4
 8002140:	20004dd4 	.word	0x20004dd4
 8002144:	20006638 	.word	0x20006638
 8002148:	20005de0 	.word	0x20005de0
 800214c:	20004fd4 	.word	0x20004fd4
 8002150:	08060000 	.word	0x08060000
 8002154:	20006664 	.word	0x20006664
 8002158:	200051d8 	.word	0x200051d8
 800215c:	200055d8 	.word	0x200055d8
 8002160:	200053d8 	.word	0x200053d8
 8002164:	20005de4 	.word	0x20005de4
 8002168:	08011514 	.word	0x08011514
 800216c:	08011530 	.word	0x08011530
 8002170:	08011540 	.word	0x08011540
 8002174:	200065f0 	.word	0x200065f0
 8002178:	08011548 	.word	0x08011548
 800217c:	08011550 	.word	0x08011550
 8002180:	08011558 	.word	0x08011558
	  				} else if (jsoneq(rewriteFLASH, &t[i], "F5_min") == 0) {
 8002184:	4b9b      	ldr	r3, [pc, #620]	; (80023f4 <main+0xe10>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	4a9b      	ldr	r2, [pc, #620]	; (80023f8 <main+0xe14>)
 800218c:	4413      	add	r3, r2
 800218e:	4a9b      	ldr	r2, [pc, #620]	; (80023fc <main+0xe18>)
 8002190:	4619      	mov	r1, r3
 8002192:	489b      	ldr	r0, [pc, #620]	; (8002400 <main+0xe1c>)
 8002194:	f7ff f9f6 	bl	8001584 <jsoneq>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d119      	bne.n	80021d2 <main+0xbee>

	  					Freq_Range[8] = strtol(rewriteFLASH + t[i + 1].start, &ptr,
 800219e:	4b95      	ldr	r3, [pc, #596]	; (80023f4 <main+0xe10>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	3301      	adds	r3, #1
 80021a4:	4a94      	ldr	r2, [pc, #592]	; (80023f8 <main+0xe14>)
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	4413      	add	r3, r2
 80021aa:	3304      	adds	r3, #4
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	4b93      	ldr	r3, [pc, #588]	; (8002400 <main+0xe1c>)
 80021b2:	4413      	add	r3, r2
 80021b4:	f107 010c 	add.w	r1, r7, #12
 80021b8:	2200      	movs	r2, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f00d fc12 	bl	800f9e4 <strtol>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4a90      	ldr	r2, [pc, #576]	; (8002404 <main+0xe20>)
 80021c4:	6213      	str	r3, [r2, #32]
	  							0);

	  					i++;
 80021c6:	4b8b      	ldr	r3, [pc, #556]	; (80023f4 <main+0xe10>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	3301      	adds	r3, #1
 80021cc:	4a89      	ldr	r2, [pc, #548]	; (80023f4 <main+0xe10>)
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	e217      	b.n	8002602 <main+0x101e>
	  				} else if (jsoneq(rewriteFLASH, &t[i], "F6_min") == 0) {
 80021d2:	4b88      	ldr	r3, [pc, #544]	; (80023f4 <main+0xe10>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	4a87      	ldr	r2, [pc, #540]	; (80023f8 <main+0xe14>)
 80021da:	4413      	add	r3, r2
 80021dc:	4a8a      	ldr	r2, [pc, #552]	; (8002408 <main+0xe24>)
 80021de:	4619      	mov	r1, r3
 80021e0:	4887      	ldr	r0, [pc, #540]	; (8002400 <main+0xe1c>)
 80021e2:	f7ff f9cf 	bl	8001584 <jsoneq>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d119      	bne.n	8002220 <main+0xc3c>

	  					Freq_Range[10] = strtol(rewriteFLASH + t[i + 1].start, &ptr,
 80021ec:	4b81      	ldr	r3, [pc, #516]	; (80023f4 <main+0xe10>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	3301      	adds	r3, #1
 80021f2:	4a81      	ldr	r2, [pc, #516]	; (80023f8 <main+0xe14>)
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	4413      	add	r3, r2
 80021f8:	3304      	adds	r3, #4
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b80      	ldr	r3, [pc, #512]	; (8002400 <main+0xe1c>)
 8002200:	4413      	add	r3, r2
 8002202:	f107 010c 	add.w	r1, r7, #12
 8002206:	2200      	movs	r2, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f00d fbeb 	bl	800f9e4 <strtol>
 800220e:	4603      	mov	r3, r0
 8002210:	4a7c      	ldr	r2, [pc, #496]	; (8002404 <main+0xe20>)
 8002212:	6293      	str	r3, [r2, #40]	; 0x28
	  							0);

	  					i++;
 8002214:	4b77      	ldr	r3, [pc, #476]	; (80023f4 <main+0xe10>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	3301      	adds	r3, #1
 800221a:	4a76      	ldr	r2, [pc, #472]	; (80023f4 <main+0xe10>)
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	e1f0      	b.n	8002602 <main+0x101e>
	  				} else if (jsoneq(rewriteFLASH, &t[i], "F1_max") == 0) {
 8002220:	4b74      	ldr	r3, [pc, #464]	; (80023f4 <main+0xe10>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	4a74      	ldr	r2, [pc, #464]	; (80023f8 <main+0xe14>)
 8002228:	4413      	add	r3, r2
 800222a:	4a78      	ldr	r2, [pc, #480]	; (800240c <main+0xe28>)
 800222c:	4619      	mov	r1, r3
 800222e:	4874      	ldr	r0, [pc, #464]	; (8002400 <main+0xe1c>)
 8002230:	f7ff f9a8 	bl	8001584 <jsoneq>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d119      	bne.n	800226e <main+0xc8a>

	  					Freq_Range[1] = strtol(rewriteFLASH + t[i + 1].start, &ptr,
 800223a:	4b6e      	ldr	r3, [pc, #440]	; (80023f4 <main+0xe10>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	3301      	adds	r3, #1
 8002240:	4a6d      	ldr	r2, [pc, #436]	; (80023f8 <main+0xe14>)
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	4413      	add	r3, r2
 8002246:	3304      	adds	r3, #4
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	4b6c      	ldr	r3, [pc, #432]	; (8002400 <main+0xe1c>)
 800224e:	4413      	add	r3, r2
 8002250:	f107 010c 	add.w	r1, r7, #12
 8002254:	2200      	movs	r2, #0
 8002256:	4618      	mov	r0, r3
 8002258:	f00d fbc4 	bl	800f9e4 <strtol>
 800225c:	4603      	mov	r3, r0
 800225e:	4a69      	ldr	r2, [pc, #420]	; (8002404 <main+0xe20>)
 8002260:	6053      	str	r3, [r2, #4]
	  							0);

	  					i++;
 8002262:	4b64      	ldr	r3, [pc, #400]	; (80023f4 <main+0xe10>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	3301      	adds	r3, #1
 8002268:	4a62      	ldr	r2, [pc, #392]	; (80023f4 <main+0xe10>)
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	e1c9      	b.n	8002602 <main+0x101e>
	  				} else if (jsoneq(rewriteFLASH, &t[i], "F2_max") == 0) {
 800226e:	4b61      	ldr	r3, [pc, #388]	; (80023f4 <main+0xe10>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	4a60      	ldr	r2, [pc, #384]	; (80023f8 <main+0xe14>)
 8002276:	4413      	add	r3, r2
 8002278:	4a65      	ldr	r2, [pc, #404]	; (8002410 <main+0xe2c>)
 800227a:	4619      	mov	r1, r3
 800227c:	4860      	ldr	r0, [pc, #384]	; (8002400 <main+0xe1c>)
 800227e:	f7ff f981 	bl	8001584 <jsoneq>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d119      	bne.n	80022bc <main+0xcd8>

	  					Freq_Range[3] = strtol(rewriteFLASH + t[i + 1].start, &ptr,
 8002288:	4b5a      	ldr	r3, [pc, #360]	; (80023f4 <main+0xe10>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	4a5a      	ldr	r2, [pc, #360]	; (80023f8 <main+0xe14>)
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	4413      	add	r3, r2
 8002294:	3304      	adds	r3, #4
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	4b59      	ldr	r3, [pc, #356]	; (8002400 <main+0xe1c>)
 800229c:	4413      	add	r3, r2
 800229e:	f107 010c 	add.w	r1, r7, #12
 80022a2:	2200      	movs	r2, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f00d fb9d 	bl	800f9e4 <strtol>
 80022aa:	4603      	mov	r3, r0
 80022ac:	4a55      	ldr	r2, [pc, #340]	; (8002404 <main+0xe20>)
 80022ae:	60d3      	str	r3, [r2, #12]
	  							0);

	  					i++;
 80022b0:	4b50      	ldr	r3, [pc, #320]	; (80023f4 <main+0xe10>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	3301      	adds	r3, #1
 80022b6:	4a4f      	ldr	r2, [pc, #316]	; (80023f4 <main+0xe10>)
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e1a2      	b.n	8002602 <main+0x101e>
	  				} else if (jsoneq(rewriteFLASH, &t[i], "F3_max") == 0) {
 80022bc:	4b4d      	ldr	r3, [pc, #308]	; (80023f4 <main+0xe10>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	4a4d      	ldr	r2, [pc, #308]	; (80023f8 <main+0xe14>)
 80022c4:	4413      	add	r3, r2
 80022c6:	4a53      	ldr	r2, [pc, #332]	; (8002414 <main+0xe30>)
 80022c8:	4619      	mov	r1, r3
 80022ca:	484d      	ldr	r0, [pc, #308]	; (8002400 <main+0xe1c>)
 80022cc:	f7ff f95a 	bl	8001584 <jsoneq>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d119      	bne.n	800230a <main+0xd26>

	  					Freq_Range[5] = strtol(rewriteFLASH + t[i + 1].start, &ptr,
 80022d6:	4b47      	ldr	r3, [pc, #284]	; (80023f4 <main+0xe10>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	3301      	adds	r3, #1
 80022dc:	4a46      	ldr	r2, [pc, #280]	; (80023f8 <main+0xe14>)
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	4413      	add	r3, r2
 80022e2:	3304      	adds	r3, #4
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	4b45      	ldr	r3, [pc, #276]	; (8002400 <main+0xe1c>)
 80022ea:	4413      	add	r3, r2
 80022ec:	f107 010c 	add.w	r1, r7, #12
 80022f0:	2200      	movs	r2, #0
 80022f2:	4618      	mov	r0, r3
 80022f4:	f00d fb76 	bl	800f9e4 <strtol>
 80022f8:	4603      	mov	r3, r0
 80022fa:	4a42      	ldr	r2, [pc, #264]	; (8002404 <main+0xe20>)
 80022fc:	6153      	str	r3, [r2, #20]
	  							0);

	  					i++;
 80022fe:	4b3d      	ldr	r3, [pc, #244]	; (80023f4 <main+0xe10>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	3301      	adds	r3, #1
 8002304:	4a3b      	ldr	r2, [pc, #236]	; (80023f4 <main+0xe10>)
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	e17b      	b.n	8002602 <main+0x101e>
	  				} else if (jsoneq(rewriteFLASH, &t[i], "F4_max") == 0) {
 800230a:	4b3a      	ldr	r3, [pc, #232]	; (80023f4 <main+0xe10>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	4a39      	ldr	r2, [pc, #228]	; (80023f8 <main+0xe14>)
 8002312:	4413      	add	r3, r2
 8002314:	4a40      	ldr	r2, [pc, #256]	; (8002418 <main+0xe34>)
 8002316:	4619      	mov	r1, r3
 8002318:	4839      	ldr	r0, [pc, #228]	; (8002400 <main+0xe1c>)
 800231a:	f7ff f933 	bl	8001584 <jsoneq>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d119      	bne.n	8002358 <main+0xd74>

	  					Freq_Range[7] = strtol(rewriteFLASH + t[i + 1].start, &ptr,
 8002324:	4b33      	ldr	r3, [pc, #204]	; (80023f4 <main+0xe10>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	3301      	adds	r3, #1
 800232a:	4a33      	ldr	r2, [pc, #204]	; (80023f8 <main+0xe14>)
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	4413      	add	r3, r2
 8002330:	3304      	adds	r3, #4
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	4b32      	ldr	r3, [pc, #200]	; (8002400 <main+0xe1c>)
 8002338:	4413      	add	r3, r2
 800233a:	f107 010c 	add.w	r1, r7, #12
 800233e:	2200      	movs	r2, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f00d fb4f 	bl	800f9e4 <strtol>
 8002346:	4603      	mov	r3, r0
 8002348:	4a2e      	ldr	r2, [pc, #184]	; (8002404 <main+0xe20>)
 800234a:	61d3      	str	r3, [r2, #28]
	  							0);

	  					i++;
 800234c:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <main+0xe10>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	3301      	adds	r3, #1
 8002352:	4a28      	ldr	r2, [pc, #160]	; (80023f4 <main+0xe10>)
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e154      	b.n	8002602 <main+0x101e>
	  				} else if (jsoneq(rewriteFLASH, &t[i], "F5_max") == 0) {
 8002358:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <main+0xe10>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	4a26      	ldr	r2, [pc, #152]	; (80023f8 <main+0xe14>)
 8002360:	4413      	add	r3, r2
 8002362:	4a2e      	ldr	r2, [pc, #184]	; (800241c <main+0xe38>)
 8002364:	4619      	mov	r1, r3
 8002366:	4826      	ldr	r0, [pc, #152]	; (8002400 <main+0xe1c>)
 8002368:	f7ff f90c 	bl	8001584 <jsoneq>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d119      	bne.n	80023a6 <main+0xdc2>

	  					Freq_Range[9] = strtol(rewriteFLASH + t[i + 1].start, &ptr,
 8002372:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <main+0xe10>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	3301      	adds	r3, #1
 8002378:	4a1f      	ldr	r2, [pc, #124]	; (80023f8 <main+0xe14>)
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	4413      	add	r3, r2
 800237e:	3304      	adds	r3, #4
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	4b1e      	ldr	r3, [pc, #120]	; (8002400 <main+0xe1c>)
 8002386:	4413      	add	r3, r2
 8002388:	f107 010c 	add.w	r1, r7, #12
 800238c:	2200      	movs	r2, #0
 800238e:	4618      	mov	r0, r3
 8002390:	f00d fb28 	bl	800f9e4 <strtol>
 8002394:	4603      	mov	r3, r0
 8002396:	4a1b      	ldr	r2, [pc, #108]	; (8002404 <main+0xe20>)
 8002398:	6253      	str	r3, [r2, #36]	; 0x24
	  							0);

	  					i++;
 800239a:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <main+0xe10>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	3301      	adds	r3, #1
 80023a0:	4a14      	ldr	r2, [pc, #80]	; (80023f4 <main+0xe10>)
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	e12d      	b.n	8002602 <main+0x101e>
	  				} else if (jsoneq(rewriteFLASH, &t[i], "F6_max") == 0) {
 80023a6:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <main+0xe10>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	011b      	lsls	r3, r3, #4
 80023ac:	4a12      	ldr	r2, [pc, #72]	; (80023f8 <main+0xe14>)
 80023ae:	4413      	add	r3, r2
 80023b0:	4a1b      	ldr	r2, [pc, #108]	; (8002420 <main+0xe3c>)
 80023b2:	4619      	mov	r1, r3
 80023b4:	4812      	ldr	r0, [pc, #72]	; (8002400 <main+0xe1c>)
 80023b6:	f7ff f8e5 	bl	8001584 <jsoneq>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d131      	bne.n	8002424 <main+0xe40>

	  					Freq_Range[11] = strtol(rewriteFLASH + t[i + 1].start, &ptr,
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <main+0xe10>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	3301      	adds	r3, #1
 80023c6:	4a0c      	ldr	r2, [pc, #48]	; (80023f8 <main+0xe14>)
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	4413      	add	r3, r2
 80023cc:	3304      	adds	r3, #4
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <main+0xe1c>)
 80023d4:	4413      	add	r3, r2
 80023d6:	f107 010c 	add.w	r1, r7, #12
 80023da:	2200      	movs	r2, #0
 80023dc:	4618      	mov	r0, r3
 80023de:	f00d fb01 	bl	800f9e4 <strtol>
 80023e2:	4603      	mov	r3, r0
 80023e4:	4a07      	ldr	r2, [pc, #28]	; (8002404 <main+0xe20>)
 80023e6:	62d3      	str	r3, [r2, #44]	; 0x2c
	  							0);

	  					i++;
 80023e8:	4b02      	ldr	r3, [pc, #8]	; (80023f4 <main+0xe10>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3301      	adds	r3, #1
 80023ee:	4a01      	ldr	r2, [pc, #4]	; (80023f4 <main+0xe10>)
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e106      	b.n	8002602 <main+0x101e>
 80023f4:	20005ddc 	.word	0x20005ddc
 80023f8:	20005df0 	.word	0x20005df0
 80023fc:	08011560 	.word	0x08011560
 8002400:	200053d8 	.word	0x200053d8
 8002404:	200065f0 	.word	0x200065f0
 8002408:	08011568 	.word	0x08011568
 800240c:	08011570 	.word	0x08011570
 8002410:	08011578 	.word	0x08011578
 8002414:	08011580 	.word	0x08011580
 8002418:	08011588 	.word	0x08011588
 800241c:	08011590 	.word	0x08011590
 8002420:	08011598 	.word	0x08011598
	  				} else if (jsoneq(rewriteFLASH, &t[i], "G1") == 0) {
 8002424:	4b9c      	ldr	r3, [pc, #624]	; (8002698 <main+0x10b4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	4a9c      	ldr	r2, [pc, #624]	; (800269c <main+0x10b8>)
 800242c:	4413      	add	r3, r2
 800242e:	4a9c      	ldr	r2, [pc, #624]	; (80026a0 <main+0x10bc>)
 8002430:	4619      	mov	r1, r3
 8002432:	489c      	ldr	r0, [pc, #624]	; (80026a4 <main+0x10c0>)
 8002434:	f7ff f8a6 	bl	8001584 <jsoneq>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d11a      	bne.n	8002474 <main+0xe90>

	  					Gain[0] = strtol(rewriteFLASH + t[i + 1].start, &ptr, 0);
 800243e:	4b96      	ldr	r3, [pc, #600]	; (8002698 <main+0x10b4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	3301      	adds	r3, #1
 8002444:	4a95      	ldr	r2, [pc, #596]	; (800269c <main+0x10b8>)
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	4413      	add	r3, r2
 800244a:	3304      	adds	r3, #4
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	4b94      	ldr	r3, [pc, #592]	; (80026a4 <main+0x10c0>)
 8002452:	4413      	add	r3, r2
 8002454:	f107 010c 	add.w	r1, r7, #12
 8002458:	2200      	movs	r2, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f00d fac2 	bl	800f9e4 <strtol>
 8002460:	4603      	mov	r3, r0
 8002462:	b21a      	sxth	r2, r3
 8002464:	4b90      	ldr	r3, [pc, #576]	; (80026a8 <main+0x10c4>)
 8002466:	801a      	strh	r2, [r3, #0]

	  					i++;
 8002468:	4b8b      	ldr	r3, [pc, #556]	; (8002698 <main+0x10b4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	3301      	adds	r3, #1
 800246e:	4a8a      	ldr	r2, [pc, #552]	; (8002698 <main+0x10b4>)
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e0c6      	b.n	8002602 <main+0x101e>
	  				} else if (jsoneq(rewriteFLASH, &t[i], "G2") == 0) {
 8002474:	4b88      	ldr	r3, [pc, #544]	; (8002698 <main+0x10b4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	4a88      	ldr	r2, [pc, #544]	; (800269c <main+0x10b8>)
 800247c:	4413      	add	r3, r2
 800247e:	4a8b      	ldr	r2, [pc, #556]	; (80026ac <main+0x10c8>)
 8002480:	4619      	mov	r1, r3
 8002482:	4888      	ldr	r0, [pc, #544]	; (80026a4 <main+0x10c0>)
 8002484:	f7ff f87e 	bl	8001584 <jsoneq>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d11a      	bne.n	80024c4 <main+0xee0>

	  					Gain[1] = strtol(rewriteFLASH + t[i + 1].start, &ptr, 0);
 800248e:	4b82      	ldr	r3, [pc, #520]	; (8002698 <main+0x10b4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	3301      	adds	r3, #1
 8002494:	4a81      	ldr	r2, [pc, #516]	; (800269c <main+0x10b8>)
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	4413      	add	r3, r2
 800249a:	3304      	adds	r3, #4
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	4b80      	ldr	r3, [pc, #512]	; (80026a4 <main+0x10c0>)
 80024a2:	4413      	add	r3, r2
 80024a4:	f107 010c 	add.w	r1, r7, #12
 80024a8:	2200      	movs	r2, #0
 80024aa:	4618      	mov	r0, r3
 80024ac:	f00d fa9a 	bl	800f9e4 <strtol>
 80024b0:	4603      	mov	r3, r0
 80024b2:	b21a      	sxth	r2, r3
 80024b4:	4b7c      	ldr	r3, [pc, #496]	; (80026a8 <main+0x10c4>)
 80024b6:	805a      	strh	r2, [r3, #2]

	  					i++;
 80024b8:	4b77      	ldr	r3, [pc, #476]	; (8002698 <main+0x10b4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	3301      	adds	r3, #1
 80024be:	4a76      	ldr	r2, [pc, #472]	; (8002698 <main+0x10b4>)
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	e09e      	b.n	8002602 <main+0x101e>
	  				} else if (jsoneq(rewriteFLASH, &t[i], "G3") == 0) {
 80024c4:	4b74      	ldr	r3, [pc, #464]	; (8002698 <main+0x10b4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	4a74      	ldr	r2, [pc, #464]	; (800269c <main+0x10b8>)
 80024cc:	4413      	add	r3, r2
 80024ce:	4a78      	ldr	r2, [pc, #480]	; (80026b0 <main+0x10cc>)
 80024d0:	4619      	mov	r1, r3
 80024d2:	4874      	ldr	r0, [pc, #464]	; (80026a4 <main+0x10c0>)
 80024d4:	f7ff f856 	bl	8001584 <jsoneq>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d11a      	bne.n	8002514 <main+0xf30>

	  					Gain[2] = strtol(rewriteFLASH + t[i + 1].start, &ptr, 0);
 80024de:	4b6e      	ldr	r3, [pc, #440]	; (8002698 <main+0x10b4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	3301      	adds	r3, #1
 80024e4:	4a6d      	ldr	r2, [pc, #436]	; (800269c <main+0x10b8>)
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	4413      	add	r3, r2
 80024ea:	3304      	adds	r3, #4
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	4b6c      	ldr	r3, [pc, #432]	; (80026a4 <main+0x10c0>)
 80024f2:	4413      	add	r3, r2
 80024f4:	f107 010c 	add.w	r1, r7, #12
 80024f8:	2200      	movs	r2, #0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f00d fa72 	bl	800f9e4 <strtol>
 8002500:	4603      	mov	r3, r0
 8002502:	b21a      	sxth	r2, r3
 8002504:	4b68      	ldr	r3, [pc, #416]	; (80026a8 <main+0x10c4>)
 8002506:	809a      	strh	r2, [r3, #4]

	  					i++;
 8002508:	4b63      	ldr	r3, [pc, #396]	; (8002698 <main+0x10b4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	3301      	adds	r3, #1
 800250e:	4a62      	ldr	r2, [pc, #392]	; (8002698 <main+0x10b4>)
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	e076      	b.n	8002602 <main+0x101e>
	  				} else if (jsoneq(rewriteFLASH, &t[i], "G4") == 0) {
 8002514:	4b60      	ldr	r3, [pc, #384]	; (8002698 <main+0x10b4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	4a60      	ldr	r2, [pc, #384]	; (800269c <main+0x10b8>)
 800251c:	4413      	add	r3, r2
 800251e:	4a65      	ldr	r2, [pc, #404]	; (80026b4 <main+0x10d0>)
 8002520:	4619      	mov	r1, r3
 8002522:	4860      	ldr	r0, [pc, #384]	; (80026a4 <main+0x10c0>)
 8002524:	f7ff f82e 	bl	8001584 <jsoneq>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d11a      	bne.n	8002564 <main+0xf80>

	  					Gain[3] = strtol(rewriteFLASH + t[i + 1].start, &ptr, 0);
 800252e:	4b5a      	ldr	r3, [pc, #360]	; (8002698 <main+0x10b4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	3301      	adds	r3, #1
 8002534:	4a59      	ldr	r2, [pc, #356]	; (800269c <main+0x10b8>)
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	4413      	add	r3, r2
 800253a:	3304      	adds	r3, #4
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	4b58      	ldr	r3, [pc, #352]	; (80026a4 <main+0x10c0>)
 8002542:	4413      	add	r3, r2
 8002544:	f107 010c 	add.w	r1, r7, #12
 8002548:	2200      	movs	r2, #0
 800254a:	4618      	mov	r0, r3
 800254c:	f00d fa4a 	bl	800f9e4 <strtol>
 8002550:	4603      	mov	r3, r0
 8002552:	b21a      	sxth	r2, r3
 8002554:	4b54      	ldr	r3, [pc, #336]	; (80026a8 <main+0x10c4>)
 8002556:	80da      	strh	r2, [r3, #6]

	  					i++;
 8002558:	4b4f      	ldr	r3, [pc, #316]	; (8002698 <main+0x10b4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	3301      	adds	r3, #1
 800255e:	4a4e      	ldr	r2, [pc, #312]	; (8002698 <main+0x10b4>)
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e04e      	b.n	8002602 <main+0x101e>
	  				} else if (jsoneq(rewriteFLASH, &t[i], "G5") == 0) {
 8002564:	4b4c      	ldr	r3, [pc, #304]	; (8002698 <main+0x10b4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	4a4c      	ldr	r2, [pc, #304]	; (800269c <main+0x10b8>)
 800256c:	4413      	add	r3, r2
 800256e:	4a52      	ldr	r2, [pc, #328]	; (80026b8 <main+0x10d4>)
 8002570:	4619      	mov	r1, r3
 8002572:	484c      	ldr	r0, [pc, #304]	; (80026a4 <main+0x10c0>)
 8002574:	f7ff f806 	bl	8001584 <jsoneq>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d11a      	bne.n	80025b4 <main+0xfd0>

	  					Gain[4] = strtol(rewriteFLASH + t[i + 1].start, &ptr, 0);
 800257e:	4b46      	ldr	r3, [pc, #280]	; (8002698 <main+0x10b4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	3301      	adds	r3, #1
 8002584:	4a45      	ldr	r2, [pc, #276]	; (800269c <main+0x10b8>)
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	4413      	add	r3, r2
 800258a:	3304      	adds	r3, #4
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	461a      	mov	r2, r3
 8002590:	4b44      	ldr	r3, [pc, #272]	; (80026a4 <main+0x10c0>)
 8002592:	4413      	add	r3, r2
 8002594:	f107 010c 	add.w	r1, r7, #12
 8002598:	2200      	movs	r2, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f00d fa22 	bl	800f9e4 <strtol>
 80025a0:	4603      	mov	r3, r0
 80025a2:	b21a      	sxth	r2, r3
 80025a4:	4b40      	ldr	r3, [pc, #256]	; (80026a8 <main+0x10c4>)
 80025a6:	811a      	strh	r2, [r3, #8]

	  					i++;
 80025a8:	4b3b      	ldr	r3, [pc, #236]	; (8002698 <main+0x10b4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	3301      	adds	r3, #1
 80025ae:	4a3a      	ldr	r2, [pc, #232]	; (8002698 <main+0x10b4>)
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	e026      	b.n	8002602 <main+0x101e>
	  				} else if (jsoneq(rewriteFLASH, &t[i], "G6") == 0) {
 80025b4:	4b38      	ldr	r3, [pc, #224]	; (8002698 <main+0x10b4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	4a38      	ldr	r2, [pc, #224]	; (800269c <main+0x10b8>)
 80025bc:	4413      	add	r3, r2
 80025be:	4a3f      	ldr	r2, [pc, #252]	; (80026bc <main+0x10d8>)
 80025c0:	4619      	mov	r1, r3
 80025c2:	4838      	ldr	r0, [pc, #224]	; (80026a4 <main+0x10c0>)
 80025c4:	f7fe ffde 	bl	8001584 <jsoneq>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d119      	bne.n	8002602 <main+0x101e>

	  					Gain[5] = strtol(rewriteFLASH + t[i + 1].start, &ptr, 0);
 80025ce:	4b32      	ldr	r3, [pc, #200]	; (8002698 <main+0x10b4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	3301      	adds	r3, #1
 80025d4:	4a31      	ldr	r2, [pc, #196]	; (800269c <main+0x10b8>)
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	4413      	add	r3, r2
 80025da:	3304      	adds	r3, #4
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	4b30      	ldr	r3, [pc, #192]	; (80026a4 <main+0x10c0>)
 80025e2:	4413      	add	r3, r2
 80025e4:	f107 010c 	add.w	r1, r7, #12
 80025e8:	2200      	movs	r2, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f00d f9fa 	bl	800f9e4 <strtol>
 80025f0:	4603      	mov	r3, r0
 80025f2:	b21a      	sxth	r2, r3
 80025f4:	4b2c      	ldr	r3, [pc, #176]	; (80026a8 <main+0x10c4>)
 80025f6:	815a      	strh	r2, [r3, #10]

	  					i++;
 80025f8:	4b27      	ldr	r3, [pc, #156]	; (8002698 <main+0x10b4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	3301      	adds	r3, #1
 80025fe:	4a26      	ldr	r2, [pc, #152]	; (8002698 <main+0x10b4>)
 8002600:	6013      	str	r3, [r2, #0]
	  			for (i = 1; i < r; i++) {
 8002602:	4b25      	ldr	r3, [pc, #148]	; (8002698 <main+0x10b4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	3301      	adds	r3, #1
 8002608:	4a23      	ldr	r2, [pc, #140]	; (8002698 <main+0x10b4>)
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	4b22      	ldr	r3, [pc, #136]	; (8002698 <main+0x10b4>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <main+0x10dc>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	f6ff acf1 	blt.w	8001ffc <main+0xa18>
	  					//printf("Unexpected key: %.*s\n", t[i].end - t[i].start,
	  					// rewriteFLASH + t[i].start);
	  				}
	  			}

	  			FlashFlag = 0;
 800261a:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <main+0x10e0>)
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
	  		}


	  if (samplesReady) {
 8002620:	4b29      	ldr	r3, [pc, #164]	; (80026c8 <main+0x10e4>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d026      	beq.n	8002678 <main+0x1094>
			PDM_Filter(&pdmRxBuf[0], &PCMOutBuffer[0], &PDM1_filter_handler);
 800262a:	4a28      	ldr	r2, [pc, #160]	; (80026cc <main+0x10e8>)
 800262c:	4928      	ldr	r1, [pc, #160]	; (80026d0 <main+0x10ec>)
 800262e:	4829      	ldr	r0, [pc, #164]	; (80026d4 <main+0x10f0>)
 8002630:	f00c f80c 	bl	800e64c <PDM_Filter>

			for (uint16_t cnt = 0; cnt < FFT_SAMPLES; cnt++) {
 8002634:	2300      	movs	r3, #0
 8002636:	867b      	strh	r3, [r7, #50]	; 0x32
 8002638:	e014      	b.n	8002664 <main+0x1080>
				//FFTInBuffer[cnt] = ((float32_t)PCMOutBuffer[cnt]);
				//FFTInBuffer[cnt] = ((float32_t)PCMOutBuffer[cnt])/65556.0; //Range : 0 - 100%
				FFTInBuffer[cnt] = ((float32_t) PCMOutBuffer[cnt]) / 32778.0; //Range : -1 - 1
 800263a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800263c:	4a24      	ldr	r2, [pc, #144]	; (80026d0 <main+0x10ec>)
 800263e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002642:	ee07 3a90 	vmov	s15, r3
 8002646:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800264a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800264c:	eddf 6a22 	vldr	s13, [pc, #136]	; 80026d8 <main+0x10f4>
 8002650:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002654:	4a21      	ldr	r2, [pc, #132]	; (80026dc <main+0x10f8>)
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	edc3 7a00 	vstr	s15, [r3]
			for (uint16_t cnt = 0; cnt < FFT_SAMPLES; cnt++) {
 800265e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002660:	3301      	adds	r3, #1
 8002662:	867b      	strh	r3, [r7, #50]	; 0x32
 8002664:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800266a:	d3e6      	bcc.n	800263a <main+0x1056>
			}

			fftcomplete = 1;
 800266c:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <main+0x10fc>)
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
			samplesReady = false;
 8002672:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <main+0x10e4>)
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
		}

		if (fftcomplete) {
 8002678:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <main+0x10fc>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80a8 	beq.w	80027d2 <main+0x11ee>
			//CALCULATE FFT
			arm_rfft_fast_f32(&FFTHandler, FFTInBuffer, FFTOutBuffer, 0);
 8002682:	2300      	movs	r3, #0
 8002684:	4a17      	ldr	r2, [pc, #92]	; (80026e4 <main+0x1100>)
 8002686:	4915      	ldr	r1, [pc, #84]	; (80026dc <main+0x10f8>)
 8002688:	4817      	ldr	r0, [pc, #92]	; (80026e8 <main+0x1104>)
 800268a:	f00c f8bd 	bl	800e808 <arm_rfft_fast_f32>

			int FreqPoint = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	62fb      	str	r3, [r7, #44]	; 0x2c

			// calculate abs values and linear-to-dB
			for (int i = 0; i < FFT_SAMPLES; i = i + 2) {
 8002692:	2300      	movs	r3, #0
 8002694:	62bb      	str	r3, [r7, #40]	; 0x28
 8002696:	e064      	b.n	8002762 <main+0x117e>
 8002698:	20005ddc 	.word	0x20005ddc
 800269c:	20005df0 	.word	0x20005df0
 80026a0:	080115a0 	.word	0x080115a0
 80026a4:	200053d8 	.word	0x200053d8
 80026a8:	20006638 	.word	0x20006638
 80026ac:	080115a4 	.word	0x080115a4
 80026b0:	080115a8 	.word	0x080115a8
 80026b4:	080115ac 	.word	0x080115ac
 80026b8:	080115b0 	.word	0x080115b0
 80026bc:	080115b4 	.word	0x080115b4
 80026c0:	20005de0 	.word	0x20005de0
 80026c4:	20006664 	.word	0x20006664
 80026c8:	20004dac 	.word	0x20004dac
 80026cc:	20007020 	.word	0x20007020
 80026d0:	200025a8 	.word	0x200025a8
 80026d4:	200005a8 	.word	0x200005a8
 80026d8:	47000a00 	.word	0x47000a00
 80026dc:	20002dac 	.word	0x20002dac
 80026e0:	20002da8 	.word	0x20002da8
 80026e4:	20003dac 	.word	0x20003dac
 80026e8:	20004dbc 	.word	0x20004dbc
				Freqs[FreqPoint] = (int) (20
						* log10f(
 80026ec:	4a99      	ldr	r2, [pc, #612]	; (8002954 <main+0x1370>)
 80026ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	edd3 7a00 	vldr	s15, [r3]
								complexABS(FFTOutBuffer[i],
										FFTOutBuffer[i + 1])))
 80026f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fa:	3301      	adds	r3, #1
						* log10f(
 80026fc:	4a95      	ldr	r2, [pc, #596]	; (8002954 <main+0x1370>)
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	ed93 7a00 	vldr	s14, [r3]
 8002706:	eef0 0a47 	vmov.f32	s1, s14
 800270a:	eeb0 0a67 	vmov.f32	s0, s15
 800270e:	f7fe ff1d 	bl	800154c <complexABS>
 8002712:	eef0 7a40 	vmov.f32	s15, s0
 8002716:	eeb0 0a67 	vmov.f32	s0, s15
 800271a:	f00e f94f 	bl	80109bc <log10f>
 800271e:	eef0 7a40 	vmov.f32	s15, s0
 8002722:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002726:	ee67 7a87 	vmul.f32	s15, s15, s14
				Freqs[FreqPoint] = (int) (20
 800272a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800272e:	ee17 2a90 	vmov	r2, s15
						- Noises_floor_offset;
 8002732:	4b89      	ldr	r3, [pc, #548]	; (8002958 <main+0x1374>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	1ad2      	subs	r2, r2, r3
				Freqs[FreqPoint] = (int) (20
 8002738:	4988      	ldr	r1, [pc, #544]	; (800295c <main+0x1378>)
 800273a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (Freqs[FreqPoint] < 0) {
 8002740:	4a86      	ldr	r2, [pc, #536]	; (800295c <main+0x1378>)
 8002742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002748:	2b00      	cmp	r3, #0
 800274a:	da04      	bge.n	8002756 <main+0x1172>
					Freqs[FreqPoint] = 0;
 800274c:	4a83      	ldr	r2, [pc, #524]	; (800295c <main+0x1378>)
 800274e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002750:	2100      	movs	r1, #0
 8002752:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				FreqPoint++;
 8002756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002758:	3301      	adds	r3, #1
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
			for (int i = 0; i < FFT_SAMPLES; i = i + 2) {
 800275c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275e:	3302      	adds	r3, #2
 8002760:	62bb      	str	r3, [r7, #40]	; 0x28
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002768:	dbc0      	blt.n	80026ec <main+0x1108>

			// Equation which give number of element in array equal frequancy
			// f_sample = 44kHz (real value check in CubeIDE, 44 014Hz)
			// FFT_SAMPLES = 1024
			// Example 500 Hz -> 500 * (1024/(44014/2)) = 23.26 ~ 23 element -> Freqs[23] = 500 Hz
			OutFreqArray[0] = (uint8_t) Freqs[1]; // 22 Hz
 800276a:	4b7c      	ldr	r3, [pc, #496]	; (800295c <main+0x1378>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	b2da      	uxtb	r2, r3
 8002770:	4b7b      	ldr	r3, [pc, #492]	; (8002960 <main+0x137c>)
 8002772:	701a      	strb	r2, [r3, #0]
			OutFreqArray[1] = (uint8_t) Freqs[3]; // 63 Hz
 8002774:	4b79      	ldr	r3, [pc, #484]	; (800295c <main+0x1378>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	b2da      	uxtb	r2, r3
 800277a:	4b79      	ldr	r3, [pc, #484]	; (8002960 <main+0x137c>)
 800277c:	705a      	strb	r2, [r3, #1]
			OutFreqArray[2] = (uint8_t) Freqs[6]; // 125 Hz
 800277e:	4b77      	ldr	r3, [pc, #476]	; (800295c <main+0x1378>)
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	b2da      	uxtb	r2, r3
 8002784:	4b76      	ldr	r3, [pc, #472]	; (8002960 <main+0x137c>)
 8002786:	709a      	strb	r2, [r3, #2]
			OutFreqArray[3] = (uint8_t) Freqs[12]; // 250 Hz
 8002788:	4b74      	ldr	r3, [pc, #464]	; (800295c <main+0x1378>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4b74      	ldr	r3, [pc, #464]	; (8002960 <main+0x137c>)
 8002790:	70da      	strb	r2, [r3, #3]
			OutFreqArray[4] = (uint8_t) Freqs[23]; // 500 Hz
 8002792:	4b72      	ldr	r3, [pc, #456]	; (800295c <main+0x1378>)
 8002794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002796:	b2da      	uxtb	r2, r3
 8002798:	4b71      	ldr	r3, [pc, #452]	; (8002960 <main+0x137c>)
 800279a:	711a      	strb	r2, [r3, #4]
			OutFreqArray[5] = (uint8_t) Freqs[47]; // 1000 Hz
 800279c:	4b6f      	ldr	r3, [pc, #444]	; (800295c <main+0x1378>)
 800279e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	4b6e      	ldr	r3, [pc, #440]	; (8002960 <main+0x137c>)
 80027a6:	715a      	strb	r2, [r3, #5]
			OutFreqArray[6] = (uint8_t) Freqs[102]; // 2200 Hz
 80027a8:	4b6c      	ldr	r3, [pc, #432]	; (800295c <main+0x1378>)
 80027aa:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	4b6b      	ldr	r3, [pc, #428]	; (8002960 <main+0x137c>)
 80027b2:	719a      	strb	r2, [r3, #6]
			OutFreqArray[7] = (uint8_t) Freqs[209]; // 4500 Hz
 80027b4:	4b69      	ldr	r3, [pc, #420]	; (800295c <main+0x1378>)
 80027b6:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	4b68      	ldr	r3, [pc, #416]	; (8002960 <main+0x137c>)
 80027be:	71da      	strb	r2, [r3, #7]
			OutFreqArray[8] = (uint8_t) Freqs[372]; // 8000 Hz
 80027c0:	4b66      	ldr	r3, [pc, #408]	; (800295c <main+0x1378>)
 80027c2:	f8d3 35d0 	ldr.w	r3, [r3, #1488]	; 0x5d0
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	4b65      	ldr	r3, [pc, #404]	; (8002960 <main+0x137c>)
 80027ca:	721a      	strb	r2, [r3, #8]
			//OutFreqArray[9] = (uint8_t) Freqs[698]; // 15000 Hz

			fftcomplete = 0;
 80027cc:	4b65      	ldr	r3, [pc, #404]	; (8002964 <main+0x1380>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	701a      	strb	r2, [r3, #0]
		}


	  if((HAL_GetTick() - PWMTimer) > 100){
 80027d2:	f006 f8b9 	bl	8008948 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	4b63      	ldr	r3, [pc, #396]	; (8002968 <main+0x1384>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	; 0x64
 80027e0:	f67e af8d 	bls.w	80016fe <main+0x11a>
	  	  	  	  	  	PWMTimer = HAL_GetTick();
 80027e4:	f006 f8b0 	bl	8008948 <HAL_GetTick>
 80027e8:	4603      	mov	r3, r0
 80027ea:	4a5f      	ldr	r2, [pc, #380]	; (8002968 <main+0x1384>)
 80027ec:	6013      	str	r3, [r2, #0]

			Amplitude_Section[0] = GetMaxAmplitude(Freq_Range[0],
 80027ee:	4b5f      	ldr	r3, [pc, #380]	; (800296c <main+0x1388>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	b29b      	uxth	r3, r3
					Freq_Range[1]);
 80027f4:	4a5d      	ldr	r2, [pc, #372]	; (800296c <main+0x1388>)
 80027f6:	6852      	ldr	r2, [r2, #4]
			Amplitude_Section[0] = GetMaxAmplitude(Freq_Range[0],
 80027f8:	b292      	uxth	r2, r2
 80027fa:	4611      	mov	r1, r2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 fc5d 	bl	80030bc <GetMaxAmplitude>
 8002802:	eef0 7a40 	vmov.f32	s15, s0
 8002806:	4b5a      	ldr	r3, [pc, #360]	; (8002970 <main+0x138c>)
 8002808:	edc3 7a00 	vstr	s15, [r3]
			Amplitude_Section[1] = GetMaxAmplitude(Freq_Range[2],
 800280c:	4b57      	ldr	r3, [pc, #348]	; (800296c <main+0x1388>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	b29b      	uxth	r3, r3
					Freq_Range[3]);
 8002812:	4a56      	ldr	r2, [pc, #344]	; (800296c <main+0x1388>)
 8002814:	68d2      	ldr	r2, [r2, #12]
			Amplitude_Section[1] = GetMaxAmplitude(Freq_Range[2],
 8002816:	b292      	uxth	r2, r2
 8002818:	4611      	mov	r1, r2
 800281a:	4618      	mov	r0, r3
 800281c:	f000 fc4e 	bl	80030bc <GetMaxAmplitude>
 8002820:	eef0 7a40 	vmov.f32	s15, s0
 8002824:	4b52      	ldr	r3, [pc, #328]	; (8002970 <main+0x138c>)
 8002826:	edc3 7a01 	vstr	s15, [r3, #4]
			Amplitude_Section[2] = GetMaxAmplitude(Freq_Range[4],
 800282a:	4b50      	ldr	r3, [pc, #320]	; (800296c <main+0x1388>)
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	b29b      	uxth	r3, r3
					Freq_Range[5]);
 8002830:	4a4e      	ldr	r2, [pc, #312]	; (800296c <main+0x1388>)
 8002832:	6952      	ldr	r2, [r2, #20]
			Amplitude_Section[2] = GetMaxAmplitude(Freq_Range[4],
 8002834:	b292      	uxth	r2, r2
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f000 fc3f 	bl	80030bc <GetMaxAmplitude>
 800283e:	eef0 7a40 	vmov.f32	s15, s0
 8002842:	4b4b      	ldr	r3, [pc, #300]	; (8002970 <main+0x138c>)
 8002844:	edc3 7a02 	vstr	s15, [r3, #8]
			Amplitude_Section[3] = GetMaxAmplitude(Freq_Range[6],
 8002848:	4b48      	ldr	r3, [pc, #288]	; (800296c <main+0x1388>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	b29b      	uxth	r3, r3
					Freq_Range[7]);
 800284e:	4a47      	ldr	r2, [pc, #284]	; (800296c <main+0x1388>)
 8002850:	69d2      	ldr	r2, [r2, #28]
			Amplitude_Section[3] = GetMaxAmplitude(Freq_Range[6],
 8002852:	b292      	uxth	r2, r2
 8002854:	4611      	mov	r1, r2
 8002856:	4618      	mov	r0, r3
 8002858:	f000 fc30 	bl	80030bc <GetMaxAmplitude>
 800285c:	eef0 7a40 	vmov.f32	s15, s0
 8002860:	4b43      	ldr	r3, [pc, #268]	; (8002970 <main+0x138c>)
 8002862:	edc3 7a03 	vstr	s15, [r3, #12]
			Amplitude_Section[4] = GetMaxAmplitude(Freq_Range[8],
 8002866:	4b41      	ldr	r3, [pc, #260]	; (800296c <main+0x1388>)
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	b29b      	uxth	r3, r3
					Freq_Range[9]);
 800286c:	4a3f      	ldr	r2, [pc, #252]	; (800296c <main+0x1388>)
 800286e:	6a52      	ldr	r2, [r2, #36]	; 0x24
			Amplitude_Section[4] = GetMaxAmplitude(Freq_Range[8],
 8002870:	b292      	uxth	r2, r2
 8002872:	4611      	mov	r1, r2
 8002874:	4618      	mov	r0, r3
 8002876:	f000 fc21 	bl	80030bc <GetMaxAmplitude>
 800287a:	eef0 7a40 	vmov.f32	s15, s0
 800287e:	4b3c      	ldr	r3, [pc, #240]	; (8002970 <main+0x138c>)
 8002880:	edc3 7a04 	vstr	s15, [r3, #16]
			Amplitude_Section[5] = GetMaxAmplitude(Freq_Range[10],
 8002884:	4b39      	ldr	r3, [pc, #228]	; (800296c <main+0x1388>)
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	b29b      	uxth	r3, r3
					Freq_Range[11]);
 800288a:	4a38      	ldr	r2, [pc, #224]	; (800296c <main+0x1388>)
 800288c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
			Amplitude_Section[5] = GetMaxAmplitude(Freq_Range[10],
 800288e:	b292      	uxth	r2, r2
 8002890:	4611      	mov	r1, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f000 fc12 	bl	80030bc <GetMaxAmplitude>
 8002898:	eef0 7a40 	vmov.f32	s15, s0
 800289c:	4b34      	ldr	r3, [pc, #208]	; (8002970 <main+0x138c>)
 800289e:	edc3 7a05 	vstr	s15, [r3, #20]

			if (Amplitude_Section[0] > 0) {
 80028a2:	4b33      	ldr	r3, [pc, #204]	; (8002970 <main+0x138c>)
 80028a4:	edd3 7a00 	vldr	s15, [r3]
 80028a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b0:	dd6a      	ble.n	8002988 <main+0x13a4>
				if (Amplitude_Section[0] >= MAX_AMPLITUDE) {
 80028b2:	4b2f      	ldr	r3, [pc, #188]	; (8002970 <main+0x138c>)
 80028b4:	edd3 7a00 	vldr	s15, [r3]
 80028b8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002974 <main+0x1390>
 80028bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c4:	db08      	blt.n	80028d8 <main+0x12f4>
					MotorPWM[0] = MAX_PWM;
 80028c6:	4b2c      	ldr	r3, [pc, #176]	; (8002978 <main+0x1394>)
 80028c8:	2264      	movs	r2, #100	; 0x64
 80028ca:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, MotorPWM[0]);
 80028cc:	4b2a      	ldr	r3, [pc, #168]	; (8002978 <main+0x1394>)
 80028ce:	781a      	ldrb	r2, [r3, #0]
 80028d0:	4b2a      	ldr	r3, [pc, #168]	; (800297c <main+0x1398>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	635a      	str	r2, [r3, #52]	; 0x34
 80028d6:	e063      	b.n	80029a0 <main+0x13bc>

				} else {
					MotorPWM[0] = (Amplitude_Section[0] / MAX_AMPLITUDE) * 100;
 80028d8:	4b25      	ldr	r3, [pc, #148]	; (8002970 <main+0x138c>)
 80028da:	ed93 7a00 	vldr	s14, [r3]
 80028de:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002974 <main+0x1390>
 80028e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028e6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002980 <main+0x139c>
 80028ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028f2:	edc7 7a01 	vstr	s15, [r7, #4]
 80028f6:	793b      	ldrb	r3, [r7, #4]
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	4b1f      	ldr	r3, [pc, #124]	; (8002978 <main+0x1394>)
 80028fc:	701a      	strb	r2, [r3, #0]

					if((MotorPWM[0] + Gain[0]) > MAX_PWM){
 80028fe:	4b1e      	ldr	r3, [pc, #120]	; (8002978 <main+0x1394>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	4b1f      	ldr	r3, [pc, #124]	; (8002984 <main+0x13a0>)
 8002906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800290a:	4413      	add	r3, r2
 800290c:	2b64      	cmp	r3, #100	; 0x64
 800290e:	dd03      	ble.n	8002918 <main+0x1334>
						MotorPWM[0] = MAX_PWM;
 8002910:	4b19      	ldr	r3, [pc, #100]	; (8002978 <main+0x1394>)
 8002912:	2264      	movs	r2, #100	; 0x64
 8002914:	701a      	strb	r2, [r3, #0]
 8002916:	e016      	b.n	8002946 <main+0x1362>
					} else if((MotorPWM[0] + Gain[0]) <= 0){
 8002918:	4b17      	ldr	r3, [pc, #92]	; (8002978 <main+0x1394>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	4b19      	ldr	r3, [pc, #100]	; (8002984 <main+0x13a0>)
 8002920:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002924:	4413      	add	r3, r2
 8002926:	2b00      	cmp	r3, #0
 8002928:	dc03      	bgt.n	8002932 <main+0x134e>
						MotorPWM[0] = 0;
 800292a:	4b13      	ldr	r3, [pc, #76]	; (8002978 <main+0x1394>)
 800292c:	2200      	movs	r2, #0
 800292e:	701a      	strb	r2, [r3, #0]
 8002930:	e009      	b.n	8002946 <main+0x1362>
					} else {
						MotorPWM[0] = MotorPWM[0] + Gain[0];
 8002932:	4b11      	ldr	r3, [pc, #68]	; (8002978 <main+0x1394>)
 8002934:	781a      	ldrb	r2, [r3, #0]
 8002936:	4b13      	ldr	r3, [pc, #76]	; (8002984 <main+0x13a0>)
 8002938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	4413      	add	r3, r2
 8002940:	b2da      	uxtb	r2, r3
 8002942:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <main+0x1394>)
 8002944:	701a      	strb	r2, [r3, #0]
					}

					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, MotorPWM[0]);
 8002946:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <main+0x1394>)
 8002948:	781a      	ldrb	r2, [r3, #0]
 800294a:	4b0c      	ldr	r3, [pc, #48]	; (800297c <main+0x1398>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	635a      	str	r2, [r3, #52]	; 0x34
 8002950:	e026      	b.n	80029a0 <main+0x13bc>
 8002952:	bf00      	nop
 8002954:	20003dac 	.word	0x20003dac
 8002958:	20000408 	.word	0x20000408
 800295c:	200055dc 	.word	0x200055dc
 8002960:	20004db0 	.word	0x20004db0
 8002964:	20002da8 	.word	0x20002da8
 8002968:	20006650 	.word	0x20006650
 800296c:	200065f0 	.word	0x200065f0
 8002970:	20006620 	.word	0x20006620
 8002974:	42700000 	.word	0x42700000
 8002978:	20006644 	.word	0x20006644
 800297c:	20006678 	.word	0x20006678
 8002980:	42c80000 	.word	0x42c80000
 8002984:	20006638 	.word	0x20006638
				}
			} else if (__HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1) != 0) {
 8002988:	4b95      	ldr	r3, [pc, #596]	; (8002be0 <main+0x15fc>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298e:	2b00      	cmp	r3, #0
 8002990:	d006      	beq.n	80029a0 <main+0x13bc>
				MotorPWM[0] = 0;
 8002992:	4b94      	ldr	r3, [pc, #592]	; (8002be4 <main+0x1600>)
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8002998:	4b91      	ldr	r3, [pc, #580]	; (8002be0 <main+0x15fc>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2200      	movs	r2, #0
 800299e:	635a      	str	r2, [r3, #52]	; 0x34
			}

			if (Amplitude_Section[1] > 0) {
 80029a0:	4b91      	ldr	r3, [pc, #580]	; (8002be8 <main+0x1604>)
 80029a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80029a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ae:	dd4f      	ble.n	8002a50 <main+0x146c>
				if (Amplitude_Section[1] >= MAX_AMPLITUDE) {
 80029b0:	4b8d      	ldr	r3, [pc, #564]	; (8002be8 <main+0x1604>)
 80029b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80029b6:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8002bec <main+0x1608>
 80029ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c2:	db08      	blt.n	80029d6 <main+0x13f2>
					MotorPWM[1] = MAX_PWM;
 80029c4:	4b87      	ldr	r3, [pc, #540]	; (8002be4 <main+0x1600>)
 80029c6:	2264      	movs	r2, #100	; 0x64
 80029c8:	705a      	strb	r2, [r3, #1]
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MotorPWM[1]);
 80029ca:	4b86      	ldr	r3, [pc, #536]	; (8002be4 <main+0x1600>)
 80029cc:	785a      	ldrb	r2, [r3, #1]
 80029ce:	4b84      	ldr	r3, [pc, #528]	; (8002be0 <main+0x15fc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	639a      	str	r2, [r3, #56]	; 0x38
 80029d4:	e048      	b.n	8002a68 <main+0x1484>

				} else {
					MotorPWM[1] = (Amplitude_Section[1] / MAX_AMPLITUDE) * 100;
 80029d6:	4b84      	ldr	r3, [pc, #528]	; (8002be8 <main+0x1604>)
 80029d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80029dc:	eddf 6a83 	vldr	s13, [pc, #524]	; 8002bec <main+0x1608>
 80029e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029e4:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002bf0 <main+0x160c>
 80029e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029f0:	edc7 7a01 	vstr	s15, [r7, #4]
 80029f4:	793b      	ldrb	r3, [r7, #4]
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	4b7a      	ldr	r3, [pc, #488]	; (8002be4 <main+0x1600>)
 80029fa:	705a      	strb	r2, [r3, #1]

					if((MotorPWM[1] + Gain[1]) > MAX_PWM){
 80029fc:	4b79      	ldr	r3, [pc, #484]	; (8002be4 <main+0x1600>)
 80029fe:	785b      	ldrb	r3, [r3, #1]
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b7c      	ldr	r3, [pc, #496]	; (8002bf4 <main+0x1610>)
 8002a04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a08:	4413      	add	r3, r2
 8002a0a:	2b64      	cmp	r3, #100	; 0x64
 8002a0c:	dd03      	ble.n	8002a16 <main+0x1432>
						MotorPWM[1] = MAX_PWM;
 8002a0e:	4b75      	ldr	r3, [pc, #468]	; (8002be4 <main+0x1600>)
 8002a10:	2264      	movs	r2, #100	; 0x64
 8002a12:	705a      	strb	r2, [r3, #1]
 8002a14:	e016      	b.n	8002a44 <main+0x1460>
					} else if((MotorPWM[1] + Gain[1]) <= 0){
 8002a16:	4b73      	ldr	r3, [pc, #460]	; (8002be4 <main+0x1600>)
 8002a18:	785b      	ldrb	r3, [r3, #1]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4b75      	ldr	r3, [pc, #468]	; (8002bf4 <main+0x1610>)
 8002a1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a22:	4413      	add	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	dc03      	bgt.n	8002a30 <main+0x144c>
						MotorPWM[1] = 0;
 8002a28:	4b6e      	ldr	r3, [pc, #440]	; (8002be4 <main+0x1600>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	705a      	strb	r2, [r3, #1]
 8002a2e:	e009      	b.n	8002a44 <main+0x1460>
					} else {
						MotorPWM[1] = MotorPWM[1] + Gain[1];
 8002a30:	4b6c      	ldr	r3, [pc, #432]	; (8002be4 <main+0x1600>)
 8002a32:	785a      	ldrb	r2, [r3, #1]
 8002a34:	4b6f      	ldr	r3, [pc, #444]	; (8002bf4 <main+0x1610>)
 8002a36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	4b68      	ldr	r3, [pc, #416]	; (8002be4 <main+0x1600>)
 8002a42:	705a      	strb	r2, [r3, #1]
					}

					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, MotorPWM[1]);
 8002a44:	4b67      	ldr	r3, [pc, #412]	; (8002be4 <main+0x1600>)
 8002a46:	785a      	ldrb	r2, [r3, #1]
 8002a48:	4b65      	ldr	r3, [pc, #404]	; (8002be0 <main+0x15fc>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	639a      	str	r2, [r3, #56]	; 0x38
 8002a4e:	e00b      	b.n	8002a68 <main+0x1484>
				}
			} else if (__HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_2) != 0) {
 8002a50:	4b63      	ldr	r3, [pc, #396]	; (8002be0 <main+0x15fc>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d006      	beq.n	8002a68 <main+0x1484>
				MotorPWM[1] = 0;
 8002a5a:	4b62      	ldr	r3, [pc, #392]	; (8002be4 <main+0x1600>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	705a      	strb	r2, [r3, #1]
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8002a60:	4b5f      	ldr	r3, [pc, #380]	; (8002be0 <main+0x15fc>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2200      	movs	r2, #0
 8002a66:	639a      	str	r2, [r3, #56]	; 0x38
			}

			if (Amplitude_Section[2] > 0) {
 8002a68:	4b5f      	ldr	r3, [pc, #380]	; (8002be8 <main+0x1604>)
 8002a6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a76:	dd4f      	ble.n	8002b18 <main+0x1534>
				if (Amplitude_Section[2] >= MAX_AMPLITUDE) {
 8002a78:	4b5b      	ldr	r3, [pc, #364]	; (8002be8 <main+0x1604>)
 8002a7a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a7e:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8002bec <main+0x1608>
 8002a82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a8a:	db08      	blt.n	8002a9e <main+0x14ba>
					MotorPWM[2] = MAX_PWM;
 8002a8c:	4b55      	ldr	r3, [pc, #340]	; (8002be4 <main+0x1600>)
 8002a8e:	2264      	movs	r2, #100	; 0x64
 8002a90:	709a      	strb	r2, [r3, #2]
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, MotorPWM[2]);
 8002a92:	4b54      	ldr	r3, [pc, #336]	; (8002be4 <main+0x1600>)
 8002a94:	789a      	ldrb	r2, [r3, #2]
 8002a96:	4b58      	ldr	r3, [pc, #352]	; (8002bf8 <main+0x1614>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	635a      	str	r2, [r3, #52]	; 0x34
 8002a9c:	e048      	b.n	8002b30 <main+0x154c>

				} else {
					MotorPWM[2] = (Amplitude_Section[2] / MAX_AMPLITUDE) * 100;
 8002a9e:	4b52      	ldr	r3, [pc, #328]	; (8002be8 <main+0x1604>)
 8002aa0:	ed93 7a02 	vldr	s14, [r3, #8]
 8002aa4:	eddf 6a51 	vldr	s13, [pc, #324]	; 8002bec <main+0x1608>
 8002aa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002aac:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8002bf0 <main+0x160c>
 8002ab0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ab8:	edc7 7a01 	vstr	s15, [r7, #4]
 8002abc:	793b      	ldrb	r3, [r7, #4]
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	4b48      	ldr	r3, [pc, #288]	; (8002be4 <main+0x1600>)
 8002ac2:	709a      	strb	r2, [r3, #2]

					if((MotorPWM[2] + Gain[2]) > MAX_PWM){
 8002ac4:	4b47      	ldr	r3, [pc, #284]	; (8002be4 <main+0x1600>)
 8002ac6:	789b      	ldrb	r3, [r3, #2]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4b4a      	ldr	r3, [pc, #296]	; (8002bf4 <main+0x1610>)
 8002acc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	2b64      	cmp	r3, #100	; 0x64
 8002ad4:	dd03      	ble.n	8002ade <main+0x14fa>
						MotorPWM[2] = MAX_PWM;
 8002ad6:	4b43      	ldr	r3, [pc, #268]	; (8002be4 <main+0x1600>)
 8002ad8:	2264      	movs	r2, #100	; 0x64
 8002ada:	709a      	strb	r2, [r3, #2]
 8002adc:	e016      	b.n	8002b0c <main+0x1528>
					} else if((MotorPWM[2] + Gain[2]) <= 0){
 8002ade:	4b41      	ldr	r3, [pc, #260]	; (8002be4 <main+0x1600>)
 8002ae0:	789b      	ldrb	r3, [r3, #2]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4b43      	ldr	r3, [pc, #268]	; (8002bf4 <main+0x1610>)
 8002ae6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002aea:	4413      	add	r3, r2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	dc03      	bgt.n	8002af8 <main+0x1514>
						MotorPWM[2] = 0;
 8002af0:	4b3c      	ldr	r3, [pc, #240]	; (8002be4 <main+0x1600>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	709a      	strb	r2, [r3, #2]
 8002af6:	e009      	b.n	8002b0c <main+0x1528>
					} else {
						MotorPWM[2] = MotorPWM[2] + Gain[2];
 8002af8:	4b3a      	ldr	r3, [pc, #232]	; (8002be4 <main+0x1600>)
 8002afa:	789a      	ldrb	r2, [r3, #2]
 8002afc:	4b3d      	ldr	r3, [pc, #244]	; (8002bf4 <main+0x1610>)
 8002afe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	4b36      	ldr	r3, [pc, #216]	; (8002be4 <main+0x1600>)
 8002b0a:	709a      	strb	r2, [r3, #2]
					}

					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, MotorPWM[2]);
 8002b0c:	4b35      	ldr	r3, [pc, #212]	; (8002be4 <main+0x1600>)
 8002b0e:	789a      	ldrb	r2, [r3, #2]
 8002b10:	4b39      	ldr	r3, [pc, #228]	; (8002bf8 <main+0x1614>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	635a      	str	r2, [r3, #52]	; 0x34
 8002b16:	e00b      	b.n	8002b30 <main+0x154c>
				}
			} else if (__HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1) != 0) {
 8002b18:	4b37      	ldr	r3, [pc, #220]	; (8002bf8 <main+0x1614>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d006      	beq.n	8002b30 <main+0x154c>
				MotorPWM[2] = 0;
 8002b22:	4b30      	ldr	r3, [pc, #192]	; (8002be4 <main+0x1600>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	709a      	strb	r2, [r3, #2]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8002b28:	4b33      	ldr	r3, [pc, #204]	; (8002bf8 <main+0x1614>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	635a      	str	r2, [r3, #52]	; 0x34
			}

			if (Amplitude_Section[3] > 0) {
 8002b30:	4b2d      	ldr	r3, [pc, #180]	; (8002be8 <main+0x1604>)
 8002b32:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3e:	dd5d      	ble.n	8002bfc <main+0x1618>
				if (Amplitude_Section[3] >= MAX_AMPLITUDE) {
 8002b40:	4b29      	ldr	r3, [pc, #164]	; (8002be8 <main+0x1604>)
 8002b42:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b46:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002bec <main+0x1608>
 8002b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b52:	db08      	blt.n	8002b66 <main+0x1582>
					MotorPWM[3] = MAX_PWM;
 8002b54:	4b23      	ldr	r3, [pc, #140]	; (8002be4 <main+0x1600>)
 8002b56:	2264      	movs	r2, #100	; 0x64
 8002b58:	70da      	strb	r2, [r3, #3]
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, MotorPWM[3]);
 8002b5a:	4b22      	ldr	r3, [pc, #136]	; (8002be4 <main+0x1600>)
 8002b5c:	78da      	ldrb	r2, [r3, #3]
 8002b5e:	4b26      	ldr	r3, [pc, #152]	; (8002bf8 <main+0x1614>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	639a      	str	r2, [r3, #56]	; 0x38
 8002b64:	e056      	b.n	8002c14 <main+0x1630>

				} else {
					MotorPWM[3] = (Amplitude_Section[3] / MAX_AMPLITUDE) * 100;
 8002b66:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <main+0x1604>)
 8002b68:	ed93 7a03 	vldr	s14, [r3, #12]
 8002b6c:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8002bec <main+0x1608>
 8002b70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b74:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002bf0 <main+0x160c>
 8002b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b80:	edc7 7a01 	vstr	s15, [r7, #4]
 8002b84:	793b      	ldrb	r3, [r7, #4]
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	4b16      	ldr	r3, [pc, #88]	; (8002be4 <main+0x1600>)
 8002b8a:	70da      	strb	r2, [r3, #3]

					if((MotorPWM[3] + Gain[3]) > MAX_PWM){
 8002b8c:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <main+0x1600>)
 8002b8e:	78db      	ldrb	r3, [r3, #3]
 8002b90:	461a      	mov	r2, r3
 8002b92:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <main+0x1610>)
 8002b94:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002b98:	4413      	add	r3, r2
 8002b9a:	2b64      	cmp	r3, #100	; 0x64
 8002b9c:	dd03      	ble.n	8002ba6 <main+0x15c2>
						MotorPWM[3] = MAX_PWM;
 8002b9e:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <main+0x1600>)
 8002ba0:	2264      	movs	r2, #100	; 0x64
 8002ba2:	70da      	strb	r2, [r3, #3]
 8002ba4:	e016      	b.n	8002bd4 <main+0x15f0>
					} else if((MotorPWM[3] + Gain[3]) <= 0){
 8002ba6:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <main+0x1600>)
 8002ba8:	78db      	ldrb	r3, [r3, #3]
 8002baa:	461a      	mov	r2, r3
 8002bac:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <main+0x1610>)
 8002bae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	dc03      	bgt.n	8002bc0 <main+0x15dc>
						MotorPWM[3] = 0;
 8002bb8:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <main+0x1600>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	70da      	strb	r2, [r3, #3]
 8002bbe:	e009      	b.n	8002bd4 <main+0x15f0>
					} else {
						MotorPWM[3] = MotorPWM[3] + Gain[3];
 8002bc0:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <main+0x1600>)
 8002bc2:	78da      	ldrb	r2, [r3, #3]
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <main+0x1610>)
 8002bc6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <main+0x1600>)
 8002bd2:	70da      	strb	r2, [r3, #3]
					}

					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, MotorPWM[3]);
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <main+0x1600>)
 8002bd6:	78da      	ldrb	r2, [r3, #3]
 8002bd8:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <main+0x1614>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	639a      	str	r2, [r3, #56]	; 0x38
 8002bde:	e019      	b.n	8002c14 <main+0x1630>
 8002be0:	20006678 	.word	0x20006678
 8002be4:	20006644 	.word	0x20006644
 8002be8:	20006620 	.word	0x20006620
 8002bec:	42700000 	.word	0x42700000
 8002bf0:	42c80000 	.word	0x42c80000
 8002bf4:	20006638 	.word	0x20006638
 8002bf8:	200066c0 	.word	0x200066c0
				}
			} else if (__HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_2) != 0) {
 8002bfc:	4b6e      	ldr	r3, [pc, #440]	; (8002db8 <main+0x17d4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d006      	beq.n	8002c14 <main+0x1630>
				MotorPWM[3] = 0;
 8002c06:	4b6d      	ldr	r3, [pc, #436]	; (8002dbc <main+0x17d8>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	70da      	strb	r2, [r3, #3]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002c0c:	4b6a      	ldr	r3, [pc, #424]	; (8002db8 <main+0x17d4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2200      	movs	r2, #0
 8002c12:	639a      	str	r2, [r3, #56]	; 0x38
			}

			if (Amplitude_Section[4] > 0) {
 8002c14:	4b6a      	ldr	r3, [pc, #424]	; (8002dc0 <main+0x17dc>)
 8002c16:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c22:	dd4f      	ble.n	8002cc4 <main+0x16e0>
				if (Amplitude_Section[4] >= MAX_AMPLITUDE) {
 8002c24:	4b66      	ldr	r3, [pc, #408]	; (8002dc0 <main+0x17dc>)
 8002c26:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c2a:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8002dc4 <main+0x17e0>
 8002c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c36:	db08      	blt.n	8002c4a <main+0x1666>
					MotorPWM[4] = MAX_PWM;
 8002c38:	4b60      	ldr	r3, [pc, #384]	; (8002dbc <main+0x17d8>)
 8002c3a:	2264      	movs	r2, #100	; 0x64
 8002c3c:	711a      	strb	r2, [r3, #4]
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, MotorPWM[4]);
 8002c3e:	4b5f      	ldr	r3, [pc, #380]	; (8002dbc <main+0x17d8>)
 8002c40:	791a      	ldrb	r2, [r3, #4]
 8002c42:	4b61      	ldr	r3, [pc, #388]	; (8002dc8 <main+0x17e4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	635a      	str	r2, [r3, #52]	; 0x34
 8002c48:	e048      	b.n	8002cdc <main+0x16f8>

				} else {
					MotorPWM[4] = (Amplitude_Section[4] / MAX_AMPLITUDE) * 100;
 8002c4a:	4b5d      	ldr	r3, [pc, #372]	; (8002dc0 <main+0x17dc>)
 8002c4c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002c50:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8002dc4 <main+0x17e0>
 8002c54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c58:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8002dcc <main+0x17e8>
 8002c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c64:	edc7 7a01 	vstr	s15, [r7, #4]
 8002c68:	793b      	ldrb	r3, [r7, #4]
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	4b53      	ldr	r3, [pc, #332]	; (8002dbc <main+0x17d8>)
 8002c6e:	711a      	strb	r2, [r3, #4]

					if((MotorPWM[4] + Gain[4]) > MAX_PWM){
 8002c70:	4b52      	ldr	r3, [pc, #328]	; (8002dbc <main+0x17d8>)
 8002c72:	791b      	ldrb	r3, [r3, #4]
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b56      	ldr	r3, [pc, #344]	; (8002dd0 <main+0x17ec>)
 8002c78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	2b64      	cmp	r3, #100	; 0x64
 8002c80:	dd03      	ble.n	8002c8a <main+0x16a6>
						MotorPWM[4] = MAX_PWM;
 8002c82:	4b4e      	ldr	r3, [pc, #312]	; (8002dbc <main+0x17d8>)
 8002c84:	2264      	movs	r2, #100	; 0x64
 8002c86:	711a      	strb	r2, [r3, #4]
 8002c88:	e016      	b.n	8002cb8 <main+0x16d4>
					} else if((MotorPWM[4] + Gain[4]) <= 0){
 8002c8a:	4b4c      	ldr	r3, [pc, #304]	; (8002dbc <main+0x17d8>)
 8002c8c:	791b      	ldrb	r3, [r3, #4]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4b4f      	ldr	r3, [pc, #316]	; (8002dd0 <main+0x17ec>)
 8002c92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c96:	4413      	add	r3, r2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	dc03      	bgt.n	8002ca4 <main+0x16c0>
						MotorPWM[4] = 0;
 8002c9c:	4b47      	ldr	r3, [pc, #284]	; (8002dbc <main+0x17d8>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	711a      	strb	r2, [r3, #4]
 8002ca2:	e009      	b.n	8002cb8 <main+0x16d4>
					} else {
						MotorPWM[4] = MotorPWM[4] + Gain[4];
 8002ca4:	4b45      	ldr	r3, [pc, #276]	; (8002dbc <main+0x17d8>)
 8002ca6:	791a      	ldrb	r2, [r3, #4]
 8002ca8:	4b49      	ldr	r3, [pc, #292]	; (8002dd0 <main+0x17ec>)
 8002caa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	4b41      	ldr	r3, [pc, #260]	; (8002dbc <main+0x17d8>)
 8002cb6:	711a      	strb	r2, [r3, #4]
					}

					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, MotorPWM[4]);
 8002cb8:	4b40      	ldr	r3, [pc, #256]	; (8002dbc <main+0x17d8>)
 8002cba:	791a      	ldrb	r2, [r3, #4]
 8002cbc:	4b42      	ldr	r3, [pc, #264]	; (8002dc8 <main+0x17e4>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	635a      	str	r2, [r3, #52]	; 0x34
 8002cc2:	e00b      	b.n	8002cdc <main+0x16f8>
				}
			} else if (__HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1) != 0) {
 8002cc4:	4b40      	ldr	r3, [pc, #256]	; (8002dc8 <main+0x17e4>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d006      	beq.n	8002cdc <main+0x16f8>
				MotorPWM[4] = 0;
 8002cce:	4b3b      	ldr	r3, [pc, #236]	; (8002dbc <main+0x17d8>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	711a      	strb	r2, [r3, #4]
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8002cd4:	4b3c      	ldr	r3, [pc, #240]	; (8002dc8 <main+0x17e4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	635a      	str	r2, [r3, #52]	; 0x34
			}

			if (Amplitude_Section[5] > 0) {
 8002cdc:	4b38      	ldr	r3, [pc, #224]	; (8002dc0 <main+0x17dc>)
 8002cde:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ce2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cea:	dd51      	ble.n	8002d90 <main+0x17ac>
				if (Amplitude_Section[5] >= MAX_AMPLITUDE) {
 8002cec:	4b34      	ldr	r3, [pc, #208]	; (8002dc0 <main+0x17dc>)
 8002cee:	edd3 7a05 	vldr	s15, [r3, #20]
 8002cf2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002dc4 <main+0x17e0>
 8002cf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cfe:	db09      	blt.n	8002d14 <main+0x1730>
					MotorPWM[5] = MAX_PWM;
 8002d00:	4b2e      	ldr	r3, [pc, #184]	; (8002dbc <main+0x17d8>)
 8002d02:	2264      	movs	r2, #100	; 0x64
 8002d04:	715a      	strb	r2, [r3, #5]
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, MotorPWM[5]);
 8002d06:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <main+0x17d8>)
 8002d08:	795a      	ldrb	r2, [r3, #5]
 8002d0a:	4b2f      	ldr	r3, [pc, #188]	; (8002dc8 <main+0x17e4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	639a      	str	r2, [r3, #56]	; 0x38
 8002d10:	f7fe bcf5 	b.w	80016fe <main+0x11a>

				} else {
					MotorPWM[5] = (Amplitude_Section[5] / MAX_AMPLITUDE) * 100;
 8002d14:	4b2a      	ldr	r3, [pc, #168]	; (8002dc0 <main+0x17dc>)
 8002d16:	ed93 7a05 	vldr	s14, [r3, #20]
 8002d1a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8002dc4 <main+0x17e0>
 8002d1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d22:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002dcc <main+0x17e8>
 8002d26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d2e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002d32:	793b      	ldrb	r3, [r7, #4]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4b21      	ldr	r3, [pc, #132]	; (8002dbc <main+0x17d8>)
 8002d38:	715a      	strb	r2, [r3, #5]

					if((MotorPWM[5] + Gain[5]) > MAX_PWM){
 8002d3a:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <main+0x17d8>)
 8002d3c:	795b      	ldrb	r3, [r3, #5]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	4b23      	ldr	r3, [pc, #140]	; (8002dd0 <main+0x17ec>)
 8002d42:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002d46:	4413      	add	r3, r2
 8002d48:	2b64      	cmp	r3, #100	; 0x64
 8002d4a:	dd03      	ble.n	8002d54 <main+0x1770>
						MotorPWM[5] = MAX_PWM;
 8002d4c:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <main+0x17d8>)
 8002d4e:	2264      	movs	r2, #100	; 0x64
 8002d50:	715a      	strb	r2, [r3, #5]
 8002d52:	e016      	b.n	8002d82 <main+0x179e>
					} else if((MotorPWM[5] + Gain[5]) <= 0){
 8002d54:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <main+0x17d8>)
 8002d56:	795b      	ldrb	r3, [r3, #5]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4b1d      	ldr	r3, [pc, #116]	; (8002dd0 <main+0x17ec>)
 8002d5c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002d60:	4413      	add	r3, r2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	dc03      	bgt.n	8002d6e <main+0x178a>
						MotorPWM[5] = 0;
 8002d66:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <main+0x17d8>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	715a      	strb	r2, [r3, #5]
 8002d6c:	e009      	b.n	8002d82 <main+0x179e>
					} else {
						MotorPWM[5] = MotorPWM[5] + Gain[5];
 8002d6e:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <main+0x17d8>)
 8002d70:	795a      	ldrb	r2, [r3, #5]
 8002d72:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <main+0x17ec>)
 8002d74:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	4b0f      	ldr	r3, [pc, #60]	; (8002dbc <main+0x17d8>)
 8002d80:	715a      	strb	r2, [r3, #5]
					}

					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, MotorPWM[5]);
 8002d82:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <main+0x17d8>)
 8002d84:	795a      	ldrb	r2, [r3, #5]
 8002d86:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <main+0x17e4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	639a      	str	r2, [r3, #56]	; 0x38
 8002d8c:	f7fe bcb7 	b.w	80016fe <main+0x11a>
				}
			} else if (__HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_2) != 0) {
 8002d90:	4b0d      	ldr	r3, [pc, #52]	; (8002dc8 <main+0x17e4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f43e acb1 	beq.w	80016fe <main+0x11a>
				MotorPWM[5] = 0;
 8002d9c:	4b07      	ldr	r3, [pc, #28]	; (8002dbc <main+0x17d8>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	715a      	strb	r2, [r3, #5]
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8002da2:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <main+0x17e4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2200      	movs	r2, #0
 8002da8:	639a      	str	r2, [r3, #56]	; 0x38
	  if(HAL_IWDG_Refresh(&hiwdg) != HAL_OK)
 8002daa:	f7fe bca8 	b.w	80016fe <main+0x11a>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	373c      	adds	r7, #60	; 0x3c
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd90      	pop	{r4, r7, pc}
 8002db6:	bf00      	nop
 8002db8:	200066c0 	.word	0x200066c0
 8002dbc:	20006644 	.word	0x20006644
 8002dc0:	20006620 	.word	0x20006620
 8002dc4:	42700000 	.word	0x42700000
 8002dc8:	20006708 	.word	0x20006708
 8002dcc:	42c80000 	.word	0x42c80000
 8002dd0:	20006638 	.word	0x20006638

08002dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b094      	sub	sp, #80	; 0x50
 8002dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dda:	f107 0320 	add.w	r3, r7, #32
 8002dde:	2230      	movs	r2, #48	; 0x30
 8002de0:	2100      	movs	r1, #0
 8002de2:	4618      	mov	r0, r3
 8002de4:	f00c fc98 	bl	800f718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002de8:	f107 030c 	add.w	r3, r7, #12
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	4b28      	ldr	r3, [pc, #160]	; (8002ea0 <SystemClock_Config+0xcc>)
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	4a27      	ldr	r2, [pc, #156]	; (8002ea0 <SystemClock_Config+0xcc>)
 8002e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e06:	6413      	str	r3, [r2, #64]	; 0x40
 8002e08:	4b25      	ldr	r3, [pc, #148]	; (8002ea0 <SystemClock_Config+0xcc>)
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e14:	2300      	movs	r3, #0
 8002e16:	607b      	str	r3, [r7, #4]
 8002e18:	4b22      	ldr	r3, [pc, #136]	; (8002ea4 <SystemClock_Config+0xd0>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a21      	ldr	r2, [pc, #132]	; (8002ea4 <SystemClock_Config+0xd0>)
 8002e1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	4b1f      	ldr	r3, [pc, #124]	; (8002ea4 <SystemClock_Config+0xd0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e2c:	607b      	str	r3, [r7, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002e30:	2309      	movs	r3, #9
 8002e32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002e48:	2308      	movs	r3, #8
 8002e4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002e4c:	2360      	movs	r3, #96	; 0x60
 8002e4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e50:	2302      	movs	r3, #2
 8002e52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e54:	2304      	movs	r3, #4
 8002e56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e58:	f107 0320 	add.w	r3, r7, #32
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f007 fe31 	bl	800aac4 <HAL_RCC_OscConfig>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002e68:	f000 f9ca 	bl	8003200 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e6c:	230f      	movs	r3, #15
 8002e6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e70:	2302      	movs	r3, #2
 8002e72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002e74:	2380      	movs	r3, #128	; 0x80
 8002e76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002e82:	f107 030c 	add.w	r3, r7, #12
 8002e86:	2101      	movs	r1, #1
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f008 f893 	bl	800afb4 <HAL_RCC_ClockConfig>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002e94:	f000 f9b4 	bl	8003200 <Error_Handler>
  }
}
 8002e98:	bf00      	nop
 8002e9a:	3750      	adds	r7, #80	; 0x50
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	40007000 	.word	0x40007000

08002ea8 <tud_mount_cb>:

// Jezeli taktowanie glownego zegara jest ustawione na 48MHz ustaw FLASH_LATENCY na 1 czyli FLASH_LATENCY_1

// Invoked when device is mounted
void tud_mount_cb(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  blink_interval_ms = BLINK_MOUNTED;
 8002eac:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <tud_mount_cb+0x18>)
 8002eae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002eb2:	601a      	str	r2, [r3, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	2000040c 	.word	0x2000040c

08002ec4 <tud_umount_cb>:

// Invoked when device is unmounted
void tud_umount_cb(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  blink_interval_ms = BLINK_NOT_MOUNTED;
 8002ec8:	4b03      	ldr	r3, [pc, #12]	; (8002ed8 <tud_umount_cb+0x14>)
 8002eca:	22fa      	movs	r2, #250	; 0xfa
 8002ecc:	601a      	str	r2, [r3, #0]
}
 8002ece:	bf00      	nop
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	2000040c 	.word	0x2000040c

08002edc <tud_suspend_cb>:

// Invoked when usb bus is suspended
// remote_wakeup_en : if host allow us  to perform remote wakeup
// Within 7ms, device must draw an average of current less than 2.5 mA from bus
void tud_suspend_cb(bool remote_wakeup_en)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
  blink_interval_ms = BLINK_SUSPENDED;
 8002ee6:	4b05      	ldr	r3, [pc, #20]	; (8002efc <tud_suspend_cb+0x20>)
 8002ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eec:	601a      	str	r2, [r3, #0]
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	2000040c 	.word	0x2000040c

08002f00 <tud_resume_cb>:

// Invoked when usb bus is resumed
void tud_resume_cb(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  blink_interval_ms = BLINK_MOUNTED;
 8002f04:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <tud_resume_cb+0x18>)
 8002f06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f0a:	601a      	str	r2, [r3, #0]
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	2000040c 	.word	0x2000040c

08002f1c <tud_dfu_get_timeout_cb>:

// Invoked right before tud_dfu_download_cb() (state=DFU_DNBUSY) or tud_dfu_manifest_cb() (state=DFU_MANIFEST)
// Application return timeout in milliseconds (bwPollTimeout) for the next download/manifest operation.
// During this period, USB host won't try to communicate with us.
uint32_t tud_dfu_get_timeout_cb(uint8_t alt, uint8_t state)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	460a      	mov	r2, r1
 8002f26:	71fb      	strb	r3, [r7, #7]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	71bb      	strb	r3, [r7, #6]
  if ( state == DFU_DNBUSY )
 8002f2c:	79bb      	ldrb	r3, [r7, #6]
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d106      	bne.n	8002f40 <tud_dfu_get_timeout_cb+0x24>
  {
    // For this example
    // - Atl0 Flash is fast : 1   ms
    // - Alt1 EEPROM is slow: 100 ms
    return (alt == 0) ? 1 : 100;
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <tud_dfu_get_timeout_cb+0x20>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e007      	b.n	8002f4c <tud_dfu_get_timeout_cb+0x30>
 8002f3c:	2364      	movs	r3, #100	; 0x64
 8002f3e:	e005      	b.n	8002f4c <tud_dfu_get_timeout_cb+0x30>
  }
  else if (state == DFU_MANIFEST)
 8002f40:	79bb      	ldrb	r3, [r7, #6]
 8002f42:	2b07      	cmp	r3, #7
 8002f44:	d101      	bne.n	8002f4a <tud_dfu_get_timeout_cb+0x2e>
  {
    // since we don't buffer entire image and do any flashing in manifest stage
    return 0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	e000      	b.n	8002f4c <tud_dfu_get_timeout_cb+0x30>
  }

  return 0;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <tud_dfu_download_cb>:

// Invoked when received DFU_DNLOAD (wLength>0) following by DFU_GETSTATUS (state=DFU_DNBUSY) requests
// This callback could be returned before flashing op is complete (async).
// Once finished flashing, application must call tud_dfu_finish_flashing()
void tud_dfu_download_cb(uint8_t alt, uint16_t block_num, uint8_t const* data, uint16_t length)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60ba      	str	r2, [r7, #8]
 8002f60:	461a      	mov	r2, r3
 8002f62:	4603      	mov	r3, r0
 8002f64:	73fb      	strb	r3, [r7, #15]
 8002f66:	460b      	mov	r3, r1
 8002f68:	81bb      	strh	r3, [r7, #12]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
  (void) alt;
  (void) block_num;

  //printf("\r\nReceived Alt %u BlockNum %u of length %u\r\n", alt, wBlockNum, length);

  for(uint16_t i=0; i<length; i++)
 8002f6e:	2300      	movs	r3, #0
 8002f70:	82fb      	strh	r3, [r7, #22]
 8002f72:	e009      	b.n	8002f88 <tud_dfu_download_cb+0x30>
  {
    printf("%c", data[i]);
 8002f74:	8afb      	ldrh	r3, [r7, #22]
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	4413      	add	r3, r2
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f00c fbeb 	bl	800f758 <putchar>
  for(uint16_t i=0; i<length; i++)
 8002f82:	8afb      	ldrh	r3, [r7, #22]
 8002f84:	3301      	adds	r3, #1
 8002f86:	82fb      	strh	r3, [r7, #22]
 8002f88:	8afa      	ldrh	r2, [r7, #22]
 8002f8a:	88fb      	ldrh	r3, [r7, #6]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d3f1      	bcc.n	8002f74 <tud_dfu_download_cb+0x1c>
  }

  // flashing op for download complete without error
  tud_dfu_finish_flashing(DFU_STATUS_OK);
 8002f90:	2000      	movs	r0, #0
 8002f92:	f001 fc6f 	bl	8004874 <tud_dfu_finish_flashing>
}
 8002f96:	bf00      	nop
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <tud_dfu_manifest_cb>:

// Invoked when download process is complete, received DFU_DNLOAD (wLength=0) following by DFU_GETSTATUS (state=Manifest)
// Application can do checksum, or actual flashing if buffered entire image previously.
// Once finished flashing, application must call tud_dfu_finish_flashing()
void tud_dfu_manifest_cb(uint8_t alt)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	71fb      	strb	r3, [r7, #7]
  (void) alt;
  printf("Download completed, enter manifestation\r\n");
 8002faa:	4805      	ldr	r0, [pc, #20]	; (8002fc0 <tud_dfu_manifest_cb+0x20>)
 8002fac:	f00c fc58 	bl	800f860 <puts>

  // flashing op for manifest is complete without error
  // Application can perform checksum, should it fail, use appropriate status such as errVERIFY.
  tud_dfu_finish_flashing(DFU_STATUS_OK);
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	f001 fc5f 	bl	8004874 <tud_dfu_finish_flashing>
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	080115c8 	.word	0x080115c8

08002fc4 <tud_dfu_upload_cb>:

// Invoked when received DFU_UPLOAD request
// Application must populate data with up to length bytes and
// Return the number of written bytes
uint16_t tud_dfu_upload_cb(uint8_t alt, uint16_t block_num, uint8_t* data, uint16_t length)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60ba      	str	r2, [r7, #8]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4603      	mov	r3, r0
 8002fd0:	73fb      	strb	r3, [r7, #15]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	81bb      	strh	r3, [r7, #12]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	80fb      	strh	r3, [r7, #6]
  (void) block_num;
  (void) length;

  uint16_t const xfer_len = (uint16_t) strlen(upload_image[alt]);
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
 8002fdc:	4a0a      	ldr	r2, [pc, #40]	; (8003008 <tud_dfu_upload_cb+0x44>)
 8002fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fd f95c 	bl	80002a0 <strlen>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	82fb      	strh	r3, [r7, #22]
  memcpy(data, upload_image[alt], xfer_len);
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	4a06      	ldr	r2, [pc, #24]	; (8003008 <tud_dfu_upload_cb+0x44>)
 8002ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff4:	8afa      	ldrh	r2, [r7, #22]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	68b8      	ldr	r0, [r7, #8]
 8002ffa:	f00c fb7f 	bl	800f6fc <memcpy>

  return xfer_len;
 8002ffe:	8afb      	ldrh	r3, [r7, #22]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20000400 	.word	0x20000400

0800300c <tud_dfu_abort_cb>:

// Invoked when the Host has terminated a download or upload transfer
void tud_dfu_abort_cb(uint8_t alt)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
  (void) alt;
  printf("Host aborted transfer\r\n");
 8003016:	4803      	ldr	r0, [pc, #12]	; (8003024 <tud_dfu_abort_cb+0x18>)
 8003018:	f00c fc22 	bl	800f860 <puts>
}
 800301c:	bf00      	nop
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	080115f4 	.word	0x080115f4

08003028 <tud_dfu_detach_cb>:

// Invoked when a DFU_DETACH request is received
void tud_dfu_detach_cb(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  printf("Host detach, we should probably reboot\r\n");
 800302c:	4802      	ldr	r0, [pc, #8]	; (8003038 <tud_dfu_detach_cb+0x10>)
 800302e:	f00c fc17 	bl	800f860 <puts>
}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	0801160c 	.word	0x0801160c

0800303c <led_blinking_task>:
//--------------------------------------------------------------------+
// BLINKING TASK + Indicator pulse
//--------------------------------------------------------------------+

void led_blinking_task(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  static uint32_t start_ms = 0;
  static bool led_state = false;

  // Blink every interval ms
  if ( HAL_GetTick() - start_ms < blink_interval_ms) return; // not enough time
 8003040:	f005 fc82 	bl	8008948 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	4b11      	ldr	r3, [pc, #68]	; (800308c <led_blinking_task+0x50>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	1ad2      	subs	r2, r2, r3
 800304c:	4b10      	ldr	r3, [pc, #64]	; (8003090 <led_blinking_task+0x54>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d319      	bcc.n	8003088 <led_blinking_task+0x4c>
  start_ms += blink_interval_ms;
 8003054:	4b0d      	ldr	r3, [pc, #52]	; (800308c <led_blinking_task+0x50>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4b0d      	ldr	r3, [pc, #52]	; (8003090 <led_blinking_task+0x54>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4413      	add	r3, r2
 800305e:	4a0b      	ldr	r2, [pc, #44]	; (800308c <led_blinking_task+0x50>)
 8003060:	6013      	str	r3, [r2, #0]
HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, led_state);
 8003062:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <led_blinking_task+0x58>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	2110      	movs	r1, #16
 800306a:	480b      	ldr	r0, [pc, #44]	; (8003098 <led_blinking_task+0x5c>)
 800306c:	f006 fdca 	bl	8009c04 <HAL_GPIO_WritePin>
  //board_led_write(led_state);
  led_state = 1 - led_state; // toggle
 8003070:	4b08      	ldr	r3, [pc, #32]	; (8003094 <led_blinking_task+0x58>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	f1c3 0301 	rsb	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf14      	ite	ne
 800307c:	2301      	movne	r3, #1
 800307e:	2300      	moveq	r3, #0
 8003080:	b2da      	uxtb	r2, r3
 8003082:	4b04      	ldr	r3, [pc, #16]	; (8003094 <led_blinking_task+0x58>)
 8003084:	701a      	strb	r2, [r3, #0]
 8003086:	e000      	b.n	800308a <led_blinking_task+0x4e>
  if ( HAL_GetTick() - start_ms < blink_interval_ms) return; // not enough time
 8003088:	bf00      	nop
}
 800308a:	bd80      	pop	{r7, pc}
 800308c:	2000666c 	.word	0x2000666c
 8003090:	2000040c 	.word	0x2000040c
 8003094:	20006670 	.word	0x20006670
 8003098:	40020000 	.word	0x40020000

0800309c <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s){
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
	samplesReady = true;
 80030a4:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <HAL_I2S_RxCpltCallback+0x1c>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	701a      	strb	r2, [r3, #0]
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	20004dac 	.word	0x20004dac

080030bc <GetMaxAmplitude>:

float32_t GetMaxAmplitude(uint16_t lowFreq, uint16_t highFreq){
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	460a      	mov	r2, r1
 80030c6:	80fb      	strh	r3, [r7, #6]
 80030c8:	4613      	mov	r3, r2
 80030ca:	80bb      	strh	r3, [r7, #4]

	// index1 + 12 = Example 500 Hz -> 500 * (1024/(44014/2)) = 23.26 ~ 23 element -> Freqs[23] = 500 Hz
	uint16_t indexarrayforlowFreq = lowFreq * (float)((float)FFT_SAMPLES/((float)REAL_VALUE_FREQ_SAMPLING/2.f));
 80030cc:	88fb      	ldrh	r3, [r7, #6]
 80030ce:	ee07 3a90 	vmov	s15, r3
 80030d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030d6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003184 <GetMaxAmplitude+0xc8>
 80030da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030e2:	ee17 3a90 	vmov	r3, s15
 80030e6:	82fb      	strh	r3, [r7, #22]
	uint16_t indexarrayforhighFreq = highFreq * (float)((float)FFT_SAMPLES/((float)REAL_VALUE_FREQ_SAMPLING/2.f));
 80030e8:	88bb      	ldrh	r3, [r7, #4]
 80030ea:	ee07 3a90 	vmov	s15, r3
 80030ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030f2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003184 <GetMaxAmplitude+0xc8>
 80030f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030fe:	ee17 3a90 	vmov	r3, s15
 8003102:	81fb      	strh	r3, [r7, #14]
	//uint32_t blocksize = indexarrayforhighFreq - indexarrayforlowFreq;
	if(indexarrayforlowFreq <= 0){
 8003104:	8afb      	ldrh	r3, [r7, #22]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d102      	bne.n	8003110 <GetMaxAmplitude+0x54>
		indexarrayforlowFreq = 0;
 800310a:	2300      	movs	r3, #0
 800310c:	82fb      	strh	r3, [r7, #22]
 800310e:	e002      	b.n	8003116 <GetMaxAmplitude+0x5a>
	} else {
		indexarrayforlowFreq -= 5;
 8003110:	8afb      	ldrh	r3, [r7, #22]
 8003112:	3b05      	subs	r3, #5
 8003114:	82fb      	strh	r3, [r7, #22]
	}

	if(indexarrayforlowFreq > 505){
 8003116:	8afb      	ldrh	r3, [r7, #22]
 8003118:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 800311c:	d303      	bcc.n	8003126 <GetMaxAmplitude+0x6a>
		indexarrayforlowFreq = 512;
 800311e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003122:	82fb      	strh	r3, [r7, #22]
 8003124:	e002      	b.n	800312c <GetMaxAmplitude+0x70>
	} else {
		indexarrayforlowFreq += 5;
 8003126:	8afb      	ldrh	r3, [r7, #22]
 8003128:	3305      	adds	r3, #5
 800312a:	82fb      	strh	r3, [r7, #22]

	//int TempArray[512] = {0};
	//memset(TempArray, 0, 512);
	//memcpy(TempArray, Freqs, 512);

	  for (int i = indexarrayforlowFreq; i < indexarrayforhighFreq; ++i) {
 800312c:	8afb      	ldrh	r3, [r7, #22]
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	e014      	b.n	800315c <GetMaxAmplitude+0xa0>
	    if (Freqs[indexarrayforlowFreq] < Freqs[i]) {
 8003132:	8afb      	ldrh	r3, [r7, #22]
 8003134:	4a14      	ldr	r2, [pc, #80]	; (8003188 <GetMaxAmplitude+0xcc>)
 8003136:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800313a:	4913      	ldr	r1, [pc, #76]	; (8003188 <GetMaxAmplitude+0xcc>)
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003142:	429a      	cmp	r2, r3
 8003144:	da07      	bge.n	8003156 <GetMaxAmplitude+0x9a>
	    	Freqs[indexarrayforlowFreq] = Freqs[i];
 8003146:	8afb      	ldrh	r3, [r7, #22]
 8003148:	490f      	ldr	r1, [pc, #60]	; (8003188 <GetMaxAmplitude+0xcc>)
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003150:	490d      	ldr	r1, [pc, #52]	; (8003188 <GetMaxAmplitude+0xcc>)
 8003152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for (int i = indexarrayforlowFreq; i < indexarrayforhighFreq; ++i) {
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	3301      	adds	r3, #1
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	89fb      	ldrh	r3, [r7, #14]
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	429a      	cmp	r2, r3
 8003162:	dbe6      	blt.n	8003132 <GetMaxAmplitude+0x76>
	    }
	  }

return Freqs[indexarrayforlowFreq];
 8003164:	8afb      	ldrh	r3, [r7, #22]
 8003166:	4a08      	ldr	r2, [pc, #32]	; (8003188 <GetMaxAmplitude+0xcc>)
 8003168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800316c:	ee07 3a90 	vmov	s15, r3
 8003170:	eef8 7ae7 	vcvt.f32.s32	s15, s15

}
 8003174:	eeb0 0a67 	vmov.f32	s0, s15
 8003178:	371c      	adds	r7, #28
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	3d3e96ec 	.word	0x3d3e96ec
 8003188:	200055dc 	.word	0x200055dc

0800318c <InitParams>:

void InitParams(){
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0

	Freq_Range[0] = 400;
 8003190:	4b1a      	ldr	r3, [pc, #104]	; (80031fc <InitParams+0x70>)
 8003192:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003196:	601a      	str	r2, [r3, #0]
	Freq_Range[1] = 600;
 8003198:	4b18      	ldr	r3, [pc, #96]	; (80031fc <InitParams+0x70>)
 800319a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800319e:	605a      	str	r2, [r3, #4]

	Freq_Range[2] = 700;
 80031a0:	4b16      	ldr	r3, [pc, #88]	; (80031fc <InitParams+0x70>)
 80031a2:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80031a6:	609a      	str	r2, [r3, #8]
	Freq_Range[3] = 900;
 80031a8:	4b14      	ldr	r3, [pc, #80]	; (80031fc <InitParams+0x70>)
 80031aa:	f44f 7261 	mov.w	r2, #900	; 0x384
 80031ae:	60da      	str	r2, [r3, #12]

	Freq_Range[4] = 1400;
 80031b0:	4b12      	ldr	r3, [pc, #72]	; (80031fc <InitParams+0x70>)
 80031b2:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80031b6:	611a      	str	r2, [r3, #16]
	Freq_Range[5] = 1600;
 80031b8:	4b10      	ldr	r3, [pc, #64]	; (80031fc <InitParams+0x70>)
 80031ba:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80031be:	615a      	str	r2, [r3, #20]

	Freq_Range[6] = 1900;
 80031c0:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <InitParams+0x70>)
 80031c2:	f240 726c 	movw	r2, #1900	; 0x76c
 80031c6:	619a      	str	r2, [r3, #24]
	Freq_Range[7] = 2100;
 80031c8:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <InitParams+0x70>)
 80031ca:	f640 0234 	movw	r2, #2100	; 0x834
 80031ce:	61da      	str	r2, [r3, #28]

	Freq_Range[8] = 2400;
 80031d0:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <InitParams+0x70>)
 80031d2:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80031d6:	621a      	str	r2, [r3, #32]
	Freq_Range[9] = 2600;
 80031d8:	4b08      	ldr	r3, [pc, #32]	; (80031fc <InitParams+0x70>)
 80031da:	f640 2228 	movw	r2, #2600	; 0xa28
 80031de:	625a      	str	r2, [r3, #36]	; 0x24

	Freq_Range[10] = 900;
 80031e0:	4b06      	ldr	r3, [pc, #24]	; (80031fc <InitParams+0x70>)
 80031e2:	f44f 7261 	mov.w	r2, #900	; 0x384
 80031e6:	629a      	str	r2, [r3, #40]	; 0x28
	Freq_Range[11] = 1100;
 80031e8:	4b04      	ldr	r3, [pc, #16]	; (80031fc <InitParams+0x70>)
 80031ea:	f240 424c 	movw	r2, #1100	; 0x44c
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c


}
 80031f0:	bf00      	nop
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	200065f0 	.word	0x200065f0

08003200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003204:	b672      	cpsid	i
}
 8003206:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003208:	e7fe      	b.n	8003208 <Error_Handler+0x8>
	...

0800320c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003212:	2300      	movs	r3, #0
 8003214:	607b      	str	r3, [r7, #4]
 8003216:	4b10      	ldr	r3, [pc, #64]	; (8003258 <HAL_MspInit+0x4c>)
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	4a0f      	ldr	r2, [pc, #60]	; (8003258 <HAL_MspInit+0x4c>)
 800321c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003220:	6453      	str	r3, [r2, #68]	; 0x44
 8003222:	4b0d      	ldr	r3, [pc, #52]	; (8003258 <HAL_MspInit+0x4c>)
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322a:	607b      	str	r3, [r7, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800322e:	2300      	movs	r3, #0
 8003230:	603b      	str	r3, [r7, #0]
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <HAL_MspInit+0x4c>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	4a08      	ldr	r2, [pc, #32]	; (8003258 <HAL_MspInit+0x4c>)
 8003238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800323c:	6413      	str	r3, [r2, #64]	; 0x40
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_MspInit+0x4c>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800

0800325c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003260:	e7fe      	b.n	8003260 <NMI_Handler+0x4>

08003262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003262:	b480      	push	{r7}
 8003264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003266:	e7fe      	b.n	8003266 <HardFault_Handler+0x4>

08003268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800326c:	e7fe      	b.n	800326c <MemManage_Handler+0x4>

0800326e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800326e:	b480      	push	{r7}
 8003270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003272:	e7fe      	b.n	8003272 <BusFault_Handler+0x4>

08003274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003278:	e7fe      	b.n	8003278 <UsageFault_Handler+0x4>

0800327a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800327a:	b480      	push	{r7}
 800327c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800327e:	bf00      	nop
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800328c:	bf00      	nop
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003296:	b480      	push	{r7}
 8003298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800329a:	bf00      	nop
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032a8:	f005 fb3a 	bl	8008920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032ac:	bf00      	nop
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80032b4:	4802      	ldr	r0, [pc, #8]	; (80032c0 <DMA1_Stream3_IRQHandler+0x10>)
 80032b6:	f005 fdab 	bl	8008e10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80032ba:	bf00      	nop
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	2000053c 	.word	0x2000053c

080032c4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 80032c8:	4802      	ldr	r0, [pc, #8]	; (80032d4 <SPI2_IRQHandler+0x10>)
 80032ca:	f006 fecb 	bl	800a064 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80032ce:	bf00      	nop
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	200004f4 	.word	0x200004f4

080032d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
    tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 80032dc:	2000      	movs	r0, #0
 80032de:	f005 f831 	bl	8008344 <dcd_int_handler>
    return;
 80032e2:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b086      	sub	sp, #24
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
 80032f6:	e00a      	b.n	800330e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80032f8:	f3af 8000 	nop.w
 80032fc:	4601      	mov	r1, r0
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	60ba      	str	r2, [r7, #8]
 8003304:	b2ca      	uxtb	r2, r1
 8003306:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	3301      	adds	r3, #1
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	429a      	cmp	r2, r3
 8003314:	dbf0      	blt.n	80032f8 <_read+0x12>
	}

return len;
 8003316:	687b      	ldr	r3, [r7, #4]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	e009      	b.n	8003346 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	60ba      	str	r2, [r7, #8]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	3301      	adds	r3, #1
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	429a      	cmp	r2, r3
 800334c:	dbf1      	blt.n	8003332 <_write+0x12>
	}
	return len;
 800334e:	687b      	ldr	r3, [r7, #4]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <_close>:

int _close(int file)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
	return -1;
 8003360:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003364:	4618      	mov	r0, r3
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003380:	605a      	str	r2, [r3, #4]
	return 0;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <_isatty>:

int _isatty(int file)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
	return 1;
 8003398:	2301      	movs	r3, #1
}
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b085      	sub	sp, #20
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	607a      	str	r2, [r7, #4]
	return 0;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033c8:	4a14      	ldr	r2, [pc, #80]	; (800341c <_sbrk+0x5c>)
 80033ca:	4b15      	ldr	r3, [pc, #84]	; (8003420 <_sbrk+0x60>)
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033d4:	4b13      	ldr	r3, [pc, #76]	; (8003424 <_sbrk+0x64>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d102      	bne.n	80033e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033dc:	4b11      	ldr	r3, [pc, #68]	; (8003424 <_sbrk+0x64>)
 80033de:	4a12      	ldr	r2, [pc, #72]	; (8003428 <_sbrk+0x68>)
 80033e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033e2:	4b10      	ldr	r3, [pc, #64]	; (8003424 <_sbrk+0x64>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4413      	add	r3, r2
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d207      	bcs.n	8003400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033f0:	f00c f95a 	bl	800f6a8 <__errno>
 80033f4:	4603      	mov	r3, r0
 80033f6:	220c      	movs	r2, #12
 80033f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033fa:	f04f 33ff 	mov.w	r3, #4294967295
 80033fe:	e009      	b.n	8003414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003400:	4b08      	ldr	r3, [pc, #32]	; (8003424 <_sbrk+0x64>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003406:	4b07      	ldr	r3, [pc, #28]	; (8003424 <_sbrk+0x64>)
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4413      	add	r3, r2
 800340e:	4a05      	ldr	r2, [pc, #20]	; (8003424 <_sbrk+0x64>)
 8003410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003412:	68fb      	ldr	r3, [r7, #12]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	20020000 	.word	0x20020000
 8003420:	00000400 	.word	0x00000400
 8003424:	20006674 	.word	0x20006674
 8003428:	20007088 	.word	0x20007088

0800342c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003430:	4b06      	ldr	r3, [pc, #24]	; (800344c <SystemInit+0x20>)
 8003432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003436:	4a05      	ldr	r2, [pc, #20]	; (800344c <SystemInit+0x20>)
 8003438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800343c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003440:	bf00      	nop
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	e000ed00 	.word	0xe000ed00

08003450 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08e      	sub	sp, #56	; 0x38
 8003454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003456:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	605a      	str	r2, [r3, #4]
 8003460:	609a      	str	r2, [r3, #8]
 8003462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003464:	f107 0320 	add.w	r3, r7, #32
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800346e:	1d3b      	adds	r3, r7, #4
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	605a      	str	r2, [r3, #4]
 8003476:	609a      	str	r2, [r3, #8]
 8003478:	60da      	str	r2, [r3, #12]
 800347a:	611a      	str	r2, [r3, #16]
 800347c:	615a      	str	r2, [r3, #20]
 800347e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003480:	4b32      	ldr	r3, [pc, #200]	; (800354c <MX_TIM2_Init+0xfc>)
 8003482:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003486:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 23;
 8003488:	4b30      	ldr	r3, [pc, #192]	; (800354c <MX_TIM2_Init+0xfc>)
 800348a:	2217      	movs	r2, #23
 800348c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800348e:	4b2f      	ldr	r3, [pc, #188]	; (800354c <MX_TIM2_Init+0xfc>)
 8003490:	2200      	movs	r2, #0
 8003492:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8003494:	4b2d      	ldr	r3, [pc, #180]	; (800354c <MX_TIM2_Init+0xfc>)
 8003496:	2263      	movs	r2, #99	; 0x63
 8003498:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800349a:	4b2c      	ldr	r3, [pc, #176]	; (800354c <MX_TIM2_Init+0xfc>)
 800349c:	2200      	movs	r2, #0
 800349e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034a0:	4b2a      	ldr	r3, [pc, #168]	; (800354c <MX_TIM2_Init+0xfc>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80034a6:	4829      	ldr	r0, [pc, #164]	; (800354c <MX_TIM2_Init+0xfc>)
 80034a8:	f008 f8bc 	bl	800b624 <HAL_TIM_Base_Init>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80034b2:	f7ff fea5 	bl	8003200 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80034bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034c0:	4619      	mov	r1, r3
 80034c2:	4822      	ldr	r0, [pc, #136]	; (800354c <MX_TIM2_Init+0xfc>)
 80034c4:	f008 fac8 	bl	800ba58 <HAL_TIM_ConfigClockSource>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80034ce:	f7ff fe97 	bl	8003200 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80034d2:	481e      	ldr	r0, [pc, #120]	; (800354c <MX_TIM2_Init+0xfc>)
 80034d4:	f008 f8f5 	bl	800b6c2 <HAL_TIM_PWM_Init>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80034de:	f7ff fe8f 	bl	8003200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034e2:	2300      	movs	r3, #0
 80034e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034e6:	2300      	movs	r3, #0
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80034ea:	f107 0320 	add.w	r3, r7, #32
 80034ee:	4619      	mov	r1, r3
 80034f0:	4816      	ldr	r0, [pc, #88]	; (800354c <MX_TIM2_Init+0xfc>)
 80034f2:	f008 fe45 	bl	800c180 <HAL_TIMEx_MasterConfigSynchronization>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80034fc:	f7ff fe80 	bl	8003200 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003500:	2360      	movs	r3, #96	; 0x60
 8003502:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003504:	2300      	movs	r3, #0
 8003506:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003508:	2300      	movs	r3, #0
 800350a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003510:	1d3b      	adds	r3, r7, #4
 8003512:	2200      	movs	r2, #0
 8003514:	4619      	mov	r1, r3
 8003516:	480d      	ldr	r0, [pc, #52]	; (800354c <MX_TIM2_Init+0xfc>)
 8003518:	f008 f9dc 	bl	800b8d4 <HAL_TIM_PWM_ConfigChannel>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8003522:	f7ff fe6d 	bl	8003200 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003526:	1d3b      	adds	r3, r7, #4
 8003528:	2204      	movs	r2, #4
 800352a:	4619      	mov	r1, r3
 800352c:	4807      	ldr	r0, [pc, #28]	; (800354c <MX_TIM2_Init+0xfc>)
 800352e:	f008 f9d1 	bl	800b8d4 <HAL_TIM_PWM_ConfigChannel>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8003538:	f7ff fe62 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800353c:	4803      	ldr	r0, [pc, #12]	; (800354c <MX_TIM2_Init+0xfc>)
 800353e:	f000 f953 	bl	80037e8 <HAL_TIM_MspPostInit>

}
 8003542:	bf00      	nop
 8003544:	3738      	adds	r7, #56	; 0x38
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20006678 	.word	0x20006678

08003550 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08e      	sub	sp, #56	; 0x38
 8003554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003556:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	605a      	str	r2, [r3, #4]
 8003560:	609a      	str	r2, [r3, #8]
 8003562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003564:	f107 0320 	add.w	r3, r7, #32
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800356e:	1d3b      	adds	r3, r7, #4
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	60da      	str	r2, [r3, #12]
 800357a:	611a      	str	r2, [r3, #16]
 800357c:	615a      	str	r2, [r3, #20]
 800357e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003580:	4b31      	ldr	r3, [pc, #196]	; (8003648 <MX_TIM3_Init+0xf8>)
 8003582:	4a32      	ldr	r2, [pc, #200]	; (800364c <MX_TIM3_Init+0xfc>)
 8003584:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 8003586:	4b30      	ldr	r3, [pc, #192]	; (8003648 <MX_TIM3_Init+0xf8>)
 8003588:	2217      	movs	r2, #23
 800358a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800358c:	4b2e      	ldr	r3, [pc, #184]	; (8003648 <MX_TIM3_Init+0xf8>)
 800358e:	2200      	movs	r2, #0
 8003590:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8003592:	4b2d      	ldr	r3, [pc, #180]	; (8003648 <MX_TIM3_Init+0xf8>)
 8003594:	2263      	movs	r2, #99	; 0x63
 8003596:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003598:	4b2b      	ldr	r3, [pc, #172]	; (8003648 <MX_TIM3_Init+0xf8>)
 800359a:	2200      	movs	r2, #0
 800359c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800359e:	4b2a      	ldr	r3, [pc, #168]	; (8003648 <MX_TIM3_Init+0xf8>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80035a4:	4828      	ldr	r0, [pc, #160]	; (8003648 <MX_TIM3_Init+0xf8>)
 80035a6:	f008 f83d 	bl	800b624 <HAL_TIM_Base_Init>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80035b0:	f7ff fe26 	bl	8003200 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035be:	4619      	mov	r1, r3
 80035c0:	4821      	ldr	r0, [pc, #132]	; (8003648 <MX_TIM3_Init+0xf8>)
 80035c2:	f008 fa49 	bl	800ba58 <HAL_TIM_ConfigClockSource>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80035cc:	f7ff fe18 	bl	8003200 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80035d0:	481d      	ldr	r0, [pc, #116]	; (8003648 <MX_TIM3_Init+0xf8>)
 80035d2:	f008 f876 	bl	800b6c2 <HAL_TIM_PWM_Init>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80035dc:	f7ff fe10 	bl	8003200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035e0:	2300      	movs	r3, #0
 80035e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035e4:	2300      	movs	r3, #0
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035e8:	f107 0320 	add.w	r3, r7, #32
 80035ec:	4619      	mov	r1, r3
 80035ee:	4816      	ldr	r0, [pc, #88]	; (8003648 <MX_TIM3_Init+0xf8>)
 80035f0:	f008 fdc6 	bl	800c180 <HAL_TIMEx_MasterConfigSynchronization>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80035fa:	f7ff fe01 	bl	8003200 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035fe:	2360      	movs	r3, #96	; 0x60
 8003600:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003602:	2300      	movs	r3, #0
 8003604:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003606:	2300      	movs	r3, #0
 8003608:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800360e:	1d3b      	adds	r3, r7, #4
 8003610:	2200      	movs	r2, #0
 8003612:	4619      	mov	r1, r3
 8003614:	480c      	ldr	r0, [pc, #48]	; (8003648 <MX_TIM3_Init+0xf8>)
 8003616:	f008 f95d 	bl	800b8d4 <HAL_TIM_PWM_ConfigChannel>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8003620:	f7ff fdee 	bl	8003200 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003624:	1d3b      	adds	r3, r7, #4
 8003626:	2204      	movs	r2, #4
 8003628:	4619      	mov	r1, r3
 800362a:	4807      	ldr	r0, [pc, #28]	; (8003648 <MX_TIM3_Init+0xf8>)
 800362c:	f008 f952 	bl	800b8d4 <HAL_TIM_PWM_ConfigChannel>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8003636:	f7ff fde3 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800363a:	4803      	ldr	r0, [pc, #12]	; (8003648 <MX_TIM3_Init+0xf8>)
 800363c:	f000 f8d4 	bl	80037e8 <HAL_TIM_MspPostInit>

}
 8003640:	bf00      	nop
 8003642:	3738      	adds	r7, #56	; 0x38
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	200066c0 	.word	0x200066c0
 800364c:	40000400 	.word	0x40000400

08003650 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08e      	sub	sp, #56	; 0x38
 8003654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003656:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	605a      	str	r2, [r3, #4]
 8003660:	609a      	str	r2, [r3, #8]
 8003662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003664:	f107 0320 	add.w	r3, r7, #32
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800366e:	1d3b      	adds	r3, r7, #4
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	60da      	str	r2, [r3, #12]
 800367a:	611a      	str	r2, [r3, #16]
 800367c:	615a      	str	r2, [r3, #20]
 800367e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003680:	4b31      	ldr	r3, [pc, #196]	; (8003748 <MX_TIM4_Init+0xf8>)
 8003682:	4a32      	ldr	r2, [pc, #200]	; (800374c <MX_TIM4_Init+0xfc>)
 8003684:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 23;
 8003686:	4b30      	ldr	r3, [pc, #192]	; (8003748 <MX_TIM4_Init+0xf8>)
 8003688:	2217      	movs	r2, #23
 800368a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800368c:	4b2e      	ldr	r3, [pc, #184]	; (8003748 <MX_TIM4_Init+0xf8>)
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8003692:	4b2d      	ldr	r3, [pc, #180]	; (8003748 <MX_TIM4_Init+0xf8>)
 8003694:	2263      	movs	r2, #99	; 0x63
 8003696:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003698:	4b2b      	ldr	r3, [pc, #172]	; (8003748 <MX_TIM4_Init+0xf8>)
 800369a:	2200      	movs	r2, #0
 800369c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800369e:	4b2a      	ldr	r3, [pc, #168]	; (8003748 <MX_TIM4_Init+0xf8>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80036a4:	4828      	ldr	r0, [pc, #160]	; (8003748 <MX_TIM4_Init+0xf8>)
 80036a6:	f007 ffbd 	bl	800b624 <HAL_TIM_Base_Init>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80036b0:	f7ff fda6 	bl	8003200 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80036ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036be:	4619      	mov	r1, r3
 80036c0:	4821      	ldr	r0, [pc, #132]	; (8003748 <MX_TIM4_Init+0xf8>)
 80036c2:	f008 f9c9 	bl	800ba58 <HAL_TIM_ConfigClockSource>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80036cc:	f7ff fd98 	bl	8003200 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80036d0:	481d      	ldr	r0, [pc, #116]	; (8003748 <MX_TIM4_Init+0xf8>)
 80036d2:	f007 fff6 	bl	800b6c2 <HAL_TIM_PWM_Init>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80036dc:	f7ff fd90 	bl	8003200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036e0:	2300      	movs	r3, #0
 80036e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036e4:	2300      	movs	r3, #0
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80036e8:	f107 0320 	add.w	r3, r7, #32
 80036ec:	4619      	mov	r1, r3
 80036ee:	4816      	ldr	r0, [pc, #88]	; (8003748 <MX_TIM4_Init+0xf8>)
 80036f0:	f008 fd46 	bl	800c180 <HAL_TIMEx_MasterConfigSynchronization>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80036fa:	f7ff fd81 	bl	8003200 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036fe:	2360      	movs	r3, #96	; 0x60
 8003700:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800370e:	1d3b      	adds	r3, r7, #4
 8003710:	2200      	movs	r2, #0
 8003712:	4619      	mov	r1, r3
 8003714:	480c      	ldr	r0, [pc, #48]	; (8003748 <MX_TIM4_Init+0xf8>)
 8003716:	f008 f8dd 	bl	800b8d4 <HAL_TIM_PWM_ConfigChannel>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8003720:	f7ff fd6e 	bl	8003200 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003724:	1d3b      	adds	r3, r7, #4
 8003726:	2204      	movs	r2, #4
 8003728:	4619      	mov	r1, r3
 800372a:	4807      	ldr	r0, [pc, #28]	; (8003748 <MX_TIM4_Init+0xf8>)
 800372c:	f008 f8d2 	bl	800b8d4 <HAL_TIM_PWM_ConfigChannel>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8003736:	f7ff fd63 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800373a:	4803      	ldr	r0, [pc, #12]	; (8003748 <MX_TIM4_Init+0xf8>)
 800373c:	f000 f854 	bl	80037e8 <HAL_TIM_MspPostInit>

}
 8003740:	bf00      	nop
 8003742:	3738      	adds	r7, #56	; 0x38
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	20006708 	.word	0x20006708
 800374c:	40000800 	.word	0x40000800

08003750 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003760:	d10e      	bne.n	8003780 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <HAL_TIM_Base_MspInit+0x8c>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	4a1c      	ldr	r2, [pc, #112]	; (80037dc <HAL_TIM_Base_MspInit+0x8c>)
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	6413      	str	r3, [r2, #64]	; 0x40
 8003772:	4b1a      	ldr	r3, [pc, #104]	; (80037dc <HAL_TIM_Base_MspInit+0x8c>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800377e:	e026      	b.n	80037ce <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a16      	ldr	r2, [pc, #88]	; (80037e0 <HAL_TIM_Base_MspInit+0x90>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d10e      	bne.n	80037a8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	613b      	str	r3, [r7, #16]
 800378e:	4b13      	ldr	r3, [pc, #76]	; (80037dc <HAL_TIM_Base_MspInit+0x8c>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	4a12      	ldr	r2, [pc, #72]	; (80037dc <HAL_TIM_Base_MspInit+0x8c>)
 8003794:	f043 0302 	orr.w	r3, r3, #2
 8003798:	6413      	str	r3, [r2, #64]	; 0x40
 800379a:	4b10      	ldr	r3, [pc, #64]	; (80037dc <HAL_TIM_Base_MspInit+0x8c>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	613b      	str	r3, [r7, #16]
 80037a4:	693b      	ldr	r3, [r7, #16]
}
 80037a6:	e012      	b.n	80037ce <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM4)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a0d      	ldr	r2, [pc, #52]	; (80037e4 <HAL_TIM_Base_MspInit+0x94>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d10d      	bne.n	80037ce <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037b2:	2300      	movs	r3, #0
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	4b09      	ldr	r3, [pc, #36]	; (80037dc <HAL_TIM_Base_MspInit+0x8c>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	4a08      	ldr	r2, [pc, #32]	; (80037dc <HAL_TIM_Base_MspInit+0x8c>)
 80037bc:	f043 0304 	orr.w	r3, r3, #4
 80037c0:	6413      	str	r3, [r2, #64]	; 0x40
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_TIM_Base_MspInit+0x8c>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]
}
 80037ce:	bf00      	nop
 80037d0:	371c      	adds	r7, #28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40000400 	.word	0x40000400
 80037e4:	40000800 	.word	0x40000800

080037e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08c      	sub	sp, #48	; 0x30
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f0:	f107 031c 	add.w	r3, r7, #28
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	605a      	str	r2, [r3, #4]
 80037fa:	609a      	str	r2, [r3, #8]
 80037fc:	60da      	str	r2, [r3, #12]
 80037fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003808:	d13d      	bne.n	8003886 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	4b43      	ldr	r3, [pc, #268]	; (800391c <HAL_TIM_MspPostInit+0x134>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	4a42      	ldr	r2, [pc, #264]	; (800391c <HAL_TIM_MspPostInit+0x134>)
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	6313      	str	r3, [r2, #48]	; 0x30
 800381a:	4b40      	ldr	r3, [pc, #256]	; (800391c <HAL_TIM_MspPostInit+0x134>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	61bb      	str	r3, [r7, #24]
 8003824:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	4b3c      	ldr	r3, [pc, #240]	; (800391c <HAL_TIM_MspPostInit+0x134>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	4a3b      	ldr	r2, [pc, #236]	; (800391c <HAL_TIM_MspPostInit+0x134>)
 8003830:	f043 0302 	orr.w	r3, r3, #2
 8003834:	6313      	str	r3, [r2, #48]	; 0x30
 8003836:	4b39      	ldr	r3, [pc, #228]	; (800391c <HAL_TIM_MspPostInit+0x134>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003848:	2302      	movs	r3, #2
 800384a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384c:	2300      	movs	r3, #0
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003850:	2300      	movs	r3, #0
 8003852:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003854:	2301      	movs	r3, #1
 8003856:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003858:	f107 031c 	add.w	r3, r7, #28
 800385c:	4619      	mov	r1, r3
 800385e:	4830      	ldr	r0, [pc, #192]	; (8003920 <HAL_TIM_MspPostInit+0x138>)
 8003860:	f006 f834 	bl	80098cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003864:	2308      	movs	r3, #8
 8003866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003868:	2302      	movs	r3, #2
 800386a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386c:	2300      	movs	r3, #0
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003870:	2300      	movs	r3, #0
 8003872:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003874:	2301      	movs	r3, #1
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003878:	f107 031c 	add.w	r3, r7, #28
 800387c:	4619      	mov	r1, r3
 800387e:	4829      	ldr	r0, [pc, #164]	; (8003924 <HAL_TIM_MspPostInit+0x13c>)
 8003880:	f006 f824 	bl	80098cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003884:	e046      	b.n	8003914 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM3)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a27      	ldr	r2, [pc, #156]	; (8003928 <HAL_TIM_MspPostInit+0x140>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d11e      	bne.n	80038ce <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003890:	2300      	movs	r3, #0
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	4b21      	ldr	r3, [pc, #132]	; (800391c <HAL_TIM_MspPostInit+0x134>)
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	4a20      	ldr	r2, [pc, #128]	; (800391c <HAL_TIM_MspPostInit+0x134>)
 800389a:	f043 0302 	orr.w	r3, r3, #2
 800389e:	6313      	str	r3, [r2, #48]	; 0x30
 80038a0:	4b1e      	ldr	r3, [pc, #120]	; (800391c <HAL_TIM_MspPostInit+0x134>)
 80038a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80038ac:	2330      	movs	r3, #48	; 0x30
 80038ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b0:	2302      	movs	r3, #2
 80038b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b8:	2300      	movs	r3, #0
 80038ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038bc:	2302      	movs	r3, #2
 80038be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038c0:	f107 031c 	add.w	r3, r7, #28
 80038c4:	4619      	mov	r1, r3
 80038c6:	4817      	ldr	r0, [pc, #92]	; (8003924 <HAL_TIM_MspPostInit+0x13c>)
 80038c8:	f006 f800 	bl	80098cc <HAL_GPIO_Init>
}
 80038cc:	e022      	b.n	8003914 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a16      	ldr	r2, [pc, #88]	; (800392c <HAL_TIM_MspPostInit+0x144>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d11d      	bne.n	8003914 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038d8:	2300      	movs	r3, #0
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	4b0f      	ldr	r3, [pc, #60]	; (800391c <HAL_TIM_MspPostInit+0x134>)
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e0:	4a0e      	ldr	r2, [pc, #56]	; (800391c <HAL_TIM_MspPostInit+0x134>)
 80038e2:	f043 0302 	orr.w	r3, r3, #2
 80038e6:	6313      	str	r3, [r2, #48]	; 0x30
 80038e8:	4b0c      	ldr	r3, [pc, #48]	; (800391c <HAL_TIM_MspPostInit+0x134>)
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038f4:	23c0      	movs	r3, #192	; 0xc0
 80038f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f8:	2302      	movs	r3, #2
 80038fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fc:	2300      	movs	r3, #0
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003900:	2300      	movs	r3, #0
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003904:	2302      	movs	r3, #2
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003908:	f107 031c 	add.w	r3, r7, #28
 800390c:	4619      	mov	r1, r3
 800390e:	4805      	ldr	r0, [pc, #20]	; (8003924 <HAL_TIM_MspPostInit+0x13c>)
 8003910:	f005 ffdc 	bl	80098cc <HAL_GPIO_Init>
}
 8003914:	bf00      	nop
 8003916:	3730      	adds	r7, #48	; 0x30
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40023800 	.word	0x40023800
 8003920:	40020000 	.word	0x40020000
 8003924:	40020400 	.word	0x40020400
 8003928:	40000400 	.word	0x40000400
 800392c:	40000800 	.word	0x40000800

08003930 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 8003934:	4b02      	ldr	r3, [pc, #8]	; (8003940 <tud_descriptor_device_cb+0x10>)
}
 8003936:	4618      	mov	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	080116c0 	.word	0x080116c0

08003944 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	71fb      	strb	r3, [r7, #7]

#if TUD_OPT_HIGH_SPEED
  // Although we are highspeed, host may be fullspeed.
  return (tud_speed_get() == TUSB_SPEED_HIGH) ?  desc_hs_configuration : desc_fs_configuration;
#else
  return desc_fs_configuration;
 800394e:	4b03      	ldr	r3, [pc, #12]	; (800395c <tud_descriptor_configuration_cb+0x18>)
#endif
}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	080116d4 	.word	0x080116d4

08003960 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	460a      	mov	r2, r1
 800396a:	71fb      	strb	r3, [r7, #7]
 800396c:	4613      	mov	r3, r2
 800396e:	80bb      	strh	r3, [r7, #4]
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d108      	bne.n	8003988 <tud_descriptor_string_cb+0x28>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8003976:	4b21      	ldr	r3, [pc, #132]	; (80039fc <tud_descriptor_string_cb+0x9c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	b29a      	uxth	r2, r3
 800397e:	4b20      	ldr	r3, [pc, #128]	; (8003a00 <tud_descriptor_string_cb+0xa0>)
 8003980:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
 8003986:	e027      	b.n	80039d8 <tud_descriptor_string_cb+0x78>
  }else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 8003988:	79fb      	ldrb	r3, [r7, #7]
 800398a:	2b06      	cmp	r3, #6
 800398c:	d901      	bls.n	8003992 <tud_descriptor_string_cb+0x32>
 800398e:	2300      	movs	r3, #0
 8003990:	e030      	b.n	80039f4 <tud_descriptor_string_cb+0x94>

    const char* str = string_desc_arr[index];
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	4a19      	ldr	r2, [pc, #100]	; (80039fc <tud_descriptor_string_cb+0x9c>)
 8003996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800399a:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = (uint8_t) strlen(str);
 800399c:	68b8      	ldr	r0, [r7, #8]
 800399e:	f7fc fc7f 	bl	80002a0 <strlen>
 80039a2:	4603      	mov	r3, r0
 80039a4:	73fb      	strb	r3, [r7, #15]
    if ( chr_count > 31 ) chr_count = 31;
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	2b1f      	cmp	r3, #31
 80039aa:	d901      	bls.n	80039b0 <tud_descriptor_string_cb+0x50>
 80039ac:	231f      	movs	r3, #31
 80039ae:	73fb      	strb	r3, [r7, #15]

    // Convert ASCII string into UTF-16
    for(uint8_t i=0; i<chr_count; i++)
 80039b0:	2300      	movs	r3, #0
 80039b2:	73bb      	strb	r3, [r7, #14]
 80039b4:	e00c      	b.n	80039d0 <tud_descriptor_string_cb+0x70>
    {
      _desc_str[1+i] = str[i];
 80039b6:	7bbb      	ldrb	r3, [r7, #14]
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	4413      	add	r3, r2
 80039bc:	781a      	ldrb	r2, [r3, #0]
 80039be:	7bbb      	ldrb	r3, [r7, #14]
 80039c0:	3301      	adds	r3, #1
 80039c2:	b291      	uxth	r1, r2
 80039c4:	4a0e      	ldr	r2, [pc, #56]	; (8003a00 <tud_descriptor_string_cb+0xa0>)
 80039c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i=0; i<chr_count; i++)
 80039ca:	7bbb      	ldrb	r3, [r7, #14]
 80039cc:	3301      	adds	r3, #1
 80039ce:	73bb      	strb	r3, [r7, #14]
 80039d0:	7bba      	ldrb	r2, [r7, #14]
 80039d2:	7bfb      	ldrb	r3, [r7, #15]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d3ee      	bcc.n	80039b6 <tud_descriptor_string_cb+0x56>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3301      	adds	r3, #1
 80039de:	b29b      	uxth	r3, r3
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	b21b      	sxth	r3, r3
 80039e6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80039ea:	b21b      	sxth	r3, r3
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	4b04      	ldr	r3, [pc, #16]	; (8003a00 <tud_descriptor_string_cb+0xa0>)
 80039f0:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 80039f2:	4b03      	ldr	r3, [pc, #12]	; (8003a00 <tud_descriptor_string_cb+0xa0>)
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20000414 	.word	0x20000414
 8003a00:	20006750 	.word	0x20006750

08003a04 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003a08:	4b14      	ldr	r3, [pc, #80]	; (8003a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003a0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003a10:	4b12      	ldr	r3, [pc, #72]	; (8003a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a12:	2204      	movs	r2, #4
 8003a14:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003a16:	4b11      	ldr	r3, [pc, #68]	; (8003a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a18:	2202      	movs	r2, #2
 8003a1a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003a1c:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003a22:	4b0e      	ldr	r3, [pc, #56]	; (8003a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a24:	2202      	movs	r2, #2
 8003a26:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003a28:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003a2e:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003a34:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003a3a:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003a40:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003a46:	4805      	ldr	r0, [pc, #20]	; (8003a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a48:	f006 ff1e 	bl	800a888 <HAL_PCD_Init>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003a52:	f7ff fbd5 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20006790 	.word	0x20006790

08003a60 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08a      	sub	sp, #40	; 0x28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a68:	f107 0314 	add.w	r3, r7, #20
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	605a      	str	r2, [r3, #4]
 8003a72:	609a      	str	r2, [r3, #8]
 8003a74:	60da      	str	r2, [r3, #12]
 8003a76:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a80:	d13a      	bne.n	8003af8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	4b1e      	ldr	r3, [pc, #120]	; (8003b00 <HAL_PCD_MspInit+0xa0>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	4a1d      	ldr	r2, [pc, #116]	; (8003b00 <HAL_PCD_MspInit+0xa0>)
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	6313      	str	r3, [r2, #48]	; 0x30
 8003a92:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <HAL_PCD_MspInit+0xa0>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003a9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aac:	2303      	movs	r3, #3
 8003aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003ab0:	230a      	movs	r3, #10
 8003ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab4:	f107 0314 	add.w	r3, r7, #20
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4812      	ldr	r0, [pc, #72]	; (8003b04 <HAL_PCD_MspInit+0xa4>)
 8003abc:	f005 ff06 	bl	80098cc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003ac0:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <HAL_PCD_MspInit+0xa0>)
 8003ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac4:	4a0e      	ldr	r2, [pc, #56]	; (8003b00 <HAL_PCD_MspInit+0xa0>)
 8003ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aca:	6353      	str	r3, [r2, #52]	; 0x34
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_PCD_MspInit+0xa0>)
 8003ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad4:	4a0a      	ldr	r2, [pc, #40]	; (8003b00 <HAL_PCD_MspInit+0xa0>)
 8003ad6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ada:	6453      	str	r3, [r2, #68]	; 0x44
 8003adc:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <HAL_PCD_MspInit+0xa0>)
 8003ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003ae8:	2200      	movs	r2, #0
 8003aea:	2100      	movs	r1, #0
 8003aec:	2043      	movs	r0, #67	; 0x43
 8003aee:	f005 f836 	bl	8008b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003af2:	2043      	movs	r0, #67	; 0x43
 8003af4:	f005 f84f 	bl	8008b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003af8:	bf00      	nop
 8003afa:	3728      	adds	r7, #40	; 0x28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40023800 	.word	0x40023800
 8003b04:	40020000 	.word	0x40020000

08003b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b0c:	480d      	ldr	r0, [pc, #52]	; (8003b44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003b0e:	490e      	ldr	r1, [pc, #56]	; (8003b48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003b10:	4a0e      	ldr	r2, [pc, #56]	; (8003b4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b14:	e002      	b.n	8003b1c <LoopCopyDataInit>

08003b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b1a:	3304      	adds	r3, #4

08003b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b20:	d3f9      	bcc.n	8003b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b22:	4a0b      	ldr	r2, [pc, #44]	; (8003b50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b24:	4c0b      	ldr	r4, [pc, #44]	; (8003b54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b28:	e001      	b.n	8003b2e <LoopFillZerobss>

08003b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b2c:	3204      	adds	r2, #4

08003b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b30:	d3fb      	bcc.n	8003b2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b32:	f7ff fc7b 	bl	800342c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b36:	f00b fdbd 	bl	800f6b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b3a:	f7fd fd53 	bl	80015e4 <main>
  bx  lr    
 8003b3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b48:	200004b8 	.word	0x200004b8
  ldr r2, =_sidata
 8003b4c:	08024d94 	.word	0x08024d94
  ldr r2, =_sbss
 8003b50:	200004b8 	.word	0x200004b8
  ldr r4, =_ebss
 8003b54:	20007084 	.word	0x20007084

08003b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b58:	e7fe      	b.n	8003b58 <ADC_IRQHandler>

08003b5a <_prep_out_transaction>:
// INTERNAL OBJECT & FUNCTION DECLARATION
//--------------------------------------------------------------------+
CFG_TUSB_MEM_SECTION static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];

static bool _prep_out_transaction (cdcd_interface_t* p_cdc)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  uint8_t const rhport = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	73fb      	strb	r3, [r7, #15]
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3310      	adds	r3, #16
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f001 fc0d 	bl	800538a <tu_fifo_remaining>
 8003b70:	4603      	mov	r3, r0
 8003b72:	81bb      	strh	r3, [r7, #12]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 8003b74:	89bb      	ldrh	r3, [r7, #12]
 8003b76:	2b3f      	cmp	r3, #63	; 0x3f
 8003b78:	d801      	bhi.n	8003b7e <_prep_out_transaction+0x24>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e02b      	b.n	8003bd6 <_prep_out_transaction+0x7c>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	78da      	ldrb	r2, [r3, #3]
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	4611      	mov	r1, r2
 8003b86:	4618      	mov	r0, r3
 8003b88:	f002 feb2 	bl	80068f0 <usbd_edpt_claim>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f083 0301 	eor.w	r3, r3, #1
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <_prep_out_transaction+0x42>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	e01c      	b.n	8003bd6 <_prep_out_transaction+0x7c>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3310      	adds	r3, #16
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f001 fbf2 	bl	800538a <tu_fifo_remaining>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	81bb      	strh	r3, [r7, #12]

  if ( available >= sizeof(p_cdc->epout_buf) )
 8003baa:	89bb      	ldrh	r3, [r7, #12]
 8003bac:	2b3f      	cmp	r3, #63	; 0x3f
 8003bae:	d90a      	bls.n	8003bc6 <_prep_out_transaction+0x6c>
  {
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	78d9      	ldrb	r1, [r3, #3]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 8003bba:	7bf8      	ldrb	r0, [r7, #15]
 8003bbc:	2340      	movs	r3, #64	; 0x40
 8003bbe:	f002 feeb 	bl	8006998 <usbd_edpt_xfer>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	e007      	b.n	8003bd6 <_prep_out_transaction+0x7c>
  }else
  {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	78da      	ldrb	r2, [r3, #3]
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
 8003bcc:	4611      	mov	r1, r2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f002 feb8 	bl	8006944 <usbd_edpt_release>

    return false;
 8003bd4:	2300      	movs	r3, #0
  }
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <tud_cdc_n_available>:

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4603      	mov	r3, r0
 8003be8:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	f44f 729c 	mov.w	r2, #312	; 0x138
 8003bf0:	fb02 f303 	mul.w	r3, r2, r3
 8003bf4:	3310      	adds	r3, #16
 8003bf6:	4a05      	ldr	r2, [pc, #20]	; (8003c0c <tud_cdc_n_available+0x2c>)
 8003bf8:	4413      	add	r3, r2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f001 fb94 	bl	8005328 <tu_fifo_count>
 8003c00:	4603      	mov	r3, r0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20006c9c 	.word	0x20006c9c

08003c10 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
 8003c1c:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	f44f 729c 	mov.w	r2, #312	; 0x138
 8003c24:	fb02 f303 	mul.w	r3, r2, r3
 8003c28:	4a0a      	ldr	r2, [pc, #40]	; (8003c54 <tud_cdc_n_read+0x44>)
 8003c2a:	4413      	add	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) bufsize);
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	3310      	adds	r3, #16
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	b292      	uxth	r2, r2
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f001 fbdc 	bl	80053f6 <tu_fifo_read_n>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(p_cdc);
 8003c42:	6978      	ldr	r0, [r7, #20]
 8003c44:	f7ff ff89 	bl	8003b5a <_prep_out_transaction>
  return num_read;
 8003c48:	693b      	ldr	r3, [r7, #16]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20006c9c 	.word	0x20006c9c

08003c58 <tud_cdc_n_write>:

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, void const* buffer, uint32_t bufsize)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
 8003c68:	f44f 729c 	mov.w	r2, #312	; 0x138
 8003c6c:	fb02 f303 	mul.w	r3, r2, r3
 8003c70:	4a0e      	ldr	r2, [pc, #56]	; (8003cac <tud_cdc_n_write+0x54>)
 8003c72:	4413      	add	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	3324      	adds	r3, #36	; 0x24
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	b292      	uxth	r2, r2
 8003c7e:	68b9      	ldr	r1, [r7, #8]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f001 fc17 	bl	80054b4 <tu_fifo_write_n>
 8003c86:	4603      	mov	r3, r0
 8003c88:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  if ( tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE )
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	3324      	adds	r3, #36	; 0x24
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f001 fb4a 	bl	8005328 <tu_fifo_count>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b3f      	cmp	r3, #63	; 0x3f
 8003c98:	d903      	bls.n	8003ca2 <tud_cdc_n_write+0x4a>
  {
    tud_cdc_n_write_flush(itf);
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 f807 	bl	8003cb0 <tud_cdc_n_write_flush>
  }

  return ret;
 8003ca2:	8a7b      	ldrh	r3, [r7, #18]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	20006c9c 	.word	0x20006c9c

08003cb0 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8003cba:	79fb      	ldrb	r3, [r7, #7]
 8003cbc:	f44f 729c 	mov.w	r2, #312	; 0x138
 8003cc0:	fb02 f303 	mul.w	r3, r2, r3
 8003cc4:	4a36      	ldr	r2, [pc, #216]	; (8003da0 <tud_cdc_n_write_flush+0xf0>)
 8003cc6:	4413      	add	r3, r2
 8003cc8:	617b      	str	r3, [r7, #20]

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
 8003cca:	f001 fc7d 	bl	80055c8 <tud_mounted>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d009      	beq.n	8003ce8 <tud_cdc_n_write_flush+0x38>
 8003cd4:	f001 fc8a 	bl	80055ec <tud_suspended>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f083 0301 	eor.w	r3, r3, #1
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <tud_cdc_n_write_flush+0x38>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e000      	b.n	8003cea <tud_cdc_n_write_flush+0x3a>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
 8003cf0:	f083 0301 	eor.w	r3, r3, #1
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <tud_cdc_n_write_flush+0x4e>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	e04c      	b.n	8003d98 <tud_cdc_n_write_flush+0xe8>

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	3324      	adds	r3, #36	; 0x24
 8003d02:	4618      	mov	r0, r3
 8003d04:	f001 fb10 	bl	8005328 <tu_fifo_count>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <tud_cdc_n_write_flush+0x62>
 8003d0e:	2300      	movs	r3, #0
 8003d10:	e042      	b.n	8003d98 <tud_cdc_n_write_flush+0xe8>

  uint8_t const rhport = 0;
 8003d12:	2300      	movs	r3, #0
 8003d14:	74fb      	strb	r3, [r7, #19]

  // Claim the endpoint
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	789a      	ldrb	r2, [r3, #2]
 8003d1a:	7cfb      	ldrb	r3, [r7, #19]
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f002 fde6 	bl	80068f0 <usbd_edpt_claim>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f083 0301 	eor.w	r3, r3, #1
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <tud_cdc_n_write_flush+0x84>
 8003d30:	2300      	movs	r3, #0
 8003d32:	e031      	b.n	8003d98 <tud_cdc_n_write_flush+0xe8>

  // Pull data from FIFO
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	33f8      	adds	r3, #248	; 0xf8
 8003d3e:	2240      	movs	r2, #64	; 0x40
 8003d40:	4619      	mov	r1, r3
 8003d42:	f001 fb58 	bl	80053f6 <tu_fifo_read_n>
 8003d46:	4603      	mov	r3, r0
 8003d48:	823b      	strh	r3, [r7, #16]

  if ( count )
 8003d4a:	8a3b      	ldrh	r3, [r7, #16]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d01b      	beq.n	8003d88 <tud_cdc_n_write_flush+0xd8>
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	7899      	ldrb	r1, [r3, #2]
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 8003d5a:	8a3b      	ldrh	r3, [r7, #16]
 8003d5c:	7cf8      	ldrb	r0, [r7, #19]
 8003d5e:	f002 fe1b 	bl	8006998 <usbd_edpt_xfer>
 8003d62:	4603      	mov	r3, r0
 8003d64:	f083 0301 	eor.w	r3, r3, #1
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <tud_cdc_n_write_flush+0xd4>
 8003d6e:	4b0d      	ldr	r3, [pc, #52]	; (8003da4 <tud_cdc_n_write_flush+0xf4>)
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d000      	beq.n	8003d80 <tud_cdc_n_write_flush+0xd0>
 8003d7e:	be00      	bkpt	0x0000
 8003d80:	2300      	movs	r3, #0
 8003d82:	e009      	b.n	8003d98 <tud_cdc_n_write_flush+0xe8>
    return count;
 8003d84:	8a3b      	ldrh	r3, [r7, #16]
 8003d86:	e007      	b.n	8003d98 <tud_cdc_n_write_flush+0xe8>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	789a      	ldrb	r2, [r3, #2]
 8003d8c:	7cfb      	ldrb	r3, [r7, #19]
 8003d8e:	4611      	mov	r1, r2
 8003d90:	4618      	mov	r0, r3
 8003d92:	f002 fdd7 	bl	8006944 <usbd_edpt_release>
    return 0;
 8003d96:	2300      	movs	r3, #0
  }
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	20006c9c 	.word	0x20006c9c
 8003da4:	e000edf0 	.word	0xe000edf0

08003da8 <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8003dae:	f44f 729c 	mov.w	r2, #312	; 0x138
 8003db2:	2100      	movs	r1, #0
 8003db4:	4824      	ldr	r0, [pc, #144]	; (8003e48 <cdcd_init+0xa0>)
 8003db6:	f00b fcaf 	bl	800f718 <memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8003dba:	2300      	movs	r3, #0
 8003dbc:	71fb      	strb	r3, [r7, #7]
 8003dbe:	e03b      	b.n	8003e38 <cdcd_init+0x90>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8003dc0:	79fb      	ldrb	r3, [r7, #7]
 8003dc2:	f44f 729c 	mov.w	r2, #312	; 0x138
 8003dc6:	fb02 f303 	mul.w	r3, r2, r3
 8003dca:	4a1f      	ldr	r2, [pc, #124]	; (8003e48 <cdcd_init+0xa0>)
 8003dcc:	4413      	add	r3, r2
 8003dce:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	22ff      	movs	r2, #255	; 0xff
 8003dd4:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003de2:	f443 4342 	orr.w	r3, r3, #49664	; 0xc200
 8003de6:	80d3      	strh	r3, [r2, #6]
 8003de8:	2300      	movs	r3, #0
 8003dea:	f043 0301 	orr.w	r3, r3, #1
 8003dee:	8113      	strh	r3, [r2, #8]
    p_cdc->line_coding.stop_bits = 0;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2200      	movs	r2, #0
 8003df4:	729a      	strb	r2, [r3, #10]
    p_cdc->line_coding.parity    = 0;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	72da      	strb	r2, [r3, #11]
    p_cdc->line_coding.data_bits = 8;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	2208      	movs	r2, #8
 8003e00:	731a      	strb	r2, [r3, #12]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	f103 0010 	add.w	r0, r3, #16
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003e0e:	2300      	movs	r3, #0
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	2301      	movs	r3, #1
 8003e14:	2240      	movs	r2, #64	; 0x40
 8003e16:	f000 fe16 	bl	8004a46 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8003e26:	2301      	movs	r3, #1
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	2240      	movs	r2, #64	; 0x40
 8003e2e:	f000 fe0a 	bl	8004a46 <tu_fifo_config>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	3301      	adds	r3, #1
 8003e36:	71fb      	strb	r3, [r7, #7]
 8003e38:	79fb      	ldrb	r3, [r7, #7]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0c0      	beq.n	8003dc0 <cdcd_init+0x18>
#if CFG_FIFO_MUTEX
    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
#endif
  }
}
 8003e3e:	bf00      	nop
 8003e40:	bf00      	nop
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	20006c9c 	.word	0x20006c9c

08003e4c <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8003e56:	2300      	movs	r3, #0
 8003e58:	73fb      	strb	r3, [r7, #15]
 8003e5a:	e01f      	b.n	8003e9c <cdcd_reset+0x50>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
 8003e5e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8003e62:	fb02 f303 	mul.w	r3, r2, r3
 8003e66:	4a11      	ldr	r2, [pc, #68]	; (8003eac <cdcd_reset+0x60>)
 8003e68:	4413      	add	r3, r2
 8003e6a:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8003e6c:	2205      	movs	r2, #5
 8003e6e:	2100      	movs	r1, #0
 8003e70:	68b8      	ldr	r0, [r7, #8]
 8003e72:	f00b fc51 	bl	800f718 <memset>
    tu_fifo_clear(&p_cdc->rx_ff);
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	3310      	adds	r3, #16
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f001 fb3e 	bl	80054fc <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	3324      	adds	r3, #36	; 0x24
 8003e84:	4618      	mov	r0, r3
 8003e86:	f001 fb39 	bl	80054fc <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	3324      	adds	r3, #36	; 0x24
 8003e8e:	2101      	movs	r1, #1
 8003e90:	4618      	mov	r0, r3
 8003e92:	f001 fb53 	bl	800553c <tu_fifo_set_overwritable>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0dc      	beq.n	8003e5c <cdcd_reset+0x10>
  }
}
 8003ea2:	bf00      	nop
 8003ea4:	bf00      	nop
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	20006c9c 	.word	0x20006c9c

08003eb0 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b09a      	sub	sp, #104	; 0x68
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	6039      	str	r1, [r7, #0]
 8003eba:	71fb      	strb	r3, [r7, #7]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	795b      	ldrb	r3, [r3, #5]
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d103      	bne.n	8003ed0 <cdcd_open+0x20>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	799b      	ldrb	r3, [r3, #6]
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d001      	beq.n	8003ed4 <cdcd_open+0x24>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	e0e1      	b.n	8004098 <cdcd_open+0x1e8>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t * p_cdc = NULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	65fb      	str	r3, [r7, #92]	; 0x5c
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8003ede:	e01a      	b.n	8003f16 <cdcd_open+0x66>
  {
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
 8003ee0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003ee4:	4a6e      	ldr	r2, [pc, #440]	; (80040a0 <cdcd_open+0x1f0>)
 8003ee6:	f44f 719c 	mov.w	r1, #312	; 0x138
 8003eea:	fb01 f303 	mul.w	r3, r1, r3
 8003eee:	4413      	add	r3, r2
 8003ef0:	3302      	adds	r3, #2
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d109      	bne.n	8003f0c <cdcd_open+0x5c>
    {
      p_cdc = &_cdcd_itf[cdc_id];
 8003ef8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003efc:	f44f 729c 	mov.w	r2, #312	; 0x138
 8003f00:	fb02 f303 	mul.w	r3, r2, r3
 8003f04:	4a66      	ldr	r2, [pc, #408]	; (80040a0 <cdcd_open+0x1f0>)
 8003f06:	4413      	add	r3, r2
 8003f08:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 8003f0a:	e008      	b.n	8003f1e <cdcd_open+0x6e>
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 8003f0c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003f10:	3301      	adds	r3, #1
 8003f12:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8003f16:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0e0      	beq.n	8003ee0 <cdcd_open+0x30>
    }
  }
  TU_ASSERT(p_cdc, 0);
 8003f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10a      	bne.n	8003f3a <cdcd_open+0x8a>
 8003f24:	4b5f      	ldr	r3, [pc, #380]	; (80040a4 <cdcd_open+0x1f4>)
 8003f26:	647b      	str	r3, [r7, #68]	; 0x44
 8003f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d000      	beq.n	8003f36 <cdcd_open+0x86>
 8003f34:	be00      	bkpt	0x0000
 8003f36:	2300      	movs	r3, #0
 8003f38:	e0ae      	b.n	8004098 <cdcd_open+0x1e8>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	789a      	ldrb	r2, [r3, #2]
 8003f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f40:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8003f42:	2309      	movs	r3, #9
 8003f44:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	643b      	str	r3, [r7, #64]	; 0x40
//--------------------------------------------------------------------+
// Descriptor helper
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f58:	4413      	add	r3, r2
  uint8_t const * p_desc = tu_desc_next( itf_desc );
 8003f5a:	657b      	str	r3, [r7, #84]	; 0x54

  // Communication Functional Descriptors
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8003f5c:	e013      	b.n	8003f86 <cdcd_open+0xd6>
 8003f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f60:	633b      	str	r3, [r7, #48]	; 0x30
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
}

TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8003f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f64:	781b      	ldrb	r3, [r3, #0]
  {
    drv_len += tu_desc_len(p_desc);
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8003f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f74:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f78:	637b      	str	r3, [r7, #52]	; 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f82:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8003f84:	657b      	str	r3, [r7, #84]	; 0x54
 8003f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8003f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	781b      	ldrb	r3, [r3, #0]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8003f90:	2b24      	cmp	r3, #36	; 0x24
 8003f92:	d104      	bne.n	8003f9e <cdcd_open+0xee>
 8003f94:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8003f98:	88bb      	ldrh	r3, [r7, #4]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d9df      	bls.n	8003f5e <cdcd_open+0xae>
 8003f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	781b      	ldrb	r3, [r3, #0]
  }

  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8003fa8:	2b05      	cmp	r3, #5
 8003faa:	d12f      	bne.n	800400c <cdcd_open+0x15c>
  {
    // notification endpoint
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8003fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fae:	653b      	str	r3, [r7, #80]	; 0x50

    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f002 fc57 	bl	8006868 <usbd_edpt_open>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	f083 0301 	eor.w	r3, r3, #1
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <cdcd_open+0x12c>
 8003fc6:	4b37      	ldr	r3, [pc, #220]	; (80040a4 <cdcd_open+0x1f4>)
 8003fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d000      	beq.n	8003fd8 <cdcd_open+0x128>
 8003fd6:	be00      	bkpt	0x0000
 8003fd8:	2300      	movs	r3, #0
 8003fda:	e05d      	b.n	8004098 <cdcd_open+0x1e8>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8003fdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fde:	789a      	ldrb	r2, [r3, #2]
 8003fe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fe2:	705a      	strb	r2, [r3, #1]
 8003fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fe6:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8003ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	461a      	mov	r2, r3
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 800400a:	657b      	str	r3, [r7, #84]	; 0x54
 800400c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800400e:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	3301      	adds	r3, #1
 8004014:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8004016:	2b04      	cmp	r3, #4
 8004018:	d139      	bne.n	800408e <cdcd_open+0x1de>
       (TUSB_CLASS_CDC_DATA == ((tusb_desc_interface_t const *) p_desc)->bInterfaceClass) )
 800401a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800401c:	795b      	ldrb	r3, [r3, #5]
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 800401e:	2b0a      	cmp	r3, #10
 8004020:	d135      	bne.n	800408e <cdcd_open+0x1de>
 8004022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004024:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	781b      	ldrb	r3, [r3, #0]
  {
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 800402a:	b29a      	uxth	r2, r3
 800402c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8004030:	4413      	add	r3, r2
 8004032:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8004036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004038:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8004048:	657b      	str	r3, [r7, #84]	; 0x54

    // Open endpoint pair
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
 800404a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800404c:	3303      	adds	r3, #3
 800404e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004050:	3202      	adds	r2, #2
 8004052:	79f8      	ldrb	r0, [r7, #7]
 8004054:	9201      	str	r2, [sp, #4]
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	2302      	movs	r3, #2
 800405a:	2202      	movs	r2, #2
 800405c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800405e:	f002 fb9b 	bl	8006798 <usbd_open_edpt_pair>
 8004062:	4603      	mov	r3, r0
 8004064:	f083 0301 	eor.w	r3, r3, #1
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <cdcd_open+0x1d4>
 800406e:	4b0d      	ldr	r3, [pc, #52]	; (80040a4 <cdcd_open+0x1f4>)
 8004070:	64bb      	str	r3, [r7, #72]	; 0x48
 8004072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d000      	beq.n	8004080 <cdcd_open+0x1d0>
 800407e:	be00      	bkpt	0x0000
 8004080:	2300      	movs	r3, #0
 8004082:	e009      	b.n	8004098 <cdcd_open+0x1e8>

    drv_len += 2*sizeof(tusb_desc_endpoint_t);
 8004084:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8004088:	330e      	adds	r3, #14
 800408a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);
 800408e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004090:	f7ff fd63 	bl	8003b5a <_prep_out_transaction>

  return drv_len;
 8004094:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
}
 8004098:	4618      	mov	r0, r3
 800409a:	3760      	adds	r7, #96	; 0x60
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	20006c9c 	.word	0x20006c9c
 80040a4:	e000edf0 	.word	0xe000edf0

080040a8 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08a      	sub	sp, #40	; 0x28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	4603      	mov	r3, r0
 80040b0:	603a      	str	r2, [r7, #0]
 80040b2:	71fb      	strb	r3, [r7, #7]
 80040b4:	460b      	mov	r3, r1
 80040b6:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b20      	cmp	r3, #32
 80040c4:	d001      	beq.n	80040ca <cdcd_control_xfer_cb+0x22>
 80040c6:	2300      	movs	r3, #0
 80040c8:	e0cc      	b.n	8004264 <cdcd_control_xfer_cb+0x1bc>

  uint8_t itf = 0;
 80040ca:	2300      	movs	r3, #0
 80040cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  cdcd_interface_t* p_cdc = _cdcd_itf;
 80040d0:	4b66      	ldr	r3, [pc, #408]	; (800426c <cdcd_control_xfer_cb+0x1c4>)
 80040d2:	623b      	str	r3, [r7, #32]

  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 80040d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <cdcd_control_xfer_cb+0x38>
 80040dc:	2300      	movs	r3, #0
 80040de:	e0c1      	b.n	8004264 <cdcd_control_xfer_cb+0x1bc>

    if ( p_cdc->itf_num == request->wIndex ) break;
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	889b      	ldrh	r3, [r3, #4]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d009      	beq.n	8004104 <cdcd_control_xfer_cb+0x5c>
  for ( ; ; itf++, p_cdc++)
 80040f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040f4:	3301      	adds	r3, #1
 80040f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004100:	623b      	str	r3, [r7, #32]
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8004102:	e7e7      	b.n	80040d4 <cdcd_control_xfer_cb+0x2c>
    if ( p_cdc->itf_num == request->wIndex ) break;
 8004104:	bf00      	nop
  }

  switch ( request->bRequest )
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	785b      	ldrb	r3, [r3, #1]
 800410a:	3b20      	subs	r3, #32
 800410c:	2b03      	cmp	r3, #3
 800410e:	f200 809f 	bhi.w	8004250 <cdcd_control_xfer_cb+0x1a8>
 8004112:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <cdcd_control_xfer_cb+0x70>)
 8004114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004118:	08004129 	.word	0x08004129
 800411c:	08004161 	.word	0x08004161
 8004120:	08004177 	.word	0x08004177
 8004124:	0800421f 	.word	0x0800421f
  {
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8004128:	79bb      	ldrb	r3, [r7, #6]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d107      	bne.n	800413e <cdcd_control_xfer_cb+0x96>
      {
        TU_LOG2("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	1d9a      	adds	r2, r3, #6
 8004132:	79f8      	ldrb	r0, [r7, #7]
 8004134:	2307      	movs	r3, #7
 8004136:	6839      	ldr	r1, [r7, #0]
 8004138:	f002 fde4 	bl	8006d04 <tud_control_xfer>
      }
      else if ( stage == CONTROL_STAGE_ACK)
      {
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
      }
    break;
 800413c:	e08a      	b.n	8004254 <cdcd_control_xfer_cb+0x1ac>
      else if ( stage == CONTROL_STAGE_ACK)
 800413e:	79bb      	ldrb	r3, [r7, #6]
 8004140:	2b03      	cmp	r3, #3
 8004142:	f040 8087 	bne.w	8004254 <cdcd_control_xfer_cb+0x1ac>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8004146:	4b4a      	ldr	r3, [pc, #296]	; (8004270 <cdcd_control_xfer_cb+0x1c8>)
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 8083 	beq.w	8004254 <cdcd_control_xfer_cb+0x1ac>
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	1d9a      	adds	r2, r3, #6
 8004152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004156:	4611      	mov	r1, r2
 8004158:	4618      	mov	r0, r3
 800415a:	f3af 8000 	nop.w
    break;
 800415e:	e079      	b.n	8004254 <cdcd_control_xfer_cb+0x1ac>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8004160:	79bb      	ldrb	r3, [r7, #6]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d178      	bne.n	8004258 <cdcd_control_xfer_cb+0x1b0>
      {
        TU_LOG2("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	1d9a      	adds	r2, r3, #6
 800416a:	79f8      	ldrb	r0, [r7, #7]
 800416c:	2307      	movs	r3, #7
 800416e:	6839      	ldr	r1, [r7, #0]
 8004170:	f002 fdc8 	bl	8006d04 <tud_control_xfer>
      }
    break;
 8004174:	e070      	b.n	8004258 <cdcd_control_xfer_cb+0x1b0>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP)
 8004176:	79bb      	ldrb	r3, [r7, #6]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d105      	bne.n	8004188 <cdcd_control_xfer_cb+0xe0>
      {
        tud_control_status(rhport, request);
 800417c:	79fb      	ldrb	r3, [r7, #7]
 800417e:	6839      	ldr	r1, [r7, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f002 fd61 	bl	8006c48 <tud_control_status>
        TU_LOG2("  Set Control Line State: DTR = %d, RTS = %d\r\n", dtr, rts);

        // Invoke callback
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
      }
    break;
 8004186:	e069      	b.n	800425c <cdcd_control_xfer_cb+0x1b4>
      else if (stage == CONTROL_STAGE_ACK)
 8004188:	79bb      	ldrb	r3, [r7, #6]
 800418a:	2b03      	cmp	r3, #3
 800418c:	d166      	bne.n	800425c <cdcd_control_xfer_cb+0x1b4>
        bool const dtr = tu_bit_test(request->wValue, 0);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	885b      	ldrh	r3, [r3, #2]
 8004192:	b29b      	uxth	r3, r3
 8004194:	613b      	str	r3, [r7, #16]
 8004196:	2300      	movs	r3, #0
 8004198:	73fb      	strb	r3, [r7, #15]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 800419a:	7bfb      	ldrb	r3, [r7, #15]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	fa22 f303 	lsr.w	r3, r2, r3
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	bf14      	ite	ne
 80041aa:	2301      	movne	r3, #1
 80041ac:	2300      	moveq	r3, #0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	885b      	ldrh	r3, [r3, #2]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	61bb      	str	r3, [r7, #24]
 80041ba:	2301      	movs	r3, #1
 80041bc:	75fb      	strb	r3, [r7, #23]
 80041be:	7dfb      	ldrb	r3, [r7, #23]
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	fa22 f303 	lsr.w	r3, r2, r3
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	bf14      	ite	ne
 80041ce:	2301      	movne	r3, #1
 80041d0:	2300      	moveq	r3, #0
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	885b      	ldrh	r3, [r3, #2]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80041e8:	7ffb      	ldrb	r3, [r7, #31]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	bf14      	ite	ne
 80041ee:	2301      	movne	r3, #1
 80041f0:	2300      	moveq	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	f083 0301 	eor.w	r3, r3, #1
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	4619      	mov	r1, r3
 8004202:	4610      	mov	r0, r2
 8004204:	f001 f99a 	bl	800553c <tu_fifo_set_overwritable>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 8004208:	4b1a      	ldr	r3, [pc, #104]	; (8004274 <cdcd_control_xfer_cb+0x1cc>)
 800420a:	2b00      	cmp	r3, #0
 800420c:	d026      	beq.n	800425c <cdcd_control_xfer_cb+0x1b4>
 800420e:	7fba      	ldrb	r2, [r7, #30]
 8004210:	7ff9      	ldrb	r1, [r7, #31]
 8004212:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004216:	4618      	mov	r0, r3
 8004218:	f3af 8000 	nop.w
    break;
 800421c:	e01e      	b.n	800425c <cdcd_control_xfer_cb+0x1b4>
    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP)
 800421e:	79bb      	ldrb	r3, [r7, #6]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d105      	bne.n	8004230 <cdcd_control_xfer_cb+0x188>
      {
        tud_control_status(rhport, request);
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	6839      	ldr	r1, [r7, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f002 fd0d 	bl	8006c48 <tud_control_status>
      else if (stage == CONTROL_STAGE_ACK)
      {
        TU_LOG2("  Send Break\r\n");
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
      }
    break;
 800422e:	e017      	b.n	8004260 <cdcd_control_xfer_cb+0x1b8>
      else if (stage == CONTROL_STAGE_ACK)
 8004230:	79bb      	ldrb	r3, [r7, #6]
 8004232:	2b03      	cmp	r3, #3
 8004234:	d114      	bne.n	8004260 <cdcd_control_xfer_cb+0x1b8>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 8004236:	4b10      	ldr	r3, [pc, #64]	; (8004278 <cdcd_control_xfer_cb+0x1d0>)
 8004238:	2b00      	cmp	r3, #0
 800423a:	d011      	beq.n	8004260 <cdcd_control_xfer_cb+0x1b8>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	885b      	ldrh	r3, [r3, #2]
 8004240:	b29a      	uxth	r2, r3
 8004242:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004246:	4611      	mov	r1, r2
 8004248:	4618      	mov	r0, r3
 800424a:	f3af 8000 	nop.w
    break;
 800424e:	e007      	b.n	8004260 <cdcd_control_xfer_cb+0x1b8>

    default: return false; // stall unsupported request
 8004250:	2300      	movs	r3, #0
 8004252:	e007      	b.n	8004264 <cdcd_control_xfer_cb+0x1bc>
    break;
 8004254:	bf00      	nop
 8004256:	e004      	b.n	8004262 <cdcd_control_xfer_cb+0x1ba>
    break;
 8004258:	bf00      	nop
 800425a:	e002      	b.n	8004262 <cdcd_control_xfer_cb+0x1ba>
    break;
 800425c:	bf00      	nop
 800425e:	e000      	b.n	8004262 <cdcd_control_xfer_cb+0x1ba>
    break;
 8004260:	bf00      	nop
  }

  return true;
 8004262:	2301      	movs	r3, #1
}
 8004264:	4618      	mov	r0, r3
 8004266:	3728      	adds	r7, #40	; 0x28
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20006c9c 	.word	0x20006c9c
	...

0800427c <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	4603      	mov	r3, r0
 8004286:	71fb      	strb	r3, [r7, #7]
 8004288:	460b      	mov	r3, r1
 800428a:	71bb      	strb	r3, [r7, #6]
 800428c:	4613      	mov	r3, r2
 800428e:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 8004290:	2300      	movs	r3, #0
 8004292:	75fb      	strb	r3, [r7, #23]
 8004294:	e014      	b.n	80042c0 <cdcd_xfer_cb+0x44>
  {
    p_cdc = &_cdcd_itf[itf];
 8004296:	7dfb      	ldrb	r3, [r7, #23]
 8004298:	f44f 729c 	mov.w	r2, #312	; 0x138
 800429c:	fb02 f303 	mul.w	r3, r2, r3
 80042a0:	4a54      	ldr	r2, [pc, #336]	; (80043f4 <cdcd_xfer_cb+0x178>)
 80042a2:	4413      	add	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	78db      	ldrb	r3, [r3, #3]
 80042aa:	79ba      	ldrb	r2, [r7, #6]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d00a      	beq.n	80042c6 <cdcd_xfer_cb+0x4a>
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	789b      	ldrb	r3, [r3, #2]
 80042b4:	79ba      	ldrb	r2, [r7, #6]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d005      	beq.n	80042c6 <cdcd_xfer_cb+0x4a>
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 80042ba:	7dfb      	ldrb	r3, [r7, #23]
 80042bc:	3301      	adds	r3, #1
 80042be:	75fb      	strb	r3, [r7, #23]
 80042c0:	7dfb      	ldrb	r3, [r7, #23]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0e7      	beq.n	8004296 <cdcd_xfer_cb+0x1a>
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 80042c6:	7dfb      	ldrb	r3, [r7, #23]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <cdcd_xfer_cb+0x66>
 80042cc:	4b4a      	ldr	r3, [pc, #296]	; (80043f8 <cdcd_xfer_cb+0x17c>)
 80042ce:	60bb      	str	r3, [r7, #8]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d000      	beq.n	80042de <cdcd_xfer_cb+0x62>
 80042dc:	be00      	bkpt	0x0000
 80042de:	2300      	movs	r3, #0
 80042e0:	e084      	b.n	80043ec <cdcd_xfer_cb+0x170>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	78db      	ldrb	r3, [r3, #3]
 80042e6:	79ba      	ldrb	r2, [r7, #6]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d14a      	bne.n	8004382 <cdcd_xfer_cb+0x106>
  {
    tu_fifo_write_n(&p_cdc->rx_ff, &p_cdc->epout_buf, (uint16_t) xferred_bytes);
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f103 0010 	add.w	r0, r3, #16
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	33b8      	adds	r3, #184	; 0xb8
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	b292      	uxth	r2, r2
 80042fa:	4619      	mov	r1, r3
 80042fc:	f001 f8da 	bl	80054b4 <tu_fifo_write_n>
    
    // Check for wanted char and invoke callback if needed
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
 8004300:	4b3e      	ldr	r3, [pc, #248]	; (80043fc <cdcd_xfer_cb+0x180>)
 8004302:	2b00      	cmp	r3, #0
 8004304:	d028      	beq.n	8004358 <cdcd_xfer_cb+0xdc>
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	795b      	ldrb	r3, [r3, #5]
 800430a:	2bff      	cmp	r3, #255	; 0xff
 800430c:	d024      	beq.n	8004358 <cdcd_xfer_cb+0xdc>
    {
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 800430e:	2300      	movs	r3, #0
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	e01d      	b.n	8004350 <cdcd_xfer_cb+0xd4>
      {
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	795a      	ldrb	r2, [r3, #5]
 8004318:	6939      	ldr	r1, [r7, #16]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	440b      	add	r3, r1
 800431e:	33b8      	adds	r3, #184	; 0xb8
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d111      	bne.n	800434a <cdcd_xfer_cb+0xce>
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	3310      	adds	r3, #16
 800432a:	4618      	mov	r0, r3
 800432c:	f001 f81a 	bl	8005364 <tu_fifo_empty>
 8004330:	4603      	mov	r3, r0
 8004332:	f083 0301 	eor.w	r3, r3, #1
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d006      	beq.n	800434a <cdcd_xfer_cb+0xce>
        {
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	795a      	ldrb	r2, [r3, #5]
 8004340:	7dfb      	ldrb	r3, [r7, #23]
 8004342:	4611      	mov	r1, r2
 8004344:	4618      	mov	r0, r3
 8004346:	f3af 8000 	nop.w
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3301      	adds	r3, #1
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d3dd      	bcc.n	8004314 <cdcd_xfer_cb+0x98>
        }
      }
    }
    
    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 8004358:	4b29      	ldr	r3, [pc, #164]	; (8004400 <cdcd_xfer_cb+0x184>)
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00e      	beq.n	800437c <cdcd_xfer_cb+0x100>
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	3310      	adds	r3, #16
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fffe 	bl	8005364 <tu_fifo_empty>
 8004368:	4603      	mov	r3, r0
 800436a:	f083 0301 	eor.w	r3, r3, #1
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <cdcd_xfer_cb+0x100>
 8004374:	7dfb      	ldrb	r3, [r7, #23]
 8004376:	4618      	mov	r0, r3
 8004378:	f3af 8000 	nop.w
    
    // prepare for OUT transaction
    _prep_out_transaction(p_cdc);
 800437c:	6938      	ldr	r0, [r7, #16]
 800437e:	f7ff fbec 	bl	8003b5a <_prep_out_transaction>
  }
  
  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	789b      	ldrb	r3, [r3, #2]
 8004386:	79ba      	ldrb	r2, [r7, #6]
 8004388:	429a      	cmp	r2, r3
 800438a:	d12e      	bne.n	80043ea <cdcd_xfer_cb+0x16e>
  {
    // invoke transmit callback to possibly refill tx fifo
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
 800438c:	4b1d      	ldr	r3, [pc, #116]	; (8004404 <cdcd_xfer_cb+0x188>)
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <cdcd_xfer_cb+0x11e>
 8004392:	7dfb      	ldrb	r3, [r7, #23]
 8004394:	4618      	mov	r0, r3
 8004396:	f3af 8000 	nop.w

    if ( 0 == tud_cdc_n_write_flush(itf) )
 800439a:	7dfb      	ldrb	r3, [r7, #23]
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff fc87 	bl	8003cb0 <tud_cdc_n_write_flush>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d120      	bne.n	80043ea <cdcd_xfer_cb+0x16e>
    {
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	3324      	adds	r3, #36	; 0x24
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 ffbb 	bl	8005328 <tu_fifo_count>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d118      	bne.n	80043ea <cdcd_xfer_cb+0x16e>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d015      	beq.n	80043ea <cdcd_xfer_cb+0x16e>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d110      	bne.n	80043ea <cdcd_xfer_cb+0x16e>
      {
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	789a      	ldrb	r2, [r3, #2]
 80043cc:	79fb      	ldrb	r3, [r7, #7]
 80043ce:	4611      	mov	r1, r2
 80043d0:	4618      	mov	r0, r3
 80043d2:	f002 fa8d 	bl	80068f0 <usbd_edpt_claim>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d006      	beq.n	80043ea <cdcd_xfer_cb+0x16e>
        {
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	7899      	ldrb	r1, [r3, #2]
 80043e0:	79f8      	ldrb	r0, [r7, #7]
 80043e2:	2300      	movs	r3, #0
 80043e4:	2200      	movs	r2, #0
 80043e6:	f002 fad7 	bl	8006998 <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 80043ea:	2301      	movs	r3, #1
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	20006c9c 	.word	0x20006c9c
 80043f8:	e000edf0 	.word	0xe000edf0
	...

08004408 <reset_state>:

// Only a single dfu state is allowed
CFG_TUSB_MEM_SECTION static dfu_state_ctx_t _dfu_ctx;

static void reset_state(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  _dfu_ctx.state = DFU_IDLE;
 800440c:	4b06      	ldr	r3, [pc, #24]	; (8004428 <reset_state+0x20>)
 800440e:	2202      	movs	r2, #2
 8004410:	709a      	strb	r2, [r3, #2]
  _dfu_ctx.status = DFU_STATUS_OK;
 8004412:	4b05      	ldr	r3, [pc, #20]	; (8004428 <reset_state+0x20>)
 8004414:	2200      	movs	r2, #0
 8004416:	70da      	strb	r2, [r3, #3]
  _dfu_ctx.flashing_in_progress = false;
 8004418:	4b03      	ldr	r3, [pc, #12]	; (8004428 <reset_state+0x20>)
 800441a:	2200      	movs	r2, #0
 800441c:	711a      	strb	r2, [r3, #4]
}
 800441e:	bf00      	nop
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	20006dd4 	.word	0x20006dd4

0800442c <dfu_moded_reset>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void dfu_moded_reset(uint8_t rhport)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	4603      	mov	r3, r0
 8004434:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  _dfu_ctx.attrs = 0;
 8004436:	4b06      	ldr	r3, [pc, #24]	; (8004450 <dfu_moded_reset+0x24>)
 8004438:	2200      	movs	r2, #0
 800443a:	701a      	strb	r2, [r3, #0]
  _dfu_ctx.alt = 0;
 800443c:	4b04      	ldr	r3, [pc, #16]	; (8004450 <dfu_moded_reset+0x24>)
 800443e:	2200      	movs	r2, #0
 8004440:	705a      	strb	r2, [r3, #1]

  reset_state();
 8004442:	f7ff ffe1 	bl	8004408 <reset_state>
}
 8004446:	bf00      	nop
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20006dd4 	.word	0x20006dd4

08004454 <dfu_moded_init>:

void dfu_moded_init(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  dfu_moded_reset(0);
 8004458:	2000      	movs	r0, #0
 800445a:	f7ff ffe7 	bl	800442c <dfu_moded_reset>
}
 800445e:	bf00      	nop
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <dfu_moded_open>:

uint16_t dfu_moded_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8004464:	b480      	push	{r7}
 8004466:	b091      	sub	sp, #68	; 0x44
 8004468:	af00      	add	r7, sp, #0
 800446a:	4603      	mov	r3, r0
 800446c:	6039      	str	r1, [r7, #0]
 800446e:	71fb      	strb	r3, [r7, #7]
 8004470:	4613      	mov	r3, r2
 8004472:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  //------------- Interface (with Alt) descriptor -------------//
  uint8_t const itf_num = itf_desc->bInterfaceNumber;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	789b      	ldrb	r3, [r3, #2]
 8004478:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  uint8_t alt_count = 0;
 800447c:	2300      	movs	r3, #0
 800447e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  uint16_t drv_len = 0;
 8004482:	2300      	movs	r3, #0
 8004484:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TU_VERIFY(itf_desc->bInterfaceSubClass == TUD_DFU_APP_SUBCLASS && itf_desc->bInterfaceProtocol == DFU_PROTOCOL_DFU, 0);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	799b      	ldrb	r3, [r3, #6]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d103      	bne.n	8004496 <dfu_moded_open+0x32>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	79db      	ldrb	r3, [r3, #7]
 8004492:	2b02      	cmp	r3, #2
 8004494:	d049      	beq.n	800452a <dfu_moded_open+0xc6>
 8004496:	2300      	movs	r3, #0
 8004498:	e07f      	b.n	800459a <dfu_moded_open+0x136>

  while(itf_desc->bInterfaceSubClass == TUD_DFU_APP_SUBCLASS && itf_desc->bInterfaceProtocol == DFU_PROTOCOL_DFU)
  {
    TU_ASSERT(max_len > drv_len, 0);
 800449a:	88ba      	ldrh	r2, [r7, #4]
 800449c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800449e:	429a      	cmp	r2, r3
 80044a0:	d80a      	bhi.n	80044b8 <dfu_moded_open+0x54>
 80044a2:	4b41      	ldr	r3, [pc, #260]	; (80045a8 <dfu_moded_open+0x144>)
 80044a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d000      	beq.n	80044b4 <dfu_moded_open+0x50>
 80044b2:	be00      	bkpt	0x0000
 80044b4:	2300      	movs	r3, #0
 80044b6:	e070      	b.n	800459a <dfu_moded_open+0x136>

    // Alternate must have the same interface number
    TU_ASSERT(itf_desc->bInterfaceNumber == itf_num, 0);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	789b      	ldrb	r3, [r3, #2]
 80044bc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d00a      	beq.n	80044da <dfu_moded_open+0x76>
 80044c4:	4b38      	ldr	r3, [pc, #224]	; (80045a8 <dfu_moded_open+0x144>)
 80044c6:	633b      	str	r3, [r7, #48]	; 0x30
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d000      	beq.n	80044d6 <dfu_moded_open+0x72>
 80044d4:	be00      	bkpt	0x0000
 80044d6:	2300      	movs	r3, #0
 80044d8:	e05f      	b.n	800459a <dfu_moded_open+0x136>

    // Alt should increase by one every time
    TU_ASSERT(itf_desc->bAlternateSetting == alt_count, 0);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	78db      	ldrb	r3, [r3, #3]
 80044de:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d00a      	beq.n	80044fc <dfu_moded_open+0x98>
 80044e6:	4b30      	ldr	r3, [pc, #192]	; (80045a8 <dfu_moded_open+0x144>)
 80044e8:	637b      	str	r3, [r7, #52]	; 0x34
 80044ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d000      	beq.n	80044f8 <dfu_moded_open+0x94>
 80044f6:	be00      	bkpt	0x0000
 80044f8:	2300      	movs	r3, #0
 80044fa:	e04e      	b.n	800459a <dfu_moded_open+0x136>
    alt_count++;
 80044fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004500:	3301      	adds	r3, #1
 8004502:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(itf_desc);
 800450e:	b29a      	uxth	r2, r3
 8004510:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004512:	4413      	add	r3, r2
 8004514:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	4413      	add	r3, r2
    itf_desc = (tusb_desc_interface_t const *) tu_desc_next(itf_desc);
 8004528:	603b      	str	r3, [r7, #0]
  while(itf_desc->bInterfaceSubClass == TUD_DFU_APP_SUBCLASS && itf_desc->bInterfaceProtocol == DFU_PROTOCOL_DFU)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	799b      	ldrb	r3, [r3, #6]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d103      	bne.n	800453a <dfu_moded_open+0xd6>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	79db      	ldrb	r3, [r3, #7]
 8004536:	2b02      	cmp	r3, #2
 8004538:	d0af      	beq.n	800449a <dfu_moded_open+0x36>
  }

  //------------- DFU Functional descriptor -------------//
  tusb_desc_dfu_functional_t const *func_desc = (tusb_desc_dfu_functional_t const *) itf_desc;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	62bb      	str	r3, [r7, #40]	; 0x28
 800453e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004540:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	3301      	adds	r3, #1
 8004546:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(tu_desc_type(func_desc) == TUSB_DESC_FUNCTIONAL, 0);
 8004548:	2b21      	cmp	r3, #33	; 0x21
 800454a:	d00a      	beq.n	8004562 <dfu_moded_open+0xfe>
 800454c:	4b16      	ldr	r3, [pc, #88]	; (80045a8 <dfu_moded_open+0x144>)
 800454e:	61fb      	str	r3, [r7, #28]
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d000      	beq.n	800455e <dfu_moded_open+0xfa>
 800455c:	be00      	bkpt	0x0000
 800455e:	2300      	movs	r3, #0
 8004560:	e01b      	b.n	800459a <dfu_moded_open+0x136>
  drv_len += sizeof(tusb_desc_dfu_functional_t);
 8004562:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004564:	3309      	adds	r3, #9
 8004566:	87bb      	strh	r3, [r7, #60]	; 0x3c

  _dfu_ctx.attrs = func_desc->bAttributes;
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456a:	789a      	ldrb	r2, [r3, #2]
 800456c:	4b0f      	ldr	r3, [pc, #60]	; (80045ac <dfu_moded_open+0x148>)
 800456e:	701a      	strb	r2, [r3, #0]

  // CFG_TUD_DFU_XFER_BUFSIZE has to be set to the buffer size used in TUD_DFU_DESCRIPTOR
  uint16_t const transfer_size = tu_le16toh( tu_unaligned_read16((uint8_t const*) func_desc + offsetof(tusb_desc_dfu_functional_t, wTransferSize)) );
 8004570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004572:	3305      	adds	r3, #5
 8004574:	60bb      	str	r3, [r7, #8]

#else

// MCU that could access unaligned memory natively
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	84fb      	strh	r3, [r7, #38]	; 0x26
  TU_ASSERT(transfer_size <= CFG_TUD_DFU_XFER_BUFSIZE, drv_len);
 800457c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800457e:	2b40      	cmp	r3, #64	; 0x40
 8004580:	d90a      	bls.n	8004598 <dfu_moded_open+0x134>
 8004582:	4b09      	ldr	r3, [pc, #36]	; (80045a8 <dfu_moded_open+0x144>)
 8004584:	623b      	str	r3, [r7, #32]
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d000      	beq.n	8004594 <dfu_moded_open+0x130>
 8004592:	be00      	bkpt	0x0000
 8004594:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004596:	e000      	b.n	800459a <dfu_moded_open+0x136>

  return drv_len;
 8004598:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
}
 800459a:	4618      	mov	r0, r3
 800459c:	3744      	adds	r7, #68	; 0x44
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	e000edf0 	.word	0xe000edf0
 80045ac:	20006dd4 	.word	0x20006dd4

080045b0 <dfu_moded_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool dfu_moded_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	4603      	mov	r3, r0
 80045b8:	603a      	str	r2, [r7, #0]
 80045ba:	71fb      	strb	r3, [r7, #7]
 80045bc:	460b      	mov	r3, r1
 80045be:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d001      	beq.n	80045d2 <dfu_moded_control_xfer_cb+0x22>
 80045ce:	2300      	movs	r3, #0
 80045d0:	e13e      	b.n	8004850 <dfu_moded_control_xfer_cb+0x2a0>

  TU_LOG2("  DFU State  : %s, Status: %s\r\n", tu_lookup_find(&_dfu_state_table, _dfu_ctx.state), tu_lookup_find(&_dfu_status_table, _dfu_ctx.status));

  if ( request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD )
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d126      	bne.n	800462e <dfu_moded_control_xfer_cb+0x7e>
  {
    // Standard request include GET/SET_INTERFACE
    switch ( request->bRequest )
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	785b      	ldrb	r3, [r3, #1]
 80045e4:	2b0a      	cmp	r3, #10
 80045e6:	d014      	beq.n	8004612 <dfu_moded_control_xfer_cb+0x62>
 80045e8:	2b0b      	cmp	r3, #11
 80045ea:	d11e      	bne.n	800462a <dfu_moded_control_xfer_cb+0x7a>
    {
      case TUSB_REQ_SET_INTERFACE:
        if ( stage == CONTROL_STAGE_SETUP )
 80045ec:	79bb      	ldrb	r3, [r7, #6]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	f040 811e 	bne.w	8004830 <dfu_moded_control_xfer_cb+0x280>
        {
          // Switch Alt interface and reset state machine
          _dfu_ctx.alt = (uint8_t) request->wValue;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	885b      	ldrh	r3, [r3, #2]
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	4b96      	ldr	r3, [pc, #600]	; (8004858 <dfu_moded_control_xfer_cb+0x2a8>)
 80045fe:	705a      	strb	r2, [r3, #1]
          reset_state();
 8004600:	f7ff ff02 	bl	8004408 <reset_state>
          return tud_control_status(rhport, request);
 8004604:	79fb      	ldrb	r3, [r7, #7]
 8004606:	6839      	ldr	r1, [r7, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f002 fb1d 	bl	8006c48 <tud_control_status>
 800460e:	4603      	mov	r3, r0
 8004610:	e11e      	b.n	8004850 <dfu_moded_control_xfer_cb+0x2a0>
        }
      break;

      case TUSB_REQ_GET_INTERFACE:
        if(stage == CONTROL_STAGE_SETUP)
 8004612:	79bb      	ldrb	r3, [r7, #6]
 8004614:	2b01      	cmp	r3, #1
 8004616:	f040 810d 	bne.w	8004834 <dfu_moded_control_xfer_cb+0x284>
        {
          return tud_control_xfer(rhport, request, &_dfu_ctx.alt, 1);
 800461a:	79f8      	ldrb	r0, [r7, #7]
 800461c:	2301      	movs	r3, #1
 800461e:	4a8f      	ldr	r2, [pc, #572]	; (800485c <dfu_moded_control_xfer_cb+0x2ac>)
 8004620:	6839      	ldr	r1, [r7, #0]
 8004622:	f002 fb6f 	bl	8006d04 <tud_control_xfer>
 8004626:	4603      	mov	r3, r0
 8004628:	e112      	b.n	8004850 <dfu_moded_control_xfer_cb+0x2a0>
        }
      break;

      // unsupported request
      default: return false;
 800462a:	2300      	movs	r3, #0
 800462c:	e110      	b.n	8004850 <dfu_moded_control_xfer_cb+0x2a0>
    }
  }
  else if ( request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS )
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b20      	cmp	r3, #32
 800463a:	f040 80f7 	bne.w	800482c <dfu_moded_control_xfer_cb+0x27c>
  {
    TU_LOG2("  DFU Request: %s\r\n", tu_lookup_find(&_dfu_request_table, request->bRequest));

    // Class request
    switch ( request->bRequest )
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	785b      	ldrb	r3, [r3, #1]
 8004642:	2b06      	cmp	r3, #6
 8004644:	f200 80f0 	bhi.w	8004828 <dfu_moded_control_xfer_cb+0x278>
 8004648:	a201      	add	r2, pc, #4	; (adr r2, 8004650 <dfu_moded_control_xfer_cb+0xa0>)
 800464a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464e:	bf00      	nop
 8004650:	0800466d 	.word	0x0800466d
 8004654:	0800474f 	.word	0x0800474f
 8004658:	080046f5 	.word	0x080046f5
 800465c:	080047d9 	.word	0x080047d9
 8004660:	08004695 	.word	0x08004695
 8004664:	080046ad 	.word	0x080046ad
 8004668:	080046c3 	.word	0x080046c3
    {
      case DFU_REQUEST_DETACH:
        if ( stage == CONTROL_STAGE_SETUP )
 800466c:	79bb      	ldrb	r3, [r7, #6]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d105      	bne.n	800467e <dfu_moded_control_xfer_cb+0xce>
        {
          tud_control_status(rhport, request);
 8004672:	79fb      	ldrb	r3, [r7, #7]
 8004674:	6839      	ldr	r1, [r7, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f002 fae6 	bl	8006c48 <tud_control_status>
        }
        else if ( stage == CONTROL_STAGE_ACK )
        {
          if ( tud_dfu_detach_cb ) tud_dfu_detach_cb();
        }
      break;
 800467c:	e0dc      	b.n	8004838 <dfu_moded_control_xfer_cb+0x288>
        else if ( stage == CONTROL_STAGE_ACK )
 800467e:	79bb      	ldrb	r3, [r7, #6]
 8004680:	2b03      	cmp	r3, #3
 8004682:	f040 80d9 	bne.w	8004838 <dfu_moded_control_xfer_cb+0x288>
          if ( tud_dfu_detach_cb ) tud_dfu_detach_cb();
 8004686:	4b76      	ldr	r3, [pc, #472]	; (8004860 <dfu_moded_control_xfer_cb+0x2b0>)
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 80d5 	beq.w	8004838 <dfu_moded_control_xfer_cb+0x288>
 800468e:	f7fe fccb 	bl	8003028 <tud_dfu_detach_cb>
      break;
 8004692:	e0d1      	b.n	8004838 <dfu_moded_control_xfer_cb+0x288>

      case DFU_REQUEST_CLRSTATUS:
        if ( stage == CONTROL_STAGE_SETUP )
 8004694:	79bb      	ldrb	r3, [r7, #6]
 8004696:	2b01      	cmp	r3, #1
 8004698:	f040 80d0 	bne.w	800483c <dfu_moded_control_xfer_cb+0x28c>
        {
          reset_state();
 800469c:	f7ff feb4 	bl	8004408 <reset_state>
          tud_control_status(rhport, request);
 80046a0:	79fb      	ldrb	r3, [r7, #7]
 80046a2:	6839      	ldr	r1, [r7, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f002 facf 	bl	8006c48 <tud_control_status>
        }
      break;
 80046aa:	e0c7      	b.n	800483c <dfu_moded_control_xfer_cb+0x28c>

      case DFU_REQUEST_GETSTATE:
        if ( stage == CONTROL_STAGE_SETUP )
 80046ac:	79bb      	ldrb	r3, [r7, #6]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	f040 80c6 	bne.w	8004840 <dfu_moded_control_xfer_cb+0x290>
        {
          tud_control_xfer(rhport, request, &_dfu_ctx.state, 1);
 80046b4:	79f8      	ldrb	r0, [r7, #7]
 80046b6:	2301      	movs	r3, #1
 80046b8:	4a6a      	ldr	r2, [pc, #424]	; (8004864 <dfu_moded_control_xfer_cb+0x2b4>)
 80046ba:	6839      	ldr	r1, [r7, #0]
 80046bc:	f002 fb22 	bl	8006d04 <tud_control_xfer>
        }
      break;
 80046c0:	e0be      	b.n	8004840 <dfu_moded_control_xfer_cb+0x290>

      case DFU_REQUEST_ABORT:
        if ( stage == CONTROL_STAGE_SETUP )
 80046c2:	79bb      	ldrb	r3, [r7, #6]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d107      	bne.n	80046d8 <dfu_moded_control_xfer_cb+0x128>
        {
          reset_state();
 80046c8:	f7ff fe9e 	bl	8004408 <reset_state>
          tud_control_status(rhport, request);
 80046cc:	79fb      	ldrb	r3, [r7, #7]
 80046ce:	6839      	ldr	r1, [r7, #0]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f002 fab9 	bl	8006c48 <tud_control_status>
        }
        else if ( stage == CONTROL_STAGE_ACK )
        {
          if ( tud_dfu_abort_cb ) tud_dfu_abort_cb(_dfu_ctx.alt);
        }
      break;
 80046d6:	e0b5      	b.n	8004844 <dfu_moded_control_xfer_cb+0x294>
        else if ( stage == CONTROL_STAGE_ACK )
 80046d8:	79bb      	ldrb	r3, [r7, #6]
 80046da:	2b03      	cmp	r3, #3
 80046dc:	f040 80b2 	bne.w	8004844 <dfu_moded_control_xfer_cb+0x294>
          if ( tud_dfu_abort_cb ) tud_dfu_abort_cb(_dfu_ctx.alt);
 80046e0:	4b61      	ldr	r3, [pc, #388]	; (8004868 <dfu_moded_control_xfer_cb+0x2b8>)
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 80ae 	beq.w	8004844 <dfu_moded_control_xfer_cb+0x294>
 80046e8:	4b5b      	ldr	r3, [pc, #364]	; (8004858 <dfu_moded_control_xfer_cb+0x2a8>)
 80046ea:	785b      	ldrb	r3, [r3, #1]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fe fc8d 	bl	800300c <tud_dfu_abort_cb>
      break;
 80046f2:	e0a7      	b.n	8004844 <dfu_moded_control_xfer_cb+0x294>

      case DFU_REQUEST_UPLOAD:
        if ( stage == CONTROL_STAGE_SETUP )
 80046f4:	79bb      	ldrb	r3, [r7, #6]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	f040 80a6 	bne.w	8004848 <dfu_moded_control_xfer_cb+0x298>
        {
          TU_VERIFY(_dfu_ctx.attrs & DFU_ATTR_CAN_UPLOAD);
 80046fc:	4b56      	ldr	r3, [pc, #344]	; (8004858 <dfu_moded_control_xfer_cb+0x2a8>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <dfu_moded_control_xfer_cb+0x15c>
 8004708:	2300      	movs	r3, #0
 800470a:	e0a1      	b.n	8004850 <dfu_moded_control_xfer_cb+0x2a0>
          TU_VERIFY(tud_dfu_upload_cb);
 800470c:	4b57      	ldr	r3, [pc, #348]	; (800486c <dfu_moded_control_xfer_cb+0x2bc>)
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <dfu_moded_control_xfer_cb+0x166>
 8004712:	2300      	movs	r3, #0
 8004714:	e09c      	b.n	8004850 <dfu_moded_control_xfer_cb+0x2a0>
          TU_VERIFY(request->wLength <= CFG_TUD_DFU_XFER_BUFSIZE);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	88db      	ldrh	r3, [r3, #6]
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b40      	cmp	r3, #64	; 0x40
 800471e:	d901      	bls.n	8004724 <dfu_moded_control_xfer_cb+0x174>
 8004720:	2300      	movs	r3, #0
 8004722:	e095      	b.n	8004850 <dfu_moded_control_xfer_cb+0x2a0>

          uint16_t const xfer_len = tud_dfu_upload_cb(_dfu_ctx.alt, request->wValue, _dfu_ctx.transfer_buf, request->wLength);
 8004724:	4b4c      	ldr	r3, [pc, #304]	; (8004858 <dfu_moded_control_xfer_cb+0x2a8>)
 8004726:	7858      	ldrb	r0, [r3, #1]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	885b      	ldrh	r3, [r3, #2]
 800472c:	b299      	uxth	r1, r3
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	88db      	ldrh	r3, [r3, #6]
 8004732:	b29b      	uxth	r3, r3
 8004734:	4a4e      	ldr	r2, [pc, #312]	; (8004870 <dfu_moded_control_xfer_cb+0x2c0>)
 8004736:	f7fe fc45 	bl	8002fc4 <tud_dfu_upload_cb>
 800473a:	4603      	mov	r3, r0
 800473c:	81fb      	strh	r3, [r7, #14]

          return tud_control_xfer(rhport, request, _dfu_ctx.transfer_buf, xfer_len);
 800473e:	89fb      	ldrh	r3, [r7, #14]
 8004740:	79f8      	ldrb	r0, [r7, #7]
 8004742:	4a4b      	ldr	r2, [pc, #300]	; (8004870 <dfu_moded_control_xfer_cb+0x2c0>)
 8004744:	6839      	ldr	r1, [r7, #0]
 8004746:	f002 fadd 	bl	8006d04 <tud_control_xfer>
 800474a:	4603      	mov	r3, r0
 800474c:	e080      	b.n	8004850 <dfu_moded_control_xfer_cb+0x2a0>
        }
      break;

      case DFU_REQUEST_DNLOAD:
        if ( stage == CONTROL_STAGE_SETUP )
 800474e:	79bb      	ldrb	r3, [r7, #6]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d17b      	bne.n	800484c <dfu_moded_control_xfer_cb+0x29c>
        {
          TU_VERIFY(_dfu_ctx.attrs & DFU_ATTR_CAN_DOWNLOAD);
 8004754:	4b40      	ldr	r3, [pc, #256]	; (8004858 <dfu_moded_control_xfer_cb+0x2a8>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <dfu_moded_control_xfer_cb+0x1b4>
 8004760:	2300      	movs	r3, #0
 8004762:	e075      	b.n	8004850 <dfu_moded_control_xfer_cb+0x2a0>
          TU_VERIFY(_dfu_ctx.state == DFU_IDLE || _dfu_ctx.state == DFU_DNLOAD_IDLE);
 8004764:	4b3c      	ldr	r3, [pc, #240]	; (8004858 <dfu_moded_control_xfer_cb+0x2a8>)
 8004766:	789b      	ldrb	r3, [r3, #2]
 8004768:	2b02      	cmp	r3, #2
 800476a:	d005      	beq.n	8004778 <dfu_moded_control_xfer_cb+0x1c8>
 800476c:	4b3a      	ldr	r3, [pc, #232]	; (8004858 <dfu_moded_control_xfer_cb+0x2a8>)
 800476e:	789b      	ldrb	r3, [r3, #2]
 8004770:	2b05      	cmp	r3, #5
 8004772:	d001      	beq.n	8004778 <dfu_moded_control_xfer_cb+0x1c8>
 8004774:	2300      	movs	r3, #0
 8004776:	e06b      	b.n	8004850 <dfu_moded_control_xfer_cb+0x2a0>
          TU_VERIFY(request->wLength <= CFG_TUD_DFU_XFER_BUFSIZE);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	88db      	ldrh	r3, [r3, #6]
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b40      	cmp	r3, #64	; 0x40
 8004780:	d901      	bls.n	8004786 <dfu_moded_control_xfer_cb+0x1d6>
 8004782:	2300      	movs	r3, #0
 8004784:	e064      	b.n	8004850 <dfu_moded_control_xfer_cb+0x2a0>

          // set to true for both download and manifest
          _dfu_ctx.flashing_in_progress = true;
 8004786:	4b34      	ldr	r3, [pc, #208]	; (8004858 <dfu_moded_control_xfer_cb+0x2a8>)
 8004788:	2201      	movs	r2, #1
 800478a:	711a      	strb	r2, [r3, #4]

          // save block and length for flashing
          _dfu_ctx.block  = request->wValue;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	885b      	ldrh	r3, [r3, #2]
 8004790:	b29a      	uxth	r2, r3
 8004792:	4b31      	ldr	r3, [pc, #196]	; (8004858 <dfu_moded_control_xfer_cb+0x2a8>)
 8004794:	80da      	strh	r2, [r3, #6]
          _dfu_ctx.length = request->wLength;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	88db      	ldrh	r3, [r3, #6]
 800479a:	b29a      	uxth	r2, r3
 800479c:	4b2e      	ldr	r3, [pc, #184]	; (8004858 <dfu_moded_control_xfer_cb+0x2a8>)
 800479e:	811a      	strh	r2, [r3, #8]

          if ( request->wLength )
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	88db      	ldrh	r3, [r3, #6]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00c      	beq.n	80047c4 <dfu_moded_control_xfer_cb+0x214>
          {
            // Download with payload -> transition to DOWNLOAD SYNC
            _dfu_ctx.state = DFU_DNLOAD_SYNC;
 80047aa:	4b2b      	ldr	r3, [pc, #172]	; (8004858 <dfu_moded_control_xfer_cb+0x2a8>)
 80047ac:	2203      	movs	r2, #3
 80047ae:	709a      	strb	r2, [r3, #2]
            return tud_control_xfer(rhport, request, _dfu_ctx.transfer_buf, request->wLength);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	88db      	ldrh	r3, [r3, #6]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	79f8      	ldrb	r0, [r7, #7]
 80047b8:	4a2d      	ldr	r2, [pc, #180]	; (8004870 <dfu_moded_control_xfer_cb+0x2c0>)
 80047ba:	6839      	ldr	r1, [r7, #0]
 80047bc:	f002 faa2 	bl	8006d04 <tud_control_xfer>
 80047c0:	4603      	mov	r3, r0
 80047c2:	e045      	b.n	8004850 <dfu_moded_control_xfer_cb+0x2a0>
          }
          else
          {
            // Download is complete -> transition to MANIFEST SYNC
            _dfu_ctx.state = DFU_MANIFEST_SYNC;
 80047c4:	4b24      	ldr	r3, [pc, #144]	; (8004858 <dfu_moded_control_xfer_cb+0x2a8>)
 80047c6:	2206      	movs	r2, #6
 80047c8:	709a      	strb	r2, [r3, #2]
            return tud_control_status(rhport, request);
 80047ca:	79fb      	ldrb	r3, [r7, #7]
 80047cc:	6839      	ldr	r1, [r7, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f002 fa3a 	bl	8006c48 <tud_control_status>
 80047d4:	4603      	mov	r3, r0
 80047d6:	e03b      	b.n	8004850 <dfu_moded_control_xfer_cb+0x2a0>
          }
        }
      break;

      case DFU_REQUEST_GETSTATUS:
        switch ( _dfu_ctx.state )
 80047d8:	4b1f      	ldr	r3, [pc, #124]	; (8004858 <dfu_moded_control_xfer_cb+0x2a8>)
 80047da:	789b      	ldrb	r3, [r3, #2]
 80047dc:	2b03      	cmp	r3, #3
 80047de:	d002      	beq.n	80047e6 <dfu_moded_control_xfer_cb+0x236>
 80047e0:	2b06      	cmp	r3, #6
 80047e2:	d008      	beq.n	80047f6 <dfu_moded_control_xfer_cb+0x246>
 80047e4:	e00f      	b.n	8004806 <dfu_moded_control_xfer_cb+0x256>
        {
          case DFU_DNLOAD_SYNC:
            return process_download_get_status(rhport, stage, request);
 80047e6:	79b9      	ldrb	r1, [r7, #6]
 80047e8:	79fb      	ldrb	r3, [r7, #7]
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 f873 	bl	80048d8 <process_download_get_status>
 80047f2:	4603      	mov	r3, r0
 80047f4:	e02c      	b.n	8004850 <dfu_moded_control_xfer_cb+0x2a0>
          break;

          case DFU_MANIFEST_SYNC:
            return process_manifest_get_status(rhport, stage, request);
 80047f6:	79b9      	ldrb	r1, [r7, #6]
 80047f8:	79fb      	ldrb	r3, [r7, #7]
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 f8b5 	bl	800496c <process_manifest_get_status>
 8004802:	4603      	mov	r3, r0
 8004804:	e024      	b.n	8004850 <dfu_moded_control_xfer_cb+0x2a0>
          break;

          default:
            if ( stage == CONTROL_STAGE_SETUP ) return reply_getstatus(rhport, request, _dfu_ctx.state, _dfu_ctx.status, 0);
 8004806:	79bb      	ldrb	r3, [r7, #6]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d10b      	bne.n	8004824 <dfu_moded_control_xfer_cb+0x274>
 800480c:	4b12      	ldr	r3, [pc, #72]	; (8004858 <dfu_moded_control_xfer_cb+0x2a8>)
 800480e:	789a      	ldrb	r2, [r3, #2]
 8004810:	4b11      	ldr	r3, [pc, #68]	; (8004858 <dfu_moded_control_xfer_cb+0x2a8>)
 8004812:	78db      	ldrb	r3, [r3, #3]
 8004814:	79f8      	ldrb	r0, [r7, #7]
 8004816:	2100      	movs	r1, #0
 8004818:	9100      	str	r1, [sp, #0]
 800481a:	6839      	ldr	r1, [r7, #0]
 800481c:	f000 f8ea 	bl	80049f4 <reply_getstatus>
 8004820:	4603      	mov	r3, r0
 8004822:	e015      	b.n	8004850 <dfu_moded_control_xfer_cb+0x2a0>
          break;
 8004824:	bf00      	nop
        }
      break;
 8004826:	e012      	b.n	800484e <dfu_moded_control_xfer_cb+0x29e>

      default: return false; // stall unsupported request
 8004828:	2300      	movs	r3, #0
 800482a:	e011      	b.n	8004850 <dfu_moded_control_xfer_cb+0x2a0>
    }
  }else
  {
    return false; // unsupported request
 800482c:	2300      	movs	r3, #0
 800482e:	e00f      	b.n	8004850 <dfu_moded_control_xfer_cb+0x2a0>
      break;
 8004830:	bf00      	nop
 8004832:	e00c      	b.n	800484e <dfu_moded_control_xfer_cb+0x29e>
      break;
 8004834:	bf00      	nop
 8004836:	e00a      	b.n	800484e <dfu_moded_control_xfer_cb+0x29e>
      break;
 8004838:	bf00      	nop
 800483a:	e008      	b.n	800484e <dfu_moded_control_xfer_cb+0x29e>
      break;
 800483c:	bf00      	nop
 800483e:	e006      	b.n	800484e <dfu_moded_control_xfer_cb+0x29e>
      break;
 8004840:	bf00      	nop
 8004842:	e004      	b.n	800484e <dfu_moded_control_xfer_cb+0x29e>
      break;
 8004844:	bf00      	nop
 8004846:	e002      	b.n	800484e <dfu_moded_control_xfer_cb+0x29e>
      break;
 8004848:	bf00      	nop
 800484a:	e000      	b.n	800484e <dfu_moded_control_xfer_cb+0x29e>
      break;
 800484c:	bf00      	nop
  }

  return true;
 800484e:	2301      	movs	r3, #1
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	20006dd4 	.word	0x20006dd4
 800485c:	20006dd5 	.word	0x20006dd5
 8004860:	08003029 	.word	0x08003029
 8004864:	20006dd6 	.word	0x20006dd6
 8004868:	0800300d 	.word	0x0800300d
 800486c:	08002fc5 	.word	0x08002fc5
 8004870:	20006de0 	.word	0x20006de0

08004874 <tud_dfu_finish_flashing>:

void tud_dfu_finish_flashing(uint8_t status)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	4603      	mov	r3, r0
 800487c:	71fb      	strb	r3, [r7, #7]
  _dfu_ctx.flashing_in_progress = false;
 800487e:	4b15      	ldr	r3, [pc, #84]	; (80048d4 <tud_dfu_finish_flashing+0x60>)
 8004880:	2200      	movs	r2, #0
 8004882:	711a      	strb	r2, [r3, #4]

  if ( status == DFU_STATUS_OK )
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d117      	bne.n	80048ba <tud_dfu_finish_flashing+0x46>
  {
    if (_dfu_ctx.state == DFU_DNBUSY)
 800488a:	4b12      	ldr	r3, [pc, #72]	; (80048d4 <tud_dfu_finish_flashing+0x60>)
 800488c:	789b      	ldrb	r3, [r3, #2]
 800488e:	2b04      	cmp	r3, #4
 8004890:	d103      	bne.n	800489a <tud_dfu_finish_flashing+0x26>
    {
      _dfu_ctx.state = DFU_DNLOAD_SYNC;
 8004892:	4b10      	ldr	r3, [pc, #64]	; (80048d4 <tud_dfu_finish_flashing+0x60>)
 8004894:	2203      	movs	r2, #3
 8004896:	709a      	strb	r2, [r3, #2]
  {
    // failed while flashing, move to dfuError
    _dfu_ctx.state = DFU_ERROR;
    _dfu_ctx.status = (dfu_status_t)status;
  }
}
 8004898:	e015      	b.n	80048c6 <tud_dfu_finish_flashing+0x52>
    else if (_dfu_ctx.state == DFU_MANIFEST)
 800489a:	4b0e      	ldr	r3, [pc, #56]	; (80048d4 <tud_dfu_finish_flashing+0x60>)
 800489c:	789b      	ldrb	r3, [r3, #2]
 800489e:	2b07      	cmp	r3, #7
 80048a0:	d111      	bne.n	80048c6 <tud_dfu_finish_flashing+0x52>
      _dfu_ctx.state = (_dfu_ctx.attrs & DFU_ATTR_MANIFESTATION_TOLERANT)
 80048a2:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <tud_dfu_finish_flashing+0x60>)
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	f003 0304 	and.w	r3, r3, #4
                               ? DFU_MANIFEST_SYNC : DFU_MANIFEST_WAIT_RESET;
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <tud_dfu_finish_flashing+0x3e>
 80048ae:	2206      	movs	r2, #6
 80048b0:	e000      	b.n	80048b4 <tud_dfu_finish_flashing+0x40>
 80048b2:	2208      	movs	r2, #8
      _dfu_ctx.state = (_dfu_ctx.attrs & DFU_ATTR_MANIFESTATION_TOLERANT)
 80048b4:	4b07      	ldr	r3, [pc, #28]	; (80048d4 <tud_dfu_finish_flashing+0x60>)
 80048b6:	709a      	strb	r2, [r3, #2]
}
 80048b8:	e005      	b.n	80048c6 <tud_dfu_finish_flashing+0x52>
    _dfu_ctx.state = DFU_ERROR;
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <tud_dfu_finish_flashing+0x60>)
 80048bc:	220a      	movs	r2, #10
 80048be:	709a      	strb	r2, [r3, #2]
    _dfu_ctx.status = (dfu_status_t)status;
 80048c0:	4a04      	ldr	r2, [pc, #16]	; (80048d4 <tud_dfu_finish_flashing+0x60>)
 80048c2:	79fb      	ldrb	r3, [r7, #7]
 80048c4:	70d3      	strb	r3, [r2, #3]
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	20006dd4 	.word	0x20006dd4

080048d8 <process_download_get_status>:

static bool process_download_get_status(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af02      	add	r7, sp, #8
 80048de:	4603      	mov	r3, r0
 80048e0:	603a      	str	r2, [r7, #0]
 80048e2:	71fb      	strb	r3, [r7, #7]
 80048e4:	460b      	mov	r3, r1
 80048e6:	71bb      	strb	r3, [r7, #6]
  if ( stage == CONTROL_STAGE_SETUP )
 80048e8:	79bb      	ldrb	r3, [r7, #6]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d11e      	bne.n	800492c <process_download_get_status+0x54>
  {
    // only transition to next state on CONTROL_STAGE_ACK
    dfu_state_t next_state;
    uint32_t timeout;

    if ( _dfu_ctx.flashing_in_progress )
 80048ee:	4b1d      	ldr	r3, [pc, #116]	; (8004964 <process_download_get_status+0x8c>)
 80048f0:	791b      	ldrb	r3, [r3, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <process_download_get_status+0x34>
    {
      next_state = DFU_DNBUSY;
 80048f6:	2304      	movs	r3, #4
 80048f8:	73fb      	strb	r3, [r7, #15]
      timeout = tud_dfu_get_timeout_cb(_dfu_ctx.alt, (uint8_t) next_state);
 80048fa:	4b1a      	ldr	r3, [pc, #104]	; (8004964 <process_download_get_status+0x8c>)
 80048fc:	785b      	ldrb	r3, [r3, #1]
 80048fe:	7bfa      	ldrb	r2, [r7, #15]
 8004900:	4611      	mov	r1, r2
 8004902:	4618      	mov	r0, r3
 8004904:	f7fe fb0a 	bl	8002f1c <tud_dfu_get_timeout_cb>
 8004908:	60b8      	str	r0, [r7, #8]
 800490a:	e003      	b.n	8004914 <process_download_get_status+0x3c>
    }
    else
    {
      next_state = DFU_DNLOAD_IDLE;
 800490c:	2305      	movs	r3, #5
 800490e:	73fb      	strb	r3, [r7, #15]
      timeout = 0;
 8004910:	2300      	movs	r3, #0
 8004912:	60bb      	str	r3, [r7, #8]
    }

    return reply_getstatus(rhport, request, next_state, _dfu_ctx.status, timeout);
 8004914:	4b13      	ldr	r3, [pc, #76]	; (8004964 <process_download_get_status+0x8c>)
 8004916:	78d9      	ldrb	r1, [r3, #3]
 8004918:	7bfa      	ldrb	r2, [r7, #15]
 800491a:	79f8      	ldrb	r0, [r7, #7]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	460b      	mov	r3, r1
 8004922:	6839      	ldr	r1, [r7, #0]
 8004924:	f000 f866 	bl	80049f4 <reply_getstatus>
 8004928:	4603      	mov	r3, r0
 800492a:	e017      	b.n	800495c <process_download_get_status+0x84>
  }
  else if ( stage == CONTROL_STAGE_ACK )
 800492c:	79bb      	ldrb	r3, [r7, #6]
 800492e:	2b03      	cmp	r3, #3
 8004930:	d113      	bne.n	800495a <process_download_get_status+0x82>
  {
    if ( _dfu_ctx.flashing_in_progress )
 8004932:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <process_download_get_status+0x8c>)
 8004934:	791b      	ldrb	r3, [r3, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00c      	beq.n	8004954 <process_download_get_status+0x7c>
    {
      _dfu_ctx.state = DFU_DNBUSY;
 800493a:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <process_download_get_status+0x8c>)
 800493c:	2204      	movs	r2, #4
 800493e:	709a      	strb	r2, [r3, #2]
      tud_dfu_download_cb(_dfu_ctx.alt, _dfu_ctx.block, _dfu_ctx.transfer_buf, _dfu_ctx.length);
 8004940:	4b08      	ldr	r3, [pc, #32]	; (8004964 <process_download_get_status+0x8c>)
 8004942:	7858      	ldrb	r0, [r3, #1]
 8004944:	4b07      	ldr	r3, [pc, #28]	; (8004964 <process_download_get_status+0x8c>)
 8004946:	88d9      	ldrh	r1, [r3, #6]
 8004948:	4b06      	ldr	r3, [pc, #24]	; (8004964 <process_download_get_status+0x8c>)
 800494a:	891b      	ldrh	r3, [r3, #8]
 800494c:	4a06      	ldr	r2, [pc, #24]	; (8004968 <process_download_get_status+0x90>)
 800494e:	f7fe fb03 	bl	8002f58 <tud_dfu_download_cb>
 8004952:	e002      	b.n	800495a <process_download_get_status+0x82>
    }else
    {
      _dfu_ctx.state = DFU_DNLOAD_IDLE;
 8004954:	4b03      	ldr	r3, [pc, #12]	; (8004964 <process_download_get_status+0x8c>)
 8004956:	2205      	movs	r2, #5
 8004958:	709a      	strb	r2, [r3, #2]
    }
  }

  return true;
 800495a:	2301      	movs	r3, #1
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	20006dd4 	.word	0x20006dd4
 8004968:	20006de0 	.word	0x20006de0

0800496c <process_manifest_get_status>:

static bool process_manifest_get_status(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af02      	add	r7, sp, #8
 8004972:	4603      	mov	r3, r0
 8004974:	603a      	str	r2, [r7, #0]
 8004976:	71fb      	strb	r3, [r7, #7]
 8004978:	460b      	mov	r3, r1
 800497a:	71bb      	strb	r3, [r7, #6]
  if ( stage == CONTROL_STAGE_SETUP )
 800497c:	79bb      	ldrb	r3, [r7, #6]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d11e      	bne.n	80049c0 <process_manifest_get_status+0x54>
  {
    // only transition to next state on CONTROL_STAGE_ACK
    dfu_state_t next_state;
    uint32_t timeout;

    if ( _dfu_ctx.flashing_in_progress )
 8004982:	4b1b      	ldr	r3, [pc, #108]	; (80049f0 <process_manifest_get_status+0x84>)
 8004984:	791b      	ldrb	r3, [r3, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <process_manifest_get_status+0x34>
    {
      next_state = DFU_MANIFEST;
 800498a:	2307      	movs	r3, #7
 800498c:	73fb      	strb	r3, [r7, #15]
      timeout = tud_dfu_get_timeout_cb(_dfu_ctx.alt, next_state);
 800498e:	4b18      	ldr	r3, [pc, #96]	; (80049f0 <process_manifest_get_status+0x84>)
 8004990:	785b      	ldrb	r3, [r3, #1]
 8004992:	7bfa      	ldrb	r2, [r7, #15]
 8004994:	4611      	mov	r1, r2
 8004996:	4618      	mov	r0, r3
 8004998:	f7fe fac0 	bl	8002f1c <tud_dfu_get_timeout_cb>
 800499c:	60b8      	str	r0, [r7, #8]
 800499e:	e003      	b.n	80049a8 <process_manifest_get_status+0x3c>
    }
    else
    {
      next_state = DFU_IDLE;
 80049a0:	2302      	movs	r3, #2
 80049a2:	73fb      	strb	r3, [r7, #15]
      timeout = 0;
 80049a4:	2300      	movs	r3, #0
 80049a6:	60bb      	str	r3, [r7, #8]
    }

    return reply_getstatus(rhport, request, next_state, _dfu_ctx.status, timeout);
 80049a8:	4b11      	ldr	r3, [pc, #68]	; (80049f0 <process_manifest_get_status+0x84>)
 80049aa:	78d9      	ldrb	r1, [r3, #3]
 80049ac:	7bfa      	ldrb	r2, [r7, #15]
 80049ae:	79f8      	ldrb	r0, [r7, #7]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	460b      	mov	r3, r1
 80049b6:	6839      	ldr	r1, [r7, #0]
 80049b8:	f000 f81c 	bl	80049f4 <reply_getstatus>
 80049bc:	4603      	mov	r3, r0
 80049be:	e013      	b.n	80049e8 <process_manifest_get_status+0x7c>
  }
  else if ( stage == CONTROL_STAGE_ACK )
 80049c0:	79bb      	ldrb	r3, [r7, #6]
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	d10f      	bne.n	80049e6 <process_manifest_get_status+0x7a>
  {
    if ( _dfu_ctx.flashing_in_progress )
 80049c6:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <process_manifest_get_status+0x84>)
 80049c8:	791b      	ldrb	r3, [r3, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d008      	beq.n	80049e0 <process_manifest_get_status+0x74>
    {
      _dfu_ctx.state = DFU_MANIFEST;
 80049ce:	4b08      	ldr	r3, [pc, #32]	; (80049f0 <process_manifest_get_status+0x84>)
 80049d0:	2207      	movs	r2, #7
 80049d2:	709a      	strb	r2, [r3, #2]
      tud_dfu_manifest_cb(_dfu_ctx.alt);
 80049d4:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <process_manifest_get_status+0x84>)
 80049d6:	785b      	ldrb	r3, [r3, #1]
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fe fae1 	bl	8002fa0 <tud_dfu_manifest_cb>
 80049de:	e002      	b.n	80049e6 <process_manifest_get_status+0x7a>
    }
    else
    {
      _dfu_ctx.state = DFU_IDLE;
 80049e0:	4b03      	ldr	r3, [pc, #12]	; (80049f0 <process_manifest_get_status+0x84>)
 80049e2:	2202      	movs	r2, #2
 80049e4:	709a      	strb	r2, [r3, #2]
    }
  }

  return true;
 80049e6:	2301      	movs	r3, #1
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	20006dd4 	.word	0x20006dd4

080049f4 <reply_getstatus>:

static bool reply_getstatus(uint8_t rhport, tusb_control_request_t const * request, dfu_state_t state, dfu_status_t status, uint32_t timeout)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6039      	str	r1, [r7, #0]
 80049fc:	4611      	mov	r1, r2
 80049fe:	461a      	mov	r2, r3
 8004a00:	4603      	mov	r3, r0
 8004a02:	71fb      	strb	r3, [r7, #7]
 8004a04:	460b      	mov	r3, r1
 8004a06:	71bb      	strb	r3, [r7, #6]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	717b      	strb	r3, [r7, #5]
  dfu_status_response_t resp;
  resp.bStatus          = (uint8_t) status;
 8004a0c:	797b      	ldrb	r3, [r7, #5]
 8004a0e:	723b      	strb	r3, [r7, #8]
  resp.bwPollTimeout[0] = TU_U32_BYTE0(timeout);
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	727b      	strb	r3, [r7, #9]
  resp.bwPollTimeout[1] = TU_U32_BYTE1(timeout);
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	0a1b      	lsrs	r3, r3, #8
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	72bb      	strb	r3, [r7, #10]
  resp.bwPollTimeout[2] = TU_U32_BYTE2(timeout);
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	0c1b      	lsrs	r3, r3, #16
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	72fb      	strb	r3, [r7, #11]
  resp.bState           = (uint8_t) state;
 8004a26:	79bb      	ldrb	r3, [r7, #6]
 8004a28:	733b      	strb	r3, [r7, #12]
  resp.iString          = 0;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	737b      	strb	r3, [r7, #13]

  return tud_control_xfer(rhport, request, &resp, sizeof(dfu_status_response_t));
 8004a2e:	f107 0208 	add.w	r2, r7, #8
 8004a32:	79f8      	ldrb	r0, [r7, #7]
 8004a34:	2306      	movs	r3, #6
 8004a36:	6839      	ldr	r1, [r7, #0]
 8004a38:	f002 f964 	bl	8006d04 <tud_control_xfer>
 8004a3c:	4603      	mov	r3, r0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <tu_fifo_config>:
  TU_FIFO_COPY_INC,            ///< Copy from/to an increasing source/destination address - default mode
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b085      	sub	sp, #20
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	60f8      	str	r0, [r7, #12]
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	4611      	mov	r1, r2
 8004a52:	461a      	mov	r2, r3
 8004a54:	460b      	mov	r3, r1
 8004a56:	80fb      	strh	r3, [r7, #6]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	80bb      	strh	r3, [r7, #4]
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
 8004a5c:	88fb      	ldrh	r3, [r7, #6]
 8004a5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a62:	d901      	bls.n	8004a68 <tu_fifo_config+0x22>
 8004a64:	2300      	movs	r3, #0
 8004a66:	e020      	b.n	8004aaa <tu_fifo_config+0x64>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer = (uint8_t*) buffer;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	601a      	str	r2, [r3, #0]
  f->depth  = depth;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	88fa      	ldrh	r2, [r7, #6]
 8004a72:	809a      	strh	r2, [r3, #4]
  f->item_size = item_size;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	88ba      	ldrh	r2, [r7, #4]
 8004a78:	80da      	strh	r2, [r3, #6]
  f->overwritable = overwritable;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	7e3a      	ldrb	r2, [r7, #24]
 8004a7e:	721a      	strb	r2, [r3, #8]

  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  f->max_pointer_idx = (uint16_t) (2*depth - 1);
 8004a80:	88fb      	ldrh	r3, [r7, #6]
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	3b01      	subs	r3, #1
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	819a      	strh	r2, [r3, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	899b      	ldrh	r3, [r3, #12]
 8004a92:	43db      	mvns	r3, r3
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	815a      	strh	r2, [r3, #10]

  f->rd_idx = f->wr_idx = 0;
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	460a      	mov	r2, r1
 8004aa0:	81da      	strh	r2, [r3, #14]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	460a      	mov	r2, r1
 8004aa6:	821a      	strh	r2, [r3, #16]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8004aa8:	2301      	movs	r3, #1
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <_ff_mod>:

// Static functions are intended to work on local variables
static inline uint16_t _ff_mod(uint16_t idx, uint16_t depth)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	4603      	mov	r3, r0
 8004abe:	460a      	mov	r2, r1
 8004ac0:	80fb      	strh	r3, [r7, #6]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	80bb      	strh	r3, [r7, #4]
  while ( idx >= depth) idx -= depth;
 8004ac6:	e003      	b.n	8004ad0 <_ff_mod+0x1a>
 8004ac8:	88fa      	ldrh	r2, [r7, #6]
 8004aca:	88bb      	ldrh	r3, [r7, #4]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	80fb      	strh	r3, [r7, #6]
 8004ad0:	88fa      	ldrh	r2, [r7, #6]
 8004ad2:	88bb      	ldrh	r3, [r7, #4]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d2f7      	bcs.n	8004ac8 <_ff_mod+0x12>
  return idx;
 8004ad8:	88fb      	ldrh	r3, [r7, #6]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <_ff_push_const_addr>:

// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsis.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b08a      	sub	sp, #40	; 0x28
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	60f8      	str	r0, [r7, #12]
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	4613      	mov	r3, r2
 8004af2:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8004af8:	88fb      	ldrh	r3, [r7, #6]
 8004afa:	089b      	lsrs	r3, r3, #2
 8004afc:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 8004afe:	e00b      	b.n	8004b18 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *rx_fifo);
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	61ba      	str	r2, [r7, #24]
 8004b08:	617b      	str	r3, [r7, #20]

TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	bf00      	nop
    ff_buf += 4;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	3304      	adds	r3, #4
 8004b16:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8004b18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b1a:	1e5a      	subs	r2, r3, #1
 8004b1c:	84fa      	strh	r2, [r7, #38]	; 0x26
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1ee      	bne.n	8004b00 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8004b22:	88fb      	ldrh	r3, [r7, #6]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8004b2c:	7ffb      	ldrb	r3, [r7, #31]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d009      	beq.n	8004b46 <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *rx_fifo;
 8004b32:	6a3b      	ldr	r3, [r7, #32]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8004b38:	7ffa      	ldrb	r2, [r7, #31]
 8004b3a:	f107 0310 	add.w	r3, r7, #16
 8004b3e:	4619      	mov	r1, r3
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f00a fddb 	bl	800f6fc <memcpy>
  }
}
 8004b46:	bf00      	nop
 8004b48:	3728      	adds	r7, #40	; 0x28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b08a      	sub	sp, #40	; 0x28
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	60f8      	str	r0, [r7, #12]
 8004b56:	60b9      	str	r1, [r7, #8]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * tx_fifo = (volatile uint32_t *) app_buf;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	623b      	str	r3, [r7, #32]

  // Pushing full available 32 bit words to const app address
  uint16_t full_words = len >> 2;
 8004b60:	88fb      	ldrh	r3, [r7, #6]
 8004b62:	089b      	lsrs	r3, r3, #2
 8004b64:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 8004b66:	e008      	b.n	8004b7a <_ff_pull_const_addr+0x2c>
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	61bb      	str	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	681a      	ldr	r2, [r3, #0]
  {
    *tx_fifo = tu_unaligned_read32(ff_buf);
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	3304      	adds	r3, #4
 8004b78:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 8004b7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b7c:	1e5a      	subs	r2, r3, #1
 8004b7e:	84fa      	strh	r2, [r7, #38]	; 0x26
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1f1      	bne.n	8004b68 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const app address
  uint8_t const bytes_rem = len & 0x03;
 8004b84:	88fb      	ldrh	r3, [r7, #6]
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	f003 0303 	and.w	r3, r3, #3
 8004b8c:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8004b8e:	7ffb      	ldrb	r3, [r7, #31]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00b      	beq.n	8004bac <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8004b94:	2300      	movs	r3, #0
 8004b96:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8004b98:	7ffa      	ldrb	r2, [r7, #31]
 8004b9a:	f107 0314 	add.w	r3, r7, #20
 8004b9e:	68b9      	ldr	r1, [r7, #8]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f00a fdab 	bl	800f6fc <memcpy>

    *tx_fifo = tmp32;
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	601a      	str	r2, [r3, #0]
  }
}
 8004bac:	bf00      	nop
 8004bae:	3728      	adds	r7, #40	; 0x28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <_ff_push>:

// send one item to FIFO WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	88fa      	ldrh	r2, [r7, #6]
 8004bc8:	68f9      	ldr	r1, [r7, #12]
 8004bca:	88c9      	ldrh	r1, [r1, #6]
 8004bcc:	fb01 f202 	mul.w	r2, r1, r2
 8004bd0:	1898      	adds	r0, r3, r2
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	88db      	ldrh	r3, [r3, #6]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	f00a fd8f 	bl	800f6fc <memcpy>
}
 8004bde:	bf00      	nop
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <_ff_push_n>:

// send n items to FIFO WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t rel, tu_fifo_copy_mode_t copy_mode)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b08e      	sub	sp, #56	; 0x38
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	4611      	mov	r1, r2
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	80fb      	strh	r3, [r7, #6]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	80bb      	strh	r3, [r7, #4]
  uint16_t const nLin = f->depth - rel;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	889a      	ldrh	r2, [r3, #4]
 8004c00:	88bb      	ldrh	r3, [r7, #4]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const nWrap = n - nLin;
 8004c06:	88fa      	ldrh	r2, [r7, #6]
 8004c08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t nLin_bytes = nLin * f->item_size;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	88db      	ldrh	r3, [r3, #6]
 8004c12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004c14:	fb12 f303 	smulbb	r3, r2, r3
 8004c18:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t nWrap_bytes = nWrap * f->item_size;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	88db      	ldrh	r3, [r3, #6]
 8004c1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c20:	fb12 f303 	smulbb	r3, r2, r3
 8004c24:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	88ba      	ldrh	r2, [r7, #4]
 8004c2c:	68f9      	ldr	r1, [r7, #12]
 8004c2e:	88c9      	ldrh	r1, [r1, #6]
 8004c30:	fb01 f202 	mul.w	r2, r1, r2
 8004c34:	4413      	add	r3, r2
 8004c36:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 8004c38:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <_ff_push_n+0x60>
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d01f      	beq.n	8004c84 <_ff_push_n+0x9e>
        // Write data wrapped part
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
      }
      break;
  }
}
 8004c44:	e097      	b.n	8004d76 <_ff_push_n+0x190>
      if(n <= nLin)
 8004c46:	88fa      	ldrh	r2, [r7, #6]
 8004c48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d80a      	bhi.n	8004c64 <_ff_push_n+0x7e>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8004c4e:	88fb      	ldrh	r3, [r7, #6]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	88d2      	ldrh	r2, [r2, #6]
 8004c54:	fb02 f303 	mul.w	r3, r2, r3
 8004c58:	461a      	mov	r2, r3
 8004c5a:	68b9      	ldr	r1, [r7, #8]
 8004c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c5e:	f00a fd4d 	bl	800f6fc <memcpy>
      break;
 8004c62:	e088      	b.n	8004d76 <_ff_push_n+0x190>
        memcpy(ff_buf, app_buf, nLin_bytes);
 8004c64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c66:	461a      	mov	r2, r3
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c6c:	f00a fd46 	bl	800f6fc <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + nLin_bytes, nWrap_bytes);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6818      	ldr	r0, [r3, #0]
 8004c74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	4413      	add	r3, r2
 8004c7a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	f00a fd3d 	bl	800f6fc <memcpy>
      break;
 8004c82:	e078      	b.n	8004d76 <_ff_push_n+0x190>
      if(n <= nLin)
 8004c84:	88fa      	ldrh	r2, [r7, #6]
 8004c86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d80b      	bhi.n	8004ca4 <_ff_push_n+0xbe>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	88db      	ldrh	r3, [r3, #6]
 8004c90:	88fa      	ldrh	r2, [r7, #6]
 8004c92:	fb12 f303 	smulbb	r3, r2, r3
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	461a      	mov	r2, r3
 8004c9a:	68b9      	ldr	r1, [r7, #8]
 8004c9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c9e:	f7ff ff22 	bl	8004ae6 <_ff_push_const_addr>
      break;
 8004ca2:	e067      	b.n	8004d74 <_ff_push_n+0x18e>
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 8004ca4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ca6:	f023 0303 	bic.w	r3, r3, #3
 8004caa:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8004cac:	8c3b      	ldrh	r3, [r7, #32]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	68b9      	ldr	r1, [r7, #8]
 8004cb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cb4:	f7ff ff17 	bl	8004ae6 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8004cb8:	8c3b      	ldrh	r3, [r7, #32]
 8004cba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cbc:	4413      	add	r3, r2
 8004cbe:	633b      	str	r3, [r7, #48]	; 0x30
        volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	61fb      	str	r3, [r7, #28]
        uint8_t rem = nLin_bytes & 0x03;
 8004cc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	f003 0303 	and.w	r3, r3, #3
 8004ccc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 8004cd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d041      	beq.n	8004d5c <_ff_push_n+0x176>
          uint8_t remrem = (uint8_t) tu_min16(nWrap_bytes, 4-rem);
 8004cd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	f1c3 0304 	rsb	r3, r3, #4
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ce6:	837b      	strh	r3, [r7, #26]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8004cec:	8b7a      	ldrh	r2, [r7, #26]
 8004cee:	8b3b      	ldrh	r3, [r7, #24]
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	bf28      	it	cs
 8004cf4:	4613      	movcs	r3, r2
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          nWrap_bytes -= remrem;
 8004cfc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32 = *rx_fifo;
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8004d0e:	f107 0314 	add.w	r3, r7, #20
 8004d12:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 8004d14:	e007      	b.n	8004d26 <_ff_push_n+0x140>
 8004d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d18:	1c53      	adds	r3, r2, #1
 8004d1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1e:	1c59      	adds	r1, r3, #1
 8004d20:	6339      	str	r1, [r7, #48]	; 0x30
 8004d22:	7812      	ldrb	r2, [r2, #0]
 8004d24:	701a      	strb	r2, [r3, #0]
 8004d26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d2a:	1e5a      	subs	r2, r3, #1
 8004d2c:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1f0      	bne.n	8004d16 <_ff_push_n+0x130>
          ff_buf = f->buffer;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 8004d3a:	e007      	b.n	8004d4c <_ff_push_n+0x166>
 8004d3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d3e:	1c53      	adds	r3, r2, #1
 8004d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	1c59      	adds	r1, r3, #1
 8004d46:	6339      	str	r1, [r7, #48]	; 0x30
 8004d48:	7812      	ldrb	r2, [r2, #0]
 8004d4a:	701a      	strb	r2, [r3, #0]
 8004d4c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004d50:	1e5a      	subs	r2, r3, #1
 8004d52:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f0      	bne.n	8004d3c <_ff_push_n+0x156>
 8004d5a:	e002      	b.n	8004d62 <_ff_push_n+0x17c>
          ff_buf = f->buffer; // wrap around to beginning
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	633b      	str	r3, [r7, #48]	; 0x30
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
 8004d62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <_ff_push_n+0x18e>
 8004d68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	68b9      	ldr	r1, [r7, #8]
 8004d6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d70:	f7ff feb9 	bl	8004ae6 <_ff_push_const_addr>
      break;
 8004d74:	bf00      	nop
}
 8004d76:	bf00      	nop
 8004d78:	3738      	adds	r7, #56	; 0x38
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <_ff_pull>:

// get one item from FIFO WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	88fa      	ldrh	r2, [r7, #6]
 8004d92:	68f9      	ldr	r1, [r7, #12]
 8004d94:	88c9      	ldrh	r1, [r1, #6]
 8004d96:	fb01 f202 	mul.w	r2, r1, r2
 8004d9a:	1899      	adds	r1, r3, r2
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	88db      	ldrh	r3, [r3, #6]
 8004da0:	461a      	mov	r2, r3
 8004da2:	68b8      	ldr	r0, [r7, #8]
 8004da4:	f00a fcaa 	bl	800f6fc <memcpy>
}
 8004da8:	bf00      	nop
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <_ff_pull_n>:

// get n items from FIFO WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rel, tu_fifo_copy_mode_t copy_mode)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b08e      	sub	sp, #56	; 0x38
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	4611      	mov	r1, r2
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	80fb      	strh	r3, [r7, #6]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	80bb      	strh	r3, [r7, #4]
  uint16_t const nLin = f->depth - rel;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	889a      	ldrh	r2, [r3, #4]
 8004dca:	88bb      	ldrh	r3, [r7, #4]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const nWrap = n - nLin; // only used if wrapped
 8004dd0:	88fa      	ldrh	r2, [r7, #6]
 8004dd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t nLin_bytes = nLin * f->item_size;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	88db      	ldrh	r3, [r3, #6]
 8004ddc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004dde:	fb12 f303 	smulbb	r3, r2, r3
 8004de2:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t nWrap_bytes = nWrap * f->item_size;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	88db      	ldrh	r3, [r3, #6]
 8004de8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004dea:	fb12 f303 	smulbb	r3, r2, r3
 8004dee:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	88ba      	ldrh	r2, [r7, #4]
 8004df6:	68f9      	ldr	r1, [r7, #12]
 8004df8:	88c9      	ldrh	r1, [r1, #6]
 8004dfa:	fb01 f202 	mul.w	r2, r1, r2
 8004dfe:	4413      	add	r3, r2
 8004e00:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 8004e02:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <_ff_pull_n+0x60>
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d01f      	beq.n	8004e4e <_ff_pull_n+0x9e>
        // Read data wrapped part
        if (nWrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, nWrap_bytes);
      }
    break;

    default: break;
 8004e0e:	e099      	b.n	8004f44 <_ff_pull_n+0x194>
      if ( n <= nLin )
 8004e10:	88fa      	ldrh	r2, [r7, #6]
 8004e12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d80a      	bhi.n	8004e2e <_ff_pull_n+0x7e>
        memcpy(app_buf, ff_buf, n*f->item_size);
 8004e18:	88fb      	ldrh	r3, [r7, #6]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	88d2      	ldrh	r2, [r2, #6]
 8004e1e:	fb02 f303 	mul.w	r3, r2, r3
 8004e22:	461a      	mov	r2, r3
 8004e24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e26:	68b8      	ldr	r0, [r7, #8]
 8004e28:	f00a fc68 	bl	800f6fc <memcpy>
    break;
 8004e2c:	e08a      	b.n	8004f44 <_ff_pull_n+0x194>
        memcpy(app_buf, ff_buf, nLin_bytes);
 8004e2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e30:	461a      	mov	r2, r3
 8004e32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e34:	68b8      	ldr	r0, [r7, #8]
 8004e36:	f00a fc61 	bl	800f6fc <memcpy>
        memcpy((uint8_t*) app_buf + nLin_bytes, f->buffer, nWrap_bytes);
 8004e3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	18d0      	adds	r0, r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004e46:	4619      	mov	r1, r3
 8004e48:	f00a fc58 	bl	800f6fc <memcpy>
    break;
 8004e4c:	e07a      	b.n	8004f44 <_ff_pull_n+0x194>
      if ( n <= nLin )
 8004e4e:	88fa      	ldrh	r2, [r7, #6]
 8004e50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d80b      	bhi.n	8004e6e <_ff_pull_n+0xbe>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	88db      	ldrh	r3, [r3, #6]
 8004e5a:	88fa      	ldrh	r2, [r7, #6]
 8004e5c:	fb12 f303 	smulbb	r3, r2, r3
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e66:	68b8      	ldr	r0, [r7, #8]
 8004e68:	f7ff fe71 	bl	8004b4e <_ff_pull_const_addr>
    break;
 8004e6c:	e069      	b.n	8004f42 <_ff_pull_n+0x192>
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 8004e6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e70:	f023 0303 	bic.w	r3, r3, #3
 8004e74:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, nLin_4n_bytes);
 8004e76:	8c3b      	ldrh	r3, [r7, #32]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e7c:	68b8      	ldr	r0, [r7, #8]
 8004e7e:	f7ff fe66 	bl	8004b4e <_ff_pull_const_addr>
        ff_buf += nLin_4n_bytes;
 8004e82:	8c3b      	ldrh	r3, [r7, #32]
 8004e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e86:	4413      	add	r3, r2
 8004e88:	633b      	str	r3, [r7, #48]	; 0x30
        volatile uint32_t * tx_fifo = (volatile uint32_t *) app_buf;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	61fb      	str	r3, [r7, #28]
        uint8_t rem = nLin_bytes & 0x03;
 8004e8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 8004e9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d043      	beq.n	8004f2a <_ff_pull_n+0x17a>
          uint8_t remrem = (uint8_t) tu_min16(nWrap_bytes, 4-rem);
 8004ea2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	f1c3 0304 	rsb	r3, r3, #4
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004eb0:	837b      	strh	r3, [r7, #26]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	833b      	strh	r3, [r7, #24]
 8004eb6:	8b7a      	ldrh	r2, [r7, #26]
 8004eb8:	8b3b      	ldrh	r3, [r7, #24]
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	bf28      	it	cs
 8004ebe:	4613      	movcs	r3, r2
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          nWrap_bytes -= remrem;
 8004ec6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32=0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 8004ed6:	f107 0314 	add.w	r3, r7, #20
 8004eda:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8004edc:	e007      	b.n	8004eee <_ff_pull_n+0x13e>
 8004ede:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ee0:	1c53      	adds	r3, r2, #1
 8004ee2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	1c59      	adds	r1, r3, #1
 8004ee8:	62b9      	str	r1, [r7, #40]	; 0x28
 8004eea:	7812      	ldrb	r2, [r2, #0]
 8004eec:	701a      	strb	r2, [r3, #0]
 8004eee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ef2:	1e5a      	subs	r2, r3, #1
 8004ef4:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1f0      	bne.n	8004ede <_ff_pull_n+0x12e>
          ff_buf = f->buffer;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 8004f02:	e007      	b.n	8004f14 <_ff_pull_n+0x164>
 8004f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f06:	1c53      	adds	r3, r2, #1
 8004f08:	633b      	str	r3, [r7, #48]	; 0x30
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0c:	1c59      	adds	r1, r3, #1
 8004f0e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004f10:	7812      	ldrb	r2, [r2, #0]
 8004f12:	701a      	strb	r2, [r3, #0]
 8004f14:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f18:	1e5a      	subs	r2, r3, #1
 8004f1a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1f0      	bne.n	8004f04 <_ff_pull_n+0x154>
          *tx_fifo = tmp32;
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	e002      	b.n	8004f30 <_ff_pull_n+0x180>
          ff_buf = f->buffer; // wrap around to beginning
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	633b      	str	r3, [r7, #48]	; 0x30
        if (nWrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, nWrap_bytes);
 8004f30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d005      	beq.n	8004f42 <_ff_pull_n+0x192>
 8004f36:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004f38:	461a      	mov	r2, r3
 8004f3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f3c:	68b8      	ldr	r0, [r7, #8]
 8004f3e:	f7ff fe06 	bl	8004b4e <_ff_pull_const_addr>
    break;
 8004f42:	bf00      	nop
  }
}
 8004f44:	bf00      	nop
 8004f46:	3738      	adds	r7, #56	; 0x38
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <advance_pointer>:

// Advance an absolute pointer
static uint16_t advance_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	460b      	mov	r3, r1
 8004f56:	807b      	strh	r3, [r7, #2]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	803b      	strh	r3, [r7, #0]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
 8004f5c:	887a      	ldrh	r2, [r7, #2]
 8004f5e:	883b      	ldrh	r3, [r7, #0]
 8004f60:	4413      	add	r3, r2
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	887a      	ldrh	r2, [r7, #2]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d807      	bhi.n	8004f7a <advance_pointer+0x2e>
 8004f6a:	887a      	ldrh	r2, [r7, #2]
 8004f6c:	883b      	ldrh	r3, [r7, #0]
 8004f6e:	4413      	add	r3, r2
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	899b      	ldrh	r3, [r3, #12]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d908      	bls.n	8004f8c <advance_pointer+0x40>
  {
    p = (uint16_t) ((p + offset) + f->non_used_index_space);
 8004f7a:	887a      	ldrh	r2, [r7, #2]
 8004f7c:	883b      	ldrh	r3, [r7, #0]
 8004f7e:	4413      	add	r3, r2
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	895b      	ldrh	r3, [r3, #10]
 8004f86:	4413      	add	r3, r2
 8004f88:	807b      	strh	r3, [r7, #2]
 8004f8a:	e003      	b.n	8004f94 <advance_pointer+0x48>
  }
  else
  {
    p += offset;
 8004f8c:	887a      	ldrh	r2, [r7, #2]
 8004f8e:	883b      	ldrh	r3, [r7, #0]
 8004f90:	4413      	add	r3, r2
 8004f92:	807b      	strh	r3, [r7, #2]
  }
  return p;
 8004f94:	887b      	ldrh	r3, [r7, #2]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <backward_pointer>:

// Backward an absolute pointer
static uint16_t backward_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	460b      	mov	r3, r1
 8004fac:	807b      	strh	r3, [r7, #2]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	803b      	strh	r3, [r7, #0]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p < (uint16_t)(p - offset)) || ((uint16_t)(p - offset) > f->max_pointer_idx))
 8004fb2:	883a      	ldrh	r2, [r7, #0]
 8004fb4:	887b      	ldrh	r3, [r7, #2]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d807      	bhi.n	8004fca <backward_pointer+0x28>
 8004fba:	887a      	ldrh	r2, [r7, #2]
 8004fbc:	883b      	ldrh	r3, [r7, #0]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	899b      	ldrh	r3, [r3, #12]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d908      	bls.n	8004fdc <backward_pointer+0x3a>
  {
    p = (uint16_t) ((p - offset) - f->non_used_index_space);
 8004fca:	887a      	ldrh	r2, [r7, #2]
 8004fcc:	883b      	ldrh	r3, [r7, #0]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	895b      	ldrh	r3, [r3, #10]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	807b      	strh	r3, [r7, #2]
 8004fda:	e003      	b.n	8004fe4 <backward_pointer+0x42>
  }
  else
  {
    p -= offset;
 8004fdc:	887a      	ldrh	r2, [r7, #2]
 8004fde:	883b      	ldrh	r3, [r7, #0]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	807b      	strh	r3, [r7, #2]
  }
  return p;
 8004fe4:	887b      	ldrh	r3, [r7, #2]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <get_relative_pointer>:

// get relative from absolute pointer
static uint16_t get_relative_pointer(tu_fifo_t* f, uint16_t p)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b082      	sub	sp, #8
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	807b      	strh	r3, [r7, #2]
  return _ff_mod(p, f->depth);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	889a      	ldrh	r2, [r3, #4]
 8005002:	887b      	ldrh	r3, [r7, #2]
 8005004:	4611      	mov	r1, r2
 8005006:	4618      	mov	r0, r3
 8005008:	f7ff fd55 	bl	8004ab6 <_ff_mod>
 800500c:	4603      	mov	r3, r0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <_tu_fifo_count>:

// Works on local copies of w and r - return only the difference and as such can be used to determine an overflow
static inline uint16_t _tu_fifo_count(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
 8005016:	b480      	push	{r7}
 8005018:	b085      	sub	sp, #20
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	460b      	mov	r3, r1
 8005020:	807b      	strh	r3, [r7, #2]
 8005022:	4613      	mov	r3, r2
 8005024:	803b      	strh	r3, [r7, #0]
  uint16_t cnt = wAbs-rAbs;
 8005026:	887a      	ldrh	r2, [r7, #2]
 8005028:	883b      	ldrh	r3, [r7, #0]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	81fb      	strh	r3, [r7, #14]

  // In case we have non-power of two depth we need a further modification
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 800502e:	883a      	ldrh	r2, [r7, #0]
 8005030:	887b      	ldrh	r3, [r7, #2]
 8005032:	429a      	cmp	r2, r3
 8005034:	d904      	bls.n	8005040 <_tu_fifo_count+0x2a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	895b      	ldrh	r3, [r3, #10]
 800503a:	89fa      	ldrh	r2, [r7, #14]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	81fb      	strh	r3, [r7, #14]

  return cnt;
 8005040:	89fb      	ldrh	r3, [r7, #14]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <_tu_fifo_empty>:

// Works on local copies of w and r
static inline bool _tu_fifo_empty(uint16_t wAbs, uint16_t rAbs)
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	4603      	mov	r3, r0
 8005056:	460a      	mov	r2, r1
 8005058:	80fb      	strh	r3, [r7, #6]
 800505a:	4613      	mov	r3, r2
 800505c:	80bb      	strh	r3, [r7, #4]
  return wAbs == rAbs;
 800505e:	88fa      	ldrh	r2, [r7, #6]
 8005060:	88bb      	ldrh	r3, [r7, #4]
 8005062:	429a      	cmp	r2, r3
 8005064:	bf0c      	ite	eq
 8005066:	2301      	moveq	r3, #1
 8005068:	2300      	movne	r3, #0
 800506a:	b2db      	uxtb	r3, r3
}
 800506c:	4618      	mov	r0, r3
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <_tu_fifo_full>:

// Works on local copies of w and r
static inline bool _tu_fifo_full(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	807b      	strh	r3, [r7, #2]
 8005084:	4613      	mov	r3, r2
 8005086:	803b      	strh	r3, [r7, #0]
  return (_tu_fifo_count(f, wAbs, rAbs) == f->depth);
 8005088:	883a      	ldrh	r2, [r7, #0]
 800508a:	887b      	ldrh	r3, [r7, #2]
 800508c:	4619      	mov	r1, r3
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7ff ffc1 	bl	8005016 <_tu_fifo_count>
 8005094:	4603      	mov	r3, r0
 8005096:	461a      	mov	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	889b      	ldrh	r3, [r3, #4]
 800509c:	429a      	cmp	r2, r3
 800509e:	bf0c      	ite	eq
 80050a0:	2301      	moveq	r3, #1
 80050a2:	2300      	movne	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <_tu_fifo_correct_read_pointer>:
}

// Works on local copies of w
// For more details see _tu_fifo_overflow()!
static inline void _tu_fifo_correct_read_pointer(tu_fifo_t* f, uint16_t wAbs)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b082      	sub	sp, #8
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	460b      	mov	r3, r1
 80050b8:	807b      	strh	r3, [r7, #2]
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	889a      	ldrh	r2, [r3, #4]
 80050be:	887b      	ldrh	r3, [r7, #2]
 80050c0:	4619      	mov	r1, r3
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7ff ff6d 	bl	8004fa2 <backward_pointer>
 80050c8:	4603      	mov	r3, r0
 80050ca:	461a      	mov	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	821a      	strh	r2, [r3, #16]
}
 80050d0:	bf00      	nop
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <_tu_fifo_peek>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wAbs, uint16_t rAbs)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	4611      	mov	r1, r2
 80050e4:	461a      	mov	r2, r3
 80050e6:	460b      	mov	r3, r1
 80050e8:	80fb      	strh	r3, [r7, #6]
 80050ea:	4613      	mov	r3, r2
 80050ec:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _tu_fifo_count(f, wAbs, rAbs);
 80050ee:	88ba      	ldrh	r2, [r7, #4]
 80050f0:	88fb      	ldrh	r3, [r7, #6]
 80050f2:	4619      	mov	r1, r3
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f7ff ff8e 	bl	8005016 <_tu_fifo_count>
 80050fa:	4603      	mov	r3, r0
 80050fc:	82fb      	strh	r3, [r7, #22]

  // Check overflow and correct if required
  if (cnt > f->depth)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	889b      	ldrh	r3, [r3, #4]
 8005102:	8afa      	ldrh	r2, [r7, #22]
 8005104:	429a      	cmp	r2, r3
 8005106:	d907      	bls.n	8005118 <_tu_fifo_peek+0x40>
  {
    _tu_fifo_correct_read_pointer(f, wAbs);
 8005108:	88fb      	ldrh	r3, [r7, #6]
 800510a:	4619      	mov	r1, r3
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f7ff ffce 	bl	80050ae <_tu_fifo_correct_read_pointer>
    cnt = f->depth;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	889b      	ldrh	r3, [r3, #4]
 8005116:	82fb      	strh	r3, [r7, #22]
  }

  // Skip beginning of buffer
  if (cnt == 0) return false;
 8005118:	8afb      	ldrh	r3, [r7, #22]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <_tu_fifo_peek+0x4a>
 800511e:	2300      	movs	r3, #0
 8005120:	e00d      	b.n	800513e <_tu_fifo_peek+0x66>

  uint16_t rRel = get_relative_pointer(f, rAbs);
 8005122:	88bb      	ldrh	r3, [r7, #4]
 8005124:	4619      	mov	r1, r3
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f7ff ff63 	bl	8004ff2 <get_relative_pointer>
 800512c:	4603      	mov	r3, r0
 800512e:	82bb      	strh	r3, [r7, #20]

  // Peek data
  _ff_pull(f, p_buffer, rRel);
 8005130:	8abb      	ldrh	r3, [r7, #20]
 8005132:	461a      	mov	r2, r3
 8005134:	68b9      	ldr	r1, [r7, #8]
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f7ff fe21 	bl	8004d7e <_ff_pull>

  return true;
 800513c:	2301      	movs	r3, #1
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wAbs, uint16_t rAbs, tu_fifo_copy_mode_t copy_mode)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b088      	sub	sp, #32
 800514a:	af02      	add	r7, sp, #8
 800514c:	60f8      	str	r0, [r7, #12]
 800514e:	60b9      	str	r1, [r7, #8]
 8005150:	4611      	mov	r1, r2
 8005152:	461a      	mov	r2, r3
 8005154:	460b      	mov	r3, r1
 8005156:	80fb      	strh	r3, [r7, #6]
 8005158:	4613      	mov	r3, r2
 800515a:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _tu_fifo_count(f, wAbs, rAbs);
 800515c:	8c3a      	ldrh	r2, [r7, #32]
 800515e:	88bb      	ldrh	r3, [r7, #4]
 8005160:	4619      	mov	r1, r3
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f7ff ff57 	bl	8005016 <_tu_fifo_count>
 8005168:	4603      	mov	r3, r0
 800516a:	82fb      	strh	r3, [r7, #22]

  // Check overflow and correct if required
  if (cnt > f->depth)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	889b      	ldrh	r3, [r3, #4]
 8005170:	8afa      	ldrh	r2, [r7, #22]
 8005172:	429a      	cmp	r2, r3
 8005174:	d90a      	bls.n	800518c <_tu_fifo_peek_n+0x46>
  {
    _tu_fifo_correct_read_pointer(f, wAbs);
 8005176:	88bb      	ldrh	r3, [r7, #4]
 8005178:	4619      	mov	r1, r3
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f7ff ff97 	bl	80050ae <_tu_fifo_correct_read_pointer>
    rAbs = f->rd_idx;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8a1b      	ldrh	r3, [r3, #16]
 8005184:	843b      	strh	r3, [r7, #32]
    cnt = f->depth;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	889b      	ldrh	r3, [r3, #4]
 800518a:	82fb      	strh	r3, [r7, #22]
  }

  // Skip beginning of buffer
  if (cnt == 0) return 0;
 800518c:	8afb      	ldrh	r3, [r7, #22]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <_tu_fifo_peek_n+0x50>
 8005192:	2300      	movs	r3, #0
 8005194:	e017      	b.n	80051c6 <_tu_fifo_peek_n+0x80>

  // Check if we can read something at and after offset - if too less is available we read what remains
  if (cnt < n) n = cnt;
 8005196:	8afa      	ldrh	r2, [r7, #22]
 8005198:	88fb      	ldrh	r3, [r7, #6]
 800519a:	429a      	cmp	r2, r3
 800519c:	d201      	bcs.n	80051a2 <_tu_fifo_peek_n+0x5c>
 800519e:	8afb      	ldrh	r3, [r7, #22]
 80051a0:	80fb      	strh	r3, [r7, #6]

  uint16_t rRel = get_relative_pointer(f, rAbs);
 80051a2:	8c3b      	ldrh	r3, [r7, #32]
 80051a4:	4619      	mov	r1, r3
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f7ff ff23 	bl	8004ff2 <get_relative_pointer>
 80051ac:	4603      	mov	r3, r0
 80051ae:	82bb      	strh	r3, [r7, #20]

  // Peek data
  _ff_pull_n(f, p_buffer, n, rRel, copy_mode);
 80051b0:	8ab9      	ldrh	r1, [r7, #20]
 80051b2:	88fa      	ldrh	r2, [r7, #6]
 80051b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	460b      	mov	r3, r1
 80051bc:	68b9      	ldr	r1, [r7, #8]
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f7ff fdf6 	bl	8004db0 <_ff_pull_n>

  return n;
 80051c4:	88fb      	ldrh	r3, [r7, #6]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <_tu_fifo_remaining>:

// Works on local copies of w and r
static inline uint16_t _tu_fifo_remaining(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
 80051ce:	b590      	push	{r4, r7, lr}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	460b      	mov	r3, r1
 80051d8:	807b      	strh	r3, [r7, #2]
 80051da:	4613      	mov	r3, r2
 80051dc:	803b      	strh	r3, [r7, #0]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	889c      	ldrh	r4, [r3, #4]
 80051e2:	883a      	ldrh	r2, [r7, #0]
 80051e4:	887b      	ldrh	r3, [r7, #2]
 80051e6:	4619      	mov	r1, r3
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7ff ff14 	bl	8005016 <_tu_fifo_count>
 80051ee:	4603      	mov	r3, r0
 80051f0:	1ae3      	subs	r3, r4, r3
 80051f2:	b29b      	uxth	r3, r3
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd90      	pop	{r4, r7, pc}

080051fc <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08a      	sub	sp, #40	; 0x28
 8005200:	af02      	add	r7, sp, #8
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	4611      	mov	r1, r2
 8005208:	461a      	mov	r2, r3
 800520a:	460b      	mov	r3, r1
 800520c:	80fb      	strh	r3, [r7, #6]
 800520e:	4613      	mov	r3, r2
 8005210:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 8005212:	88fb      	ldrh	r3, [r7, #6]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <_tu_fifo_write_n+0x20>
 8005218:	2300      	movs	r3, #0
 800521a:	e053      	b.n	80052c4 <_tu_fifo_write_n+0xc8>

  _ff_lock(f->mutex_wr);

  uint16_t w = f->wr_idx, r = f->rd_idx;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	89db      	ldrh	r3, [r3, #14]
 8005220:	83fb      	strh	r3, [r7, #30]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8a1b      	ldrh	r3, [r3, #16]
 8005226:	82fb      	strh	r3, [r7, #22]
  uint8_t const* buf8 = (uint8_t const*) data;
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	61bb      	str	r3, [r7, #24]

  if (!f->overwritable)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	7a1b      	ldrb	r3, [r3, #8]
 8005230:	f083 0301 	eor.w	r3, r3, #1
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d013      	beq.n	8005262 <_tu_fifo_write_n+0x66>
  {
    // Not overwritable limit up to full
    n = tu_min16(n, _tu_fifo_remaining(f, w, r));
 800523a:	8afa      	ldrh	r2, [r7, #22]
 800523c:	8bfb      	ldrh	r3, [r7, #30]
 800523e:	4619      	mov	r1, r3
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f7ff ffc4 	bl	80051ce <_tu_fifo_remaining>
 8005246:	4603      	mov	r3, r0
 8005248:	461a      	mov	r2, r3
 800524a:	88fb      	ldrh	r3, [r7, #6]
 800524c:	827b      	strh	r3, [r7, #18]
 800524e:	4613      	mov	r3, r2
 8005250:	823b      	strh	r3, [r7, #16]
 8005252:	8a7a      	ldrh	r2, [r7, #18]
 8005254:	8a3b      	ldrh	r3, [r7, #16]
 8005256:	4293      	cmp	r3, r2
 8005258:	bf28      	it	cs
 800525a:	4613      	movcs	r3, r2
 800525c:	b29b      	uxth	r3, r3
 800525e:	80fb      	strh	r3, [r7, #6]
 8005260:	e015      	b.n	800528e <_tu_fifo_write_n+0x92>
  }
  else if (n >= f->depth)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	889b      	ldrh	r3, [r3, #4]
 8005266:	88fa      	ldrh	r2, [r7, #6]
 8005268:	429a      	cmp	r2, r3
 800526a:	d310      	bcc.n	800528e <_tu_fifo_write_n+0x92>
  {
    // Only copy last part
    buf8 = buf8 + (n - f->depth) * f->item_size;
 800526c:	88fb      	ldrh	r3, [r7, #6]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	8892      	ldrh	r2, [r2, #4]
 8005272:	1a9b      	subs	r3, r3, r2
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	88d2      	ldrh	r2, [r2, #6]
 8005278:	fb02 f303 	mul.w	r3, r2, r3
 800527c:	461a      	mov	r2, r3
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	4413      	add	r3, r2
 8005282:	61bb      	str	r3, [r7, #24]
    n = f->depth;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	889b      	ldrh	r3, [r3, #4]
 8005288:	80fb      	strh	r3, [r7, #6]

    // We start writing at the read pointer's position since we fill the complete
    // buffer and we do not want to modify the read pointer within a write function!
    // This would end up in a race condition with read functions!
    w = r;
 800528a:	8afb      	ldrh	r3, [r7, #22]
 800528c:	83fb      	strh	r3, [r7, #30]
  }

  uint16_t wRel = get_relative_pointer(f, w);
 800528e:	8bfb      	ldrh	r3, [r7, #30]
 8005290:	4619      	mov	r1, r3
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f7ff fead 	bl	8004ff2 <get_relative_pointer>
 8005298:	4603      	mov	r3, r0
 800529a:	82bb      	strh	r3, [r7, #20]

  // Write data
  _ff_push_n(f, buf8, n, wRel, copy_mode);
 800529c:	8ab9      	ldrh	r1, [r7, #20]
 800529e:	88fa      	ldrh	r2, [r7, #6]
 80052a0:	797b      	ldrb	r3, [r7, #5]
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	460b      	mov	r3, r1
 80052a6:	69b9      	ldr	r1, [r7, #24]
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f7ff fc9c 	bl	8004be6 <_ff_push_n>

  // Advance pointer
  f->wr_idx = advance_pointer(f, w, n);
 80052ae:	88fa      	ldrh	r2, [r7, #6]
 80052b0:	8bfb      	ldrh	r3, [r7, #30]
 80052b2:	4619      	mov	r1, r3
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f7ff fe49 	bl	8004f4c <advance_pointer>
 80052ba:	4603      	mov	r3, r0
 80052bc:	461a      	mov	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	81da      	strh	r2, [r3, #14]

  _ff_unlock(f->mutex_wr);

  return n;
 80052c2:	88fb      	ldrh	r3, [r7, #6]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3720      	adds	r7, #32
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	4611      	mov	r1, r2
 80052d8:	461a      	mov	r2, r3
 80052da:	460b      	mov	r3, r1
 80052dc:	80fb      	strh	r3, [r7, #6]
 80052de:	4613      	mov	r3, r2
 80052e0:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	89db      	ldrh	r3, [r3, #14]
 80052e6:	b298      	uxth	r0, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8a1b      	ldrh	r3, [r3, #16]
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	88f9      	ldrh	r1, [r7, #6]
 80052f0:	797a      	ldrb	r2, [r7, #5]
 80052f2:	9201      	str	r2, [sp, #4]
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	4603      	mov	r3, r0
 80052f8:	460a      	mov	r2, r1
 80052fa:	68b9      	ldr	r1, [r7, #8]
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f7ff ff22 	bl	8005146 <_tu_fifo_peek_n>
 8005302:	4603      	mov	r3, r0
 8005304:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, n);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8a1b      	ldrh	r3, [r3, #16]
 800530a:	b29b      	uxth	r3, r3
 800530c:	88fa      	ldrh	r2, [r7, #6]
 800530e:	4619      	mov	r1, r3
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f7ff fe1b 	bl	8004f4c <advance_pointer>
 8005316:	4603      	mov	r3, r0
 8005318:	461a      	mov	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	821a      	strh	r2, [r3, #16]

  _ff_unlock(f->mutex_rd);
  return n;
 800531e:	88fb      	ldrh	r3, [r7, #6]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  return tu_min16(_tu_fifo_count(f, f->wr_idx, f->rd_idx), f->depth);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	89db      	ldrh	r3, [r3, #14]
 8005334:	b299      	uxth	r1, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	8a1b      	ldrh	r3, [r3, #16]
 800533a:	b29b      	uxth	r3, r3
 800533c:	461a      	mov	r2, r3
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7ff fe69 	bl	8005016 <_tu_fifo_count>
 8005344:	4603      	mov	r3, r0
 8005346:	461a      	mov	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	889b      	ldrh	r3, [r3, #4]
 800534c:	81fa      	strh	r2, [r7, #14]
 800534e:	81bb      	strh	r3, [r7, #12]
 8005350:	89fa      	ldrh	r2, [r7, #14]
 8005352:	89bb      	ldrh	r3, [r7, #12]
 8005354:	4293      	cmp	r3, r2
 8005356:	bf28      	it	cs
 8005358:	4613      	movcs	r3, r2
 800535a:	b29b      	uxth	r3, r3
}
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  return _tu_fifo_empty(f->wr_idx, f->rd_idx);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	89db      	ldrh	r3, [r3, #14]
 8005370:	b29a      	uxth	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	8a1b      	ldrh	r3, [r3, #16]
 8005376:	b29b      	uxth	r3, r3
 8005378:	4619      	mov	r1, r3
 800537a:	4610      	mov	r0, r2
 800537c:	f7ff fe67 	bl	800504e <_tu_fifo_empty>
 8005380:	4603      	mov	r3, r0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b082      	sub	sp, #8
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	89db      	ldrh	r3, [r3, #14]
 8005396:	b299      	uxth	r1, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	8a1b      	ldrh	r3, [r3, #16]
 800539c:	b29b      	uxth	r3, r3
 800539e:	461a      	mov	r2, r3
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7ff ff14 	bl	80051ce <_tu_fifo_remaining>
 80053a6:	4603      	mov	r3, r0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	89db      	ldrh	r3, [r3, #14]
 80053be:	b29a      	uxth	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	8a1b      	ldrh	r3, [r3, #16]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	6839      	ldr	r1, [r7, #0]
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff fe85 	bl	80050d8 <_tu_fifo_peek>
 80053ce:	4603      	mov	r3, r0
 80053d0:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	8a1b      	ldrh	r3, [r3, #16]
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	7bfa      	ldrb	r2, [r7, #15]
 80053da:	b292      	uxth	r2, r2
 80053dc:	4619      	mov	r1, r3
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7ff fdb4 	bl	8004f4c <advance_pointer>
 80053e4:	4603      	mov	r3, r0
 80053e6:	461a      	mov	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	821a      	strh	r2, [r3, #16]

  _ff_unlock(f->mutex_rd);
  return ret;
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b084      	sub	sp, #16
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	60f8      	str	r0, [r7, #12]
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	4613      	mov	r3, r2
 8005402:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8005404:	88fa      	ldrh	r2, [r7, #6]
 8005406:	2300      	movs	r3, #0
 8005408:	68b9      	ldr	r1, [r7, #8]
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f7ff ff5e 	bl	80052cc <_tu_fifo_read_n>
 8005410:	4603      	mov	r3, r0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <tu_fifo_read_n_const_addr_full_words>:

uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b084      	sub	sp, #16
 800541e:	af00      	add	r7, sp, #0
 8005420:	60f8      	str	r0, [r7, #12]
 8005422:	60b9      	str	r1, [r7, #8]
 8005424:	4613      	mov	r3, r2
 8005426:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8005428:	88fa      	ldrh	r2, [r7, #6]
 800542a:	2301      	movs	r3, #1
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f7ff ff4c 	bl	80052cc <_tu_fifo_read_n>
 8005434:	4603      	mov	r3, r0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b084      	sub	sp, #16
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const w = f->wr_idx;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	89db      	ldrh	r3, [r3, #14]
 800544c:	81bb      	strh	r3, [r7, #12]

  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable )
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	8a1b      	ldrh	r3, [r3, #16]
 8005452:	b29a      	uxth	r2, r3
 8005454:	89bb      	ldrh	r3, [r7, #12]
 8005456:	4619      	mov	r1, r3
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7ff fe0d 	bl	8005078 <_tu_fifo_full>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d009      	beq.n	8005478 <tu_fifo_write+0x3a>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	7a1b      	ldrb	r3, [r3, #8]
 8005468:	f083 0301 	eor.w	r3, r3, #1
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <tu_fifo_write+0x3a>
  {
    ret = false;
 8005472:	2300      	movs	r3, #0
 8005474:	73fb      	strb	r3, [r7, #15]
 8005476:	e018      	b.n	80054aa <tu_fifo_write+0x6c>
  }else
  {
    uint16_t wRel = get_relative_pointer(f, w);
 8005478:	89bb      	ldrh	r3, [r7, #12]
 800547a:	4619      	mov	r1, r3
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7ff fdb8 	bl	8004ff2 <get_relative_pointer>
 8005482:	4603      	mov	r3, r0
 8005484:	817b      	strh	r3, [r7, #10]

    // Write data
    _ff_push(f, data, wRel);
 8005486:	897b      	ldrh	r3, [r7, #10]
 8005488:	461a      	mov	r2, r3
 800548a:	6839      	ldr	r1, [r7, #0]
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7ff fb91 	bl	8004bb4 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_pointer(f, w, 1);
 8005492:	89bb      	ldrh	r3, [r7, #12]
 8005494:	2201      	movs	r2, #1
 8005496:	4619      	mov	r1, r3
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7ff fd57 	bl	8004f4c <advance_pointer>
 800549e:	4603      	mov	r3, r0
 80054a0:	461a      	mov	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	81da      	strh	r2, [r3, #14]

    ret = true;
 80054a6:	2301      	movs	r3, #1
 80054a8:	73fb      	strb	r3, [r7, #15]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	4613      	mov	r3, r2
 80054c0:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 80054c2:	88fa      	ldrh	r2, [r7, #6]
 80054c4:	2300      	movs	r3, #0
 80054c6:	68b9      	ldr	r1, [r7, #8]
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f7ff fe97 	bl	80051fc <_tu_fifo_write_n>
 80054ce:	4603      	mov	r3, r0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	4613      	mov	r3, r2
 80054e4:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 80054e6:	88fa      	ldrh	r2, [r7, #6]
 80054e8:	2301      	movs	r3, #1
 80054ea:	68b9      	ldr	r1, [r7, #8]
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f7ff fe85 	bl	80051fc <_tu_fifo_write_n>
 80054f2:	4603      	mov	r3, r0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = f->wr_idx = 0;
 8005504:	2100      	movs	r1, #0
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	460a      	mov	r2, r1
 800550a:	81da      	strh	r2, [r3, #14]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	460a      	mov	r2, r1
 8005510:	821a      	strh	r2, [r3, #16]
  f->max_pointer_idx = (uint16_t) (2*f->depth-1);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	889b      	ldrh	r3, [r3, #4]
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	b29b      	uxth	r3, r3
 800551a:	3b01      	subs	r3, #1
 800551c:	b29a      	uxth	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	819a      	strh	r2, [r3, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	899b      	ldrh	r3, [r3, #12]
 8005526:	43db      	mvns	r3, r3
 8005528:	b29a      	uxth	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 800552e:	2301      	movs	r3, #1
}
 8005530:	4618      	mov	r0, r3
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	78fa      	ldrb	r2, [r7, #3]
 800554c:	721a      	strb	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 800554e:	2301      	movs	r3, #1
}
 8005550:	4618      	mov	r0, r3
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <get_driver>:
static uint8_t _app_driver_count = 0;

// virtually joins built-in and application drivers together.
// Application is positioned first to allow overwriting built-in ones.
static inline usbd_class_driver_t const * get_driver(uint8_t drvid)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	4603      	mov	r3, r0
 8005564:	71fb      	strb	r3, [r7, #7]
  // Application drivers
  if ( usbd_app_driver_get_cb )
 8005566:	4b14      	ldr	r3, [pc, #80]	; (80055b8 <get_driver+0x5c>)
 8005568:	2b00      	cmp	r3, #0
 800556a:	d012      	beq.n	8005592 <get_driver+0x36>
  {
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800556c:	4b13      	ldr	r3, [pc, #76]	; (80055bc <get_driver+0x60>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	79fa      	ldrb	r2, [r7, #7]
 8005572:	429a      	cmp	r2, r3
 8005574:	d208      	bcs.n	8005588 <get_driver+0x2c>
 8005576:	4b12      	ldr	r3, [pc, #72]	; (80055c0 <get_driver+0x64>)
 8005578:	6819      	ldr	r1, [r3, #0]
 800557a:	79fa      	ldrb	r2, [r7, #7]
 800557c:	4613      	mov	r3, r2
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	4413      	add	r3, r2
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	440b      	add	r3, r1
 8005586:	e010      	b.n	80055aa <get_driver+0x4e>
    drvid -= _app_driver_count;
 8005588:	4b0c      	ldr	r3, [pc, #48]	; (80055bc <get_driver+0x60>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	79fa      	ldrb	r2, [r7, #7]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	71fb      	strb	r3, [r7, #7]
  }

  // Built-in drivers
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8005592:	79fb      	ldrb	r3, [r7, #7]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d807      	bhi.n	80055a8 <get_driver+0x4c>
 8005598:	79fa      	ldrb	r2, [r7, #7]
 800559a:	4613      	mov	r3, r2
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	4413      	add	r3, r2
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	4a08      	ldr	r2, [pc, #32]	; (80055c4 <get_driver+0x68>)
 80055a4:	4413      	add	r3, r2
 80055a6:	e000      	b.n	80055aa <get_driver+0x4e>

  return NULL;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	00000000 	.word	0x00000000
 80055bc:	20006e50 	.word	0x20006e50
 80055c0:	20006e4c 	.word	0x20006e4c
 80055c4:	08011740 	.word	0x08011740

080055c8 <tud_mounted>:
{
  return _usbd_dev.connected;
}

bool tud_mounted(void)
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 80055cc:	4b06      	ldr	r3, [pc, #24]	; (80055e8 <tud_mounted+0x20>)
 80055ce:	785b      	ldrb	r3, [r3, #1]
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	bf14      	ite	ne
 80055d6:	2301      	movne	r3, #1
 80055d8:	2300      	moveq	r3, #0
 80055da:	b2db      	uxtb	r3, r3
}
 80055dc:	4618      	mov	r0, r3
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	20006e20 	.word	0x20006e20

080055ec <tud_suspended>:

bool tud_suspended(void)
{
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 80055f0:	4b07      	ldr	r3, [pc, #28]	; (8005610 <tud_suspended+0x24>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	bf14      	ite	ne
 80055fe:	2301      	movne	r3, #1
 8005600:	2300      	moveq	r3, #0
 8005602:	b2db      	uxtb	r3, r3
}
 8005604:	4618      	mov	r0, r3
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	20006e20 	.word	0x20006e20

08005614 <tud_inited>:

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8005618:	4b05      	ldr	r3, [pc, #20]	; (8005630 <tud_inited+0x1c>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2bff      	cmp	r3, #255	; 0xff
 800561e:	bf14      	ite	ne
 8005620:	2301      	movne	r3, #1
 8005622:	2300      	moveq	r3, #0
 8005624:	b2db      	uxtb	r3, r3
}
 8005626:	4618      	mov	r0, r3
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	20000430 	.word	0x20000430

08005634 <tud_init>:

bool tud_init (uint8_t rhport)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af00      	add	r7, sp, #0
 800563a:	4603      	mov	r3, r0
 800563c:	71fb      	strb	r3, [r7, #7]
  // skip if already initialized
  if ( tud_inited() ) return true;
 800563e:	f7ff ffe9 	bl	8005614 <tud_inited>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <tud_init+0x18>
 8005648:	2301      	movs	r3, #1
 800564a:	e054      	b.n	80056f6 <tud_init+0xc2>

  TU_LOG(USBD_DBG, "USBD init on controller %u\r\n", rhport);
  TU_LOG_INT(USBD_DBG, sizeof(usbd_device_t));

  tu_varclr(&_usbd_dev);
 800564c:	222b      	movs	r2, #43	; 0x2b
 800564e:	2100      	movs	r1, #0
 8005650:	482b      	ldr	r0, [pc, #172]	; (8005700 <tud_init+0xcc>)
 8005652:	f00a f861 	bl	800f718 <memset>
 8005656:	4b2b      	ldr	r3, [pc, #172]	; (8005704 <tud_init+0xd0>)
 8005658:	60fb      	str	r3, [r7, #12]
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  tu_fifo_clear(&qdef->ff);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	3304      	adds	r3, #4
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff ff4c 	bl	80054fc <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8005664:	68fb      	ldr	r3, [r7, #12]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8005666:	4a28      	ldr	r2, [pc, #160]	; (8005708 <tud_init+0xd4>)
 8005668:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 800566a:	4b27      	ldr	r3, [pc, #156]	; (8005708 <tud_init+0xd4>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10a      	bne.n	8005688 <tud_init+0x54>
 8005672:	4b26      	ldr	r3, [pc, #152]	; (800570c <tud_init+0xd8>)
 8005674:	613b      	str	r3, [r7, #16]
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d000      	beq.n	8005684 <tud_init+0x50>
 8005682:	be00      	bkpt	0x0000
 8005684:	2300      	movs	r3, #0
 8005686:	e036      	b.n	80056f6 <tud_init+0xc2>

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
 8005688:	4b21      	ldr	r3, [pc, #132]	; (8005710 <tud_init+0xdc>)
 800568a:	2b00      	cmp	r3, #0
 800568c:	d005      	beq.n	800569a <tud_init+0x66>
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 800568e:	4821      	ldr	r0, [pc, #132]	; (8005714 <tud_init+0xe0>)
 8005690:	f3af 8000 	nop.w
 8005694:	4603      	mov	r3, r0
 8005696:	4a20      	ldr	r2, [pc, #128]	; (8005718 <tud_init+0xe4>)
 8005698:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 800569a:	2300      	movs	r3, #0
 800569c:	77fb      	strb	r3, [r7, #31]
 800569e:	e018      	b.n	80056d2 <tud_init+0x9e>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 80056a0:	7ffb      	ldrb	r3, [r7, #31]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7ff ff5a 	bl	800555c <get_driver>
 80056a8:	61b8      	str	r0, [r7, #24]
    TU_ASSERT(driver);
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10a      	bne.n	80056c6 <tud_init+0x92>
 80056b0:	4b16      	ldr	r3, [pc, #88]	; (800570c <tud_init+0xd8>)
 80056b2:	617b      	str	r3, [r7, #20]
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d000      	beq.n	80056c2 <tud_init+0x8e>
 80056c0:	be00      	bkpt	0x0000
 80056c2:	2300      	movs	r3, #0
 80056c4:	e017      	b.n	80056f6 <tud_init+0xc2>
    TU_LOG(USBD_DBG, "%s init\r\n", driver->name);
    driver->init();
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80056cc:	7ffb      	ldrb	r3, [r7, #31]
 80056ce:	3301      	adds	r3, #1
 80056d0:	77fb      	strb	r3, [r7, #31]
 80056d2:	4b10      	ldr	r3, [pc, #64]	; (8005714 <tud_init+0xe0>)
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	7ffb      	ldrb	r3, [r7, #31]
 80056da:	429a      	cmp	r2, r3
 80056dc:	dae0      	bge.n	80056a0 <tud_init+0x6c>
  }

  _usbd_rhport = rhport;
 80056de:	4a0f      	ldr	r2, [pc, #60]	; (800571c <tud_init+0xe8>)
 80056e0:	79fb      	ldrb	r3, [r7, #7]
 80056e2:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  dcd_init(rhport);
 80056e4:	79fb      	ldrb	r3, [r7, #7]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f001 ff22 	bl	8007530 <dcd_init>
  dcd_int_enable(rhport);
 80056ec:	79fb      	ldrb	r3, [r7, #7]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f001 ff86 	bl	8007600 <dcd_int_enable>

  return true;
 80056f4:	2301      	movs	r3, #1
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3720      	adds	r7, #32
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	20006e20 	.word	0x20006e20
 8005704:	20000434 	.word	0x20000434
 8005708:	20006f14 	.word	0x20006f14
 800570c:	e000edf0 	.word	0xe000edf0
 8005710:	00000000 	.word	0x00000000
 8005714:	20006e50 	.word	0x20006e50
 8005718:	20006e4c 	.word	0x20006e4c
 800571c:	20000430 	.word	0x20000430

08005720 <configuration_reset>:

static void configuration_reset(uint8_t rhport)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	4603      	mov	r3, r0
 8005728:	71fb      	strb	r3, [r7, #7]
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 800572a:	2300      	movs	r3, #0
 800572c:	75fb      	strb	r3, [r7, #23]
 800572e:	e019      	b.n	8005764 <configuration_reset+0x44>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 8005730:	7dfb      	ldrb	r3, [r7, #23]
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff ff12 	bl	800555c <get_driver>
 8005738:	6138      	str	r0, [r7, #16]
    TU_ASSERT(driver, );
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d109      	bne.n	8005754 <configuration_reset+0x34>
 8005740:	4b15      	ldr	r3, [pc, #84]	; (8005798 <configuration_reset+0x78>)
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d01f      	beq.n	8005790 <configuration_reset+0x70>
 8005750:	be00      	bkpt	0x0000
 8005752:	e01d      	b.n	8005790 <configuration_reset+0x70>
    driver->reset(rhport);
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	79fa      	ldrb	r2, [r7, #7]
 800575a:	4610      	mov	r0, r2
 800575c:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 800575e:	7dfb      	ldrb	r3, [r7, #23]
 8005760:	3301      	adds	r3, #1
 8005762:	75fb      	strb	r3, [r7, #23]
 8005764:	4b0d      	ldr	r3, [pc, #52]	; (800579c <configuration_reset+0x7c>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	7dfb      	ldrb	r3, [r7, #23]
 800576c:	429a      	cmp	r2, r3
 800576e:	dadf      	bge.n	8005730 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8005770:	222b      	movs	r2, #43	; 0x2b
 8005772:	2100      	movs	r1, #0
 8005774:	480a      	ldr	r0, [pc, #40]	; (80057a0 <configuration_reset+0x80>)
 8005776:	f009 ffcf 	bl	800f718 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 800577a:	2210      	movs	r2, #16
 800577c:	21ff      	movs	r1, #255	; 0xff
 800577e:	4809      	ldr	r0, [pc, #36]	; (80057a4 <configuration_reset+0x84>)
 8005780:	f009 ffca 	bl	800f718 <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 8005784:	220c      	movs	r2, #12
 8005786:	21ff      	movs	r1, #255	; 0xff
 8005788:	4807      	ldr	r0, [pc, #28]	; (80057a8 <configuration_reset+0x88>)
 800578a:	f009 ffc5 	bl	800f718 <memset>
 800578e:	e000      	b.n	8005792 <configuration_reset+0x72>
    TU_ASSERT(driver, );
 8005790:	bf00      	nop
}
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	e000edf0 	.word	0xe000edf0
 800579c:	20006e50 	.word	0x20006e50
 80057a0:	20006e20 	.word	0x20006e20
 80057a4:	20006e23 	.word	0x20006e23
 80057a8:	20006e33 	.word	0x20006e33

080057ac <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 80057b6:	79fb      	ldrb	r3, [r7, #7]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7ff ffb1 	bl	8005720 <configuration_reset>
  usbd_control_reset();
 80057be:	f001 fb11 	bl	8006de4 <usbd_control_reset>
}
 80057c2:	bf00      	nop
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <tud_task_ext>:
      }
    }
    @endcode
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr)
{
 80057cc:	b590      	push	{r4, r7, lr}
 80057ce:	b091      	sub	sp, #68	; 0x44
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	460b      	mov	r3, r1
 80057d6:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if ( !tusb_inited() ) return;
 80057d8:	f002 ff20 	bl	800861c <tusb_inited>
 80057dc:	4603      	mov	r3, r0
 80057de:	f083 0301 	eor.w	r3, r3, #1
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f040 812a 	bne.w	8005a3e <tud_task_ext+0x272>

  // Loop until there is no more events in the queue
  while (1)
  {
    dcd_event_t event;
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 80057ea:	4b99      	ldr	r3, [pc, #612]	; (8005a50 <tud_task_ext+0x284>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057f0:	f107 0308 	add.w	r3, r7, #8
 80057f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	627b      	str	r3, [r7, #36]	; 0x24
 80057fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fc:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(false);
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2000      	movs	r0, #0
 8005804:	4798      	blx	r3
}
 8005806:	bf00      	nop
TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec)
{
  (void) msec; // not used, always behave as msec = 0

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
 8005808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580a:	3304      	adds	r3, #4
 800580c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff fdce 	bl	80053b0 <tu_fifo_read>
 8005814:	4603      	mov	r3, r0
 8005816:	77fb      	strb	r3, [r7, #31]
 8005818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581a:	61bb      	str	r3, [r7, #24]
  qhdl->interrupt_set(true);
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2001      	movs	r0, #1
 8005822:	4798      	blx	r3
}
 8005824:	bf00      	nop
  _osal_q_unlock(qhdl);

  return success;
 8005826:	7ffb      	ldrb	r3, [r7, #31]
 8005828:	f083 0301 	eor.w	r3, r3, #1
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	f040 8107 	bne.w	8005a42 <tud_task_ext+0x276>
#if CFG_TUSB_DEBUG >= 2
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG(USBD_DBG, "\r\n"); // extra line for setup
    TU_LOG(USBD_DBG, "USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
 8005834:	7a7b      	ldrb	r3, [r7, #9]
 8005836:	3b01      	subs	r3, #1
 8005838:	2b07      	cmp	r3, #7
 800583a:	f200 80ea 	bhi.w	8005a12 <tud_task_ext+0x246>
 800583e:	a201      	add	r2, pc, #4	; (adr r2, 8005844 <tud_task_ext+0x78>)
 8005840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005844:	08005865 	.word	0x08005865
 8005848:	08005875 	.word	0x08005875
 800584c:	08005a13 	.word	0x08005a13
 8005850:	080059b9 	.word	0x080059b9
 8005854:	080059e9 	.word	0x080059e9
 8005858:	0800588b 	.word	0x0800588b
 800585c:	080058f9 	.word	0x080058f9
 8005860:	08005a03 	.word	0x08005a03
    {
      case DCD_EVENT_BUS_RESET:
        TU_LOG(USBD_DBG, ": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 8005864:	7a3b      	ldrb	r3, [r7, #8]
 8005866:	4618      	mov	r0, r3
 8005868:	f7ff ffa0 	bl	80057ac <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 800586c:	7b3a      	ldrb	r2, [r7, #12]
 800586e:	4b79      	ldr	r3, [pc, #484]	; (8005a54 <tud_task_ext+0x288>)
 8005870:	709a      	strb	r2, [r3, #2]
      break;
 8005872:	e0e3      	b.n	8005a3c <tud_task_ext+0x270>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG(USBD_DBG, "\r\n");
        usbd_reset(event.rhport);
 8005874:	7a3b      	ldrb	r3, [r7, #8]
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff ff98 	bl	80057ac <usbd_reset>

        // invoke callback
        if (tud_umount_cb) tud_umount_cb();
 800587c:	4b76      	ldr	r3, [pc, #472]	; (8005a58 <tud_task_ext+0x28c>)
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 80d1 	beq.w	8005a26 <tud_task_ext+0x25a>
 8005884:	f7fd fb1e 	bl	8002ec4 <tud_umount_cb>
      break;
 8005888:	e0cd      	b.n	8005a26 <tud_task_ext+0x25a>
        TU_LOG_VAR(USBD_DBG, &event.setup_received);
        TU_LOG(USBD_DBG, "\r\n");

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 800588a:	4a72      	ldr	r2, [pc, #456]	; (8005a54 <tud_task_ext+0x288>)
 800588c:	7813      	ldrb	r3, [r2, #0]
 800588e:	f043 0301 	orr.w	r3, r3, #1
 8005892:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = false;
 8005894:	4a6f      	ldr	r2, [pc, #444]	; (8005a54 <tud_task_ext+0x288>)
 8005896:	7fd3      	ldrb	r3, [r2, #31]
 8005898:	f36f 0300 	bfc	r3, #0, #1
 800589c:	77d3      	strb	r3, [r2, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 800589e:	4a6d      	ldr	r2, [pc, #436]	; (8005a54 <tud_task_ext+0x288>)
 80058a0:	7fd3      	ldrb	r3, [r2, #31]
 80058a2:	f36f 0382 	bfc	r3, #2, #1
 80058a6:	77d3      	strb	r3, [r2, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = false;
 80058a8:	4a6a      	ldr	r2, [pc, #424]	; (8005a54 <tud_task_ext+0x288>)
 80058aa:	f892 3020 	ldrb.w	r3, [r2, #32]
 80058ae:	f36f 0300 	bfc	r3, #0, #1
 80058b2:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 80058b6:	4a67      	ldr	r2, [pc, #412]	; (8005a54 <tud_task_ext+0x288>)
 80058b8:	f892 3020 	ldrb.w	r3, [r2, #32]
 80058bc:	f36f 0382 	bfc	r3, #2, #1
 80058c0:	f882 3020 	strb.w	r3, [r2, #32]

        // Process control request
        if ( !process_control_request(event.rhport, &event.setup_received) )
 80058c4:	7a3a      	ldrb	r2, [r7, #8]
 80058c6:	f107 0308 	add.w	r3, r7, #8
 80058ca:	3304      	adds	r3, #4
 80058cc:	4619      	mov	r1, r3
 80058ce:	4610      	mov	r0, r2
 80058d0:	f000 f8e2 	bl	8005a98 <process_control_request>
 80058d4:	4603      	mov	r3, r0
 80058d6:	f083 0301 	eor.w	r3, r3, #1
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 80a4 	beq.w	8005a2a <tud_task_ext+0x25e>
        {
          TU_LOG(USBD_DBG, "  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 80058e2:	7a3b      	ldrb	r3, [r7, #8]
 80058e4:	2100      	movs	r1, #0
 80058e6:	4618      	mov	r0, r3
 80058e8:	f002 f99a 	bl	8007c20 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 80058ec:	7a3b      	ldrb	r3, [r7, #8]
 80058ee:	2180      	movs	r1, #128	; 0x80
 80058f0:	4618      	mov	r0, r3
 80058f2:	f002 f995 	bl	8007c20 <dcd_edpt_stall>
        }
      break;
 80058f6:	e098      	b.n	8005a2a <tud_task_ext+0x25e>

      case DCD_EVENT_XFER_COMPLETE:
      {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 80058f8:	7b3b      	ldrb	r3, [r7, #12]
 80058fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80058fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005902:	75bb      	strb	r3, [r7, #22]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005904:	7dbb      	ldrb	r3, [r7, #22]
 8005906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800590a:	b2db      	uxtb	r3, r3
        uint8_t const epnum   = tu_edpt_number(ep_addr);
 800590c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8005910:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005914:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005916:	7dfb      	ldrb	r3, [r7, #23]
 8005918:	09db      	lsrs	r3, r3, #7
 800591a:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 800591c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

        TU_LOG(USBD_DBG, "on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
 8005920:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8005924:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005928:	494a      	ldr	r1, [pc, #296]	; (8005a54 <tud_task_ext+0x288>)
 800592a:	0052      	lsls	r2, r2, #1
 800592c:	440a      	add	r2, r1
 800592e:	4413      	add	r3, r2
 8005930:	f103 0218 	add.w	r2, r3, #24
 8005934:	79d3      	ldrb	r3, [r2, #7]
 8005936:	f36f 0300 	bfc	r3, #0, #1
 800593a:	71d3      	strb	r3, [r2, #7]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 800593c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8005940:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005944:	4943      	ldr	r1, [pc, #268]	; (8005a54 <tud_task_ext+0x288>)
 8005946:	0052      	lsls	r2, r2, #1
 8005948:	440a      	add	r2, r1
 800594a:	4413      	add	r3, r2
 800594c:	f103 0218 	add.w	r2, r3, #24
 8005950:	79d3      	ldrb	r3, [r2, #7]
 8005952:	f36f 0382 	bfc	r3, #2, #1
 8005956:	71d3      	strb	r3, [r2, #7]

        if ( 0 == epnum )
 8005958:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800595c:	2b00      	cmp	r3, #0
 800595e:	d107      	bne.n	8005970 <tud_task_ext+0x1a4>
        {
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 8005960:	7a38      	ldrb	r0, [r7, #8]
 8005962:	7b7a      	ldrb	r2, [r7, #13]
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800596a:	f001 fa71 	bl	8006e50 <usbd_control_xfer_cb>

          TU_LOG(USBD_DBG, "  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
        }
      }
      break;
 800596e:	e065      	b.n	8005a3c <tud_task_ext+0x270>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 8005970:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8005974:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005978:	4936      	ldr	r1, [pc, #216]	; (8005a54 <tud_task_ext+0x288>)
 800597a:	0052      	lsls	r2, r2, #1
 800597c:	440a      	add	r2, r1
 800597e:	4413      	add	r3, r2
 8005980:	3313      	adds	r3, #19
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff fde9 	bl	800555c <get_driver>
 800598a:	63b8      	str	r0, [r7, #56]	; 0x38
          TU_ASSERT(driver, );
 800598c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598e:	2b00      	cmp	r3, #0
 8005990:	d109      	bne.n	80059a6 <tud_task_ext+0x1da>
 8005992:	4b32      	ldr	r3, [pc, #200]	; (8005a5c <tud_task_ext+0x290>)
 8005994:	637b      	str	r3, [r7, #52]	; 0x34
 8005996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d051      	beq.n	8005a46 <tud_task_ext+0x27a>
 80059a2:	be00      	bkpt	0x0000
 80059a4:	e04f      	b.n	8005a46 <tud_task_ext+0x27a>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 80059a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a8:	691c      	ldr	r4, [r3, #16]
 80059aa:	7a38      	ldrb	r0, [r7, #8]
 80059ac:	7b7a      	ldrb	r2, [r7, #13]
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80059b4:	47a0      	blx	r4
      break;
 80059b6:	e041      	b.n	8005a3c <tud_task_ext+0x270>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if ( _usbd_dev.connected )
 80059b8:	4b26      	ldr	r3, [pc, #152]	; (8005a54 <tud_task_ext+0x288>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d033      	beq.n	8005a2e <tud_task_ext+0x262>
        {
          TU_LOG(USBD_DBG, ": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 80059c6:	4b26      	ldr	r3, [pc, #152]	; (8005a60 <tud_task_ext+0x294>)
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d030      	beq.n	8005a2e <tud_task_ext+0x262>
 80059cc:	4b21      	ldr	r3, [pc, #132]	; (8005a54 <tud_task_ext+0x288>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	bf14      	ite	ne
 80059da:	2301      	movne	r3, #1
 80059dc:	2300      	moveq	r3, #0
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7fd fa7b 	bl	8002edc <tud_suspend_cb>
        }else
        {
          TU_LOG(USBD_DBG, " Skipped\r\n");
        }
      break;
 80059e6:	e022      	b.n	8005a2e <tud_task_ext+0x262>

      case DCD_EVENT_RESUME:
        if ( _usbd_dev.connected )
 80059e8:	4b1a      	ldr	r3, [pc, #104]	; (8005a54 <tud_task_ext+0x288>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d01d      	beq.n	8005a32 <tud_task_ext+0x266>
        {
          TU_LOG(USBD_DBG, "\r\n");
          if (tud_resume_cb) tud_resume_cb();
 80059f6:	4b1b      	ldr	r3, [pc, #108]	; (8005a64 <tud_task_ext+0x298>)
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01a      	beq.n	8005a32 <tud_task_ext+0x266>
 80059fc:	f7fd fa80 	bl	8002f00 <tud_resume_cb>
        }else
        {
          TU_LOG(USBD_DBG, " Skipped\r\n");
        }
      break;
 8005a00:	e017      	b.n	8005a32 <tud_task_ext+0x266>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG(USBD_DBG, "\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d016      	beq.n	8005a36 <tud_task_ext+0x26a>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	4798      	blx	r3
      break;
 8005a10:	e011      	b.n	8005a36 <tud_task_ext+0x26a>

      case DCD_EVENT_SOF:
      default:
        TU_BREAKPOINT();
 8005a12:	4b12      	ldr	r3, [pc, #72]	; (8005a5c <tud_task_ext+0x290>)
 8005a14:	633b      	str	r3, [r7, #48]	; 0x30
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00b      	beq.n	8005a3a <tud_task_ext+0x26e>
 8005a22:	be00      	bkpt	0x0000
      break;
 8005a24:	e009      	b.n	8005a3a <tud_task_ext+0x26e>
      break;
 8005a26:	bf00      	nop
 8005a28:	e6df      	b.n	80057ea <tud_task_ext+0x1e>
      break;
 8005a2a:	bf00      	nop
 8005a2c:	e6dd      	b.n	80057ea <tud_task_ext+0x1e>
      break;
 8005a2e:	bf00      	nop
 8005a30:	e6db      	b.n	80057ea <tud_task_ext+0x1e>
      break;
 8005a32:	bf00      	nop
 8005a34:	e6d9      	b.n	80057ea <tud_task_ext+0x1e>
      break;
 8005a36:	bf00      	nop
 8005a38:	e6d7      	b.n	80057ea <tud_task_ext+0x1e>
      break;
 8005a3a:	bf00      	nop
  {
 8005a3c:	e6d5      	b.n	80057ea <tud_task_ext+0x1e>
  if ( !tusb_inited() ) return;
 8005a3e:	bf00      	nop
 8005a40:	e002      	b.n	8005a48 <tud_task_ext+0x27c>
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 8005a42:	bf00      	nop
 8005a44:	e000      	b.n	8005a48 <tud_task_ext+0x27c>
          TU_ASSERT(driver, );
 8005a46:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) return;
#endif
  }
}
 8005a48:	3744      	adds	r7, #68	; 0x44
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd90      	pop	{r4, r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20006f14 	.word	0x20006f14
 8005a54:	20006e20 	.word	0x20006e20
 8005a58:	08002ec5 	.word	0x08002ec5
 8005a5c:	e000edf0 	.word	0xe000edf0
 8005a60:	08002edd 	.word	0x08002edd
 8005a64:	08002f01 	.word	0x08002f01

08005a68 <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	4603      	mov	r3, r0
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
 8005a74:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f001 f9be 	bl	8006dfc <usbd_control_set_complete_callback>
  TU_LOG(USBD_DBG, "  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	7bf8      	ldrb	r0, [r7, #15]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	2101      	movs	r1, #1
 8005a8a:	4798      	blx	r3
 8005a8c:	4603      	mov	r3, r0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
	...

08005a98 <process_control_request>:

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b094      	sub	sp, #80	; 0x50
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	6039      	str	r1, [r7, #0]
 8005aa2:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	f001 f9a9 	bl	8006dfc <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b60      	cmp	r3, #96	; 0x60
 8005ab6:	d10a      	bne.n	8005ace <process_control_request+0x36>
 8005ab8:	4ba4      	ldr	r3, [pc, #656]	; (8005d4c <process_control_request+0x2b4>)
 8005aba:	61bb      	str	r3, [r7, #24]
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d000      	beq.n	8005aca <process_control_request+0x32>
 8005ac8:	be00      	bkpt	0x0000
 8005aca:	2300      	movs	r3, #0
 8005acc:	e247      	b.n	8005f5e <process_control_request+0x4c6>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b40      	cmp	r3, #64	; 0x40
 8005ada:	d10f      	bne.n	8005afc <process_control_request+0x64>
  {
    TU_VERIFY(tud_vendor_control_xfer_cb);
 8005adc:	4b9c      	ldr	r3, [pc, #624]	; (8005d50 <process_control_request+0x2b8>)
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <process_control_request+0x4e>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e23b      	b.n	8005f5e <process_control_request+0x4c6>

    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8005ae6:	489a      	ldr	r0, [pc, #616]	; (8005d50 <process_control_request+0x2b8>)
 8005ae8:	f001 f988 	bl	8006dfc <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8005aec:	79fb      	ldrb	r3, [r7, #7]
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	2101      	movs	r1, #1
 8005af2:	4618      	mov	r0, r3
 8005af4:	f3af 8000 	nop.w
 8005af8:	4603      	mov	r3, r0
 8005afa:	e230      	b.n	8005f5e <process_control_request+0x4c6>
    TU_LOG(USBD_DBG, "  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG(USBD_DBG, "\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	f000 8177 	beq.w	8005dfa <process_control_request+0x362>
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	f300 821a 	bgt.w	8005f46 <process_control_request+0x4ae>
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <process_control_request+0x86>
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	f000 811e 	beq.w	8005d58 <process_control_request+0x2c0>
 8005b1c:	e213      	b.n	8005f46 <process_control_request+0x4ae>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b20      	cmp	r3, #32
 8005b2a:	d123      	bne.n	8005b74 <process_control_request+0xdc>
      {
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	889b      	ldrh	r3, [r3, #4]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8005b34:	8afb      	ldrh	r3, [r7, #22]
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8005b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b40:	2b0f      	cmp	r3, #15
 8005b42:	d901      	bls.n	8005b48 <process_control_request+0xb0>
 8005b44:	2300      	movs	r3, #0
 8005b46:	e20a      	b.n	8005f5e <process_control_request+0x4c6>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8005b48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b4c:	4a81      	ldr	r2, [pc, #516]	; (8005d54 <process_control_request+0x2bc>)
 8005b4e:	4413      	add	r3, r2
 8005b50:	78db      	ldrb	r3, [r3, #3]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7ff fd02 	bl	800555c <get_driver>
 8005b58:	6238      	str	r0, [r7, #32]
        TU_VERIFY(driver);
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <process_control_request+0xcc>
 8005b60:	2300      	movs	r3, #0
 8005b62:	e1fc      	b.n	8005f5e <process_control_request+0x4c6>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 8005b64:	79fb      	ldrb	r3, [r7, #7]
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	6a39      	ldr	r1, [r7, #32]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7ff ff7c 	bl	8005a68 <invoke_class_control>
 8005b70:	4603      	mov	r3, r0
 8005b72:	e1f4      	b.n	8005f5e <process_control_request+0x4c6>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <process_control_request+0x100>
      {
        // Non standard request is not supported
        TU_BREAKPOINT();
 8005b82:	4b72      	ldr	r3, [pc, #456]	; (8005d4c <process_control_request+0x2b4>)
 8005b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d000      	beq.n	8005b94 <process_control_request+0xfc>
 8005b92:	be00      	bkpt	0x0000
        return false;
 8005b94:	2300      	movs	r3, #0
 8005b96:	e1e2      	b.n	8005f5e <process_control_request+0x4c6>
      }

      switch ( p_request->bRequest )
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	785b      	ldrb	r3, [r3, #1]
 8005b9c:	2b09      	cmp	r3, #9
 8005b9e:	f200 80c8 	bhi.w	8005d32 <process_control_request+0x29a>
 8005ba2:	a201      	add	r2, pc, #4	; (adr r2, 8005ba8 <process_control_request+0x110>)
 8005ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba8:	08005cfd 	.word	0x08005cfd
 8005bac:	08005cd9 	.word	0x08005cd9
 8005bb0:	08005d33 	.word	0x08005d33
 8005bb4:	08005cb5 	.word	0x08005cb5
 8005bb8:	08005d33 	.word	0x08005d33
 8005bbc:	08005bd1 	.word	0x08005bd1
 8005bc0:	08005c9b 	.word	0x08005c9b
 8005bc4:	08005d33 	.word	0x08005d33
 8005bc8:	08005bf5 	.word	0x08005bf5
 8005bcc:	08005c0d 	.word	0x08005c0d
      {
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8005bd0:	6838      	ldr	r0, [r7, #0]
 8005bd2:	f001 f923 	bl	8006e1c <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	885b      	ldrh	r3, [r3, #2]
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	79fb      	ldrb	r3, [r7, #7]
 8005be0:	4611      	mov	r1, r2
 8005be2:	4618      	mov	r0, r3
 8005be4:	f001 fd24 	bl	8007630 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8005be8:	4a5a      	ldr	r2, [pc, #360]	; (8005d54 <process_control_request+0x2bc>)
 8005bea:	7813      	ldrb	r3, [r2, #0]
 8005bec:	f043 0302 	orr.w	r3, r3, #2
 8005bf0:	7013      	strb	r3, [r2, #0]
        break;
 8005bf2:	e0aa      	b.n	8005d4a <process_control_request+0x2b2>

        case TUSB_REQ_GET_CONFIGURATION:
        {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8005bf4:	4b57      	ldr	r3, [pc, #348]	; (8005d54 <process_control_request+0x2bc>)
 8005bf6:	785b      	ldrb	r3, [r3, #1]
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	73fb      	strb	r3, [r7, #15]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8005bfc:	f107 020f 	add.w	r2, r7, #15
 8005c00:	79f8      	ldrb	r0, [r7, #7]
 8005c02:	2301      	movs	r3, #1
 8005c04:	6839      	ldr	r1, [r7, #0]
 8005c06:	f001 f87d 	bl	8006d04 <tud_control_xfer>
        }
        break;
 8005c0a:	e09e      	b.n	8005d4a <process_control_request+0x2b2>

        case TUSB_REQ_SET_CONFIGURATION:
        {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	885b      	ldrh	r3, [r3, #2]
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num)
 8005c16:	4b4f      	ldr	r3, [pc, #316]	; (8005d54 <process_control_request+0x2bc>)
 8005c18:	785b      	ldrb	r3, [r3, #1]
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d030      	beq.n	8005c86 <process_control_request+0x1ee>
          {
            if ( _usbd_dev.cfg_num )
 8005c24:	4b4b      	ldr	r3, [pc, #300]	; (8005d54 <process_control_request+0x2bc>)
 8005c26:	785b      	ldrb	r3, [r3, #1]
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00f      	beq.n	8005c4e <process_control_request+0x1b6>
            {
              // already configured: need to clear all endpoints and driver first
              TU_LOG(USBD_DBG, "  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 8005c2e:	79fb      	ldrb	r3, [r7, #7]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f001 fe59 	bl	80078e8 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 8005c36:	4b47      	ldr	r3, [pc, #284]	; (8005d54 <process_control_request+0x2bc>)
 8005c38:	789b      	ldrb	r3, [r3, #2]
 8005c3a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
              configuration_reset(rhport);
 8005c3e:	79fb      	ldrb	r3, [r7, #7]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7ff fd6d 	bl	8005720 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 8005c46:	4a43      	ldr	r2, [pc, #268]	; (8005d54 <process_control_request+0x2bc>)
 8005c48:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005c4c:	7093      	strb	r3, [r2, #2]
            }

            // switch to new configuration if not zero
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 8005c4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d017      	beq.n	8005c86 <process_control_request+0x1ee>
 8005c56:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005c5a:	79fb      	ldrb	r3, [r7, #7]
 8005c5c:	4611      	mov	r1, r2
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 f986 	bl	8005f70 <process_set_config>
 8005c64:	4603      	mov	r3, r0
 8005c66:	f083 0301 	eor.w	r3, r3, #1
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00a      	beq.n	8005c86 <process_control_request+0x1ee>
 8005c70:	4b36      	ldr	r3, [pc, #216]	; (8005d4c <process_control_request+0x2b4>)
 8005c72:	633b      	str	r3, [r7, #48]	; 0x30
 8005c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d000      	beq.n	8005c82 <process_control_request+0x1ea>
 8005c80:	be00      	bkpt	0x0000
 8005c82:	2300      	movs	r3, #0
 8005c84:	e16b      	b.n	8005f5e <process_control_request+0x4c6>
          }

          _usbd_dev.cfg_num = cfg_num;
 8005c86:	4a33      	ldr	r2, [pc, #204]	; (8005d54 <process_control_request+0x2bc>)
 8005c88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005c8c:	7053      	strb	r3, [r2, #1]
          tud_control_status(rhport, p_request);
 8005c8e:	79fb      	ldrb	r3, [r7, #7]
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 ffd8 	bl	8006c48 <tud_control_status>
        }
        break;
 8005c98:	e057      	b.n	8005d4a <process_control_request+0x2b2>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 8005c9a:	79fb      	ldrb	r3, [r7, #7]
 8005c9c:	6839      	ldr	r1, [r7, #0]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 fa82 	bl	80061a8 <process_get_descriptor>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	f083 0301 	eor.w	r3, r3, #1
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d04b      	beq.n	8005d48 <process_control_request+0x2b0>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	e154      	b.n	8005f5e <process_control_request+0x4c6>
        break;

        case TUSB_REQ_SET_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	885b      	ldrh	r3, [r3, #2]
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d001      	beq.n	8005cc2 <process_control_request+0x22a>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	e14d      	b.n	8005f5e <process_control_request+0x4c6>

          TU_LOG(USBD_DBG, "    Enable Remote Wakeup\r\n");

          // Host may enable remote wake up before suspending especially HID device
          _usbd_dev.remote_wakeup_en = true;
 8005cc2:	4a24      	ldr	r2, [pc, #144]	; (8005d54 <process_control_request+0x2bc>)
 8005cc4:	7813      	ldrb	r3, [r2, #0]
 8005cc6:	f043 0308 	orr.w	r3, r3, #8
 8005cca:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8005ccc:	79fb      	ldrb	r3, [r7, #7]
 8005cce:	6839      	ldr	r1, [r7, #0]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f000 ffb9 	bl	8006c48 <tud_control_status>
        break;
 8005cd6:	e038      	b.n	8005d4a <process_control_request+0x2b2>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	885b      	ldrh	r3, [r3, #2]
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d001      	beq.n	8005ce6 <process_control_request+0x24e>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	e13b      	b.n	8005f5e <process_control_request+0x4c6>

          TU_LOG(USBD_DBG, "    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 8005ce6:	4a1b      	ldr	r2, [pc, #108]	; (8005d54 <process_control_request+0x2bc>)
 8005ce8:	7813      	ldrb	r3, [r2, #0]
 8005cea:	f36f 03c3 	bfc	r3, #3, #1
 8005cee:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8005cf0:	79fb      	ldrb	r3, [r7, #7]
 8005cf2:	6839      	ldr	r1, [r7, #0]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f000 ffa7 	bl	8006c48 <tud_control_status>
        break;
 8005cfa:	e026      	b.n	8005d4a <process_control_request+0x2b2>
        case TUSB_REQ_GET_STATUS:
        {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8005cfc:	4b15      	ldr	r3, [pc, #84]	; (8005d54 <process_control_request+0x2bc>)
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	095b      	lsrs	r3, r3, #5
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	4b11      	ldr	r3, [pc, #68]	; (8005d54 <process_control_request+0x2bc>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	089b      	lsrs	r3, r3, #2
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	81bb      	strh	r3, [r7, #12]
          tud_control_xfer(rhport, p_request, &status, 2);
 8005d22:	f107 020c 	add.w	r2, r7, #12
 8005d26:	79f8      	ldrb	r0, [r7, #7]
 8005d28:	2302      	movs	r3, #2
 8005d2a:	6839      	ldr	r1, [r7, #0]
 8005d2c:	f000 ffea 	bl	8006d04 <tud_control_xfer>
        }
        break;
 8005d30:	e00b      	b.n	8005d4a <process_control_request+0x2b2>

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 8005d32:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <process_control_request+0x2b4>)
 8005d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d000      	beq.n	8005d44 <process_control_request+0x2ac>
 8005d42:	be00      	bkpt	0x0000
 8005d44:	2300      	movs	r3, #0
 8005d46:	e10a      	b.n	8005f5e <process_control_request+0x4c6>
        break;
 8005d48:	bf00      	nop
      }
    break;
 8005d4a:	e107      	b.n	8005f5c <process_control_request+0x4c4>
 8005d4c:	e000edf0 	.word	0xe000edf0
 8005d50:	00000000 	.word	0x00000000
 8005d54:	20006e20 	.word	0x20006e20

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	889b      	ldrh	r3, [r3, #4]
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	82bb      	strh	r3, [r7, #20]
 8005d60:	8abb      	ldrh	r3, [r7, #20]
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8005d68:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005d6c:	2b0f      	cmp	r3, #15
 8005d6e:	d901      	bls.n	8005d74 <process_control_request+0x2dc>
 8005d70:	2300      	movs	r3, #0
 8005d72:	e0f4      	b.n	8005f5e <process_control_request+0x4c6>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8005d74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005d78:	4a7b      	ldr	r2, [pc, #492]	; (8005f68 <process_control_request+0x4d0>)
 8005d7a:	4413      	add	r3, r2
 8005d7c:	78db      	ldrb	r3, [r3, #3]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7ff fbec 	bl	800555c <get_driver>
 8005d84:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(driver);
 8005d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <process_control_request+0x2f8>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	e0e6      	b.n	8005f5e <process_control_request+0x4c6>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) )
 8005d90:	79fb      	ldrb	r3, [r7, #7]
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff fe66 	bl	8005a68 <invoke_class_control>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	f083 0301 	eor.w	r3, r3, #1
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d026      	beq.n	8005df6 <process_control_request+0x35e>
      {
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <process_control_request+0x322>
 8005db6:	2300      	movs	r3, #0
 8005db8:	e0d1      	b.n	8005f5e <process_control_request+0x4c6>

        switch(p_request->bRequest)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	785b      	ldrb	r3, [r3, #1]
 8005dbe:	3b0a      	subs	r3, #10
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d816      	bhi.n	8005df2 <process_control_request+0x35a>
        {
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	f001 f819 	bl	8006dfc <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	785b      	ldrb	r3, [r3, #1]
 8005dce:	2b0a      	cmp	r3, #10
 8005dd0:	d109      	bne.n	8005de6 <process_control_request+0x34e>
            {
              uint8_t alternate = 0;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	72fb      	strb	r3, [r7, #11]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8005dd6:	f107 020b 	add.w	r2, r7, #11
 8005dda:	79f8      	ldrb	r0, [r7, #7]
 8005ddc:	2301      	movs	r3, #1
 8005dde:	6839      	ldr	r1, [r7, #0]
 8005de0:	f000 ff90 	bl	8006d04 <tud_control_xfer>
            }else
            {
              tud_control_status(rhport, p_request);
            }
          break;
 8005de4:	e008      	b.n	8005df8 <process_control_request+0x360>
              tud_control_status(rhport, p_request);
 8005de6:	79fb      	ldrb	r3, [r7, #7]
 8005de8:	6839      	ldr	r1, [r7, #0]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 ff2c 	bl	8006c48 <tud_control_status>
          break;
 8005df0:	e002      	b.n	8005df8 <process_control_request+0x360>

          default: return false;
 8005df2:	2300      	movs	r3, #0
 8005df4:	e0b3      	b.n	8005f5e <process_control_request+0x4c6>
        }
      }
 8005df6:	bf00      	nop
    }
    break;
 8005df8:	e0b0      	b.n	8005f5c <process_control_request+0x4c4>

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	889b      	ldrh	r3, [r3, #4]
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	823b      	strh	r3, [r7, #16]
 8005e02:	8a3b      	ldrh	r3, [r7, #16]
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005e0a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005e0e:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005e10:	7cbb      	ldrb	r3, [r7, #18]
 8005e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e16:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8005e18:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8005e1c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005e20:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005e22:	7cfb      	ldrb	r3, [r7, #19]
 8005e24:	09db      	lsrs	r3, r3, #7
 8005e26:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8005e28:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8005e2c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8005e30:	2b05      	cmp	r3, #5
 8005e32:	d90a      	bls.n	8005e4a <process_control_request+0x3b2>
 8005e34:	4b4d      	ldr	r3, [pc, #308]	; (8005f6c <process_control_request+0x4d4>)
 8005e36:	643b      	str	r3, [r7, #64]	; 0x40
 8005e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d000      	beq.n	8005e46 <process_control_request+0x3ae>
 8005e44:	be00      	bkpt	0x0000
 8005e46:	2300      	movs	r3, #0
 8005e48:	e089      	b.n	8005f5e <process_control_request+0x4c6>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8005e4a:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8005e4e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005e52:	4945      	ldr	r1, [pc, #276]	; (8005f68 <process_control_request+0x4d0>)
 8005e54:	0052      	lsls	r2, r2, #1
 8005e56:	440a      	add	r2, r1
 8005e58:	4413      	add	r3, r2
 8005e5a:	3313      	adds	r3, #19
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff fb7c 	bl	800555c <get_driver>
 8005e64:	64b8      	str	r0, [r7, #72]	; 0x48

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00c      	beq.n	8005e8e <process_control_request+0x3f6>
      {
        // Forward class request to its driver
        TU_VERIFY(driver);
 8005e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <process_control_request+0x3e6>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	e06f      	b.n	8005f5e <process_control_request+0x4c6>
        return invoke_class_control(rhport, driver, p_request);
 8005e7e:	79fb      	ldrb	r3, [r7, #7]
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff fdef 	bl	8005a68 <invoke_class_control>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	e067      	b.n	8005f5e <process_control_request+0x4c6>
      }
      else
      {
        // Handle STD request to endpoint
        switch ( p_request->bRequest )
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	785b      	ldrb	r3, [r3, #1]
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d018      	beq.n	8005ec8 <process_control_request+0x430>
 8005e96:	2b03      	cmp	r3, #3
 8005e98:	dc48      	bgt.n	8005f2c <process_control_request+0x494>
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <process_control_request+0x40c>
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d012      	beq.n	8005ec8 <process_control_request+0x430>
 8005ea2:	e043      	b.n	8005f2c <process_control_request+0x494>
        {
          case TUSB_REQ_GET_STATUS:
          {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8005ea4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005ea8:	79fb      	ldrb	r3, [r7, #7]
 8005eaa:	4611      	mov	r1, r2
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 fe81 	bl	8006bb4 <usbd_edpt_stalled>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	813b      	strh	r3, [r7, #8]
            tud_control_xfer(rhport, p_request, &status, 2);
 8005eb8:	f107 0208 	add.w	r2, r7, #8
 8005ebc:	79f8      	ldrb	r0, [r7, #7]
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	6839      	ldr	r1, [r7, #0]
 8005ec2:	f000 ff1f 	bl	8006d04 <tud_control_xfer>
          }
          break;
 8005ec6:	e03d      	b.n	8005f44 <process_control_request+0x4ac>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE:
          {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	885b      	ldrh	r3, [r3, #2]
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d112      	bne.n	8005ef8 <process_control_request+0x460>
            {
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	785b      	ldrb	r3, [r3, #1]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d107      	bne.n	8005eea <process_control_request+0x452>
              {
                usbd_edpt_clear_stall(rhport, ep_addr);
 8005eda:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005ede:	79fb      	ldrb	r3, [r7, #7]
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fe1a 	bl	8006b1c <usbd_edpt_clear_stall>
 8005ee8:	e006      	b.n	8005ef8 <process_control_request+0x460>
              }else
              {
                usbd_edpt_stall(rhport, ep_addr);
 8005eea:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005eee:	79fb      	ldrb	r3, [r7, #7]
 8005ef0:	4611      	mov	r1, r2
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 fdc6 	bl	8006a84 <usbd_edpt_stall>
              }
            }

            if (driver)
 8005ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d021      	beq.n	8005f42 <process_control_request+0x4aa>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8005efe:	79fb      	ldrb	r3, [r7, #7]
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff fdaf 	bl	8005a68 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	f000 ff76 	bl	8006dfc <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8005f10:	4b15      	ldr	r3, [pc, #84]	; (8005f68 <process_control_request+0x4d0>)
 8005f12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f16:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d110      	bne.n	8005f42 <process_control_request+0x4aa>
 8005f20:	79fb      	ldrb	r3, [r7, #7]
 8005f22:	6839      	ldr	r1, [r7, #0]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 fe8f 	bl	8006c48 <tud_control_status>
            }
          }
          break;
 8005f2a:	e00a      	b.n	8005f42 <process_control_request+0x4aa>

          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
 8005f2c:	4b0f      	ldr	r3, [pc, #60]	; (8005f6c <process_control_request+0x4d4>)
 8005f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8005f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d000      	beq.n	8005f3e <process_control_request+0x4a6>
 8005f3c:	be00      	bkpt	0x0000
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e00d      	b.n	8005f5e <process_control_request+0x4c6>
          break;
 8005f42:	bf00      	nop
        }
      }
    }
    break;
 8005f44:	e00a      	b.n	8005f5c <process_control_request+0x4c4>

    // Unknown recipient
    default: TU_BREAKPOINT(); return false;
 8005f46:	4b09      	ldr	r3, [pc, #36]	; (8005f6c <process_control_request+0x4d4>)
 8005f48:	61fb      	str	r3, [r7, #28]
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d000      	beq.n	8005f58 <process_control_request+0x4c0>
 8005f56:	be00      	bkpt	0x0000
 8005f58:	2300      	movs	r3, #0
 8005f5a:	e000      	b.n	8005f5e <process_control_request+0x4c6>
  }

  return true;
 8005f5c:	2301      	movs	r3, #1
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3750      	adds	r7, #80	; 0x50
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20006e20 	.word	0x20006e20
 8005f6c:	e000edf0 	.word	0xe000edf0

08005f70 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b094      	sub	sp, #80	; 0x50
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	4603      	mov	r3, r0
 8005f78:	460a      	mov	r2, r1
 8005f7a:	71fb      	strb	r3, [r7, #7]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8005f80:	79bb      	ldrb	r3, [r7, #6]
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fd fcdc 	bl	8003944 <tud_descriptor_configuration_cb>
 8005f8c:	6478      	str	r0, [r7, #68]	; 0x44
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8005f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <process_set_config+0x2c>
 8005f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f96:	785b      	ldrb	r3, [r3, #1]
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d00a      	beq.n	8005fb2 <process_set_config+0x42>
 8005f9c:	4b7c      	ldr	r3, [pc, #496]	; (8006190 <process_set_config+0x220>)
 8005f9e:	61bb      	str	r3, [r7, #24]
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d000      	beq.n	8005fae <process_set_config+0x3e>
 8005fac:	be00      	bkpt	0x0000
 8005fae:	2300      	movs	r3, #0
 8005fb0:	e0e9      	b.n	8006186 <process_set_config+0x216>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8005fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fb4:	79db      	ldrb	r3, [r3, #7]
 8005fb6:	115b      	asrs	r3, r3, #5
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	b2d9      	uxtb	r1, r3
 8005fbe:	4a75      	ldr	r2, [pc, #468]	; (8006194 <process_set_config+0x224>)
 8005fc0:	7813      	ldrb	r3, [r2, #0]
 8005fc2:	f361 1304 	bfi	r3, r1, #4, #1
 8005fc6:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8005fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fca:	79db      	ldrb	r3, [r3, #7]
 8005fcc:	119b      	asrs	r3, r3, #6
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	b2d9      	uxtb	r1, r3
 8005fd4:	4a6f      	ldr	r2, [pc, #444]	; (8006194 <process_set_config+0x224>)
 8005fd6:	7813      	ldrb	r3, [r2, #0]
 8005fd8:	f361 1345 	bfi	r3, r1, #5, #1
 8005fdc:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8005fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fe0:	3309      	adds	r3, #9
 8005fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8005fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fe6:	885b      	ldrh	r3, [r3, #2]
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	461a      	mov	r2, r3
 8005fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fee:	4413      	add	r3, r2
 8005ff0:	643b      	str	r3, [r7, #64]	; 0x40

  while( p_desc < desc_end )
 8005ff2:	e0bd      	b.n	8006170 <process_set_config+0x200>
  {
    uint8_t assoc_itf_count = 1;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8005ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ffc:	617b      	str	r3, [r7, #20]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	3301      	adds	r3, #1
 8006002:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8006004:	2b0b      	cmp	r3, #11
 8006006:	d10f      	bne.n	8006028 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8006008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800600a:	63fb      	str	r3, [r7, #60]	; 0x3c
      assoc_itf_count = desc_iad->bInterfaceCount;
 800600c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800600e:	78db      	ldrb	r3, [r3, #3]
 8006010:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006016:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8006026:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800602a:	60bb      	str	r3, [r7, #8]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	3301      	adds	r3, #1
 8006030:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8006032:	2b04      	cmp	r3, #4
 8006034:	d00a      	beq.n	800604c <process_set_config+0xdc>
 8006036:	4b56      	ldr	r3, [pc, #344]	; (8006190 <process_set_config+0x220>)
 8006038:	61fb      	str	r3, [r7, #28]
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b00      	cmp	r3, #0
 8006044:	d000      	beq.n	8006048 <process_set_config+0xd8>
 8006046:	be00      	bkpt	0x0000
 8006048:	2300      	movs	r3, #0
 800604a:	e09c      	b.n	8006186 <process_set_config+0x216>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 800604c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800604e:	63bb      	str	r3, [r7, #56]	; 0x38

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8006050:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8006058:	2300      	movs	r3, #0
 800605a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 800605e:	e06e      	b.n	800613e <process_set_config+0x1ce>
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8006060:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff fa79 	bl	800555c <get_driver>
 800606a:	6338      	str	r0, [r7, #48]	; 0x30
      TU_ASSERT(driver);
 800606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10a      	bne.n	8006088 <process_set_config+0x118>
 8006072:	4b47      	ldr	r3, [pc, #284]	; (8006190 <process_set_config+0x220>)
 8006074:	627b      	str	r3, [r7, #36]	; 0x24
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b00      	cmp	r3, #0
 8006080:	d000      	beq.n	8006084 <process_set_config+0x114>
 8006082:	be00      	bkpt	0x0000
 8006084:	2300      	movs	r3, #0
 8006086:	e07e      	b.n	8006186 <process_set_config+0x216>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8006088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800608e:	79f8      	ldrb	r0, [r7, #7]
 8006090:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006092:	4798      	blx	r3
 8006094:	4603      	mov	r3, r0
 8006096:	85fb      	strh	r3, [r7, #46]	; 0x2e

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8006098:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800609a:	2b08      	cmp	r3, #8
 800609c:	d94a      	bls.n	8006134 <process_set_config+0x1c4>
 800609e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80060a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d846      	bhi.n	8006134 <process_set_config+0x1c4>
        // Open successfully
        TU_LOG(USBD_DBG, "  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 80060a6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d107      	bne.n	80060be <process_set_config+0x14e>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	4a39      	ldr	r2, [pc, #228]	; (8006198 <process_set_config+0x228>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d102      	bne.n	80060be <process_set_config+0x14e>
 80060b8:	2302      	movs	r3, #2
 80060ba:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 80060be:	2300      	movs	r3, #0
 80060c0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80060c4:	e024      	b.n	8006110 <process_set_config+0x1a0>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 80060c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c8:	789a      	ldrb	r2, [r3, #2]
 80060ca:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80060ce:	4413      	add	r3, r2
 80060d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 80060d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80060d8:	4a2e      	ldr	r2, [pc, #184]	; (8006194 <process_set_config+0x224>)
 80060da:	4413      	add	r3, r2
 80060dc:	78db      	ldrb	r3, [r3, #3]
 80060de:	2bff      	cmp	r3, #255	; 0xff
 80060e0:	d00a      	beq.n	80060f8 <process_set_config+0x188>
 80060e2:	4b2b      	ldr	r3, [pc, #172]	; (8006190 <process_set_config+0x220>)
 80060e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d000      	beq.n	80060f4 <process_set_config+0x184>
 80060f2:	be00      	bkpt	0x0000
 80060f4:	2300      	movs	r3, #0
 80060f6:	e046      	b.n	8006186 <process_set_config+0x216>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 80060f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80060fc:	4a25      	ldr	r2, [pc, #148]	; (8006194 <process_set_config+0x224>)
 80060fe:	4413      	add	r3, r2
 8006100:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8006104:	70da      	strb	r2, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8006106:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800610a:	3301      	adds	r3, #1
 800610c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8006110:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8006114:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006118:	429a      	cmp	r2, r3
 800611a:	d3d4      	bcc.n	80060c6 <process_set_config+0x156>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 800611c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8006120:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006122:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006124:	481d      	ldr	r0, [pc, #116]	; (800619c <process_set_config+0x22c>)
 8006126:	f002 fb63 	bl	80087f0 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 800612a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800612c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800612e:	4413      	add	r3, r2
 8006130:	64fb      	str	r3, [r7, #76]	; 0x4c

        break; // exit driver find loop
 8006132:	e00b      	b.n	800614c <process_set_config+0x1dc>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8006134:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8006138:	3301      	adds	r3, #1
 800613a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 800613e:	4b18      	ldr	r3, [pc, #96]	; (80061a0 <process_set_config+0x230>)
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8006148:	429a      	cmp	r2, r3
 800614a:	da89      	bge.n	8006060 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 800614c:	4b14      	ldr	r3, [pc, #80]	; (80061a0 <process_set_config+0x230>)
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8006156:	429a      	cmp	r2, r3
 8006158:	da0a      	bge.n	8006170 <process_set_config+0x200>
 800615a:	4b0d      	ldr	r3, [pc, #52]	; (8006190 <process_set_config+0x220>)
 800615c:	623b      	str	r3, [r7, #32]
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b00      	cmp	r3, #0
 8006168:	d000      	beq.n	800616c <process_set_config+0x1fc>
 800616a:	be00      	bkpt	0x0000
 800616c:	2300      	movs	r3, #0
 800616e:	e00a      	b.n	8006186 <process_set_config+0x216>
  while( p_desc < desc_end )
 8006170:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006174:	429a      	cmp	r2, r3
 8006176:	f4ff af3d 	bcc.w	8005ff4 <process_set_config+0x84>
  }

  // invoke callback
  if (tud_mount_cb) tud_mount_cb();
 800617a:	4b0a      	ldr	r3, [pc, #40]	; (80061a4 <process_set_config+0x234>)
 800617c:	2b00      	cmp	r3, #0
 800617e:	d001      	beq.n	8006184 <process_set_config+0x214>
 8006180:	f7fc fe92 	bl	8002ea8 <tud_mount_cb>

  return true;
 8006184:	2301      	movs	r3, #1
}
 8006186:	4618      	mov	r0, r3
 8006188:	3750      	adds	r7, #80	; 0x50
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	e000edf0 	.word	0xe000edf0
 8006194:	20006e20 	.word	0x20006e20
 8006198:	08003eb1 	.word	0x08003eb1
 800619c:	20006e33 	.word	0x20006e33
 80061a0:	20006e50 	.word	0x20006e50
 80061a4:	08002ea9 	.word	0x08002ea9

080061a8 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b094      	sub	sp, #80	; 0x50
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	4603      	mov	r3, r0
 80061b0:	6039      	str	r1, [r7, #0]
 80061b2:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	885b      	ldrh	r3, [r3, #2]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	84bb      	strh	r3, [r7, #36]	; 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 80061bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061be:	0a1b      	lsrs	r3, r3, #8
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	885b      	ldrh	r3, [r3, #2]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	84fb      	strh	r3, [r7, #38]	; 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80061d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

  switch(desc_type)
 80061d8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80061dc:	3b01      	subs	r3, #1
 80061de:	2b0e      	cmp	r3, #14
 80061e0:	f200 80bc 	bhi.w	800635c <process_get_descriptor+0x1b4>
 80061e4:	a201      	add	r2, pc, #4	; (adr r2, 80061ec <process_get_descriptor+0x44>)
 80061e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ea:	bf00      	nop
 80061ec:	08006229 	.word	0x08006229
 80061f0:	0800628d 	.word	0x0800628d
 80061f4:	080062f5 	.word	0x080062f5
 80061f8:	0800635d 	.word	0x0800635d
 80061fc:	0800635d 	.word	0x0800635d
 8006200:	0800632b 	.word	0x0800632b
 8006204:	0800628d 	.word	0x0800628d
 8006208:	0800635d 	.word	0x0800635d
 800620c:	0800635d 	.word	0x0800635d
 8006210:	0800635d 	.word	0x0800635d
 8006214:	0800635d 	.word	0x0800635d
 8006218:	0800635d 	.word	0x0800635d
 800621c:	0800635d 	.word	0x0800635d
 8006220:	0800635d 	.word	0x0800635d
 8006224:	0800623f 	.word	0x0800623f
  {
    case TUSB_DESC_DEVICE:
    {
      TU_LOG(USBD_DBG, " Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8006228:	f7fd fb82 	bl	8003930 <tud_descriptor_device_cb>
 800622c:	62b8      	str	r0, [r7, #40]	; 0x28
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else
      {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 800622e:	79f8      	ldrb	r0, [r7, #7]
 8006230:	2312      	movs	r3, #18
 8006232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	f000 fd65 	bl	8006d04 <tud_control_xfer>
 800623a:	4603      	mov	r3, r0
 800623c:	e08f      	b.n	800635e <process_get_descriptor+0x1b6>
    case TUSB_DESC_BOS:
    {
      TU_LOG(USBD_DBG, " BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      if (!tud_descriptor_bos_cb) return false;
 800623e:	4b4a      	ldr	r3, [pc, #296]	; (8006368 <process_get_descriptor+0x1c0>)
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <process_get_descriptor+0xa0>
 8006244:	2300      	movs	r3, #0
 8006246:	e08a      	b.n	800635e <process_get_descriptor+0x1b6>

      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8006248:	f3af 8000 	nop.w
 800624c:	4603      	mov	r3, r0
 800624e:	647b      	str	r3, [r7, #68]	; 0x44
      TU_ASSERT(desc_bos);
 8006250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10a      	bne.n	800626c <process_get_descriptor+0xc4>
 8006256:	4b45      	ldr	r3, [pc, #276]	; (800636c <process_get_descriptor+0x1c4>)
 8006258:	63fb      	str	r3, [r7, #60]	; 0x3c
 800625a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d000      	beq.n	8006268 <process_get_descriptor+0xc0>
 8006266:	be00      	bkpt	0x0000
 8006268:	2300      	movs	r3, #0
 800626a:	e078      	b.n	800635e <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 800626c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800626e:	3302      	adds	r3, #2
 8006270:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 800627a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800627c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006280:	79f8      	ldrb	r0, [r7, #7]
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	f000 fd3e 	bl	8006d04 <tud_control_xfer>
 8006288:	4603      	mov	r3, r0
 800628a:	e068      	b.n	800635e <process_get_descriptor+0x1b6>
    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG:
    {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION )
 800628c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006290:	2b02      	cmp	r3, #2
 8006292:	d107      	bne.n	80062a4 <process_get_descriptor+0xfc>
      {
        TU_LOG(USBD_DBG, " Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8006294:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8006298:	4618      	mov	r0, r3
 800629a:	f7fd fb53 	bl	8003944 <tud_descriptor_configuration_cb>
 800629e:	4603      	mov	r3, r0
 80062a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062a2:	e00b      	b.n	80062bc <process_get_descriptor+0x114>
      }else
      {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG(USBD_DBG, " Other Speed Configuration\r\n");
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 80062a4:	4b32      	ldr	r3, [pc, #200]	; (8006370 <process_get_descriptor+0x1c8>)
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <process_get_descriptor+0x106>
 80062aa:	2300      	movs	r3, #0
 80062ac:	e057      	b.n	800635e <process_get_descriptor+0x1b6>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 80062ae:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80062b2:	4618      	mov	r0, r3
 80062b4:	f3af 8000 	nop.w
 80062b8:	4603      	mov	r3, r0
 80062ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }

      TU_ASSERT(desc_config);
 80062bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10a      	bne.n	80062d8 <process_get_descriptor+0x130>
 80062c2:	4b2a      	ldr	r3, [pc, #168]	; (800636c <process_get_descriptor+0x1c4>)
 80062c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d000      	beq.n	80062d4 <process_get_descriptor+0x12c>
 80062d2:	be00      	bkpt	0x0000
 80062d4:	2300      	movs	r3, #0
 80062d6:	e042      	b.n	800635e <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 80062d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062da:	3302      	adds	r3, #2
 80062dc:	61fb      	str	r3, [r7, #28]
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	867b      	strh	r3, [r7, #50]	; 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 80062e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062e6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80062e8:	79f8      	ldrb	r0, [r7, #7]
 80062ea:	6839      	ldr	r1, [r7, #0]
 80062ec:	f000 fd0a 	bl	8006d04 <tud_control_xfer>
 80062f0:	4603      	mov	r3, r0
 80062f2:	e034      	b.n	800635e <process_get_descriptor+0x1b6>
    case TUSB_DESC_STRING:
    {
      TU_LOG(USBD_DBG, " String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	889b      	ldrh	r3, [r3, #4]
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80062fe:	4611      	mov	r1, r2
 8006300:	4618      	mov	r0, r3
 8006302:	f7fd fb2d 	bl	8003960 <tud_descriptor_string_cb>
 8006306:	6378      	str	r0, [r7, #52]	; 0x34
      TU_VERIFY(desc_str);
 8006308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <process_get_descriptor+0x16a>
 800630e:	2300      	movs	r3, #0
 8006310:	e025      	b.n	800635e <process_get_descriptor+0x1b6>
 8006312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006314:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 800631a:	b29b      	uxth	r3, r3
 800631c:	79f8      	ldrb	r0, [r7, #7]
 800631e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006320:	6839      	ldr	r1, [r7, #0]
 8006322:	f000 fcef 	bl	8006d04 <tud_control_xfer>
 8006326:	4603      	mov	r3, r0
 8006328:	e019      	b.n	800635e <process_get_descriptor+0x1b6>

    case TUSB_DESC_DEVICE_QUALIFIER:
    {
      TU_LOG(USBD_DBG, " Device Qualifier\r\n");

      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 800632a:	4b12      	ldr	r3, [pc, #72]	; (8006374 <process_get_descriptor+0x1cc>)
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <process_get_descriptor+0x18c>
 8006330:	2300      	movs	r3, #0
 8006332:	e014      	b.n	800635e <process_get_descriptor+0x1b6>

      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8006334:	f3af 8000 	nop.w
 8006338:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(desc_qualifier);
 800633a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <process_get_descriptor+0x19c>
 8006340:	2300      	movs	r3, #0
 8006342:	e00c      	b.n	800635e <process_get_descriptor+0x1b6>
 8006344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006346:	617b      	str	r3, [r7, #20]
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 800634c:	b29b      	uxth	r3, r3
 800634e:	79f8      	ldrb	r0, [r7, #7]
 8006350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	f000 fcd6 	bl	8006d04 <tud_control_xfer>
 8006358:	4603      	mov	r3, r0
 800635a:	e000      	b.n	800635e <process_get_descriptor+0x1b6>
    }
    // break; // unreachable

    default: return false;
 800635c:	2300      	movs	r3, #0
  }
}
 800635e:	4618      	mov	r0, r3
 8006360:	3750      	adds	r7, #80	; 0x50
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	00000000 	.word	0x00000000
 800636c:	e000edf0 	.word	0xe000edf0
	...

08006378 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const * event, bool in_isr)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b0aa      	sub	sp, #168	; 0xa8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	70fb      	strb	r3, [r7, #3]
  switch (event->event_id)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	785b      	ldrb	r3, [r3, #1]
 8006388:	3b02      	subs	r3, #2
 800638a:	2b03      	cmp	r3, #3
 800638c:	f200 8198 	bhi.w	80066c0 <dcd_event_handler+0x348>
 8006390:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <dcd_event_handler+0x20>)
 8006392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006396:	bf00      	nop
 8006398:	080063a9 	.word	0x080063a9
 800639c:	080065ad 	.word	0x080065ad
 80063a0:	08006469 	.word	0x08006469
 80063a4:	0800650f 	.word	0x0800650f
  {
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected  = 0;
 80063a8:	4a82      	ldr	r2, [pc, #520]	; (80065b4 <dcd_event_handler+0x23c>)
 80063aa:	7813      	ldrb	r3, [r2, #0]
 80063ac:	f36f 0300 	bfc	r3, #0, #1
 80063b0:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed  = 0;
 80063b2:	4a80      	ldr	r2, [pc, #512]	; (80065b4 <dcd_event_handler+0x23c>)
 80063b4:	7813      	ldrb	r3, [r2, #0]
 80063b6:	f36f 0341 	bfc	r3, #1, #1
 80063ba:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num    = 0;
 80063bc:	4b7d      	ldr	r3, [pc, #500]	; (80065b4 <dcd_event_handler+0x23c>)
 80063be:	2200      	movs	r2, #0
 80063c0:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended  = 0;
 80063c2:	4a7c      	ldr	r2, [pc, #496]	; (80065b4 <dcd_event_handler+0x23c>)
 80063c4:	7813      	ldrb	r3, [r2, #0]
 80063c6:	f36f 0382 	bfc	r3, #2, #1
 80063ca:	7013      	strb	r3, [r2, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 80063cc:	4b7a      	ldr	r3, [pc, #488]	; (80065b8 <dcd_event_handler+0x240>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80063da:	78fb      	ldrb	r3, [r7, #3]
 80063dc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
  if (!in_isr) {
 80063e0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80063e4:	f083 0301 	eor.w	r3, r3, #1
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d009      	beq.n	8006402 <dcd_event_handler+0x8a>
 80063ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  qhdl->interrupt_set(false);
 80063f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2000      	movs	r0, #0
 80063fe:	4798      	blx	r3
}
 8006400:	bf00      	nop
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 8006402:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006406:	3304      	adds	r3, #4
 8006408:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800640c:	4618      	mov	r0, r3
 800640e:	f7ff f816 	bl	800543e <tu_fifo_write>
 8006412:	4603      	mov	r3, r0
 8006414:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

  if (!in_isr) {
 8006418:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800641c:	f083 0301 	eor.w	r3, r3, #1
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d009      	beq.n	800643a <dcd_event_handler+0xc2>
 8006426:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800642a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  qhdl->interrupt_set(true);
 800642e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2001      	movs	r0, #1
 8006436:	4798      	blx	r3
}
 8006438:	bf00      	nop
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
 800643a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800643e:	f083 0301 	eor.w	r3, r3, #1
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00b      	beq.n	8006460 <dcd_event_handler+0xe8>
 8006448:	4b5c      	ldr	r3, [pc, #368]	; (80065bc <dcd_event_handler+0x244>)
 800644a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800644e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <dcd_event_handler+0xec>
 800645c:	be00      	bkpt	0x0000
 800645e:	e001      	b.n	8006464 <dcd_event_handler+0xec>

  return success;
 8006460:	bf00      	nop
 8006462:	e172      	b.n	800674a <dcd_event_handler+0x3d2>
  TU_ASSERT(success);
 8006464:	bf00      	nop
    break;
 8006466:	e170      	b.n	800674a <dcd_event_handler+0x3d2>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if ( _usbd_dev.connected )
 8006468:	4b52      	ldr	r3, [pc, #328]	; (80065b4 <dcd_event_handler+0x23c>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	f000 8164 	beq.w	8006740 <dcd_event_handler+0x3c8>
      {
        _usbd_dev.suspended = 1;
 8006478:	4a4e      	ldr	r2, [pc, #312]	; (80065b4 <dcd_event_handler+0x23c>)
 800647a:	7813      	ldrb	r3, [r2, #0]
 800647c:	f043 0304 	orr.w	r3, r3, #4
 8006480:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8006482:	4b4d      	ldr	r3, [pc, #308]	; (80065b8 <dcd_event_handler+0x240>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800648e:	78fb      	ldrb	r3, [r7, #3]
 8006490:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  if (!in_isr) {
 8006494:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8006498:	f083 0301 	eor.w	r3, r3, #1
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d007      	beq.n	80064b2 <dcd_event_handler+0x13a>
 80064a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80064a6:	677b      	str	r3, [r7, #116]	; 0x74
  qhdl->interrupt_set(false);
 80064a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2000      	movs	r0, #0
 80064ae:	4798      	blx	r3
}
 80064b0:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 80064b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80064b6:	3304      	adds	r3, #4
 80064b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fe ffbf 	bl	800543e <tu_fifo_write>
 80064c0:	4603      	mov	r3, r0
 80064c2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  if (!in_isr) {
 80064c6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80064ca:	f083 0301 	eor.w	r3, r3, #1
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d007      	beq.n	80064e4 <dcd_event_handler+0x16c>
 80064d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80064d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  qhdl->interrupt_set(true);
 80064da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2001      	movs	r0, #1
 80064e0:	4798      	blx	r3
}
 80064e2:	bf00      	nop
  TU_ASSERT(success);
 80064e4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80064e8:	f083 0301 	eor.w	r3, r3, #1
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d009      	beq.n	8006506 <dcd_event_handler+0x18e>
 80064f2:	4b32      	ldr	r3, [pc, #200]	; (80065bc <dcd_event_handler+0x244>)
 80064f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80064f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <dcd_event_handler+0x192>
 8006502:	be00      	bkpt	0x0000
 8006504:	e001      	b.n	800650a <dcd_event_handler+0x192>
  return success;
 8006506:	bf00      	nop
 8006508:	e11a      	b.n	8006740 <dcd_event_handler+0x3c8>
  TU_ASSERT(success);
 800650a:	bf00      	nop
      }
    break;
 800650c:	e118      	b.n	8006740 <dcd_event_handler+0x3c8>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if ( _usbd_dev.connected )
 800650e:	4b29      	ldr	r3, [pc, #164]	; (80065b4 <dcd_event_handler+0x23c>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 8113 	beq.w	8006744 <dcd_event_handler+0x3cc>
      {
        _usbd_dev.suspended = 0;
 800651e:	4a25      	ldr	r2, [pc, #148]	; (80065b4 <dcd_event_handler+0x23c>)
 8006520:	7813      	ldrb	r3, [r2, #0]
 8006522:	f36f 0382 	bfc	r3, #2, #1
 8006526:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8006528:	4b23      	ldr	r3, [pc, #140]	; (80065b8 <dcd_event_handler+0x240>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	667b      	str	r3, [r7, #100]	; 0x64
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	663b      	str	r3, [r7, #96]	; 0x60
 8006532:	78fb      	ldrb	r3, [r7, #3]
 8006534:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (!in_isr) {
 8006538:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800653c:	f083 0301 	eor.w	r3, r3, #1
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d006      	beq.n	8006554 <dcd_event_handler+0x1dc>
 8006546:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006548:	65bb      	str	r3, [r7, #88]	; 0x58
  qhdl->interrupt_set(false);
 800654a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2000      	movs	r0, #0
 8006550:	4798      	blx	r3
}
 8006552:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8006554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006556:	3304      	adds	r3, #4
 8006558:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800655a:	4618      	mov	r0, r3
 800655c:	f7fe ff6f 	bl	800543e <tu_fifo_write>
 8006560:	4603      	mov	r3, r0
 8006562:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (!in_isr) {
 8006566:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800656a:	f083 0301 	eor.w	r3, r3, #1
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d006      	beq.n	8006582 <dcd_event_handler+0x20a>
 8006574:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006576:	653b      	str	r3, [r7, #80]	; 0x50
  qhdl->interrupt_set(true);
 8006578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2001      	movs	r0, #1
 800657e:	4798      	blx	r3
}
 8006580:	bf00      	nop
  TU_ASSERT(success);
 8006582:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006586:	f083 0301 	eor.w	r3, r3, #1
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d009      	beq.n	80065a4 <dcd_event_handler+0x22c>
 8006590:	4b0a      	ldr	r3, [pc, #40]	; (80065bc <dcd_event_handler+0x244>)
 8006592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <dcd_event_handler+0x230>
 80065a0:	be00      	bkpt	0x0000
 80065a2:	e001      	b.n	80065a8 <dcd_event_handler+0x230>
  return success;
 80065a4:	bf00      	nop
 80065a6:	e0cd      	b.n	8006744 <dcd_event_handler+0x3cc>
  TU_ASSERT(success);
 80065a8:	bf00      	nop
      }
    break;
 80065aa:	e0cb      	b.n	8006744 <dcd_event_handler+0x3cc>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80065ac:	2300      	movs	r3, #0
 80065ae:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80065b2:	e023      	b.n	80065fc <dcd_event_handler+0x284>
 80065b4:	20006e20 	.word	0x20006e20
 80065b8:	20006f14 	.word	0x20006f14
 80065bc:	e000edf0 	.word	0xe000edf0
      {
        usbd_class_driver_t const * driver = get_driver(i);
 80065c0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7fe ffc9 	bl	800555c <get_driver>
 80065ca:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
        if (driver && driver->sof)
 80065ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00d      	beq.n	80065f2 <dcd_event_handler+0x27a>
 80065d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d008      	beq.n	80065f2 <dcd_event_handler+0x27a>
        {
          driver->sof(event->rhport, event->sof.frame_count);
 80065e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	7810      	ldrb	r0, [r2, #0]
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	6852      	ldr	r2, [r2, #4]
 80065ee:	4611      	mov	r1, r2
 80065f0:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80065f2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80065f6:	3301      	adds	r3, #1
 80065f8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80065fc:	4b55      	ldr	r3, [pc, #340]	; (8006754 <dcd_event_handler+0x3dc>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006606:	429a      	cmp	r2, r3
 8006608:	dada      	bge.n	80065c0 <dcd_event_handler+0x248>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if ( _usbd_dev.suspended )
 800660a:	4b53      	ldr	r3, [pc, #332]	; (8006758 <dcd_event_handler+0x3e0>)
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	f000 8097 	beq.w	8006748 <dcd_event_handler+0x3d0>
      {
        _usbd_dev.suspended = 0;
 800661a:	4a4f      	ldr	r2, [pc, #316]	; (8006758 <dcd_event_handler+0x3e0>)
 800661c:	7813      	ldrb	r3, [r2, #0]
 800661e:	f36f 0382 	bfc	r3, #2, #1
 8006622:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8006624:	f107 0308 	add.w	r3, r7, #8
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	605a      	str	r2, [r3, #4]
 800662e:	609a      	str	r2, [r3, #8]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	723b      	strb	r3, [r7, #8]
 8006636:	2305      	movs	r3, #5
 8006638:	727b      	strb	r3, [r7, #9]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 800663a:	4b48      	ldr	r3, [pc, #288]	; (800675c <dcd_event_handler+0x3e4>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006640:	f107 0308 	add.w	r3, r7, #8
 8006644:	647b      	str	r3, [r7, #68]	; 0x44
 8006646:	78fb      	ldrb	r3, [r7, #3]
 8006648:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (!in_isr) {
 800664c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006650:	f083 0301 	eor.w	r3, r3, #1
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d006      	beq.n	8006668 <dcd_event_handler+0x2f0>
 800665a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800665c:	63fb      	str	r3, [r7, #60]	; 0x3c
  qhdl->interrupt_set(false);
 800665e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2000      	movs	r0, #0
 8006664:	4798      	blx	r3
}
 8006666:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8006668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800666a:	3304      	adds	r3, #4
 800666c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800666e:	4618      	mov	r0, r3
 8006670:	f7fe fee5 	bl	800543e <tu_fifo_write>
 8006674:	4603      	mov	r3, r0
 8006676:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  if (!in_isr) {
 800667a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800667e:	f083 0301 	eor.w	r3, r3, #1
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	d006      	beq.n	8006696 <dcd_event_handler+0x31e>
 8006688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800668a:	637b      	str	r3, [r7, #52]	; 0x34
  qhdl->interrupt_set(true);
 800668c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2001      	movs	r0, #1
 8006692:	4798      	blx	r3
}
 8006694:	bf00      	nop
  TU_ASSERT(success);
 8006696:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800669a:	f083 0301 	eor.w	r3, r3, #1
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d009      	beq.n	80066b8 <dcd_event_handler+0x340>
 80066a4:	4b2e      	ldr	r3, [pc, #184]	; (8006760 <dcd_event_handler+0x3e8>)
 80066a6:	633b      	str	r3, [r7, #48]	; 0x30
 80066a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <dcd_event_handler+0x344>
 80066b4:	be00      	bkpt	0x0000
 80066b6:	e001      	b.n	80066bc <dcd_event_handler+0x344>
  return success;
 80066b8:	bf00      	nop
 80066ba:	e045      	b.n	8006748 <dcd_event_handler+0x3d0>
  TU_ASSERT(success);
 80066bc:	bf00      	nop
      }

      // skip osal queue for SOF in usbd task
    break;
 80066be:	e043      	b.n	8006748 <dcd_event_handler+0x3d0>

    default:
      osal_queue_send(_usbd_q, event, in_isr);
 80066c0:	4b26      	ldr	r3, [pc, #152]	; (800675c <dcd_event_handler+0x3e4>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80066ca:	78fb      	ldrb	r3, [r7, #3]
 80066cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (!in_isr) {
 80066d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066d4:	f083 0301 	eor.w	r3, r3, #1
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d006      	beq.n	80066ec <dcd_event_handler+0x374>
 80066de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e0:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(false);
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2000      	movs	r0, #0
 80066e8:	4798      	blx	r3
}
 80066ea:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 80066ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ee:	3304      	adds	r3, #4
 80066f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fe fea3 	bl	800543e <tu_fifo_write>
 80066f8:	4603      	mov	r3, r0
 80066fa:	77fb      	strb	r3, [r7, #31]
  if (!in_isr) {
 80066fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006700:	f083 0301 	eor.w	r3, r3, #1
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d006      	beq.n	8006718 <dcd_event_handler+0x3a0>
 800670a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670c:	61bb      	str	r3, [r7, #24]
  qhdl->interrupt_set(true);
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2001      	movs	r0, #1
 8006714:	4798      	blx	r3
}
 8006716:	bf00      	nop
  TU_ASSERT(success);
 8006718:	7ffb      	ldrb	r3, [r7, #31]
 800671a:	f083 0301 	eor.w	r3, r3, #1
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	d009      	beq.n	8006738 <dcd_event_handler+0x3c0>
 8006724:	4b0e      	ldr	r3, [pc, #56]	; (8006760 <dcd_event_handler+0x3e8>)
 8006726:	617b      	str	r3, [r7, #20]
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b00      	cmp	r3, #0
 8006732:	d003      	beq.n	800673c <dcd_event_handler+0x3c4>
 8006734:	be00      	bkpt	0x0000
 8006736:	e001      	b.n	800673c <dcd_event_handler+0x3c4>
  return success;
 8006738:	bf00      	nop
 800673a:	e006      	b.n	800674a <dcd_event_handler+0x3d2>
  TU_ASSERT(success);
 800673c:	bf00      	nop
    break;
 800673e:	e004      	b.n	800674a <dcd_event_handler+0x3d2>
    break;
 8006740:	bf00      	nop
 8006742:	e002      	b.n	800674a <dcd_event_handler+0x3d2>
    break;
 8006744:	bf00      	nop
 8006746:	e000      	b.n	800674a <dcd_event_handler+0x3d2>
    break;
 8006748:	bf00      	nop
  }
}
 800674a:	bf00      	nop
 800674c:	37a8      	adds	r7, #168	; 0xa8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	20006e50 	.word	0x20006e50
 8006758:	20006e20 	.word	0x20006e20
 800675c:	20006f14 	.word	0x20006f14
 8006760:	e000edf0 	.word	0xe000edf0

08006764 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	4603      	mov	r3, r0
 800676c:	71fb      	strb	r3, [r7, #7]
  if (enabled)
 800676e:	79fb      	ldrb	r3, [r7, #7]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d005      	beq.n	8006780 <usbd_int_set+0x1c>
  {
    dcd_int_enable(_usbd_rhport);
 8006774:	4b07      	ldr	r3, [pc, #28]	; (8006794 <usbd_int_set+0x30>)
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	4618      	mov	r0, r3
 800677a:	f000 ff41 	bl	8007600 <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 800677e:	e004      	b.n	800678a <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8006780:	4b04      	ldr	r3, [pc, #16]	; (8006794 <usbd_int_set+0x30>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	4618      	mov	r0, r3
 8006786:	f000 ff47 	bl	8007618 <dcd_int_disable>
}
 800678a:	bf00      	nop
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	20000430 	.word	0x20000430

08006798 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b08a      	sub	sp, #40	; 0x28
 800679c:	af00      	add	r7, sp, #0
 800679e:	6039      	str	r1, [r7, #0]
 80067a0:	4611      	mov	r1, r2
 80067a2:	461a      	mov	r2, r3
 80067a4:	4603      	mov	r3, r0
 80067a6:	71fb      	strb	r3, [r7, #7]
 80067a8:	460b      	mov	r3, r1
 80067aa:	71bb      	strb	r3, [r7, #6]
 80067ac:	4613      	mov	r3, r2
 80067ae:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 80067b0:	2300      	movs	r3, #0
 80067b2:	627b      	str	r3, [r7, #36]	; 0x24
 80067b4:	e04d      	b.n	8006852 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	785b      	ldrb	r3, [r3, #1]
 80067be:	2b05      	cmp	r3, #5
 80067c0:	d108      	bne.n	80067d4 <usbd_open_edpt_pair+0x3c>
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	78db      	ldrb	r3, [r3, #3]
 80067c6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	461a      	mov	r2, r3
 80067ce:	797b      	ldrb	r3, [r7, #5]
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d00a      	beq.n	80067ea <usbd_open_edpt_pair+0x52>
 80067d4:	4b23      	ldr	r3, [pc, #140]	; (8006864 <usbd_open_edpt_pair+0xcc>)
 80067d6:	61bb      	str	r3, [r7, #24]
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d000      	beq.n	80067e6 <usbd_open_edpt_pair+0x4e>
 80067e4:	be00      	bkpt	0x0000
 80067e6:	2300      	movs	r3, #0
 80067e8:	e038      	b.n	800685c <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 80067ea:	79fb      	ldrb	r3, [r7, #7]
 80067ec:	6a39      	ldr	r1, [r7, #32]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 f83a 	bl	8006868 <usbd_edpt_open>
 80067f4:	4603      	mov	r3, r0
 80067f6:	f083 0301 	eor.w	r3, r3, #1
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00a      	beq.n	8006816 <usbd_open_edpt_pair+0x7e>
 8006800:	4b18      	ldr	r3, [pc, #96]	; (8006864 <usbd_open_edpt_pair+0xcc>)
 8006802:	61fb      	str	r3, [r7, #28]
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b00      	cmp	r3, #0
 800680e:	d000      	beq.n	8006812 <usbd_open_edpt_pair+0x7a>
 8006810:	be00      	bkpt	0x0000
 8006812:	2300      	movs	r3, #0
 8006814:	e022      	b.n	800685c <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8006816:	6a3b      	ldr	r3, [r7, #32]
 8006818:	789b      	ldrb	r3, [r3, #2]
 800681a:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800681c:	7dfb      	ldrb	r3, [r7, #23]
 800681e:	09db      	lsrs	r3, r3, #7
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b01      	cmp	r3, #1
 8006824:	d104      	bne.n	8006830 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	789a      	ldrb	r2, [r3, #2]
 800682a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682c:	701a      	strb	r2, [r3, #0]
 800682e:	e003      	b.n	8006838 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	789a      	ldrb	r2, [r3, #2]
 8006834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006836:	701a      	strb	r2, [r3, #0]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	461a      	mov	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 800684a:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 800684c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684e:	3301      	adds	r3, #1
 8006850:	627b      	str	r3, [r7, #36]	; 0x24
 8006852:	79bb      	ldrb	r3, [r7, #6]
 8006854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006856:	429a      	cmp	r2, r3
 8006858:	dbad      	blt.n	80067b6 <usbd_open_edpt_pair+0x1e>
  }

  return true;
 800685a:	2301      	movs	r3, #1
}
 800685c:	4618      	mov	r0, r3
 800685e:	3728      	adds	r7, #40	; 0x28
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	e000edf0 	.word	0xe000edf0

08006868 <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	4603      	mov	r3, r0
 8006870:	6039      	str	r1, [r7, #0]
 8006872:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 8006874:	4b1b      	ldr	r3, [pc, #108]	; (80068e4 <usbd_edpt_open+0x7c>)
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	789b      	ldrb	r3, [r3, #2]
 800687e:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006880:	7bfb      	ldrb	r3, [r7, #15]
 8006882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b05      	cmp	r3, #5
 800688a:	d90a      	bls.n	80068a2 <usbd_edpt_open+0x3a>
 800688c:	4b16      	ldr	r3, [pc, #88]	; (80068e8 <usbd_edpt_open+0x80>)
 800688e:	613b      	str	r3, [r7, #16]
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b00      	cmp	r3, #0
 800689a:	d000      	beq.n	800689e <usbd_edpt_open+0x36>
 800689c:	be00      	bkpt	0x0000
 800689e:	2300      	movs	r3, #0
 80068a0:	e01c      	b.n	80068dc <usbd_edpt_open+0x74>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 80068a2:	4b12      	ldr	r3, [pc, #72]	; (80068ec <usbd_edpt_open+0x84>)
 80068a4:	789b      	ldrb	r3, [r3, #2]
 80068a6:	4619      	mov	r1, r3
 80068a8:	6838      	ldr	r0, [r7, #0]
 80068aa:	f001 ff25 	bl	80086f8 <tu_edpt_validate>
 80068ae:	4603      	mov	r3, r0
 80068b0:	f083 0301 	eor.w	r3, r3, #1
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00a      	beq.n	80068d0 <usbd_edpt_open+0x68>
 80068ba:	4b0b      	ldr	r3, [pc, #44]	; (80068e8 <usbd_edpt_open+0x80>)
 80068bc:	617b      	str	r3, [r7, #20]
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d000      	beq.n	80068cc <usbd_edpt_open+0x64>
 80068ca:	be00      	bkpt	0x0000
 80068cc:	2300      	movs	r3, #0
 80068ce:	e005      	b.n	80068dc <usbd_edpt_open+0x74>

  return dcd_edpt_open(rhport, desc_ep);
 80068d0:	79fb      	ldrb	r3, [r7, #7]
 80068d2:	6839      	ldr	r1, [r7, #0]
 80068d4:	4618      	mov	r0, r3
 80068d6:	f000 feef 	bl	80076b8 <dcd_edpt_open>
 80068da:	4603      	mov	r3, r0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3718      	adds	r7, #24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	20000430 	.word	0x20000430
 80068e8:	e000edf0 	.word	0xe000edf0
 80068ec:	20006e20 	.word	0x20006e20

080068f0 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	4603      	mov	r3, r0
 80068f8:	460a      	mov	r2, r1
 80068fa:	71fb      	strb	r3, [r7, #7]
 80068fc:	4613      	mov	r3, r2
 80068fe:	71bb      	strb	r3, [r7, #6]
 8006900:	79bb      	ldrb	r3, [r7, #6]
 8006902:	73bb      	strb	r3, [r7, #14]
 8006904:	7bbb      	ldrb	r3, [r7, #14]
 8006906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800690a:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 800690c:	75fb      	strb	r3, [r7, #23]
 800690e:	79bb      	ldrb	r3, [r7, #6]
 8006910:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006912:	7bfb      	ldrb	r3, [r7, #15]
 8006914:	09db      	lsrs	r3, r3, #7
 8006916:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 8006918:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800691a:	7dfa      	ldrb	r2, [r7, #23]
 800691c:	7dbb      	ldrb	r3, [r7, #22]
 800691e:	0052      	lsls	r2, r2, #1
 8006920:	4413      	add	r3, r2
 8006922:	3318      	adds	r3, #24
 8006924:	4a06      	ldr	r2, [pc, #24]	; (8006940 <usbd_edpt_claim+0x50>)
 8006926:	4413      	add	r3, r2
 8006928:	3307      	adds	r3, #7
 800692a:	613b      	str	r3, [r7, #16]

#if TUSB_OPT_MUTEX
  return tu_edpt_claim(ep_state, _usbd_mutex);
#else
  return tu_edpt_claim(ep_state, NULL);
 800692c:	2100      	movs	r1, #0
 800692e:	6938      	ldr	r0, [r7, #16]
 8006930:	f001 fe8e 	bl	8008650 <tu_edpt_claim>
 8006934:	4603      	mov	r3, r0
#endif
}
 8006936:	4618      	mov	r0, r3
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	20006e20 	.word	0x20006e20

08006944 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b086      	sub	sp, #24
 8006948:	af00      	add	r7, sp, #0
 800694a:	4603      	mov	r3, r0
 800694c:	460a      	mov	r2, r1
 800694e:	71fb      	strb	r3, [r7, #7]
 8006950:	4613      	mov	r3, r2
 8006952:	71bb      	strb	r3, [r7, #6]
 8006954:	79bb      	ldrb	r3, [r7, #6]
 8006956:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006958:	7bbb      	ldrb	r3, [r7, #14]
 800695a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800695e:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 8006960:	75fb      	strb	r3, [r7, #23]
 8006962:	79bb      	ldrb	r3, [r7, #6]
 8006964:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006966:	7bfb      	ldrb	r3, [r7, #15]
 8006968:	09db      	lsrs	r3, r3, #7
 800696a:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 800696c:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800696e:	7dfa      	ldrb	r2, [r7, #23]
 8006970:	7dbb      	ldrb	r3, [r7, #22]
 8006972:	0052      	lsls	r2, r2, #1
 8006974:	4413      	add	r3, r2
 8006976:	3318      	adds	r3, #24
 8006978:	4a06      	ldr	r2, [pc, #24]	; (8006994 <usbd_edpt_release+0x50>)
 800697a:	4413      	add	r3, r2
 800697c:	3307      	adds	r3, #7
 800697e:	613b      	str	r3, [r7, #16]

#if TUSB_OPT_MUTEX
  return tu_edpt_release(ep_state, _usbd_mutex);
#else
  return tu_edpt_release(ep_state, NULL);
 8006980:	2100      	movs	r1, #0
 8006982:	6938      	ldr	r0, [r7, #16]
 8006984:	f001 fe8e 	bl	80086a4 <tu_edpt_release>
 8006988:	4603      	mov	r3, r0
#endif
}
 800698a:	4618      	mov	r0, r3
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	20006e20 	.word	0x20006e20

08006998 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	603a      	str	r2, [r7, #0]
 80069a0:	461a      	mov	r2, r3
 80069a2:	4603      	mov	r3, r0
 80069a4:	71fb      	strb	r3, [r7, #7]
 80069a6:	460b      	mov	r3, r1
 80069a8:	71bb      	strb	r3, [r7, #6]
 80069aa:	4613      	mov	r3, r2
 80069ac:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 80069ae:	4b32      	ldr	r3, [pc, #200]	; (8006a78 <usbd_edpt_xfer+0xe0>)
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	71fb      	strb	r3, [r7, #7]
 80069b4:	79bb      	ldrb	r3, [r7, #6]
 80069b6:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80069b8:	7abb      	ldrb	r3, [r7, #10]
 80069ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069be:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80069c0:	75fb      	strb	r3, [r7, #23]
 80069c2:	79bb      	ldrb	r3, [r7, #6]
 80069c4:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80069c6:	7afb      	ldrb	r3, [r7, #11]
 80069c8:	09db      	lsrs	r3, r3, #7
 80069ca:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80069cc:	75bb      	strb	r3, [r7, #22]
  // TU_VERIFY(tud_ready());

  TU_LOG(USBD_DBG, "  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 80069ce:	7dfa      	ldrb	r2, [r7, #23]
 80069d0:	7dbb      	ldrb	r3, [r7, #22]
 80069d2:	492a      	ldr	r1, [pc, #168]	; (8006a7c <usbd_edpt_xfer+0xe4>)
 80069d4:	0052      	lsls	r2, r2, #1
 80069d6:	440a      	add	r2, r1
 80069d8:	4413      	add	r3, r2
 80069da:	3318      	adds	r3, #24
 80069dc:	79db      	ldrb	r3, [r3, #7]
 80069de:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00a      	beq.n	80069fe <usbd_edpt_xfer+0x66>
 80069e8:	4b25      	ldr	r3, [pc, #148]	; (8006a80 <usbd_edpt_xfer+0xe8>)
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0301 	and.w	r3, r3, #1
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d000      	beq.n	80069fa <usbd_edpt_xfer+0x62>
 80069f8:	be00      	bkpt	0x0000
 80069fa:	2300      	movs	r3, #0
 80069fc:	e038      	b.n	8006a70 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = true;
 80069fe:	7dfa      	ldrb	r2, [r7, #23]
 8006a00:	7dbb      	ldrb	r3, [r7, #22]
 8006a02:	491e      	ldr	r1, [pc, #120]	; (8006a7c <usbd_edpt_xfer+0xe4>)
 8006a04:	0052      	lsls	r2, r2, #1
 8006a06:	440a      	add	r2, r1
 8006a08:	4413      	add	r3, r2
 8006a0a:	f103 0218 	add.w	r2, r3, #24
 8006a0e:	79d3      	ldrb	r3, [r2, #7]
 8006a10:	f043 0301 	orr.w	r3, r3, #1
 8006a14:	71d3      	strb	r3, [r2, #7]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 8006a16:	88bb      	ldrh	r3, [r7, #4]
 8006a18:	79b9      	ldrb	r1, [r7, #6]
 8006a1a:	79f8      	ldrb	r0, [r7, #7]
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	f000 ffa9 	bl	8007974 <dcd_edpt_xfer>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <usbd_edpt_xfer+0x94>
  {
    return true;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e021      	b.n	8006a70 <usbd_edpt_xfer+0xd8>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8006a2c:	7dfa      	ldrb	r2, [r7, #23]
 8006a2e:	7dbb      	ldrb	r3, [r7, #22]
 8006a30:	4912      	ldr	r1, [pc, #72]	; (8006a7c <usbd_edpt_xfer+0xe4>)
 8006a32:	0052      	lsls	r2, r2, #1
 8006a34:	440a      	add	r2, r1
 8006a36:	4413      	add	r3, r2
 8006a38:	f103 0218 	add.w	r2, r3, #24
 8006a3c:	79d3      	ldrb	r3, [r2, #7]
 8006a3e:	f36f 0300 	bfc	r3, #0, #1
 8006a42:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8006a44:	7dfa      	ldrb	r2, [r7, #23]
 8006a46:	7dbb      	ldrb	r3, [r7, #22]
 8006a48:	490c      	ldr	r1, [pc, #48]	; (8006a7c <usbd_edpt_xfer+0xe4>)
 8006a4a:	0052      	lsls	r2, r2, #1
 8006a4c:	440a      	add	r2, r1
 8006a4e:	4413      	add	r3, r2
 8006a50:	f103 0218 	add.w	r2, r3, #24
 8006a54:	79d3      	ldrb	r3, [r2, #7]
 8006a56:	f36f 0382 	bfc	r3, #2, #1
 8006a5a:	71d3      	strb	r3, [r2, #7]
    TU_LOG(USBD_DBG, "FAILED\r\n");
    TU_BREAKPOINT();
 8006a5c:	4b08      	ldr	r3, [pc, #32]	; (8006a80 <usbd_edpt_xfer+0xe8>)
 8006a5e:	613b      	str	r3, [r7, #16]
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d000      	beq.n	8006a6e <usbd_edpt_xfer+0xd6>
 8006a6c:	be00      	bkpt	0x0000
    return false;
 8006a6e:	2300      	movs	r3, #0
  }
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3718      	adds	r7, #24
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	20000430 	.word	0x20000430
 8006a7c:	20006e20 	.word	0x20006e20
 8006a80:	e000edf0 	.word	0xe000edf0

08006a84 <usbd_edpt_stall>:

  return _usbd_dev.ep_status[epnum][dir].busy;
}

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	460a      	mov	r2, r1
 8006a8e:	71fb      	strb	r3, [r7, #7]
 8006a90:	4613      	mov	r3, r2
 8006a92:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8006a94:	4b1f      	ldr	r3, [pc, #124]	; (8006b14 <usbd_edpt_stall+0x90>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	71fb      	strb	r3, [r7, #7]
 8006a9a:	79bb      	ldrb	r3, [r7, #6]
 8006a9c:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006a9e:	7b3b      	ldrb	r3, [r7, #12]
 8006aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aa4:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006aa6:	73fb      	strb	r3, [r7, #15]
 8006aa8:	79bb      	ldrb	r3, [r7, #6]
 8006aaa:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006aac:	7b7b      	ldrb	r3, [r7, #13]
 8006aae:	09db      	lsrs	r3, r3, #7
 8006ab0:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006ab2:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8006ab4:	7bfa      	ldrb	r2, [r7, #15]
 8006ab6:	7bbb      	ldrb	r3, [r7, #14]
 8006ab8:	4917      	ldr	r1, [pc, #92]	; (8006b18 <usbd_edpt_stall+0x94>)
 8006aba:	0052      	lsls	r2, r2, #1
 8006abc:	440a      	add	r2, r1
 8006abe:	4413      	add	r3, r2
 8006ac0:	3318      	adds	r3, #24
 8006ac2:	79db      	ldrb	r3, [r3, #7]
 8006ac4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d11d      	bne.n	8006b0a <usbd_edpt_stall+0x86>
  {
    TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
 8006ace:	79ba      	ldrb	r2, [r7, #6]
 8006ad0:	79fb      	ldrb	r3, [r7, #7]
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f001 f8a3 	bl	8007c20 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = true;
 8006ada:	7bfa      	ldrb	r2, [r7, #15]
 8006adc:	7bbb      	ldrb	r3, [r7, #14]
 8006ade:	490e      	ldr	r1, [pc, #56]	; (8006b18 <usbd_edpt_stall+0x94>)
 8006ae0:	0052      	lsls	r2, r2, #1
 8006ae2:	440a      	add	r2, r1
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f103 0218 	add.w	r2, r3, #24
 8006aea:	79d3      	ldrb	r3, [r2, #7]
 8006aec:	f043 0302 	orr.w	r3, r3, #2
 8006af0:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = true;
 8006af2:	7bfa      	ldrb	r2, [r7, #15]
 8006af4:	7bbb      	ldrb	r3, [r7, #14]
 8006af6:	4908      	ldr	r1, [pc, #32]	; (8006b18 <usbd_edpt_stall+0x94>)
 8006af8:	0052      	lsls	r2, r2, #1
 8006afa:	440a      	add	r2, r1
 8006afc:	4413      	add	r3, r2
 8006afe:	f103 0218 	add.w	r2, r3, #24
 8006b02:	79d3      	ldrb	r3, [r2, #7]
 8006b04:	f043 0301 	orr.w	r3, r3, #1
 8006b08:	71d3      	strb	r3, [r2, #7]
  }
}
 8006b0a:	bf00      	nop
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	20000430 	.word	0x20000430
 8006b18:	20006e20 	.word	0x20006e20

08006b1c <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	4603      	mov	r3, r0
 8006b24:	460a      	mov	r2, r1
 8006b26:	71fb      	strb	r3, [r7, #7]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8006b2c:	4b1f      	ldr	r3, [pc, #124]	; (8006bac <usbd_edpt_clear_stall+0x90>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	71fb      	strb	r3, [r7, #7]
 8006b32:	79bb      	ldrb	r3, [r7, #6]
 8006b34:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006b36:	7b3b      	ldrb	r3, [r7, #12]
 8006b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b3c:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006b3e:	73fb      	strb	r3, [r7, #15]
 8006b40:	79bb      	ldrb	r3, [r7, #6]
 8006b42:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006b44:	7b7b      	ldrb	r3, [r7, #13]
 8006b46:	09db      	lsrs	r3, r3, #7
 8006b48:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006b4a:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8006b4c:	7bfa      	ldrb	r2, [r7, #15]
 8006b4e:	7bbb      	ldrb	r3, [r7, #14]
 8006b50:	4917      	ldr	r1, [pc, #92]	; (8006bb0 <usbd_edpt_clear_stall+0x94>)
 8006b52:	0052      	lsls	r2, r2, #1
 8006b54:	440a      	add	r2, r1
 8006b56:	4413      	add	r3, r2
 8006b58:	3318      	adds	r3, #24
 8006b5a:	79db      	ldrb	r3, [r3, #7]
 8006b5c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d01d      	beq.n	8006ba2 <usbd_edpt_clear_stall+0x86>
  {
    TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
 8006b66:	79ba      	ldrb	r2, [r7, #6]
 8006b68:	79fb      	ldrb	r3, [r7, #7]
 8006b6a:	4611      	mov	r1, r2
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f001 f869 	bl	8007c44 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = false;
 8006b72:	7bfa      	ldrb	r2, [r7, #15]
 8006b74:	7bbb      	ldrb	r3, [r7, #14]
 8006b76:	490e      	ldr	r1, [pc, #56]	; (8006bb0 <usbd_edpt_clear_stall+0x94>)
 8006b78:	0052      	lsls	r2, r2, #1
 8006b7a:	440a      	add	r2, r1
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f103 0218 	add.w	r2, r3, #24
 8006b82:	79d3      	ldrb	r3, [r2, #7]
 8006b84:	f36f 0341 	bfc	r3, #1, #1
 8006b88:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8006b8a:	7bfa      	ldrb	r2, [r7, #15]
 8006b8c:	7bbb      	ldrb	r3, [r7, #14]
 8006b8e:	4908      	ldr	r1, [pc, #32]	; (8006bb0 <usbd_edpt_clear_stall+0x94>)
 8006b90:	0052      	lsls	r2, r2, #1
 8006b92:	440a      	add	r2, r1
 8006b94:	4413      	add	r3, r2
 8006b96:	f103 0218 	add.w	r2, r3, #24
 8006b9a:	79d3      	ldrb	r3, [r2, #7]
 8006b9c:	f36f 0300 	bfc	r3, #0, #1
 8006ba0:	71d3      	strb	r3, [r2, #7]
  }
}
 8006ba2:	bf00      	nop
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	20000430 	.word	0x20000430
 8006bb0:	20006e20 	.word	0x20006e20

08006bb4 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	4603      	mov	r3, r0
 8006bbc:	460a      	mov	r2, r1
 8006bbe:	71fb      	strb	r3, [r7, #7]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	71bb      	strb	r3, [r7, #6]
 8006bc4:	79bb      	ldrb	r3, [r7, #6]
 8006bc6:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006bc8:	7b3b      	ldrb	r3, [r7, #12]
 8006bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bce:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006bd0:	73fb      	strb	r3, [r7, #15]
 8006bd2:	79bb      	ldrb	r3, [r7, #6]
 8006bd4:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006bd6:	7b7b      	ldrb	r3, [r7, #13]
 8006bd8:	09db      	lsrs	r3, r3, #7
 8006bda:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006bdc:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8006bde:	7bfa      	ldrb	r2, [r7, #15]
 8006be0:	7bbb      	ldrb	r3, [r7, #14]
 8006be2:	490a      	ldr	r1, [pc, #40]	; (8006c0c <usbd_edpt_stalled+0x58>)
 8006be4:	0052      	lsls	r2, r2, #1
 8006be6:	440a      	add	r2, r1
 8006be8:	4413      	add	r3, r2
 8006bea:	3318      	adds	r3, #24
 8006bec:	79db      	ldrb	r3, [r3, #7]
 8006bee:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	bf14      	ite	ne
 8006bf8:	2301      	movne	r3, #1
 8006bfa:	2300      	moveq	r3, #0
 8006bfc:	b2db      	uxtb	r3, r3
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	20006e20 	.word	0x20006e20

08006c10 <_status_stage_xact>:
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	4603      	mov	r3, r0
 8006c18:	6039      	str	r1, [r7, #0]
 8006c1a:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <_status_stage_xact+0x1e>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	e000      	b.n	8006c30 <_status_stage_xact+0x20>
 8006c2e:	2380      	movs	r3, #128	; 0x80
 8006c30:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8006c32:	7bf9      	ldrb	r1, [r7, #15]
 8006c34:	79f8      	ldrb	r0, [r7, #7]
 8006c36:	2300      	movs	r3, #0
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f7ff fead 	bl	8006998 <usbd_edpt_xfer>
 8006c3e:	4603      	mov	r3, r0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	4603      	mov	r3, r0
 8006c50:	6039      	str	r1, [r7, #0]
 8006c52:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request       = (*request);
 8006c54:	4b0b      	ldr	r3, [pc, #44]	; (8006c84 <tud_control_status+0x3c>)
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	6810      	ldr	r0, [r2, #0]
 8006c5a:	6851      	ldr	r1, [r2, #4]
 8006c5c:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8006c5e:	4b09      	ldr	r3, [pc, #36]	; (8006c84 <tud_control_status+0x3c>)
 8006c60:	2200      	movs	r2, #0
 8006c62:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8006c64:	4b07      	ldr	r3, [pc, #28]	; (8006c84 <tud_control_status+0x3c>)
 8006c66:	2200      	movs	r2, #0
 8006c68:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 8006c6a:	4b06      	ldr	r3, [pc, #24]	; (8006c84 <tud_control_status+0x3c>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
 8006c70:	79fb      	ldrb	r3, [r7, #7]
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7ff ffcb 	bl	8006c10 <_status_stage_xact>
 8006c7a:	4603      	mov	r3, r0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	20006f18 	.word	0x20006f18

08006c88 <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	4603      	mov	r3, r0
 8006c90:	71fb      	strb	r3, [r7, #7]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8006c92:	4b1a      	ldr	r3, [pc, #104]	; (8006cfc <_data_stage_xact+0x74>)
 8006c94:	899a      	ldrh	r2, [r3, #12]
 8006c96:	4b19      	ldr	r3, [pc, #100]	; (8006cfc <_data_stage_xact+0x74>)
 8006c98:	89db      	ldrh	r3, [r3, #14]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	817b      	strh	r3, [r7, #10]
 8006ca0:	2340      	movs	r3, #64	; 0x40
 8006ca2:	813b      	strh	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8006ca4:	897a      	ldrh	r2, [r7, #10]
 8006ca6:	893b      	ldrh	r3, [r7, #8]
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	bf28      	it	cs
 8006cac:	4613      	movcs	r3, r2
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	81bb      	strh	r3, [r7, #12]

  uint8_t ep_addr = EDPT_CTRL_OUT;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	73fb      	strb	r3, [r7, #15]

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8006cb6:	4b11      	ldr	r3, [pc, #68]	; (8006cfc <_data_stage_xact+0x74>)
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00b      	beq.n	8006cdc <_data_stage_xact+0x54>
  {
    ep_addr = EDPT_CTRL_IN;
 8006cc4:	2380      	movs	r3, #128	; 0x80
 8006cc6:	73fb      	strb	r3, [r7, #15]
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
 8006cc8:	89bb      	ldrh	r3, [r7, #12]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d006      	beq.n	8006cdc <_data_stage_xact+0x54>
 8006cce:	4b0b      	ldr	r3, [pc, #44]	; (8006cfc <_data_stage_xact+0x74>)
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	89ba      	ldrh	r2, [r7, #12]
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	480a      	ldr	r0, [pc, #40]	; (8006d00 <_data_stage_xact+0x78>)
 8006cd8:	f008 fd10 	bl	800f6fc <memcpy>
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8006cdc:	89bb      	ldrh	r3, [r7, #12]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <_data_stage_xact+0x5e>
 8006ce2:	4a07      	ldr	r2, [pc, #28]	; (8006d00 <_data_stage_xact+0x78>)
 8006ce4:	e000      	b.n	8006ce8 <_data_stage_xact+0x60>
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	89bb      	ldrh	r3, [r7, #12]
 8006cea:	7bf9      	ldrb	r1, [r7, #15]
 8006cec:	79f8      	ldrb	r0, [r7, #7]
 8006cee:	f7ff fe53 	bl	8006998 <usbd_edpt_xfer>
 8006cf2:	4603      	mov	r3, r0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	20006f18 	.word	0x20006f18
 8006d00:	20006f2c 	.word	0x20006f2c

08006d04 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b088      	sub	sp, #32
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60b9      	str	r1, [r7, #8]
 8006d0c:	607a      	str	r2, [r7, #4]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	4603      	mov	r3, r0
 8006d12:	73fb      	strb	r3, [r7, #15]
 8006d14:	4613      	mov	r3, r2
 8006d16:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request       = (*request);
 8006d18:	4b30      	ldr	r3, [pc, #192]	; (8006ddc <tud_control_xfer+0xd8>)
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	6810      	ldr	r0, [r2, #0]
 8006d1e:	6851      	ldr	r1, [r2, #4]
 8006d20:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 8006d22:	4a2e      	ldr	r2, [pc, #184]	; (8006ddc <tud_control_xfer+0xd8>)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 8006d28:	4b2c      	ldr	r3, [pc, #176]	; (8006ddc <tud_control_xfer+0xd8>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	88db      	ldrh	r3, [r3, #6]
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	89bb      	ldrh	r3, [r7, #12]
 8006d36:	827b      	strh	r3, [r7, #18]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	823b      	strh	r3, [r7, #16]
 8006d3c:	8a7a      	ldrh	r2, [r7, #18]
 8006d3e:	8a3b      	ldrh	r3, [r7, #16]
 8006d40:	4293      	cmp	r3, r2
 8006d42:	bf28      	it	cs
 8006d44:	4613      	movcs	r3, r2
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	4b24      	ldr	r3, [pc, #144]	; (8006ddc <tud_control_xfer+0xd8>)
 8006d4a:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U)
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	88db      	ldrh	r3, [r3, #6]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d026      	beq.n	8006da4 <tud_control_xfer+0xa0>
  {
    if(_ctrl_xfer.data_len > 0U)
 8006d56:	4b21      	ldr	r3, [pc, #132]	; (8006ddc <tud_control_xfer+0xd8>)
 8006d58:	899b      	ldrh	r3, [r3, #12]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00d      	beq.n	8006d7a <tud_control_xfer+0x76>
    {
      TU_ASSERT(buffer);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10a      	bne.n	8006d7a <tud_control_xfer+0x76>
 8006d64:	4b1e      	ldr	r3, [pc, #120]	; (8006de0 <tud_control_xfer+0xdc>)
 8006d66:	61bb      	str	r3, [r7, #24]
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d000      	beq.n	8006d76 <tud_control_xfer+0x72>
 8006d74:	be00      	bkpt	0x0000
 8006d76:	2300      	movs	r3, #0
 8006d78:	e02b      	b.n	8006dd2 <tud_control_xfer+0xce>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 8006d7a:	7bfb      	ldrb	r3, [r7, #15]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7ff ff83 	bl	8006c88 <_data_stage_xact>
 8006d82:	4603      	mov	r3, r0
 8006d84:	f083 0301 	eor.w	r3, r3, #1
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d020      	beq.n	8006dd0 <tud_control_xfer+0xcc>
 8006d8e:	4b14      	ldr	r3, [pc, #80]	; (8006de0 <tud_control_xfer+0xdc>)
 8006d90:	617b      	str	r3, [r7, #20]
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d000      	beq.n	8006da0 <tud_control_xfer+0x9c>
 8006d9e:	be00      	bkpt	0x0000
 8006da0:	2300      	movs	r3, #0
 8006da2:	e016      	b.n	8006dd2 <tud_control_xfer+0xce>
  }
  else
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
 8006da6:	68b9      	ldr	r1, [r7, #8]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7ff ff31 	bl	8006c10 <_status_stage_xact>
 8006dae:	4603      	mov	r3, r0
 8006db0:	f083 0301 	eor.w	r3, r3, #1
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00a      	beq.n	8006dd0 <tud_control_xfer+0xcc>
 8006dba:	4b09      	ldr	r3, [pc, #36]	; (8006de0 <tud_control_xfer+0xdc>)
 8006dbc:	61fb      	str	r3, [r7, #28]
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d000      	beq.n	8006dcc <tud_control_xfer+0xc8>
 8006dca:	be00      	bkpt	0x0000
 8006dcc:	2300      	movs	r3, #0
 8006dce:	e000      	b.n	8006dd2 <tud_control_xfer+0xce>
  }

  return true;
 8006dd0:	2301      	movs	r3, #1
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3720      	adds	r7, #32
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	20006f18 	.word	0x20006f18
 8006de0:	e000edf0 	.word	0xe000edf0

08006de4 <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 8006de8:	2214      	movs	r2, #20
 8006dea:	2100      	movs	r1, #0
 8006dec:	4802      	ldr	r0, [pc, #8]	; (8006df8 <usbd_control_reset+0x14>)
 8006dee:	f008 fc93 	bl	800f718 <memset>
}
 8006df2:	bf00      	nop
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20006f18 	.word	0x20006f18

08006dfc <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 8006e04:	4a04      	ldr	r2, [pc, #16]	; (8006e18 <usbd_control_set_complete_callback+0x1c>)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6113      	str	r3, [r2, #16]
}
 8006e0a:	bf00      	nop
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	20006f18 	.word	0x20006f18

08006e1c <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request       = (*request);
 8006e24:	4b09      	ldr	r3, [pc, #36]	; (8006e4c <usbd_control_set_request+0x30>)
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	6810      	ldr	r0, [r2, #0]
 8006e2a:	6851      	ldr	r1, [r2, #4]
 8006e2c:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8006e2e:	4b07      	ldr	r3, [pc, #28]	; (8006e4c <usbd_control_set_request+0x30>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8006e34:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <usbd_control_set_request+0x30>)
 8006e36:	2200      	movs	r2, #0
 8006e38:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 8006e3a:	4b04      	ldr	r3, [pc, #16]	; (8006e4c <usbd_control_set_request+0x30>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	819a      	strh	r2, [r3, #12]
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	20006f18 	.word	0x20006f18

08006e50 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b088      	sub	sp, #32
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	603b      	str	r3, [r7, #0]
 8006e58:	4603      	mov	r3, r0
 8006e5a:	71fb      	strb	r3, [r7, #7]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	71bb      	strb	r3, [r7, #6]
 8006e60:	4613      	mov	r3, r2
 8006e62:	717b      	strb	r3, [r7, #5]
 8006e64:	79bb      	ldrb	r3, [r7, #6]
 8006e66:	73fb      	strb	r3, [r7, #15]
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
 8006e6a:	09db      	lsrs	r3, r3, #7
 8006e6c:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8006e6e:	4a50      	ldr	r2, [pc, #320]	; (8006fb0 <usbd_control_xfer_cb+0x160>)
 8006e70:	7812      	ldrb	r2, [r2, #0]
 8006e72:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d021      	beq.n	8006ec0 <usbd_control_xfer_cb+0x70>
  {
    TU_ASSERT(0 == xferred_bytes);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00a      	beq.n	8006e98 <usbd_control_xfer_cb+0x48>
 8006e82:	4b4c      	ldr	r3, [pc, #304]	; (8006fb4 <usbd_control_xfer_cb+0x164>)
 8006e84:	613b      	str	r3, [r7, #16]
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d000      	beq.n	8006e94 <usbd_control_xfer_cb+0x44>
 8006e92:	be00      	bkpt	0x0000
 8006e94:	2300      	movs	r3, #0
 8006e96:	e087      	b.n	8006fa8 <usbd_control_xfer_cb+0x158>

    // invoke optional dcd hook if available
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8006e98:	4b47      	ldr	r3, [pc, #284]	; (8006fb8 <usbd_control_xfer_cb+0x168>)
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d004      	beq.n	8006ea8 <usbd_control_xfer_cb+0x58>
 8006e9e:	79fb      	ldrb	r3, [r7, #7]
 8006ea0:	4943      	ldr	r1, [pc, #268]	; (8006fb0 <usbd_control_xfer_cb+0x160>)
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f3af 8000 	nop.w

    if (_ctrl_xfer.complete_cb)
 8006ea8:	4b41      	ldr	r3, [pc, #260]	; (8006fb0 <usbd_control_xfer_cb+0x160>)
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d005      	beq.n	8006ebc <usbd_control_xfer_cb+0x6c>
    {
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8006eb0:	4b3f      	ldr	r3, [pc, #252]	; (8006fb0 <usbd_control_xfer_cb+0x160>)
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	79f8      	ldrb	r0, [r7, #7]
 8006eb6:	4a3e      	ldr	r2, [pc, #248]	; (8006fb0 <usbd_control_xfer_cb+0x160>)
 8006eb8:	2103      	movs	r1, #3
 8006eba:	4798      	blx	r3
    }

    return true;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e073      	b.n	8006fa8 <usbd_control_xfer_cb+0x158>
  }

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 8006ec0:	4b3b      	ldr	r3, [pc, #236]	; (8006fb0 <usbd_control_xfer_cb+0x160>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10c      	bne.n	8006ee8 <usbd_control_xfer_cb+0x98>
  {
    TU_VERIFY(_ctrl_xfer.buffer);
 8006ece:	4b38      	ldr	r3, [pc, #224]	; (8006fb0 <usbd_control_xfer_cb+0x160>)
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <usbd_control_xfer_cb+0x8a>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	e066      	b.n	8006fa8 <usbd_control_xfer_cb+0x158>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 8006eda:	4b35      	ldr	r3, [pc, #212]	; (8006fb0 <usbd_control_xfer_cb+0x160>)
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	4936      	ldr	r1, [pc, #216]	; (8006fbc <usbd_control_xfer_cb+0x16c>)
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f008 fc0a 	bl	800f6fc <memcpy>
    TU_LOG_MEM(2, _usbd_ctrl_buf, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8006ee8:	4b31      	ldr	r3, [pc, #196]	; (8006fb0 <usbd_control_xfer_cb+0x160>)
 8006eea:	89da      	ldrh	r2, [r3, #14]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	4413      	add	r3, r2
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	4b2e      	ldr	r3, [pc, #184]	; (8006fb0 <usbd_control_xfer_cb+0x160>)
 8006ef6:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8006ef8:	4b2d      	ldr	r3, [pc, #180]	; (8006fb0 <usbd_control_xfer_cb+0x160>)
 8006efa:	689a      	ldr	r2, [r3, #8]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	4413      	add	r3, r2
 8006f00:	4a2b      	ldr	r2, [pc, #172]	; (8006fb0 <usbd_control_xfer_cb+0x160>)
 8006f02:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8006f04:	4b2a      	ldr	r3, [pc, #168]	; (8006fb0 <usbd_control_xfer_cb+0x160>)
 8006f06:	88da      	ldrh	r2, [r3, #6]
 8006f08:	4b29      	ldr	r3, [pc, #164]	; (8006fb0 <usbd_control_xfer_cb+0x160>)
 8006f0a:	89db      	ldrh	r3, [r3, #14]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d002      	beq.n	8006f16 <usbd_control_xfer_cb+0xc6>
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	2b3f      	cmp	r3, #63	; 0x3f
 8006f14:	d831      	bhi.n	8006f7a <usbd_control_xfer_cb+0x12a>
  {
    // DATA stage is complete
    bool is_ok = true;
 8006f16:	2301      	movs	r3, #1
 8006f18:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if ( _ctrl_xfer.complete_cb )
 8006f1a:	4b25      	ldr	r3, [pc, #148]	; (8006fb0 <usbd_control_xfer_cb+0x160>)
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d007      	beq.n	8006f32 <usbd_control_xfer_cb+0xe2>
    {
      #if CFG_TUSB_DEBUG >= 2
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8006f22:	4b23      	ldr	r3, [pc, #140]	; (8006fb0 <usbd_control_xfer_cb+0x160>)
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	79f8      	ldrb	r0, [r7, #7]
 8006f28:	4a21      	ldr	r2, [pc, #132]	; (8006fb0 <usbd_control_xfer_cb+0x160>)
 8006f2a:	2102      	movs	r1, #2
 8006f2c:	4798      	blx	r3
 8006f2e:	4603      	mov	r3, r0
 8006f30:	77fb      	strb	r3, [r7, #31]
    }

    if ( is_ok )
 8006f32:	7ffb      	ldrb	r3, [r7, #31]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d015      	beq.n	8006f64 <usbd_control_xfer_cb+0x114>
    {
      // Send status
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 8006f38:	79fb      	ldrb	r3, [r7, #7]
 8006f3a:	491d      	ldr	r1, [pc, #116]	; (8006fb0 <usbd_control_xfer_cb+0x160>)
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7ff fe67 	bl	8006c10 <_status_stage_xact>
 8006f42:	4603      	mov	r3, r0
 8006f44:	f083 0301 	eor.w	r3, r3, #1
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d02a      	beq.n	8006fa4 <usbd_control_xfer_cb+0x154>
 8006f4e:	4b19      	ldr	r3, [pc, #100]	; (8006fb4 <usbd_control_xfer_cb+0x164>)
 8006f50:	617b      	str	r3, [r7, #20]
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d000      	beq.n	8006f60 <usbd_control_xfer_cb+0x110>
 8006f5e:	be00      	bkpt	0x0000
 8006f60:	2300      	movs	r3, #0
 8006f62:	e021      	b.n	8006fa8 <usbd_control_xfer_cb+0x158>
    }else
    {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8006f64:	79fb      	ldrb	r3, [r7, #7]
 8006f66:	2100      	movs	r1, #0
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 fe59 	bl	8007c20 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8006f6e:	79fb      	ldrb	r3, [r7, #7]
 8006f70:	2180      	movs	r1, #128	; 0x80
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 fe54 	bl	8007c20 <dcd_edpt_stall>
  {
 8006f78:	e014      	b.n	8006fa4 <usbd_control_xfer_cb+0x154>
    }
  }
  else
  {
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
 8006f7a:	79fb      	ldrb	r3, [r7, #7]
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7ff fe83 	bl	8006c88 <_data_stage_xact>
 8006f82:	4603      	mov	r3, r0
 8006f84:	f083 0301 	eor.w	r3, r3, #1
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00b      	beq.n	8006fa6 <usbd_control_xfer_cb+0x156>
 8006f8e:	4b09      	ldr	r3, [pc, #36]	; (8006fb4 <usbd_control_xfer_cb+0x164>)
 8006f90:	61bb      	str	r3, [r7, #24]
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d000      	beq.n	8006fa0 <usbd_control_xfer_cb+0x150>
 8006f9e:	be00      	bkpt	0x0000
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	e001      	b.n	8006fa8 <usbd_control_xfer_cb+0x158>
  {
 8006fa4:	bf00      	nop
  }

  return true;
 8006fa6:	2301      	movs	r3, #1
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3720      	adds	r7, #32
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	20006f18 	.word	0x20006f18
 8006fb4:	e000edf0 	.word	0xe000edf0
 8006fb8:	00000000 	.word	0x00000000
 8006fbc:	20006f2c 	.word	0x20006f2c

08006fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	db0b      	blt.n	8006fea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fd2:	79fb      	ldrb	r3, [r7, #7]
 8006fd4:	f003 021f 	and.w	r2, r3, #31
 8006fd8:	4907      	ldr	r1, [pc, #28]	; (8006ff8 <__NVIC_EnableIRQ+0x38>)
 8006fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fde:	095b      	lsrs	r3, r3, #5
 8006fe0:	2001      	movs	r0, #1
 8006fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8006fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006fea:	bf00      	nop
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	e000e100 	.word	0xe000e100

08006ffc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	4603      	mov	r3, r0
 8007004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800700a:	2b00      	cmp	r3, #0
 800700c:	db12      	blt.n	8007034 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800700e:	79fb      	ldrb	r3, [r7, #7]
 8007010:	f003 021f 	and.w	r2, r3, #31
 8007014:	490a      	ldr	r1, [pc, #40]	; (8007040 <__NVIC_DisableIRQ+0x44>)
 8007016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800701a:	095b      	lsrs	r3, r3, #5
 800701c:	2001      	movs	r0, #1
 800701e:	fa00 f202 	lsl.w	r2, r0, r2
 8007022:	3320      	adds	r3, #32
 8007024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007028:	f3bf 8f4f 	dsb	sy
}
 800702c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800702e:	f3bf 8f6f 	isb	sy
}
 8007032:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	e000e100 	.word	0xe000e100

08007044 <calc_rx_ff_size>:
static uint16_t _allocated_fifo_words_tx;         // TX FIFO size in words (IN EPs)
static bool _out_ep_closed;                       // Flag to check if RX FIFO size needs an update (reduce its size)

// Calculate the RX FIFO size according to recommendations from reference manual
static inline uint16_t calc_rx_ff_size(uint16_t ep_size)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	4603      	mov	r3, r0
 800704c:	80fb      	strh	r3, [r7, #6]
  return 15 + 2*(ep_size/4) + 2*EP_MAX;
 800704e:	88fb      	ldrh	r3, [r7, #6]
 8007050:	089b      	lsrs	r3, r3, #2
 8007052:	b29b      	uxth	r3, r3
 8007054:	005b      	lsls	r3, r3, #1
 8007056:	b29b      	uxth	r3, r3
 8007058:	3317      	adds	r3, #23
 800705a:	b29b      	uxth	r3, r3
}
 800705c:	4618      	mov	r0, r3
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <update_grxfsiz>:

static void update_grxfsiz(uint8_t rhport)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b086      	sub	sp, #24
 800706c:	af00      	add	r7, sp, #0
 800706e:	4603      	mov	r3, r0
 8007070:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8007072:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007076:	613b      	str	r3, [r7, #16]

  // Determine largest EP size for RX FIFO
  uint16_t max_epsize = 0;
 8007078:	2300      	movs	r3, #0
 800707a:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < EP_MAX; epnum++)
 800707c:	2300      	movs	r3, #0
 800707e:	757b      	strb	r3, [r7, #21]
 8007080:	e013      	b.n	80070aa <update_grxfsiz+0x42>
  {
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 8007082:	7d7b      	ldrb	r3, [r7, #21]
 8007084:	4a10      	ldr	r2, [pc, #64]	; (80070c8 <update_grxfsiz+0x60>)
 8007086:	015b      	lsls	r3, r3, #5
 8007088:	4413      	add	r3, r2
 800708a:	330a      	adds	r3, #10
 800708c:	881a      	ldrh	r2, [r3, #0]
 800708e:	8afb      	ldrh	r3, [r7, #22]
 8007090:	81fb      	strh	r3, [r7, #14]
 8007092:	4613      	mov	r3, r2
 8007094:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
 8007096:	89fa      	ldrh	r2, [r7, #14]
 8007098:	89bb      	ldrh	r3, [r7, #12]
 800709a:	4293      	cmp	r3, r2
 800709c:	bf38      	it	cc
 800709e:	4613      	movcc	r3, r2
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < EP_MAX; epnum++)
 80070a4:	7d7b      	ldrb	r3, [r7, #21]
 80070a6:	3301      	adds	r3, #1
 80070a8:	757b      	strb	r3, [r7, #21]
 80070aa:	7d7b      	ldrb	r3, [r7, #21]
 80070ac:	2b03      	cmp	r3, #3
 80070ae:	d9e8      	bls.n	8007082 <update_grxfsiz+0x1a>
  }

  // Update size of RX FIFO
  usb_otg->GRXFSIZ = calc_rx_ff_size(max_epsize);
 80070b0:	8afb      	ldrh	r3, [r7, #22]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7ff ffc6 	bl	8007044 <calc_rx_ff_size>
 80070b8:	4603      	mov	r3, r0
 80070ba:	461a      	mov	r2, r3
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	625a      	str	r2, [r3, #36]	; 0x24
}
 80070c0:	bf00      	nop
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	20006f74 	.word	0x20006f74

080070cc <bus_reset>:

// Setup the control endpoint 0.
static void bus_reset(uint8_t rhport)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b088      	sub	sp, #32
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	4603      	mov	r3, r0
 80070d4:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 80070d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80070da:	61bb      	str	r3, [r7, #24]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 80070dc:	4b30      	ldr	r3, [pc, #192]	; (80071a0 <bus_reset+0xd4>)
 80070de:	617b      	str	r3, [r7, #20]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 80070e0:	4b30      	ldr	r3, [pc, #192]	; (80071a4 <bus_reset+0xd8>)
 80070e2:	613b      	str	r3, [r7, #16]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 80070e4:	4b30      	ldr	r3, [pc, #192]	; (80071a8 <bus_reset+0xdc>)
 80070e6:	60fb      	str	r3, [r7, #12]

  tu_memclr(xfer_status, sizeof(xfer_status));
 80070e8:	2280      	movs	r2, #128	; 0x80
 80070ea:	2100      	movs	r1, #0
 80070ec:	482f      	ldr	r0, [pc, #188]	; (80071ac <bus_reset+0xe0>)
 80070ee:	f008 fb13 	bl	800f718 <memset>
  _out_ep_closed = false;
 80070f2:	4b2f      	ldr	r3, [pc, #188]	; (80071b0 <bus_reset+0xe4>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	701a      	strb	r2, [r3, #0]

  // clear device address
  dev->DCFG &= ~USB_OTG_DCFG_DAD_Msk;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	601a      	str	r2, [r3, #0]

  // 1. NAK for all OUT endpoints
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8007104:	2300      	movs	r3, #0
 8007106:	77fb      	strb	r3, [r7, #31]
 8007108:	e00e      	b.n	8007128 <bus_reset+0x5c>
    out_ep[n].DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800710a:	7ffb      	ldrb	r3, [r7, #31]
 800710c:	015b      	lsls	r3, r3, #5
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	4413      	add	r3, r2
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	7ffb      	ldrb	r3, [r7, #31]
 8007116:	015b      	lsls	r3, r3, #5
 8007118:	6939      	ldr	r1, [r7, #16]
 800711a:	440b      	add	r3, r1
 800711c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8007120:	601a      	str	r2, [r3, #0]
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8007122:	7ffb      	ldrb	r3, [r7, #31]
 8007124:	3301      	adds	r3, #1
 8007126:	77fb      	strb	r3, [r7, #31]
 8007128:	7ffb      	ldrb	r3, [r7, #31]
 800712a:	2b03      	cmp	r3, #3
 800712c:	d9ed      	bls.n	800710a <bus_reset+0x3e>
  }

  // 2. Un-mask interrupt bits
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8007134:	61da      	str	r2, [r3, #28]
  dev->DOEPMSK = USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM;
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	2209      	movs	r2, #9
 800713a:	615a      	str	r2, [r3, #20]
  dev->DIEPMSK = USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	2209      	movs	r2, #9
 8007140:	611a      	str	r2, [r3, #16]
  //
  //   For Isochronous, largest EP size can be 1023/1024 for FS/HS respectively. In addition if multiple ISO
  //   are enabled at least "2 x (Largest-EPsize/4) + 1" are recommended.  Maybe provide a macro for application to
  //   overwrite this.

  usb_otg->GRXFSIZ = calc_rx_ff_size(TUD_OPT_HIGH_SPEED ? 512 : 64);
 8007142:	2040      	movs	r0, #64	; 0x40
 8007144:	f7ff ff7e 	bl	8007044 <calc_rx_ff_size>
 8007148:	4603      	mov	r3, r0
 800714a:	461a      	mov	r2, r3
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	625a      	str	r2, [r3, #36]	; 0x24

  _allocated_fifo_words_tx = 16;
 8007150:	4b18      	ldr	r3, [pc, #96]	; (80071b4 <bus_reset+0xe8>)
 8007152:	2210      	movs	r2, #16
 8007154:	801a      	strh	r2, [r3, #0]

  // Control IN uses FIFO 0 with 64 bytes ( 16 32-bit word )
  usb_otg->DIEPTXF0_HNPTXFSIZ = (16 << USB_OTG_TX0FD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8007156:	4b17      	ldr	r3, [pc, #92]	; (80071b4 <bus_reset+0xe8>)
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800715e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	629a      	str	r2, [r3, #40]	; 0x28

  // Fixed control EP0 size to 64 bytes
  in_ep[0].DIEPCTL &= ~(0x03 << USB_OTG_DIEPCTL_MPSIZ_Pos);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f023 0203 	bic.w	r2, r3, #3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	601a      	str	r2, [r3, #0]
  xfer_status[0][TUSB_DIR_OUT].max_size = xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8007172:	4b0e      	ldr	r3, [pc, #56]	; (80071ac <bus_reset+0xe0>)
 8007174:	2240      	movs	r2, #64	; 0x40
 8007176:	835a      	strh	r2, [r3, #26]
 8007178:	4b0c      	ldr	r3, [pc, #48]	; (80071ac <bus_reset+0xe0>)
 800717a:	8b5a      	ldrh	r2, [r3, #26]
 800717c:	4b0b      	ldr	r3, [pc, #44]	; (80071ac <bus_reset+0xe0>)
 800717e:	815a      	strh	r2, [r3, #10]

  out_ep[0].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	611a      	str	r2, [r3, #16]

  usb_otg->GINTMSK |= USB_OTG_GINTMSK_OEPINT | USB_OTG_GINTMSK_IEPINT;
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	f443 2240 	orr.w	r2, r3, #786432	; 0xc0000
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	619a      	str	r2, [r3, #24]
}
 8007198:	bf00      	nop
 800719a:	3720      	adds	r7, #32
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	50000800 	.word	0x50000800
 80071a4:	50000b00 	.word	0x50000b00
 80071a8:	50000900 	.word	0x50000900
 80071ac:	20006f74 	.word	0x20006f74
 80071b0:	20006ffa 	.word	0x20006ffa
 80071b4:	20006ff8 	.word	0x20006ff8

080071b8 <set_turnaround>:

// Set turn-around timeout according to link speed
extern uint32_t SystemCoreClock;
static void set_turnaround(USB_OTG_GlobalTypeDef * usb_otg, tusb_speed_t speed)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	460b      	mov	r3, r1
 80071c2:	70fb      	strb	r3, [r7, #3]
  usb_otg->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	60da      	str	r2, [r3, #12]

  if ( speed == TUSB_SPEED_HIGH )
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d106      	bne.n	80071e4 <set_turnaround+0x2c>
  {
    // Use fixed 0x09 for Highspeed
    usb_otg->GUSBCFG |= (0x09 << USB_OTG_GUSBCFG_TRDT_Pos);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	f443 5210 	orr.w	r2, r3, #9216	; 0x2400
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	60da      	str	r2, [r3, #12]
      turnaround = 0xFU;

    // Fullspeed depends on MCU clocks, but we will use 0x06 for 32+ Mhz
    usb_otg->GUSBCFG |= (turnaround << USB_OTG_GUSBCFG_TRDT_Pos);
  }
}
 80071e2:	e050      	b.n	8007286 <set_turnaround+0xce>
    if ( SystemCoreClock >= 32000000U )
 80071e4:	4b2b      	ldr	r3, [pc, #172]	; (8007294 <set_turnaround+0xdc>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a2b      	ldr	r2, [pc, #172]	; (8007298 <set_turnaround+0xe0>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d302      	bcc.n	80071f4 <set_turnaround+0x3c>
      turnaround = 0x6U;
 80071ee:	2306      	movs	r3, #6
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	e041      	b.n	8007278 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 27500000U )
 80071f4:	4b27      	ldr	r3, [pc, #156]	; (8007294 <set_turnaround+0xdc>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a28      	ldr	r2, [pc, #160]	; (800729c <set_turnaround+0xe4>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d902      	bls.n	8007204 <set_turnaround+0x4c>
      turnaround = 0x7U;
 80071fe:	2307      	movs	r3, #7
 8007200:	60fb      	str	r3, [r7, #12]
 8007202:	e039      	b.n	8007278 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 24000000U )
 8007204:	4b23      	ldr	r3, [pc, #140]	; (8007294 <set_turnaround+0xdc>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a25      	ldr	r2, [pc, #148]	; (80072a0 <set_turnaround+0xe8>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d302      	bcc.n	8007214 <set_turnaround+0x5c>
      turnaround = 0x8U;
 800720e:	2308      	movs	r3, #8
 8007210:	60fb      	str	r3, [r7, #12]
 8007212:	e031      	b.n	8007278 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 21800000U )
 8007214:	4b1f      	ldr	r3, [pc, #124]	; (8007294 <set_turnaround+0xdc>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a22      	ldr	r2, [pc, #136]	; (80072a4 <set_turnaround+0xec>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d902      	bls.n	8007224 <set_turnaround+0x6c>
      turnaround = 0x9U;
 800721e:	2309      	movs	r3, #9
 8007220:	60fb      	str	r3, [r7, #12]
 8007222:	e029      	b.n	8007278 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 20000000U )
 8007224:	4b1b      	ldr	r3, [pc, #108]	; (8007294 <set_turnaround+0xdc>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a1f      	ldr	r2, [pc, #124]	; (80072a8 <set_turnaround+0xf0>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d902      	bls.n	8007234 <set_turnaround+0x7c>
      turnaround = 0xAU;
 800722e:	230a      	movs	r3, #10
 8007230:	60fb      	str	r3, [r7, #12]
 8007232:	e021      	b.n	8007278 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 18500000U )
 8007234:	4b17      	ldr	r3, [pc, #92]	; (8007294 <set_turnaround+0xdc>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a1c      	ldr	r2, [pc, #112]	; (80072ac <set_turnaround+0xf4>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d902      	bls.n	8007244 <set_turnaround+0x8c>
      turnaround = 0xBU;
 800723e:	230b      	movs	r3, #11
 8007240:	60fb      	str	r3, [r7, #12]
 8007242:	e019      	b.n	8007278 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 17200000U )
 8007244:	4b13      	ldr	r3, [pc, #76]	; (8007294 <set_turnaround+0xdc>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a19      	ldr	r2, [pc, #100]	; (80072b0 <set_turnaround+0xf8>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d302      	bcc.n	8007254 <set_turnaround+0x9c>
      turnaround = 0xCU;
 800724e:	230c      	movs	r3, #12
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	e011      	b.n	8007278 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 16000000U )
 8007254:	4b0f      	ldr	r3, [pc, #60]	; (8007294 <set_turnaround+0xdc>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a16      	ldr	r2, [pc, #88]	; (80072b4 <set_turnaround+0xfc>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d302      	bcc.n	8007264 <set_turnaround+0xac>
      turnaround = 0xDU;
 800725e:	230d      	movs	r3, #13
 8007260:	60fb      	str	r3, [r7, #12]
 8007262:	e009      	b.n	8007278 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 15000000U )
 8007264:	4b0b      	ldr	r3, [pc, #44]	; (8007294 <set_turnaround+0xdc>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a13      	ldr	r2, [pc, #76]	; (80072b8 <set_turnaround+0x100>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d302      	bcc.n	8007274 <set_turnaround+0xbc>
      turnaround = 0xEU;
 800726e:	230e      	movs	r3, #14
 8007270:	60fb      	str	r3, [r7, #12]
 8007272:	e001      	b.n	8007278 <set_turnaround+0xc0>
      turnaround = 0xFU;
 8007274:	230f      	movs	r3, #15
 8007276:	60fb      	str	r3, [r7, #12]
    usb_otg->GUSBCFG |= (turnaround << USB_OTG_GUSBCFG_TRDT_Pos);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68da      	ldr	r2, [r3, #12]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	029b      	lsls	r3, r3, #10
 8007280:	431a      	orrs	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	60da      	str	r2, [r3, #12]
}
 8007286:	bf00      	nop
 8007288:	3714      	adds	r7, #20
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	20000410 	.word	0x20000410
 8007298:	01e84800 	.word	0x01e84800
 800729c:	01a39ddf 	.word	0x01a39ddf
 80072a0:	016e3600 	.word	0x016e3600
 80072a4:	014ca43f 	.word	0x014ca43f
 80072a8:	01312cff 	.word	0x01312cff
 80072ac:	011a499f 	.word	0x011a499f
 80072b0:	01067380 	.word	0x01067380
 80072b4:	00f42400 	.word	0x00f42400
 80072b8:	00e4e1c0 	.word	0x00e4e1c0

080072bc <get_speed>:

static tusb_speed_t get_speed(uint8_t rhport)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	4603      	mov	r3, r0
 80072c4:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 80072c6:	4b0a      	ldr	r3, [pc, #40]	; (80072f0 <get_speed+0x34>)
 80072c8:	60fb      	str	r3, [r7, #12]
  uint32_t const enum_spd = (dev->DSTS & USB_OTG_DSTS_ENUMSPD_Msk) >> USB_OTG_DSTS_ENUMSPD_Pos;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	085b      	lsrs	r3, r3, #1
 80072d0:	f003 0303 	and.w	r3, r3, #3
 80072d4:	60bb      	str	r3, [r7, #8]
  return (enum_spd == DCD_HIGH_SPEED) ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL;
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <get_speed+0x24>
 80072dc:	2302      	movs	r3, #2
 80072de:	e000      	b.n	80072e2 <get_speed+0x26>
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	50000800 	.word	0x50000800

080072f4 <set_speed>:

static void set_speed(uint8_t rhport, tusb_speed_t speed)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	4603      	mov	r3, r0
 80072fc:	460a      	mov	r2, r1
 80072fe:	71fb      	strb	r3, [r7, #7]
 8007300:	4613      	mov	r3, r2
 8007302:	71bb      	strb	r3, [r7, #6]
  uint32_t bitvalue;

  if ( rhport == 1 )
 8007304:	79fb      	ldrb	r3, [r7, #7]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d107      	bne.n	800731a <set_speed+0x26>
  {
    bitvalue = ((TUSB_SPEED_HIGH == speed) ? DCD_HIGH_SPEED : DCD_FULL_SPEED_USE_HS);
 800730a:	79bb      	ldrb	r3, [r7, #6]
 800730c:	2b02      	cmp	r3, #2
 800730e:	bf14      	ite	ne
 8007310:	2301      	movne	r3, #1
 8007312:	2300      	moveq	r3, #0
 8007314:	b2db      	uxtb	r3, r3
 8007316:	60fb      	str	r3, [r7, #12]
 8007318:	e001      	b.n	800731e <set_speed+0x2a>
  }
  else
  {
    bitvalue = DCD_FULL_SPEED;
 800731a:	2303      	movs	r3, #3
 800731c:	60fb      	str	r3, [r7, #12]
  }

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 800731e:	4b0a      	ldr	r3, [pc, #40]	; (8007348 <set_speed+0x54>)
 8007320:	60bb      	str	r3, [r7, #8]

  // Clear and set speed bits
  dev->DCFG &= ~(3 << USB_OTG_DCFG_DSPD_Pos);
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f023 0203 	bic.w	r2, r3, #3
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	601a      	str	r2, [r3, #0]
  dev->DCFG |= (bitvalue << USB_OTG_DCFG_DSPD_Pos);
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	431a      	orrs	r2, r3
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	601a      	str	r2, [r3, #0]
}
 800733a:	bf00      	nop
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	50000800 	.word	0x50000800

0800734c <edpt_schedule_packets>:
  return true;
}
#endif

static void edpt_schedule_packets(uint8_t rhport, uint8_t const epnum, uint8_t const dir, uint16_t const num_packets, uint16_t total_bytes)
{
 800734c:	b490      	push	{r4, r7}
 800734e:	b08a      	sub	sp, #40	; 0x28
 8007350:	af00      	add	r7, sp, #0
 8007352:	4604      	mov	r4, r0
 8007354:	4608      	mov	r0, r1
 8007356:	4611      	mov	r1, r2
 8007358:	461a      	mov	r2, r3
 800735a:	4623      	mov	r3, r4
 800735c:	71fb      	strb	r3, [r7, #7]
 800735e:	4603      	mov	r3, r0
 8007360:	71bb      	strb	r3, [r7, #6]
 8007362:	460b      	mov	r3, r1
 8007364:	717b      	strb	r3, [r7, #5]
 8007366:	4613      	mov	r3, r2
 8007368:	807b      	strh	r3, [r7, #2]
  (void) rhport;

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 800736a:	4b6c      	ldr	r3, [pc, #432]	; (800751c <edpt_schedule_packets+0x1d0>)
 800736c:	627b      	str	r3, [r7, #36]	; 0x24
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 800736e:	4b6c      	ldr	r3, [pc, #432]	; (8007520 <edpt_schedule_packets+0x1d4>)
 8007370:	623b      	str	r3, [r7, #32]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8007372:	4b6c      	ldr	r3, [pc, #432]	; (8007524 <edpt_schedule_packets+0x1d8>)
 8007374:	61fb      	str	r3, [r7, #28]

  // EP0 is limited to one packet each xfer
  // We use multiple transaction of xfer->max_size length to get a whole transfer done
  if(epnum == 0) {
 8007376:	79bb      	ldrb	r3, [r7, #6]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d121      	bne.n	80073c0 <edpt_schedule_packets+0x74>
    xfer_ctl_t * const xfer = XFER_CTL_BASE(epnum, dir);
 800737c:	79ba      	ldrb	r2, [r7, #6]
 800737e:	797b      	ldrb	r3, [r7, #5]
 8007380:	0052      	lsls	r2, r2, #1
 8007382:	4413      	add	r3, r2
 8007384:	011b      	lsls	r3, r3, #4
 8007386:	4a68      	ldr	r2, [pc, #416]	; (8007528 <edpt_schedule_packets+0x1dc>)
 8007388:	4413      	add	r3, r2
 800738a:	61bb      	str	r3, [r7, #24]
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 800738c:	797b      	ldrb	r3, [r7, #5]
 800738e:	4a67      	ldr	r2, [pc, #412]	; (800752c <edpt_schedule_packets+0x1e0>)
 8007390:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	895b      	ldrh	r3, [r3, #10]
 8007398:	81fa      	strh	r2, [r7, #14]
 800739a:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800739c:	89fa      	ldrh	r2, [r7, #14]
 800739e:	89bb      	ldrh	r3, [r7, #12]
 80073a0:	4293      	cmp	r3, r2
 80073a2:	bf28      	it	cs
 80073a4:	4613      	movcs	r3, r2
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	863b      	strh	r3, [r7, #48]	; 0x30
    ep0_pending[dir] -= total_bytes;
 80073aa:	797b      	ldrb	r3, [r7, #5]
 80073ac:	4a5f      	ldr	r2, [pc, #380]	; (800752c <edpt_schedule_packets+0x1e0>)
 80073ae:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80073b2:	797b      	ldrb	r3, [r7, #5]
 80073b4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80073b6:	1a8a      	subs	r2, r1, r2
 80073b8:	b291      	uxth	r1, r2
 80073ba:	4a5c      	ldr	r2, [pc, #368]	; (800752c <edpt_schedule_packets+0x1e0>)
 80073bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  }

  // IN and OUT endpoint xfers are interrupt-driven, we just schedule them here.
  if(dir == TUSB_DIR_IN) {
 80073c0:	797b      	ldrb	r3, [r7, #5]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d14f      	bne.n	8007466 <edpt_schedule_packets+0x11a>
    // A full IN transfer (multiple packets, possibly) triggers XFRC.
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 80073c6:	887b      	ldrh	r3, [r7, #2]
 80073c8:	04db      	lsls	r3, r3, #19
 80073ca:	4618      	mov	r0, r3
        ((total_bytes << USB_OTG_DIEPTSIZ_XFRSIZ_Pos) & USB_OTG_DIEPTSIZ_XFRSIZ_Msk);
 80073cc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 80073ce:	79bb      	ldrb	r3, [r7, #6]
 80073d0:	015b      	lsls	r3, r3, #5
 80073d2:	69f9      	ldr	r1, [r7, #28]
 80073d4:	440b      	add	r3, r1
 80073d6:	4302      	orrs	r2, r0
 80073d8:	611a      	str	r2, [r3, #16]

    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 80073da:	79bb      	ldrb	r3, [r7, #6]
 80073dc:	015b      	lsls	r3, r3, #5
 80073de:	69fa      	ldr	r2, [r7, #28]
 80073e0:	4413      	add	r3, r2
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	79bb      	ldrb	r3, [r7, #6]
 80073e6:	015b      	lsls	r3, r3, #5
 80073e8:	69f9      	ldr	r1, [r7, #28]
 80073ea:	440b      	add	r3, r1
 80073ec:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80073f0:	601a      	str	r2, [r3, #0]
    // For ISO endpoint set correct odd/even bit for next frame.
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 80073f2:	79bb      	ldrb	r3, [r7, #6]
 80073f4:	015b      	lsls	r3, r3, #5
 80073f6:	69fa      	ldr	r2, [r7, #28]
 80073f8:	4413      	add	r3, r2
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007400:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007404:	d122      	bne.n	800744c <edpt_schedule_packets+0x100>
 8007406:	79ba      	ldrb	r2, [r7, #6]
 8007408:	797b      	ldrb	r3, [r7, #5]
 800740a:	4947      	ldr	r1, [pc, #284]	; (8007528 <edpt_schedule_packets+0x1dc>)
 800740c:	0052      	lsls	r2, r2, #1
 800740e:	4413      	add	r3, r2
 8007410:	011b      	lsls	r3, r3, #4
 8007412:	440b      	add	r3, r1
 8007414:	330c      	adds	r3, #12
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d117      	bne.n	800744c <edpt_schedule_packets+0x100>
    {
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007424:	613b      	str	r3, [r7, #16]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 8007426:	79bb      	ldrb	r3, [r7, #6]
 8007428:	015b      	lsls	r3, r3, #5
 800742a:	69fa      	ldr	r2, [r7, #28]
 800742c:	4413      	add	r3, r2
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d002      	beq.n	800743c <edpt_schedule_packets+0xf0>
 8007436:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 800743a:	e001      	b.n	8007440 <edpt_schedule_packets+0xf4>
 800743c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8007440:	79bb      	ldrb	r3, [r7, #6]
 8007442:	015b      	lsls	r3, r3, #5
 8007444:	69f8      	ldr	r0, [r7, #28]
 8007446:	4403      	add	r3, r0
 8007448:	430a      	orrs	r2, r1
 800744a:	601a      	str	r2, [r3, #0]
    }
    // Enable fifo empty interrupt only if there are something to put in the fifo.
    if(total_bytes != 0) {
 800744c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800744e:	2b00      	cmp	r3, #0
 8007450:	d05e      	beq.n	8007510 <edpt_schedule_packets+0x1c4>
      dev->DIEPEMPMSK |= (1 << epnum);
 8007452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007456:	79ba      	ldrb	r2, [r7, #6]
 8007458:	2101      	movs	r1, #1
 800745a:	fa01 f202 	lsl.w	r2, r1, r2
 800745e:	431a      	orrs	r2, r3
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	635a      	str	r2, [r3, #52]	; 0x34
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
    }
  }
}
 8007464:	e054      	b.n	8007510 <edpt_schedule_packets+0x1c4>
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 8007466:	79bb      	ldrb	r3, [r7, #6]
 8007468:	015b      	lsls	r3, r3, #5
 800746a:	6a3a      	ldr	r2, [r7, #32]
 800746c:	4413      	add	r3, r2
 800746e:	691a      	ldr	r2, [r3, #16]
 8007470:	79bb      	ldrb	r3, [r7, #6]
 8007472:	015b      	lsls	r3, r3, #5
 8007474:	6a39      	ldr	r1, [r7, #32]
 8007476:	440b      	add	r3, r1
 8007478:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 800747c:	611a      	str	r2, [r3, #16]
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 800747e:	79bb      	ldrb	r3, [r7, #6]
 8007480:	015b      	lsls	r3, r3, #5
 8007482:	6a3a      	ldr	r2, [r7, #32]
 8007484:	4413      	add	r3, r2
 8007486:	6919      	ldr	r1, [r3, #16]
 8007488:	887b      	ldrh	r3, [r7, #2]
 800748a:	04db      	lsls	r3, r3, #19
 800748c:	461a      	mov	r2, r3
        ((total_bytes << USB_OTG_DOEPTSIZ_XFRSIZ_Pos) & USB_OTG_DOEPTSIZ_XFRSIZ_Msk);
 800748e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 8007490:	431a      	orrs	r2, r3
 8007492:	79bb      	ldrb	r3, [r7, #6]
 8007494:	015b      	lsls	r3, r3, #5
 8007496:	6a38      	ldr	r0, [r7, #32]
 8007498:	4403      	add	r3, r0
 800749a:	430a      	orrs	r2, r1
 800749c:	611a      	str	r2, [r3, #16]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 800749e:	79bb      	ldrb	r3, [r7, #6]
 80074a0:	015b      	lsls	r3, r3, #5
 80074a2:	6a3a      	ldr	r2, [r7, #32]
 80074a4:	4413      	add	r3, r2
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	79bb      	ldrb	r3, [r7, #6]
 80074aa:	015b      	lsls	r3, r3, #5
 80074ac:	6a39      	ldr	r1, [r7, #32]
 80074ae:	440b      	add	r3, r1
 80074b0:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80074b4:	601a      	str	r2, [r3, #0]
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 80074b6:	79bb      	ldrb	r3, [r7, #6]
 80074b8:	015b      	lsls	r3, r3, #5
 80074ba:	6a3a      	ldr	r2, [r7, #32]
 80074bc:	4413      	add	r3, r2
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80074c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80074c8:	d122      	bne.n	8007510 <edpt_schedule_packets+0x1c4>
 80074ca:	79ba      	ldrb	r2, [r7, #6]
 80074cc:	797b      	ldrb	r3, [r7, #5]
 80074ce:	4916      	ldr	r1, [pc, #88]	; (8007528 <edpt_schedule_packets+0x1dc>)
 80074d0:	0052      	lsls	r2, r2, #1
 80074d2:	4413      	add	r3, r2
 80074d4:	011b      	lsls	r3, r3, #4
 80074d6:	440b      	add	r3, r1
 80074d8:	330c      	adds	r3, #12
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d117      	bne.n	8007510 <edpt_schedule_packets+0x1c4>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e8:	617b      	str	r3, [r7, #20]
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
 80074ea:	79bb      	ldrb	r3, [r7, #6]
 80074ec:	015b      	lsls	r3, r3, #5
 80074ee:	6a3a      	ldr	r2, [r7, #32]
 80074f0:	4413      	add	r3, r2
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d002      	beq.n	8007500 <edpt_schedule_packets+0x1b4>
 80074fa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 80074fe:	e001      	b.n	8007504 <edpt_schedule_packets+0x1b8>
 8007500:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8007504:	79bb      	ldrb	r3, [r7, #6]
 8007506:	015b      	lsls	r3, r3, #5
 8007508:	6a38      	ldr	r0, [r7, #32]
 800750a:	4403      	add	r3, r0
 800750c:	430a      	orrs	r2, r1
 800750e:	601a      	str	r2, [r3, #0]
}
 8007510:	bf00      	nop
 8007512:	3728      	adds	r7, #40	; 0x28
 8007514:	46bd      	mov	sp, r7
 8007516:	bc90      	pop	{r4, r7}
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	50000800 	.word	0x50000800
 8007520:	50000b00 	.word	0x50000b00
 8007524:	50000900 	.word	0x50000900
 8007528:	20006f74 	.word	0x20006f74
 800752c:	20006ff4 	.word	0x20006ff4

08007530 <dcd_init>:

/*------------------------------------------------------------------*/
/* Controller API
 *------------------------------------------------------------------*/
void dcd_init (uint8_t rhport)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	4603      	mov	r3, r0
 8007538:	71fb      	strb	r3, [r7, #7]
  // Programming model begins in the last section of the chapter on the USB
  // peripheral in each Reference Manual.

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 800753a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800753e:	60fb      	str	r3, [r7, #12]

  // No HNP/SRP (no OTG support), program timeout later.
  if ( rhport == 1 )
 8007540:	79fb      	ldrb	r3, [r7, #7]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d106      	bne.n	8007554 <dcd_init+0x24>
    usb_otg->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);

    // Select default internal VBUS Indicator and Drive for ULPI
    usb_otg->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
#else
    usb_otg->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	60da      	str	r2, [r3, #12]
 8007552:	e005      	b.n	8007560 <dcd_init+0x30>
    USB_HS_PHYCInit();
#endif
  } else
  {
    // Enable internal PHY
    usb_otg->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	60da      	str	r2, [r3, #12]
  }

  // Reset core after selecting PHY
  // Wait AHB IDLE, reset then wait until it is cleared
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U) {}
 8007560:	bf00      	nop
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	2b00      	cmp	r3, #0
 8007568:	dafb      	bge.n	8007562 <dcd_init+0x32>
  usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	f043 0201 	orr.w	r2, r3, #1
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	611a      	str	r2, [r3, #16]
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST) {}
 8007576:	bf00      	nop
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	2b01      	cmp	r3, #1
 8007582:	d0f9      	beq.n	8007578 <dcd_init+0x48>

  // Restart PHY clock
  *((volatile uint32_t *)(RHPORT_REGS_BASE + USB_OTG_PCGCCTL_BASE)) = 0;
 8007584:	4b1b      	ldr	r3, [pc, #108]	; (80075f4 <dcd_init+0xc4>)
 8007586:	2200      	movs	r2, #0
 8007588:	601a      	str	r2, [r3, #0]

  // Clear all interrupts
  usb_otg->GINTSTS |= usb_otg->GINTSTS;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	695a      	ldr	r2, [r3, #20]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	695b      	ldr	r3, [r3, #20]
 8007592:	431a      	orrs	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	615a      	str	r2, [r3, #20]

  // Required as part of core initialization.
  // TODO: How should mode mismatch be handled? It will cause
  // the core to stop working/require reset.
  usb_otg->GINTMSK |= USB_OTG_GINTMSK_OTGINT | USB_OTG_GINTMSK_MMISM;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	f043 0206 	orr.w	r2, r3, #6
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	619a      	str	r2, [r3, #24]

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 80075a4:	4b14      	ldr	r3, [pc, #80]	; (80075f8 <dcd_init+0xc8>)
 80075a6:	60bb      	str	r3, [r7, #8]

  // If USB host misbehaves during status portion of control xfer
  // (non zero-length packet), send STALL back and discard.
  dev->DCFG |=  USB_OTG_DCFG_NZLSOHSK;
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f043 0204 	orr.w	r2, r3, #4
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	601a      	str	r2, [r3, #0]

  set_speed(rhport, TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL);
 80075b4:	79fb      	ldrb	r3, [r7, #7]
 80075b6:	2100      	movs	r1, #0
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7ff fe9b 	bl	80072f4 <set_speed>

  // Enable internal USB transceiver, unless using HS core (port 1) with external PHY.
  if (!(rhport == 1 && (CFG_TUSB_RHPORT0_MODE & OPT_MODE_HIGH_SPEED))) usb_otg->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	639a      	str	r2, [r3, #56]	; 0x38

  usb_otg->GINTMSK |= USB_OTG_GINTMSK_USBRST   | USB_OTG_GINTMSK_ENUMDNEM |
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	699a      	ldr	r2, [r3, #24]
 80075ce:	4b0b      	ldr	r3, [pc, #44]	; (80075fc <dcd_init+0xcc>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	6193      	str	r3, [r2, #24]
      USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_WUIM     |
      USB_OTG_GINTMSK_RXFLVLM  | (USE_SOF ? USB_OTG_GINTMSK_SOFM : 0);

  // Enable global interrupt
  usb_otg->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f043 0201 	orr.w	r2, r3, #1
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 80075e2:	79fb      	ldrb	r3, [r7, #7]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 f851 	bl	800768c <dcd_connect>
}
 80075ea:	bf00      	nop
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	50000e00 	.word	0x50000e00
 80075f8:	50000800 	.word	0x50000800
 80075fc:	80003810 	.word	0x80003810

08007600 <dcd_int_enable>:

void dcd_int_enable (uint8_t rhport)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	4603      	mov	r3, r0
 8007608:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  NVIC_EnableIRQ(RHPORT_IRQn);
 800760a:	2043      	movs	r0, #67	; 0x43
 800760c:	f7ff fcd8 	bl	8006fc0 <__NVIC_EnableIRQ>
}
 8007610:	bf00      	nop
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <dcd_int_disable>:

void dcd_int_disable (uint8_t rhport)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	4603      	mov	r3, r0
 8007620:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  NVIC_DisableIRQ(RHPORT_IRQn);
 8007622:	2043      	movs	r0, #67	; 0x43
 8007624:	f7ff fcea 	bl	8006ffc <__NVIC_DisableIRQ>
}
 8007628:	bf00      	nop
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <dcd_set_address>:

void dcd_set_address (uint8_t rhport, uint8_t dev_addr)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	4603      	mov	r3, r0
 8007638:	460a      	mov	r2, r1
 800763a:	71fb      	strb	r3, [r7, #7]
 800763c:	4613      	mov	r3, r2
 800763e:	71bb      	strb	r3, [r7, #6]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8007640:	4b11      	ldr	r3, [pc, #68]	; (8007688 <dcd_set_address+0x58>)
 8007642:	60fb      	str	r3, [r7, #12]
  dev->DCFG = (dev->DCFG & ~USB_OTG_DCFG_DAD_Msk) | (dev_addr << USB_OTG_DCFG_DAD_Pos);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800764c:	79ba      	ldrb	r2, [r7, #6]
 800764e:	0112      	lsls	r2, r2, #4
 8007650:	431a      	orrs	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	601a      	str	r2, [r3, #0]
 8007656:	2300      	movs	r3, #0
 8007658:	72fb      	strb	r3, [r7, #11]
 800765a:	2301      	movs	r3, #1
 800765c:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 800765e:	7abb      	ldrb	r3, [r7, #10]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d002      	beq.n	800766a <dcd_set_address+0x3a>
 8007664:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8007668:	e000      	b.n	800766c <dcd_set_address+0x3c>
 800766a:	2300      	movs	r3, #0
 800766c:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8007670:	4313      	orrs	r3, r2
 8007672:	b25b      	sxtb	r3, r3
 8007674:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8007676:	79f8      	ldrb	r0, [r7, #7]
 8007678:	2300      	movs	r3, #0
 800767a:	2200      	movs	r2, #0
 800767c:	f000 f97a 	bl	8007974 <dcd_edpt_xfer>
}
 8007680:	bf00      	nop
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	50000800 	.word	0x50000800

0800768c <dcd_connect>:

  dev->DCTL &= ~USB_OTG_DCTL_RWUSIG;
}

void dcd_connect(uint8_t rhport)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	4603      	mov	r3, r0
 8007694:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8007696:	4b07      	ldr	r3, [pc, #28]	; (80076b4 <dcd_connect+0x28>)
 8007698:	60fb      	str	r3, [r7, #12]
  dev->DCTL &= ~USB_OTG_DCTL_SDIS;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f023 0202 	bic.w	r2, r3, #2
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	605a      	str	r2, [r3, #4]
}
 80076a6:	bf00      	nop
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	50000800 	.word	0x50000800

080076b8 <dcd_edpt_open>:
/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * desc_edpt)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b090      	sub	sp, #64	; 0x40
 80076bc:	af00      	add	r7, sp, #0
 80076be:	4603      	mov	r3, r0
 80076c0:	6039      	str	r1, [r7, #0]
 80076c2:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 80076c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80076c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 80076ca:	4b81      	ldr	r3, [pc, #516]	; (80078d0 <dcd_edpt_open+0x218>)
 80076cc:	63bb      	str	r3, [r7, #56]	; 0x38
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 80076ce:	4b81      	ldr	r3, [pc, #516]	; (80078d4 <dcd_edpt_open+0x21c>)
 80076d0:	637b      	str	r3, [r7, #52]	; 0x34
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 80076d2:	4b81      	ldr	r3, [pc, #516]	; (80078d8 <dcd_edpt_open+0x220>)
 80076d4:	633b      	str	r3, [r7, #48]	; 0x30

  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	789b      	ldrb	r3, [r3, #2]
 80076da:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80076dc:	7cbb      	ldrb	r3, [r7, #18]
 80076de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t const dir   = tu_edpt_dir(desc_edpt->bEndpointAddress);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	789b      	ldrb	r3, [r3, #2]
 80076ec:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80076ee:	7cfb      	ldrb	r3, [r7, #19]
 80076f0:	09db      	lsrs	r3, r3, #7
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

  TU_ASSERT(epnum < EP_MAX);
 80076f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80076fc:	2b03      	cmp	r3, #3
 80076fe:	d90a      	bls.n	8007716 <dcd_edpt_open+0x5e>
 8007700:	4b76      	ldr	r3, [pc, #472]	; (80078dc <dcd_edpt_open+0x224>)
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	2b00      	cmp	r3, #0
 800770e:	d000      	beq.n	8007712 <dcd_edpt_open+0x5a>
 8007710:	be00      	bkpt	0x0000
 8007712:	2300      	movs	r3, #0
 8007714:	e0d8      	b.n	80078c8 <dcd_edpt_open+0x210>

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 8007716:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800771a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800771e:	0052      	lsls	r2, r2, #1
 8007720:	4413      	add	r3, r2
 8007722:	011b      	lsls	r3, r3, #4
 8007724:	4a6e      	ldr	r2, [pc, #440]	; (80078e0 <dcd_edpt_open+0x228>)
 8007726:	4413      	add	r3, r2
 8007728:	62bb      	str	r3, [r7, #40]	; 0x28
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	60fb      	str	r3, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	889b      	ldrh	r3, [r3, #4]
 8007732:	b29b      	uxth	r3, r3
 8007734:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007738:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 800773a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773c:	815a      	strh	r2, [r3, #10]
  xfer->interval = desc_edpt->bInterval;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	799a      	ldrb	r2, [r3, #6]
 8007742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007744:	731a      	strb	r2, [r3, #12]

  uint16_t const fifo_size = (xfer->max_size + 3) / 4; // Round up to next full word
 8007746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007748:	895b      	ldrh	r3, [r3, #10]
 800774a:	3303      	adds	r3, #3
 800774c:	2b00      	cmp	r3, #0
 800774e:	da00      	bge.n	8007752 <dcd_edpt_open+0x9a>
 8007750:	3303      	adds	r3, #3
 8007752:	109b      	asrs	r3, r3, #2
 8007754:	84fb      	strh	r3, [r7, #38]	; 0x26

  if(dir == TUSB_DIR_OUT)
 8007756:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800775a:	2b00      	cmp	r3, #0
 800775c:	d152      	bne.n	8007804 <dcd_edpt_open+0x14c>
  {
    // Calculate required size of RX FIFO
    uint16_t const sz = calc_rx_ff_size(4*fifo_size);
 800775e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	b29b      	uxth	r3, r3
 8007764:	4618      	mov	r0, r3
 8007766:	f7ff fc6d 	bl	8007044 <calc_rx_ff_size>
 800776a:	4603      	mov	r3, r0
 800776c:	83fb      	strh	r3, [r7, #30]

    // If size_rx needs to be extended check if possible and if so enlarge it
    if (usb_otg->GRXFSIZ < sz)
 800776e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007772:	8bfb      	ldrh	r3, [r7, #30]
 8007774:	429a      	cmp	r2, r3
 8007776:	d214      	bcs.n	80077a2 <dcd_edpt_open+0xea>
    {
      TU_ASSERT(sz + _allocated_fifo_words_tx <= EP_FIFO_SIZE/4);
 8007778:	8bfb      	ldrh	r3, [r7, #30]
 800777a:	4a5a      	ldr	r2, [pc, #360]	; (80078e4 <dcd_edpt_open+0x22c>)
 800777c:	8812      	ldrh	r2, [r2, #0]
 800777e:	4413      	add	r3, r2
 8007780:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007784:	d90a      	bls.n	800779c <dcd_edpt_open+0xe4>
 8007786:	4b55      	ldr	r3, [pc, #340]	; (80078dc <dcd_edpt_open+0x224>)
 8007788:	61bb      	str	r3, [r7, #24]
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0301 	and.w	r3, r3, #1
 8007792:	2b00      	cmp	r3, #0
 8007794:	d000      	beq.n	8007798 <dcd_edpt_open+0xe0>
 8007796:	be00      	bkpt	0x0000
 8007798:	2300      	movs	r3, #0
 800779a:	e095      	b.n	80078c8 <dcd_edpt_open+0x210>

      // Enlarge RX FIFO
      usb_otg->GRXFSIZ = sz;
 800779c:	8bfa      	ldrh	r2, [r7, #30]
 800779e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 80077a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077a6:	015b      	lsls	r3, r3, #5
 80077a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077aa:	4413      	add	r3, r2
 80077ac:	681a      	ldr	r2, [r3, #0]
        (desc_edpt->bmAttributes.xfer << USB_OTG_DOEPCTL_EPTYP_Pos)   |
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	78db      	ldrb	r3, [r3, #3]
 80077b2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	049b      	lsls	r3, r3, #18
 80077ba:	4619      	mov	r1, r3
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	78db      	ldrb	r3, [r3, #3]
 80077c0:	f003 0303 	and.w	r3, r3, #3
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d002      	beq.n	80077d0 <dcd_edpt_open+0x118>
 80077ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80077ce:	e000      	b.n	80077d2 <dcd_edpt_open+0x11a>
 80077d0:	2300      	movs	r3, #0
        (desc_edpt->bmAttributes.xfer << USB_OTG_DOEPCTL_EPTYP_Pos)   |
 80077d2:	430b      	orrs	r3, r1
        (xfer->max_size << USB_OTG_DOEPCTL_MPSIZ_Pos);
 80077d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077d6:	8949      	ldrh	r1, [r1, #10]
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 80077d8:	430b      	orrs	r3, r1
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 80077da:	431a      	orrs	r2, r3
 80077dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077e0:	015b      	lsls	r3, r3, #5
 80077e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80077e4:	440b      	add	r3, r1
 80077e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077ea:	601a      	str	r2, [r3, #0]

    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_OEPM_Pos + epnum));
 80077ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ee:	69db      	ldr	r3, [r3, #28]
 80077f0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80077f4:	3210      	adds	r2, #16
 80077f6:	2101      	movs	r1, #1
 80077f8:	fa01 f202 	lsl.w	r2, r1, r2
 80077fc:	431a      	orrs	r2, r3
 80077fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007800:	61da      	str	r2, [r3, #28]
 8007802:	e060      	b.n	80078c6 <dcd_edpt_open+0x20e>
    //
    // In FIFO is allocated by following rules:
    // - IN EP 1 gets FIFO 1, IN EP "n" gets FIFO "n".

    // Check if free space is available
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + usb_otg->GRXFSIZ <= EP_FIFO_SIZE/4);
 8007804:	4b37      	ldr	r3, [pc, #220]	; (80078e4 <dcd_edpt_open+0x22c>)
 8007806:	881b      	ldrh	r3, [r3, #0]
 8007808:	461a      	mov	r2, r3
 800780a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800780c:	4413      	add	r3, r2
 800780e:	461a      	mov	r2, r3
 8007810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007814:	4413      	add	r3, r2
 8007816:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800781a:	d90a      	bls.n	8007832 <dcd_edpt_open+0x17a>
 800781c:	4b2f      	ldr	r3, [pc, #188]	; (80078dc <dcd_edpt_open+0x224>)
 800781e:	623b      	str	r3, [r7, #32]
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0301 	and.w	r3, r3, #1
 8007828:	2b00      	cmp	r3, #0
 800782a:	d000      	beq.n	800782e <dcd_edpt_open+0x176>
 800782c:	be00      	bkpt	0x0000
 800782e:	2300      	movs	r3, #0
 8007830:	e04a      	b.n	80078c8 <dcd_edpt_open+0x210>

    _allocated_fifo_words_tx += fifo_size;
 8007832:	4b2c      	ldr	r3, [pc, #176]	; (80078e4 <dcd_edpt_open+0x22c>)
 8007834:	881a      	ldrh	r2, [r3, #0]
 8007836:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007838:	4413      	add	r3, r2
 800783a:	b29a      	uxth	r2, r3
 800783c:	4b29      	ldr	r3, [pc, #164]	; (80078e4 <dcd_edpt_open+0x22c>)
 800783e:	801a      	strh	r2, [r3, #0]

    TU_LOG(2, "    Allocated %u bytes at offset %u", fifo_size*4, EP_FIFO_SIZE-_allocated_fifo_words_tx*4);

    // DIEPTXF starts at FIFO #1.
    // Both TXFD and TXSA are in unit of 32-bit words.
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8007840:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007842:	041b      	lsls	r3, r3, #16
 8007844:	4619      	mov	r1, r3
 8007846:	4b27      	ldr	r3, [pc, #156]	; (80078e4 <dcd_edpt_open+0x22c>)
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 800784e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007852:	3b01      	subs	r3, #1
 8007854:	430a      	orrs	r2, r1
 8007856:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007858:	3340      	adds	r3, #64	; 0x40
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	440b      	add	r3, r1
 800785e:	605a      	str	r2, [r3, #4]

    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 8007860:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007864:	015b      	lsls	r3, r3, #5
 8007866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007868:	4413      	add	r3, r2
 800786a:	6819      	ldr	r1, [r3, #0]
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 800786c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007870:	059b      	lsls	r3, r3, #22
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 8007872:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	78db      	ldrb	r3, [r3, #3]
 800787a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800787e:	b2db      	uxtb	r3, r3
 8007880:	049b      	lsls	r3, r3, #18
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 8007882:	4313      	orrs	r3, r2
 8007884:	461a      	mov	r2, r3
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	78db      	ldrb	r3, [r3, #3]
 800788a:	f003 0303 	and.w	r3, r3, #3
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b01      	cmp	r3, #1
 8007892:	d002      	beq.n	800789a <dcd_edpt_open+0x1e2>
 8007894:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007898:	e000      	b.n	800789c <dcd_edpt_open+0x1e4>
 800789a:	2300      	movs	r3, #0
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 800789c:	4313      	orrs	r3, r2
        (xfer->max_size << USB_OTG_DIEPCTL_MPSIZ_Pos);
 800789e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078a0:	8952      	ldrh	r2, [r2, #10]
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 80078a2:	431a      	orrs	r2, r3
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 80078a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078a8:	015b      	lsls	r3, r3, #5
 80078aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078ac:	4403      	add	r3, r0
 80078ae:	430a      	orrs	r2, r1
 80078b0:	601a      	str	r2, [r3, #0]

    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_IEPM_Pos + epnum));
 80078b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80078ba:	2101      	movs	r1, #1
 80078bc:	fa01 f202 	lsl.w	r2, r1, r2
 80078c0:	431a      	orrs	r2, r3
 80078c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c4:	61da      	str	r2, [r3, #28]
  }

  return true;
 80078c6:	2301      	movs	r3, #1
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3740      	adds	r7, #64	; 0x40
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	50000800 	.word	0x50000800
 80078d4:	50000b00 	.word	0x50000b00
 80078d8:	50000900 	.word	0x50000900
 80078dc:	e000edf0 	.word	0xe000edf0
 80078e0:	20006f74 	.word	0x20006f74
 80078e4:	20006ff8 	.word	0x20006ff8

080078e8 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all (uint8_t rhport)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b087      	sub	sp, #28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	4603      	mov	r3, r0
 80078f0:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

//  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 80078f2:	4b1b      	ldr	r3, [pc, #108]	; (8007960 <dcd_edpt_close_all+0x78>)
 80078f4:	613b      	str	r3, [r7, #16]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 80078f6:	4b1b      	ldr	r3, [pc, #108]	; (8007964 <dcd_edpt_close_all+0x7c>)
 80078f8:	60fb      	str	r3, [r7, #12]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 80078fa:	4b1b      	ldr	r3, [pc, #108]	; (8007968 <dcd_edpt_close_all+0x80>)
 80078fc:	60bb      	str	r3, [r7, #8]

  // Disable non-control interrupt
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8007904:	61da      	str	r2, [r3, #28]

  for(uint8_t n = 1; n < EP_MAX; n++)
 8007906:	2301      	movs	r3, #1
 8007908:	75fb      	strb	r3, [r7, #23]
 800790a:	e01c      	b.n	8007946 <dcd_edpt_close_all+0x5e>
  {
    // disable OUT endpoint
    out_ep[n].DOEPCTL = 0;
 800790c:	7dfb      	ldrb	r3, [r7, #23]
 800790e:	015b      	lsls	r3, r3, #5
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	4413      	add	r3, r2
 8007914:	2200      	movs	r2, #0
 8007916:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8007918:	7dfb      	ldrb	r3, [r7, #23]
 800791a:	4a14      	ldr	r2, [pc, #80]	; (800796c <dcd_edpt_close_all+0x84>)
 800791c:	015b      	lsls	r3, r3, #5
 800791e:	4413      	add	r3, r2
 8007920:	330a      	adds	r3, #10
 8007922:	2200      	movs	r2, #0
 8007924:	801a      	strh	r2, [r3, #0]

    // disable IN endpoint
    in_ep[n].DIEPCTL = 0;
 8007926:	7dfb      	ldrb	r3, [r7, #23]
 8007928:	015b      	lsls	r3, r3, #5
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	4413      	add	r3, r2
 800792e:	2200      	movs	r2, #0
 8007930:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8007932:	7dfb      	ldrb	r3, [r7, #23]
 8007934:	4a0d      	ldr	r2, [pc, #52]	; (800796c <dcd_edpt_close_all+0x84>)
 8007936:	015b      	lsls	r3, r3, #5
 8007938:	4413      	add	r3, r2
 800793a:	331a      	adds	r3, #26
 800793c:	2200      	movs	r2, #0
 800793e:	801a      	strh	r2, [r3, #0]
  for(uint8_t n = 1; n < EP_MAX; n++)
 8007940:	7dfb      	ldrb	r3, [r7, #23]
 8007942:	3301      	adds	r3, #1
 8007944:	75fb      	strb	r3, [r7, #23]
 8007946:	7dfb      	ldrb	r3, [r7, #23]
 8007948:	2b03      	cmp	r3, #3
 800794a:	d9df      	bls.n	800790c <dcd_edpt_close_all+0x24>
  }

  // reset allocated fifo IN
  _allocated_fifo_words_tx = 16;
 800794c:	4b08      	ldr	r3, [pc, #32]	; (8007970 <dcd_edpt_close_all+0x88>)
 800794e:	2210      	movs	r2, #16
 8007950:	801a      	strh	r2, [r3, #0]
}
 8007952:	bf00      	nop
 8007954:	371c      	adds	r7, #28
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	50000800 	.word	0x50000800
 8007964:	50000b00 	.word	0x50000b00
 8007968:	50000900 	.word	0x50000900
 800796c:	20006f74 	.word	0x20006f74
 8007970:	20006ff8 	.word	0x20006ff8

08007974 <dcd_edpt_xfer>:

bool dcd_edpt_xfer (uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 8007974:	b590      	push	{r4, r7, lr}
 8007976:	b089      	sub	sp, #36	; 0x24
 8007978:	af02      	add	r7, sp, #8
 800797a:	603a      	str	r2, [r7, #0]
 800797c:	461a      	mov	r2, r3
 800797e:	4603      	mov	r3, r0
 8007980:	71fb      	strb	r3, [r7, #7]
 8007982:	460b      	mov	r3, r1
 8007984:	71bb      	strb	r3, [r7, #6]
 8007986:	4613      	mov	r3, r2
 8007988:	80bb      	strh	r3, [r7, #4]
 800798a:	79bb      	ldrb	r3, [r7, #6]
 800798c:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800798e:	7b3b      	ldrb	r3, [r7, #12]
 8007990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007994:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007996:	757b      	strb	r3, [r7, #21]
 8007998:	79bb      	ldrb	r3, [r7, #6]
 800799a:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800799c:	7b7b      	ldrb	r3, [r7, #13]
 800799e:	09db      	lsrs	r3, r3, #7
 80079a0:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80079a2:	753b      	strb	r3, [r7, #20]

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 80079a4:	7d7a      	ldrb	r2, [r7, #21]
 80079a6:	7d3b      	ldrb	r3, [r7, #20]
 80079a8:	0052      	lsls	r2, r2, #1
 80079aa:	4413      	add	r3, r2
 80079ac:	011b      	lsls	r3, r3, #4
 80079ae:	4a23      	ldr	r2, [pc, #140]	; (8007a3c <dcd_edpt_xfer+0xc8>)
 80079b0:	4413      	add	r3, r2
 80079b2:	613b      	str	r3, [r7, #16]
  xfer->buffer      = buffer;
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	601a      	str	r2, [r3, #0]
  xfer->ff          = NULL;
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	2200      	movs	r2, #0
 80079be:	605a      	str	r2, [r3, #4]
  xfer->total_len   = total_bytes;
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	88ba      	ldrh	r2, [r7, #4]
 80079c4:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if(epnum == 0) {
 80079c6:	7d7b      	ldrb	r3, [r7, #21]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d111      	bne.n	80079f0 <dcd_edpt_xfer+0x7c>
    ep0_pending[dir] = total_bytes;
 80079cc:	7d3b      	ldrb	r3, [r7, #20]
 80079ce:	491c      	ldr	r1, [pc, #112]	; (8007a40 <dcd_edpt_xfer+0xcc>)
 80079d0:	88ba      	ldrh	r2, [r7, #4]
 80079d2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
 80079d6:	7d3b      	ldrb	r3, [r7, #20]
 80079d8:	4a19      	ldr	r2, [pc, #100]	; (8007a40 <dcd_edpt_xfer+0xcc>)
 80079da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079de:	7d3a      	ldrb	r2, [r7, #20]
 80079e0:	7d79      	ldrb	r1, [r7, #21]
 80079e2:	79f8      	ldrb	r0, [r7, #7]
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	2301      	movs	r3, #1
 80079e8:	f7ff fcb0 	bl	800734c <edpt_schedule_packets>
    return true;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e021      	b.n	8007a34 <dcd_edpt_xfer+0xc0>
  }

  uint16_t num_packets = (total_bytes / xfer->max_size);
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	895b      	ldrh	r3, [r3, #10]
 80079f4:	88ba      	ldrh	r2, [r7, #4]
 80079f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079fa:	82fb      	strh	r3, [r7, #22]
  uint16_t const short_packet_size = total_bytes % xfer->max_size;
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	895a      	ldrh	r2, [r3, #10]
 8007a00:	88bb      	ldrh	r3, [r7, #4]
 8007a02:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a06:	fb01 f202 	mul.w	r2, r1, r2
 8007a0a:	1a9b      	subs	r3, r3, r2
 8007a0c:	81fb      	strh	r3, [r7, #14]

  // Zero-size packet is special case.
  if(short_packet_size > 0 || (total_bytes == 0)) {
 8007a0e:	89fb      	ldrh	r3, [r7, #14]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d102      	bne.n	8007a1a <dcd_edpt_xfer+0xa6>
 8007a14:	88bb      	ldrh	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d102      	bne.n	8007a20 <dcd_edpt_xfer+0xac>
    num_packets++;
 8007a1a:	8afb      	ldrh	r3, [r7, #22]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	82fb      	strh	r3, [r7, #22]
  }

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 8007a20:	8afc      	ldrh	r4, [r7, #22]
 8007a22:	7d3a      	ldrb	r2, [r7, #20]
 8007a24:	7d79      	ldrb	r1, [r7, #21]
 8007a26:	79f8      	ldrb	r0, [r7, #7]
 8007a28:	88bb      	ldrh	r3, [r7, #4]
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	4623      	mov	r3, r4
 8007a2e:	f7ff fc8d 	bl	800734c <edpt_schedule_packets>

  return true;
 8007a32:	2301      	movs	r3, #1
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	371c      	adds	r7, #28
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd90      	pop	{r4, r7, pc}
 8007a3c:	20006f74 	.word	0x20006f74
 8007a40:	20006ff4 	.word	0x20006ff4

08007a44 <dcd_edpt_disable>:

  return true;
}

static void dcd_edpt_disable (uint8_t rhport, uint8_t ep_addr, bool stall)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b089      	sub	sp, #36	; 0x24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	71fb      	strb	r3, [r7, #7]
 8007a4e:	460b      	mov	r3, r1
 8007a50:	71bb      	strb	r3, [r7, #6]
 8007a52:	4613      	mov	r3, r2
 8007a54:	717b      	strb	r3, [r7, #5]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8007a56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007a5a:	61fb      	str	r3, [r7, #28]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8007a5c:	4b6c      	ldr	r3, [pc, #432]	; (8007c10 <dcd_edpt_disable+0x1cc>)
 8007a5e:	61bb      	str	r3, [r7, #24]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8007a60:	4b6c      	ldr	r3, [pc, #432]	; (8007c14 <dcd_edpt_disable+0x1d0>)
 8007a62:	617b      	str	r3, [r7, #20]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8007a64:	4b6c      	ldr	r3, [pc, #432]	; (8007c18 <dcd_edpt_disable+0x1d4>)
 8007a66:	613b      	str	r3, [r7, #16]
 8007a68:	79bb      	ldrb	r3, [r7, #6]
 8007a6a:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007a6c:	7b3b      	ldrb	r3, [r7, #12]
 8007a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a72:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007a74:	73fb      	strb	r3, [r7, #15]
 8007a76:	79bb      	ldrb	r3, [r7, #6]
 8007a78:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007a7a:	7b7b      	ldrb	r3, [r7, #13]
 8007a7c:	09db      	lsrs	r3, r3, #7
 8007a7e:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8007a80:	73bb      	strb	r3, [r7, #14]

  if(dir == TUSB_DIR_IN) {
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d16a      	bne.n	8007b5e <dcd_edpt_disable+0x11a>
    // Only disable currently enabled non-control endpoint
    if ( (epnum == 0) || !(in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPENA) ){
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d006      	beq.n	8007a9c <dcd_edpt_disable+0x58>
 8007a8e:	7bfb      	ldrb	r3, [r7, #15]
 8007a90:	015b      	lsls	r3, r3, #5
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	4413      	add	r3, r2
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	db13      	blt.n	8007ac4 <dcd_edpt_disable+0x80>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
 8007a9e:	015b      	lsls	r3, r3, #5
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	797b      	ldrb	r3, [r7, #5]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d002      	beq.n	8007ab2 <dcd_edpt_disable+0x6e>
 8007aac:	f04f 6102 	mov.w	r1, #136314880	; 0x8200000
 8007ab0:	e001      	b.n	8007ab6 <dcd_edpt_disable+0x72>
 8007ab2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
 8007ab8:	015b      	lsls	r3, r3, #5
 8007aba:	6938      	ldr	r0, [r7, #16]
 8007abc:	4403      	add	r3, r0
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	601a      	str	r2, [r3, #0]
 8007ac2:	e037      	b.n	8007b34 <dcd_edpt_disable+0xf0>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007ac4:	7bfb      	ldrb	r3, [r7, #15]
 8007ac6:	015b      	lsls	r3, r3, #5
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	4413      	add	r3, r2
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	7bfb      	ldrb	r3, [r7, #15]
 8007ad0:	015b      	lsls	r3, r3, #5
 8007ad2:	6939      	ldr	r1, [r7, #16]
 8007ad4:	440b      	add	r3, r1
 8007ad6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8007ada:	601a      	str	r2, [r3, #0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_INEPNE) == 0);
 8007adc:	bf00      	nop
 8007ade:	7bfb      	ldrb	r3, [r7, #15]
 8007ae0:	015b      	lsls	r3, r3, #5
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d0f6      	beq.n	8007ade <dcd_edpt_disable+0x9a>

      // Disable the endpoint.
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPDIS | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
 8007af2:	015b      	lsls	r3, r3, #5
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	4413      	add	r3, r2
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	797b      	ldrb	r3, [r7, #5]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <dcd_edpt_disable+0xc0>
 8007b00:	4946      	ldr	r1, [pc, #280]	; (8007c1c <dcd_edpt_disable+0x1d8>)
 8007b02:	e001      	b.n	8007b08 <dcd_edpt_disable+0xc4>
 8007b04:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007b08:	7bfb      	ldrb	r3, [r7, #15]
 8007b0a:	015b      	lsls	r3, r3, #5
 8007b0c:	6938      	ldr	r0, [r7, #16]
 8007b0e:	4403      	add	r3, r0
 8007b10:	430a      	orrs	r2, r1
 8007b12:	601a      	str	r2, [r3, #0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_EPDISD_Msk) == 0);
 8007b14:	bf00      	nop
 8007b16:	7bfb      	ldrb	r3, [r7, #15]
 8007b18:	015b      	lsls	r3, r3, #5
 8007b1a:	693a      	ldr	r2, [r7, #16]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	f003 0302 	and.w	r3, r3, #2
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d0f6      	beq.n	8007b16 <dcd_edpt_disable+0xd2>
      in_ep[epnum].DIEPINT = USB_OTG_DIEPINT_EPDISD;
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
 8007b2a:	015b      	lsls	r3, r3, #5
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	4413      	add	r3, r2
 8007b30:	2202      	movs	r2, #2
 8007b32:	609a      	str	r2, [r3, #8]
    }

    // Flush the FIFO, and wait until we have confirmed it cleared.
    usb_otg->GRSTCTL |= (epnum << USB_OTG_GRSTCTL_TXFNUM_Pos);
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	7bfa      	ldrb	r2, [r7, #15]
 8007b3a:	0192      	lsls	r2, r2, #6
 8007b3c:	431a      	orrs	r2, r3
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	611a      	str	r2, [r3, #16]
    usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_TXFFLSH;
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	f043 0220 	orr.w	r2, r3, #32
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	611a      	str	r2, [r3, #16]
    while((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH_Msk) != 0);
 8007b4e:	bf00      	nop
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	f003 0320 	and.w	r3, r3, #32
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1f9      	bne.n	8007b50 <dcd_edpt_disable+0x10c>

      // Allow other OUT endpoints to keep receiving.
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
    }
  }
}
 8007b5c:	e051      	b.n	8007c02 <dcd_edpt_disable+0x1be>
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d006      	beq.n	8007b72 <dcd_edpt_disable+0x12e>
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
 8007b66:	015b      	lsls	r3, r3, #5
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	db12      	blt.n	8007b98 <dcd_edpt_disable+0x154>
      out_ep[epnum].DOEPCTL |= stall ? USB_OTG_DOEPCTL_STALL : 0;
 8007b72:	7bfb      	ldrb	r3, [r7, #15]
 8007b74:	015b      	lsls	r3, r3, #5
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	4413      	add	r3, r2
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	797b      	ldrb	r3, [r7, #5]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d002      	beq.n	8007b88 <dcd_edpt_disable+0x144>
 8007b82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b86:	e000      	b.n	8007b8a <dcd_edpt_disable+0x146>
 8007b88:	2100      	movs	r1, #0
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
 8007b8c:	015b      	lsls	r3, r3, #5
 8007b8e:	6978      	ldr	r0, [r7, #20]
 8007b90:	4403      	add	r3, r0
 8007b92:	430a      	orrs	r2, r1
 8007b94:	601a      	str	r2, [r3, #0]
}
 8007b96:	e034      	b.n	8007c02 <dcd_edpt_disable+0x1be>
      dev->DCTL |= USB_OTG_DCTL_SGONAK;
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	605a      	str	r2, [r3, #4]
      while((usb_otg->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF_Msk) == 0);
 8007ba4:	bf00      	nop
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d0f9      	beq.n	8007ba6 <dcd_edpt_disable+0x162>
      out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPDIS | (stall ? USB_OTG_DOEPCTL_STALL : 0);
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
 8007bb4:	015b      	lsls	r3, r3, #5
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	4413      	add	r3, r2
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	797b      	ldrb	r3, [r7, #5]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <dcd_edpt_disable+0x182>
 8007bc2:	4916      	ldr	r1, [pc, #88]	; (8007c1c <dcd_edpt_disable+0x1d8>)
 8007bc4:	e001      	b.n	8007bca <dcd_edpt_disable+0x186>
 8007bc6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
 8007bcc:	015b      	lsls	r3, r3, #5
 8007bce:	6978      	ldr	r0, [r7, #20]
 8007bd0:	4403      	add	r3, r0
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	601a      	str	r2, [r3, #0]
      while((out_ep[epnum].DOEPINT & USB_OTG_DOEPINT_EPDISD_Msk) == 0);
 8007bd6:	bf00      	nop
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
 8007bda:	015b      	lsls	r3, r3, #5
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	4413      	add	r3, r2
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f003 0302 	and.w	r3, r3, #2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d0f6      	beq.n	8007bd8 <dcd_edpt_disable+0x194>
      out_ep[epnum].DOEPINT = USB_OTG_DOEPINT_EPDISD;
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
 8007bec:	015b      	lsls	r3, r3, #5
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	609a      	str	r2, [r3, #8]
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	605a      	str	r2, [r3, #4]
}
 8007c02:	bf00      	nop
 8007c04:	3724      	adds	r7, #36	; 0x24
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	50000800 	.word	0x50000800
 8007c14:	50000b00 	.word	0x50000b00
 8007c18:	50000900 	.word	0x50000900
 8007c1c:	40200000 	.word	0x40200000

08007c20 <dcd_edpt_stall>:
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
  }
}

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	4603      	mov	r3, r0
 8007c28:	460a      	mov	r2, r1
 8007c2a:	71fb      	strb	r3, [r7, #7]
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	71bb      	strb	r3, [r7, #6]
  dcd_edpt_disable(rhport, ep_addr, true);
 8007c30:	79b9      	ldrb	r1, [r7, #6]
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	2201      	movs	r2, #1
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7ff ff04 	bl	8007a44 <dcd_edpt_disable>
}
 8007c3c:	bf00      	nop
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b087      	sub	sp, #28
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	460a      	mov	r2, r1
 8007c4e:	71fb      	strb	r3, [r7, #7]
 8007c50:	4613      	mov	r3, r2
 8007c52:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8007c54:	4b25      	ldr	r3, [pc, #148]	; (8007cec <dcd_edpt_clear_stall+0xa8>)
 8007c56:	617b      	str	r3, [r7, #20]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8007c58:	4b25      	ldr	r3, [pc, #148]	; (8007cf0 <dcd_edpt_clear_stall+0xac>)
 8007c5a:	613b      	str	r3, [r7, #16]
 8007c5c:	79bb      	ldrb	r3, [r7, #6]
 8007c5e:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007c60:	7b3b      	ldrb	r3, [r7, #12]
 8007c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c66:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007c68:	73fb      	strb	r3, [r7, #15]
 8007c6a:	79bb      	ldrb	r3, [r7, #6]
 8007c6c:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007c6e:	7b7b      	ldrb	r3, [r7, #13]
 8007c70:	09db      	lsrs	r3, r3, #7
 8007c72:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8007c74:	73bb      	strb	r3, [r7, #14]

  // Clear stall and reset data toggle
  if(dir == TUSB_DIR_IN) {
 8007c76:	7bbb      	ldrb	r3, [r7, #14]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d118      	bne.n	8007cae <dcd_edpt_clear_stall+0x6a>
    in_ep[epnum].DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
 8007c7e:	015b      	lsls	r3, r3, #5
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	4413      	add	r3, r2
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
 8007c88:	015b      	lsls	r3, r3, #5
 8007c8a:	6939      	ldr	r1, [r7, #16]
 8007c8c:	440b      	add	r3, r1
 8007c8e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8007c92:	601a      	str	r2, [r3, #0]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
 8007c96:	015b      	lsls	r3, r3, #5
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ca0:	015b      	lsls	r3, r3, #5
 8007ca2:	6939      	ldr	r1, [r7, #16]
 8007ca4:	440b      	add	r3, r1
 8007ca6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007caa:	601a      	str	r2, [r3, #0]
  } else {
    out_ep[epnum].DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
  }
}
 8007cac:	e017      	b.n	8007cde <dcd_edpt_clear_stall+0x9a>
    out_ep[epnum].DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
 8007cb0:	015b      	lsls	r3, r3, #5
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
 8007cba:	015b      	lsls	r3, r3, #5
 8007cbc:	6979      	ldr	r1, [r7, #20]
 8007cbe:	440b      	add	r3, r1
 8007cc0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8007cc4:	601a      	str	r2, [r3, #0]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007cc6:	7bfb      	ldrb	r3, [r7, #15]
 8007cc8:	015b      	lsls	r3, r3, #5
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	4413      	add	r3, r2
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
 8007cd2:	015b      	lsls	r3, r3, #5
 8007cd4:	6979      	ldr	r1, [r7, #20]
 8007cd6:	440b      	add	r3, r1
 8007cd8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007cdc:	601a      	str	r2, [r3, #0]
}
 8007cde:	bf00      	nop
 8007ce0:	371c      	adds	r7, #28
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	50000b00 	.word	0x50000b00
 8007cf0:	50000900 	.word	0x50000900

08007cf4 <read_fifo_packet>:

/*------------------------------------------------------------------*/

// Read a single data packet from receive FIFO
static void read_fifo_packet(uint8_t rhport, uint8_t * dst, uint16_t len)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b089      	sub	sp, #36	; 0x24
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	6039      	str	r1, [r7, #0]
 8007cfe:	71fb      	strb	r3, [r7, #7]
 8007d00:	4613      	mov	r3, r2
 8007d02:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  usb_fifo_t rx_fifo = FIFO_BASE(rhport, 0);
 8007d04:	4b28      	ldr	r3, [pc, #160]	; (8007da8 <read_fifo_packet+0xb4>)
 8007d06:	61bb      	str	r3, [r7, #24]

  // Reading full available 32 bit words from fifo
  uint16_t full_words = len >> 2;
 8007d08:	88bb      	ldrh	r3, [r7, #4]
 8007d0a:	089b      	lsrs	r3, r3, #2
 8007d0c:	82fb      	strh	r3, [r7, #22]
  for(uint16_t i = 0; i < full_words; i++) {
 8007d0e:	2300      	movs	r3, #0
 8007d10:	83fb      	strh	r3, [r7, #30]
 8007d12:	e01e      	b.n	8007d52 <read_fifo_packet+0x5e>
    uint32_t tmp = *rx_fifo;
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	60fb      	str	r3, [r7, #12]
    dst[0] = tmp & 0x000000FF;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	701a      	strb	r2, [r3, #0]
    dst[1] = (tmp & 0x0000FF00) >> 8;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	0a1a      	lsrs	r2, r3, #8
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	b2d2      	uxtb	r2, r2
 8007d2c:	701a      	strb	r2, [r3, #0]
    dst[2] = (tmp & 0x00FF0000) >> 16;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	0c1a      	lsrs	r2, r3, #16
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	3302      	adds	r3, #2
 8007d36:	b2d2      	uxtb	r2, r2
 8007d38:	701a      	strb	r2, [r3, #0]
    dst[3] = (tmp & 0xFF000000) >> 24;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	0e1a      	lsrs	r2, r3, #24
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	3303      	adds	r3, #3
 8007d42:	b2d2      	uxtb	r2, r2
 8007d44:	701a      	strb	r2, [r3, #0]
    dst += 4;
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	3304      	adds	r3, #4
 8007d4a:	603b      	str	r3, [r7, #0]
  for(uint16_t i = 0; i < full_words; i++) {
 8007d4c:	8bfb      	ldrh	r3, [r7, #30]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	83fb      	strh	r3, [r7, #30]
 8007d52:	8bfa      	ldrh	r2, [r7, #30]
 8007d54:	8afb      	ldrh	r3, [r7, #22]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d3dc      	bcc.n	8007d14 <read_fifo_packet+0x20>
  }

  // Read the remaining 1-3 bytes from fifo
  uint8_t bytes_rem = len & 0x03;
 8007d5a:	88bb      	ldrh	r3, [r7, #4]
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	f003 0303 	and.w	r3, r3, #3
 8007d62:	757b      	strb	r3, [r7, #21]
  if(bytes_rem != 0) {
 8007d64:	7d7b      	ldrb	r3, [r7, #21]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d018      	beq.n	8007d9c <read_fifo_packet+0xa8>
    uint32_t tmp = *rx_fifo;
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	613b      	str	r3, [r7, #16]
    dst[0] = tmp & 0x000000FF;
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	701a      	strb	r2, [r3, #0]
    if(bytes_rem > 1) {
 8007d78:	7d7b      	ldrb	r3, [r7, #21]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d905      	bls.n	8007d8a <read_fifo_packet+0x96>
      dst[1] = (tmp & 0x0000FF00) >> 8;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	0a1a      	lsrs	r2, r3, #8
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	3301      	adds	r3, #1
 8007d86:	b2d2      	uxtb	r2, r2
 8007d88:	701a      	strb	r2, [r3, #0]
    }
    if(bytes_rem > 2) {
 8007d8a:	7d7b      	ldrb	r3, [r7, #21]
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d905      	bls.n	8007d9c <read_fifo_packet+0xa8>
      dst[2] = (tmp & 0x00FF0000) >> 16;
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	0c1a      	lsrs	r2, r3, #16
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	3302      	adds	r3, #2
 8007d98:	b2d2      	uxtb	r2, r2
 8007d9a:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8007d9c:	bf00      	nop
 8007d9e:	3724      	adds	r7, #36	; 0x24
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr
 8007da8:	50001000 	.word	0x50001000

08007dac <write_fifo_packet>:

// Write a single data packet to EPIN FIFO
static void write_fifo_packet(uint8_t rhport, uint8_t fifo_num, uint8_t * src, uint16_t len)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	603a      	str	r2, [r7, #0]
 8007db4:	461a      	mov	r2, r3
 8007db6:	4603      	mov	r3, r0
 8007db8:	71fb      	strb	r3, [r7, #7]
 8007dba:	460b      	mov	r3, r1
 8007dbc:	71bb      	strb	r3, [r7, #6]
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  usb_fifo_t tx_fifo = FIFO_BASE(rhport, fifo_num);
 8007dc2:	79bb      	ldrb	r3, [r7, #6]
 8007dc4:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 8007dc8:	3301      	adds	r3, #1
 8007dca:	031b      	lsls	r3, r3, #12
 8007dcc:	60fb      	str	r3, [r7, #12]

  // Pushing full available 32 bit words to fifo
  uint16_t full_words = len >> 2;
 8007dce:	88bb      	ldrh	r3, [r7, #4]
 8007dd0:	089b      	lsrs	r3, r3, #2
 8007dd2:	817b      	strh	r3, [r7, #10]
  for(uint16_t i = 0; i < full_words; i++){
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	82fb      	strh	r3, [r7, #22]
 8007dd8:	e019      	b.n	8007e0e <write_fifo_packet+0x62>
    *tx_fifo = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	3303      	adds	r3, #3
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	061a      	lsls	r2, r3, #24
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	3302      	adds	r3, #2
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	041b      	lsls	r3, r3, #16
 8007dea:	431a      	orrs	r2, r3
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	3301      	adds	r3, #1
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	021b      	lsls	r3, r3, #8
 8007df4:	4313      	orrs	r3, r2
 8007df6:	683a      	ldr	r2, [r7, #0]
 8007df8:	7812      	ldrb	r2, [r2, #0]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	601a      	str	r2, [r3, #0]
    src += 4;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	3304      	adds	r3, #4
 8007e06:	603b      	str	r3, [r7, #0]
  for(uint16_t i = 0; i < full_words; i++){
 8007e08:	8afb      	ldrh	r3, [r7, #22]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	82fb      	strh	r3, [r7, #22]
 8007e0e:	8afa      	ldrh	r2, [r7, #22]
 8007e10:	897b      	ldrh	r3, [r7, #10]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d3e1      	bcc.n	8007dda <write_fifo_packet+0x2e>
  }

  // Write the remaining 1-3 bytes into fifo
  uint8_t bytes_rem = len & 0x03;
 8007e16:	88bb      	ldrh	r3, [r7, #4]
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	f003 0303 	and.w	r3, r3, #3
 8007e1e:	727b      	strb	r3, [r7, #9]
  if(bytes_rem){
 8007e20:	7a7b      	ldrb	r3, [r7, #9]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d020      	beq.n	8007e68 <write_fifo_packet+0xbc>
    uint32_t tmp_word = 0;
 8007e26:	2300      	movs	r3, #0
 8007e28:	613b      	str	r3, [r7, #16]
    tmp_word |= src[0];
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	613b      	str	r3, [r7, #16]
    if(bytes_rem > 1){
 8007e36:	7a7b      	ldrb	r3, [r7, #9]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d907      	bls.n	8007e4c <write_fifo_packet+0xa0>
      tmp_word |= src[1] << 8;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	021b      	lsls	r3, r3, #8
 8007e44:	461a      	mov	r2, r3
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	613b      	str	r3, [r7, #16]
    }
    if(bytes_rem > 2){
 8007e4c:	7a7b      	ldrb	r3, [r7, #9]
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d907      	bls.n	8007e62 <write_fifo_packet+0xb6>
      tmp_word |= src[2] << 16;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	3302      	adds	r3, #2
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	041b      	lsls	r3, r3, #16
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	613b      	str	r3, [r7, #16]
    }
    *tx_fifo = tmp_word;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	601a      	str	r2, [r3, #0]
  }
}
 8007e68:	bf00      	nop
 8007e6a:	371c      	adds	r7, #28
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <handle_rxflvl_ints>:

static void handle_rxflvl_ints(uint8_t rhport, USB_OTG_OUTEndpointTypeDef * out_ep) {
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b088      	sub	sp, #32
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	6039      	str	r1, [r7, #0]
 8007e7e:	71fb      	strb	r3, [r7, #7]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8007e80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007e84:	61fb      	str	r3, [r7, #28]
  usb_fifo_t rx_fifo = FIFO_BASE(rhport, 0);
 8007e86:	4b49      	ldr	r3, [pc, #292]	; (8007fac <handle_rxflvl_ints+0x138>)
 8007e88:	61bb      	str	r3, [r7, #24]

  // Pop control word off FIFO
  uint32_t ctl_word = usb_otg->GRXSTSP;
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	617b      	str	r3, [r7, #20]
  uint8_t pktsts = (ctl_word & USB_OTG_GRXSTSP_PKTSTS_Msk) >> USB_OTG_GRXSTSP_PKTSTS_Pos;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	0c5b      	lsrs	r3, r3, #17
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	f003 030f 	and.w	r3, r3, #15
 8007e9a:	74fb      	strb	r3, [r7, #19]
  uint8_t epnum = (ctl_word &  USB_OTG_GRXSTSP_EPNUM_Msk) >>  USB_OTG_GRXSTSP_EPNUM_Pos;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	f003 030f 	and.w	r3, r3, #15
 8007ea4:	74bb      	strb	r3, [r7, #18]
  uint16_t bcnt = (ctl_word & USB_OTG_GRXSTSP_BCNT_Msk) >> USB_OTG_GRXSTSP_BCNT_Pos;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	091b      	lsrs	r3, r3, #4
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007eb0:	823b      	strh	r3, [r7, #16]

  switch(pktsts) {
 8007eb2:	7cfb      	ldrb	r3, [r7, #19]
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	2b05      	cmp	r3, #5
 8007eb8:	d864      	bhi.n	8007f84 <handle_rxflvl_ints+0x110>
 8007eba:	a201      	add	r2, pc, #4	; (adr r2, 8007ec0 <handle_rxflvl_ints+0x4c>)
 8007ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec0:	08007f99 	.word	0x08007f99
 8007ec4:	08007ed9 	.word	0x08007ed9
 8007ec8:	08007f99 	.word	0x08007f99
 8007ecc:	08007f59 	.word	0x08007f59
 8007ed0:	08007f85 	.word	0x08007f85
 8007ed4:	08007f73 	.word	0x08007f73
    case 0x01: // Global OUT NAK (Interrupt)
      break;

    case 0x02: // Out packet recvd
    {
      xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8007ed8:	7cbb      	ldrb	r3, [r7, #18]
 8007eda:	015b      	lsls	r3, r3, #5
 8007edc:	4a34      	ldr	r2, [pc, #208]	; (8007fb0 <handle_rxflvl_ints+0x13c>)
 8007ede:	4413      	add	r3, r2
 8007ee0:	60fb      	str	r3, [r7, #12]

      // Read packet off RxFIFO
      if (xfer->ff)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d007      	beq.n	8007efa <handle_rxflvl_ints+0x86>
      {
        // Ring buffer
        tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void *)(uintptr_t) rx_fifo, bcnt);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	8a3a      	ldrh	r2, [r7, #16]
 8007ef0:	69b9      	ldr	r1, [r7, #24]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fd faf0 	bl	80054d8 <tu_fifo_write_n_const_addr_full_words>
 8007ef8:	e00c      	b.n	8007f14 <handle_rxflvl_ints+0xa0>
      }
      else
      {
        // Linear buffer
        read_fifo_packet(rhport, xfer->buffer, bcnt);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6819      	ldr	r1, [r3, #0]
 8007efe:	8a3a      	ldrh	r2, [r7, #16]
 8007f00:	79fb      	ldrb	r3, [r7, #7]
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7ff fef6 	bl	8007cf4 <read_fifo_packet>

        // Increment pointer to xfer data
        xfer->buffer += bcnt;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	8a3b      	ldrh	r3, [r7, #16]
 8007f0e:	441a      	add	r2, r3
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	601a      	str	r2, [r3, #0]
      }

      // Truncate transfer length in case of short packet
      if(bcnt < xfer->max_size) {
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	895b      	ldrh	r3, [r3, #10]
 8007f18:	8a3a      	ldrh	r2, [r7, #16]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d23e      	bcs.n	8007f9c <handle_rxflvl_ints+0x128>
        xfer->total_len -= (out_ep[epnum].DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DOEPTSIZ_XFRSIZ_Pos;
 8007f1e:	7cbb      	ldrb	r3, [r7, #18]
 8007f20:	015b      	lsls	r3, r3, #5
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	4413      	add	r3, r2
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	f3c3 0112 	ubfx	r1, r3, #0, #19
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	891a      	ldrh	r2, [r3, #8]
 8007f30:	b28b      	uxth	r3, r1
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	811a      	strh	r2, [r3, #8]
        if(epnum == 0) {
 8007f3a:	7cbb      	ldrb	r3, [r7, #18]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d12d      	bne.n	8007f9c <handle_rxflvl_ints+0x128>
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	891a      	ldrh	r2, [r3, #8]
 8007f44:	4b1b      	ldr	r3, [pc, #108]	; (8007fb4 <handle_rxflvl_ints+0x140>)
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	811a      	strh	r2, [r3, #8]
          ep0_pending[TUSB_DIR_OUT] = 0;
 8007f50:	4b18      	ldr	r3, [pc, #96]	; (8007fb4 <handle_rxflvl_ints+0x140>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	801a      	strh	r2, [r3, #0]
        }
      }
    }
    break;
 8007f56:	e021      	b.n	8007f9c <handle_rxflvl_ints+0x128>

    case 0x03: // Out packet done (Interrupt)
      break;

    case 0x04: // Setup packet done (Interrupt)
      out_ep[epnum].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 8007f58:	7cbb      	ldrb	r3, [r7, #18]
 8007f5a:	015b      	lsls	r3, r3, #5
 8007f5c:	683a      	ldr	r2, [r7, #0]
 8007f5e:	4413      	add	r3, r2
 8007f60:	691a      	ldr	r2, [r3, #16]
 8007f62:	7cbb      	ldrb	r3, [r7, #18]
 8007f64:	015b      	lsls	r3, r3, #5
 8007f66:	6839      	ldr	r1, [r7, #0]
 8007f68:	440b      	add	r3, r1
 8007f6a:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8007f6e:	611a      	str	r2, [r3, #16]
      break;
 8007f70:	e017      	b.n	8007fa2 <handle_rxflvl_ints+0x12e>

    case 0x06: // Setup packet recvd
      // We can receive up to three setup packets in succession, but
      // only the last one is valid.
      _setup_packet[0] = (* rx_fifo);
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a10      	ldr	r2, [pc, #64]	; (8007fb8 <handle_rxflvl_ints+0x144>)
 8007f78:	6013      	str	r3, [r2, #0]
      _setup_packet[1] = (* rx_fifo);
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a0e      	ldr	r2, [pc, #56]	; (8007fb8 <handle_rxflvl_ints+0x144>)
 8007f80:	6053      	str	r3, [r2, #4]
      break;
 8007f82:	e00e      	b.n	8007fa2 <handle_rxflvl_ints+0x12e>

    default: // Invalid
      TU_BREAKPOINT();
 8007f84:	4b0d      	ldr	r3, [pc, #52]	; (8007fbc <handle_rxflvl_ints+0x148>)
 8007f86:	60bb      	str	r3, [r7, #8]
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 0301 	and.w	r3, r3, #1
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d005      	beq.n	8007fa0 <handle_rxflvl_ints+0x12c>
 8007f94:	be00      	bkpt	0x0000
      break;
 8007f96:	e003      	b.n	8007fa0 <handle_rxflvl_ints+0x12c>
      break;
 8007f98:	bf00      	nop
 8007f9a:	e002      	b.n	8007fa2 <handle_rxflvl_ints+0x12e>
    break;
 8007f9c:	bf00      	nop
 8007f9e:	e000      	b.n	8007fa2 <handle_rxflvl_ints+0x12e>
      break;
 8007fa0:	bf00      	nop
  }
}
 8007fa2:	bf00      	nop
 8007fa4:	3720      	adds	r7, #32
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	50001000 	.word	0x50001000
 8007fb0:	20006f74 	.word	0x20006f74
 8007fb4:	20006ff4 	.word	0x20006ff4
 8007fb8:	20006f6c 	.word	0x20006f6c
 8007fbc:	e000edf0 	.word	0xe000edf0

08007fc0 <handle_epout_ints>:

static void handle_epout_ints(uint8_t rhport, USB_OTG_DeviceTypeDef * dev, USB_OTG_OUTEndpointTypeDef * out_ep) {
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b094      	sub	sp, #80	; 0x50
 8007fc4:	af02      	add	r7, sp, #8
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]
 8007fcc:	73fb      	strb	r3, [r7, #15]
  // DAINT for a given EP clears when DOEPINTx is cleared.
  // OEPINT will be cleared when DAINT's out bits are cleared.
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8007fce:	2300      	movs	r3, #0
 8007fd0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007fd4:	e09e      	b.n	8008114 <handle_epout_ints+0x154>
    xfer_ctl_t * xfer = XFER_CTL_BASE(n, TUSB_DIR_OUT);
 8007fd6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007fda:	015b      	lsls	r3, r3, #5
 8007fdc:	4a52      	ldr	r2, [pc, #328]	; (8008128 <handle_epout_ints+0x168>)
 8007fde:	4413      	add	r3, r2
 8007fe0:	643b      	str	r3, [r7, #64]	; 0x40

    if(dev->DAINT & (1 << (USB_OTG_DAINT_OEPINT_Pos + n))) {
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8007fea:	3210      	adds	r2, #16
 8007fec:	2101      	movs	r1, #1
 8007fee:	fa01 f202 	lsl.w	r2, r1, r2
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f000 8088 	beq.w	800810a <handle_epout_ints+0x14a>
      // SETUP packet Setup Phase done.
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_STUP) {
 8007ffa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007ffe:	015b      	lsls	r3, r3, #5
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	4413      	add	r3, r2
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f003 0308 	and.w	r3, r3, #8
 800800a:	2b00      	cmp	r3, #0
 800800c:	d028      	beq.n	8008060 <handle_epout_ints+0xa0>
        out_ep[n].DOEPINT =  USB_OTG_DOEPINT_STUP;
 800800e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008012:	015b      	lsls	r3, r3, #5
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	4413      	add	r3, r2
 8008018:	2208      	movs	r2, #8
 800801a:	609a      	str	r2, [r3, #8]
 800801c:	7bfb      	ldrb	r3, [r7, #15]
 800801e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008022:	4b42      	ldr	r3, [pc, #264]	; (800812c <handle_epout_ints+0x16c>)
 8008024:	63bb      	str	r3, [r7, #56]	; 0x38
 8008026:	2301      	movs	r3, #1
 8008028:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
}

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 800802c:	f107 0314 	add.w	r3, r7, #20
 8008030:	2200      	movs	r2, #0
 8008032:	601a      	str	r2, [r3, #0]
 8008034:	605a      	str	r2, [r3, #4]
 8008036:	609a      	str	r2, [r3, #8]
 8008038:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800803c:	753b      	strb	r3, [r7, #20]
 800803e:	2306      	movs	r3, #6
 8008040:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, 8);
 8008042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008044:	f107 0318 	add.w	r3, r7, #24
 8008048:	6810      	ldr	r0, [r2, #0]
 800804a:	6851      	ldr	r1, [r2, #4]
 800804c:	c303      	stmia	r3!, {r0, r1}

  dcd_event_handler(&event, in_isr);
 800804e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008052:	f107 0314 	add.w	r3, r7, #20
 8008056:	4611      	mov	r1, r2
 8008058:	4618      	mov	r0, r3
 800805a:	f7fe f98d 	bl	8006378 <dcd_event_handler>
}
 800805e:	bf00      	nop
        dcd_event_setup_received(rhport, (uint8_t*) &_setup_packet[0], true);
      }

      // OUT XFER complete
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_XFRC) {
 8008060:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008064:	015b      	lsls	r3, r3, #5
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	4413      	add	r3, r2
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f003 0301 	and.w	r3, r3, #1
 8008070:	2b00      	cmp	r3, #0
 8008072:	d04a      	beq.n	800810a <handle_epout_ints+0x14a>
        out_ep[n].DOEPINT = USB_OTG_DOEPINT_XFRC;
 8008074:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008078:	015b      	lsls	r3, r3, #5
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	4413      	add	r3, r2
 800807e:	2201      	movs	r2, #1
 8008080:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if((n == 0) && ep0_pending[TUSB_DIR_OUT]) {
 8008082:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10e      	bne.n	80080a8 <handle_epout_ints+0xe8>
 800808a:	4b29      	ldr	r3, [pc, #164]	; (8008130 <handle_epout_ints+0x170>)
 800808c:	881b      	ldrh	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00a      	beq.n	80080a8 <handle_epout_ints+0xe8>
          // Schedule another packet to be received.
          edpt_schedule_packets(rhport, n, TUSB_DIR_OUT, 1, ep0_pending[TUSB_DIR_OUT]);
 8008092:	4b27      	ldr	r3, [pc, #156]	; (8008130 <handle_epout_ints+0x170>)
 8008094:	881b      	ldrh	r3, [r3, #0]
 8008096:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800809a:	7bf8      	ldrb	r0, [r7, #15]
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	2301      	movs	r3, #1
 80080a0:	2200      	movs	r2, #0
 80080a2:	f7ff f953 	bl	800734c <edpt_schedule_packets>
 80080a6:	e030      	b.n	800810a <handle_epout_ints+0x14a>
        } else {
          dcd_event_xfer_complete(rhport, n, xfer->total_len, XFER_RESULT_SUCCESS, true);
 80080a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080aa:	891b      	ldrh	r3, [r3, #8]
 80080ac:	461a      	mov	r2, r3
 80080ae:	7bfb      	ldrb	r3, [r7, #15]
 80080b0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80080b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80080b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80080bc:	633a      	str	r2, [r7, #48]	; 0x30
 80080be:	2300      	movs	r3, #0
 80080c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80080c4:	2301      	movs	r3, #1
 80080c6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 80080ca:	f107 0320 	add.w	r3, r7, #32
 80080ce:	2200      	movs	r2, #0
 80080d0:	601a      	str	r2, [r3, #0]
 80080d2:	605a      	str	r2, [r3, #4]
 80080d4:	609a      	str	r2, [r3, #8]
 80080d6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80080da:	f887 3020 	strb.w	r3, [r7, #32]
 80080de:	2307      	movs	r3, #7
 80080e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  event.xfer_complete.ep_addr = ep_addr;
 80080e4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80080e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  event.xfer_complete.len     = xferred_bytes;
 80080ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ee:	62bb      	str	r3, [r7, #40]	; 0x28
  event.xfer_complete.result  = result;
 80080f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80080f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  dcd_event_handler(&event, in_isr);
 80080f8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80080fc:	f107 0320 	add.w	r3, r7, #32
 8008100:	4611      	mov	r1, r2
 8008102:	4618      	mov	r0, r3
 8008104:	f7fe f938 	bl	8006378 <dcd_event_handler>
}
 8008108:	bf00      	nop
  for(uint8_t n = 0; n < EP_MAX; n++) {
 800810a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800810e:	3301      	adds	r3, #1
 8008110:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008114:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008118:	2b03      	cmp	r3, #3
 800811a:	f67f af5c 	bls.w	8007fd6 <handle_epout_ints+0x16>
        }
      }
    }
  }
}
 800811e:	bf00      	nop
 8008120:	bf00      	nop
 8008122:	3748      	adds	r7, #72	; 0x48
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	20006f74 	.word	0x20006f74
 800812c:	20006f6c 	.word	0x20006f6c
 8008130:	20006ff4 	.word	0x20006ff4

08008134 <handle_epin_ints>:

static void handle_epin_ints(uint8_t rhport, USB_OTG_DeviceTypeDef * dev, USB_OTG_INEndpointTypeDef * in_ep) {
 8008134:	b580      	push	{r7, lr}
 8008136:	b092      	sub	sp, #72	; 0x48
 8008138:	af02      	add	r7, sp, #8
 800813a:	4603      	mov	r3, r0
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
 8008140:	73fb      	strb	r3, [r7, #15]
  // DAINT for a given EP clears when DIEPINTx is cleared.
  // IEPINT will be cleared when DAINT's out bits are cleared.
  for ( uint8_t n = 0; n < EP_MAX; n++ )
 8008142:	2300      	movs	r3, #0
 8008144:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008148:	e0ec      	b.n	8008324 <handle_epin_ints+0x1f0>
  {
    xfer_ctl_t *xfer = XFER_CTL_BASE(n, TUSB_DIR_IN);
 800814a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800814e:	015b      	lsls	r3, r3, #5
 8008150:	3310      	adds	r3, #16
 8008152:	4a79      	ldr	r2, [pc, #484]	; (8008338 <handle_epin_ints+0x204>)
 8008154:	4413      	add	r3, r2
 8008156:	63bb      	str	r3, [r7, #56]	; 0x38

    if ( dev->DAINT & (1 << (USB_OTG_DAINT_IEPINT_Pos + n)) )
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008160:	2101      	movs	r1, #1
 8008162:	fa01 f202 	lsl.w	r2, r1, r2
 8008166:	4013      	ands	r3, r2
 8008168:	2b00      	cmp	r3, #0
 800816a:	f000 80d6 	beq.w	800831a <handle_epin_ints+0x1e6>
    {
      // IN XFER complete (entire xfer).
      if ( in_ep[n].DIEPINT & USB_OTG_DIEPINT_XFRC )
 800816e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008172:	015b      	lsls	r3, r3, #5
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	4413      	add	r3, r2
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	2b00      	cmp	r3, #0
 8008180:	d04a      	beq.n	8008218 <handle_epin_ints+0xe4>
      {
        in_ep[n].DIEPINT = USB_OTG_DIEPINT_XFRC;
 8008182:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008186:	015b      	lsls	r3, r3, #5
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	4413      	add	r3, r2
 800818c:	2201      	movs	r2, #1
 800818e:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if((n == 0) && ep0_pending[TUSB_DIR_IN]) {
 8008190:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10e      	bne.n	80081b6 <handle_epin_ints+0x82>
 8008198:	4b68      	ldr	r3, [pc, #416]	; (800833c <handle_epin_ints+0x208>)
 800819a:	885b      	ldrh	r3, [r3, #2]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00a      	beq.n	80081b6 <handle_epin_ints+0x82>
          // Schedule another packet to be transmitted.
          edpt_schedule_packets(rhport, n, TUSB_DIR_IN, 1, ep0_pending[TUSB_DIR_IN]);
 80081a0:	4b66      	ldr	r3, [pc, #408]	; (800833c <handle_epin_ints+0x208>)
 80081a2:	885b      	ldrh	r3, [r3, #2]
 80081a4:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80081a8:	7bf8      	ldrb	r0, [r7, #15]
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	2301      	movs	r3, #1
 80081ae:	2201      	movs	r2, #1
 80081b0:	f7ff f8cc 	bl	800734c <edpt_schedule_packets>
 80081b4:	e030      	b.n	8008218 <handle_epin_ints+0xe4>
        } else {
          dcd_event_xfer_complete(rhport, n | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 80081b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80081ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80081be:	b2d9      	uxtb	r1, r3
 80081c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c2:	891b      	ldrh	r3, [r3, #8]
 80081c4:	461a      	mov	r2, r3
 80081c6:	7bfb      	ldrb	r3, [r7, #15]
 80081c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081cc:	460b      	mov	r3, r1
 80081ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80081d2:	627a      	str	r2, [r7, #36]	; 0x24
 80081d4:	2300      	movs	r3, #0
 80081d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081da:	2301      	movs	r3, #1
 80081dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 80081e0:	f107 0310 	add.w	r3, r7, #16
 80081e4:	2200      	movs	r2, #0
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	605a      	str	r2, [r3, #4]
 80081ea:	609a      	str	r2, [r3, #8]
 80081ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80081f0:	743b      	strb	r3, [r7, #16]
 80081f2:	2307      	movs	r3, #7
 80081f4:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 80081f6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80081fa:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fe:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 8008200:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008204:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8008206:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800820a:	f107 0310 	add.w	r3, r7, #16
 800820e:	4611      	mov	r1, r2
 8008210:	4618      	mov	r0, r3
 8008212:	f7fe f8b1 	bl	8006378 <dcd_event_handler>
}
 8008216:	bf00      	nop
        }
      }

      // XFER FIFO empty
      if ( (in_ep[n].DIEPINT & USB_OTG_DIEPINT_TXFE) && (dev->DIEPEMPMSK & (1 << n)) )
 8008218:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800821c:	015b      	lsls	r3, r3, #5
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	4413      	add	r3, r2
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008228:	2b00      	cmp	r3, #0
 800822a:	d076      	beq.n	800831a <handle_epin_ints+0x1e6>
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008230:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008234:	2101      	movs	r1, #1
 8008236:	fa01 f202 	lsl.w	r2, r1, r2
 800823a:	4013      	ands	r3, r2
 800823c:	2b00      	cmp	r3, #0
 800823e:	d06c      	beq.n	800831a <handle_epin_ints+0x1e6>
        // DIEPINT's TXFE bit is read-only, software cannot clear it.
        // It will only be cleared by hardware when written bytes is more than
        // - 64 bytes or
        // - Half of TX FIFO size (configured by DIEPTXF)

        uint16_t remaining_packets = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_PKTCNT_Msk) >> USB_OTG_DIEPTSIZ_PKTCNT_Pos;
 8008240:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008244:	015b      	lsls	r3, r3, #5
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	4413      	add	r3, r2
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	0cdb      	lsrs	r3, r3, #19
 800824e:	b29b      	uxth	r3, r3
 8008250:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008254:	86fb      	strh	r3, [r7, #54]	; 0x36

        // Process every single packet (only whole packets can be written to fifo)
        for(uint16_t i = 0; i < remaining_packets; i++)
 8008256:	2300      	movs	r3, #0
 8008258:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800825a:	e043      	b.n	80082e4 <handle_epin_ints+0x1b0>
        {
          uint16_t const remaining_bytes = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos;
 800825c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008260:	015b      	lsls	r3, r3, #5
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	4413      	add	r3, r2
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	86bb      	strh	r3, [r7, #52]	; 0x34

          // Packet can not be larger than ep max size
          uint16_t const packet_size = tu_min16(remaining_bytes, xfer->max_size);
 800826a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826c:	895a      	ldrh	r2, [r3, #10]
 800826e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008270:	843b      	strh	r3, [r7, #32]
 8008272:	4613      	mov	r3, r2
 8008274:	83fb      	strh	r3, [r7, #30]
 8008276:	8c3a      	ldrh	r2, [r7, #32]
 8008278:	8bfb      	ldrh	r3, [r7, #30]
 800827a:	4293      	cmp	r3, r2
 800827c:	bf28      	it	cs
 800827e:	4613      	movcs	r3, r2
 8008280:	b29b      	uxth	r3, r3
 8008282:	867b      	strh	r3, [r7, #50]	; 0x32

          // It's only possible to write full packets into FIFO. Therefore DTXFSTS register of current
          // EP has to be checked if the buffer can take another WHOLE packet
          if(packet_size > ((in_ep[n].DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 8008284:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008286:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800828a:	015b      	lsls	r3, r3, #5
 800828c:	6879      	ldr	r1, [r7, #4]
 800828e:	440b      	add	r3, r1
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	0099      	lsls	r1, r3, #2
 8008294:	4b2a      	ldr	r3, [pc, #168]	; (8008340 <handle_epin_ints+0x20c>)
 8008296:	400b      	ands	r3, r1
 8008298:	429a      	cmp	r2, r3
 800829a:	d828      	bhi.n	80082ee <handle_epin_ints+0x1ba>

          // Push packet to Tx-FIFO
          if (xfer->ff)
 800829c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00e      	beq.n	80082c2 <handle_epin_ints+0x18e>
          {
            usb_fifo_t tx_fifo = FIFO_BASE(rhport, n);
 80082a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80082a8:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 80082ac:	3301      	adds	r3, #1
 80082ae:	031b      	lsls	r3, r3, #12
 80082b0:	62fb      	str	r3, [r7, #44]	; 0x2c
            tu_fifo_read_n_const_addr_full_words(xfer->ff, (void *)(uintptr_t) tx_fifo, packet_size);
 80082b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80082b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fd f8ad 	bl	800541a <tu_fifo_read_n_const_addr_full_words>
 80082c0:	e00d      	b.n	80082de <handle_epin_ints+0x1aa>
          }
          else
          {
            write_fifo_packet(rhport, n, xfer->buffer, packet_size);
 80082c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80082c8:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80082cc:	7bf8      	ldrb	r0, [r7, #15]
 80082ce:	f7ff fd6d 	bl	8007dac <write_fifo_packet>

            // Increment pointer to xfer data
            xfer->buffer += packet_size;
 80082d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80082d8:	441a      	add	r2, r3
 80082da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082dc:	601a      	str	r2, [r3, #0]
        for(uint16_t i = 0; i < remaining_packets; i++)
 80082de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80082e0:	3301      	adds	r3, #1
 80082e2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80082e4:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80082e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d3b7      	bcc.n	800825c <handle_epin_ints+0x128>
 80082ec:	e000      	b.n	80082f0 <handle_epin_ints+0x1bc>
          if(packet_size > ((in_ep[n].DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 80082ee:	bf00      	nop
          }
        }

        // Turn off TXFE if all bytes are written.
        if (((in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos) == 0)
 80082f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80082f4:	015b      	lsls	r3, r3, #5
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	4413      	add	r3, r2
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10a      	bne.n	800831a <handle_epin_ints+0x1e6>
        {
          dev->DIEPEMPMSK &= ~(1 << n);
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008308:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800830c:	2101      	movs	r1, #1
 800830e:	fa01 f202 	lsl.w	r2, r1, r2
 8008312:	43d2      	mvns	r2, r2
 8008314:	401a      	ands	r2, r3
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	635a      	str	r2, [r3, #52]	; 0x34
  for ( uint8_t n = 0; n < EP_MAX; n++ )
 800831a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800831e:	3301      	adds	r3, #1
 8008320:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008324:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008328:	2b03      	cmp	r3, #3
 800832a:	f67f af0e 	bls.w	800814a <handle_epin_ints+0x16>
        }
      }
    }
  }
}
 800832e:	bf00      	nop
 8008330:	bf00      	nop
 8008332:	3740      	adds	r7, #64	; 0x40
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	20006f74 	.word	0x20006f74
 800833c:	20006ff4 	.word	0x20006ff4
 8008340:	0003fffc 	.word	0x0003fffc

08008344 <dcd_int_handler>:

void dcd_int_handler(uint8_t rhport)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b09c      	sub	sp, #112	; 0x70
 8008348:	af00      	add	r7, sp, #0
 800834a:	4603      	mov	r3, r0
 800834c:	71fb      	strb	r3, [r7, #7]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 800834e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008352:	66fb      	str	r3, [r7, #108]	; 0x6c
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8008354:	4b9e      	ldr	r3, [pc, #632]	; (80085d0 <dcd_int_handler+0x28c>)
 8008356:	66bb      	str	r3, [r7, #104]	; 0x68
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8008358:	4b9e      	ldr	r3, [pc, #632]	; (80085d4 <dcd_int_handler+0x290>)
 800835a:	667b      	str	r3, [r7, #100]	; 0x64
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 800835c:	4b9e      	ldr	r3, [pc, #632]	; (80085d8 <dcd_int_handler+0x294>)
 800835e:	663b      	str	r3, [r7, #96]	; 0x60

  uint32_t const int_status = usb_otg->GINTSTS & usb_otg->GINTMSK;
 8008360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008362:	695a      	ldr	r2, [r3, #20]
 8008364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	4013      	ands	r3, r2
 800836a:	65fb      	str	r3, [r7, #92]	; 0x5c

  if(int_status & USB_OTG_GINTSTS_USBRST)
 800836c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800836e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d007      	beq.n	8008386 <dcd_int_handler+0x42>
  {
    // USBRST is start of reset.
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBRST;
 8008376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008378:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800837c:	615a      	str	r2, [r3, #20]
    bus_reset(rhport);
 800837e:	79fb      	ldrb	r3, [r7, #7]
 8008380:	4618      	mov	r0, r3
 8008382:	f7fe fea3 	bl	80070cc <bus_reset>
  }

  if(int_status & USB_OTG_GINTSTS_ENUMDNE)
 8008386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800838c:	2b00      	cmp	r3, #0
 800838e:	d031      	beq.n	80083f4 <dcd_int_handler+0xb0>
  {
    // ENUMDNE is the end of reset where speed of the link is detected

    usb_otg->GINTSTS = USB_OTG_GINTSTS_ENUMDNE;
 8008390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008392:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008396:	615a      	str	r2, [r3, #20]

    tusb_speed_t const speed = get_speed(rhport);
 8008398:	79fb      	ldrb	r3, [r7, #7]
 800839a:	4618      	mov	r0, r3
 800839c:	f7fe ff8e 	bl	80072bc <get_speed>
 80083a0:	4603      	mov	r3, r0
 80083a2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

    set_turnaround(usb_otg, speed);
 80083a6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80083aa:	4619      	mov	r1, r3
 80083ac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80083ae:	f7fe ff03 	bl	80071b8 <set_turnaround>
 80083b2:	79fb      	ldrb	r3, [r7, #7]
 80083b4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80083b8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80083bc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 80083c0:	2301      	movs	r3, #1
 80083c2:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 80083c6:	f107 0314 	add.w	r3, r7, #20
 80083ca:	2200      	movs	r2, #0
 80083cc:	601a      	str	r2, [r3, #0]
 80083ce:	605a      	str	r2, [r3, #4]
 80083d0:	609a      	str	r2, [r3, #8]
 80083d2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80083d6:	753b      	strb	r3, [r7, #20]
 80083d8:	2301      	movs	r3, #1
 80083da:	757b      	strb	r3, [r7, #21]
  event.bus_reset.speed = speed;
 80083dc:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80083e0:	763b      	strb	r3, [r7, #24]
  dcd_event_handler(&event, in_isr);
 80083e2:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 80083e6:	f107 0314 	add.w	r3, r7, #20
 80083ea:	4611      	mov	r1, r2
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7fd ffc3 	bl	8006378 <dcd_event_handler>
}
 80083f2:	bf00      	nop
    dcd_event_bus_reset(rhport, speed, true);
  }

  if(int_status & USB_OTG_GINTSTS_USBSUSP)
 80083f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d023      	beq.n	8008446 <dcd_int_handler+0x102>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBSUSP;
 80083fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008404:	615a      	str	r2, [r3, #20]
 8008406:	79fb      	ldrb	r3, [r7, #7]
 8008408:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800840c:	2304      	movs	r3, #4
 800840e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008412:	2301      	movs	r3, #1
 8008414:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8008418:	f107 0320 	add.w	r3, r7, #32
 800841c:	2200      	movs	r2, #0
 800841e:	601a      	str	r2, [r3, #0]
 8008420:	605a      	str	r2, [r3, #4]
 8008422:	609a      	str	r2, [r3, #8]
 8008424:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8008428:	f887 3020 	strb.w	r3, [r7, #32]
 800842c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008430:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  dcd_event_handler(&event, in_isr);
 8008434:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8008438:	f107 0320 	add.w	r3, r7, #32
 800843c:	4611      	mov	r1, r2
 800843e:	4618      	mov	r0, r3
 8008440:	f7fd ff9a 	bl	8006378 <dcd_event_handler>
}
 8008444:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if(int_status & USB_OTG_GINTSTS_WKUINT)
 8008446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008448:	2b00      	cmp	r3, #0
 800844a:	da23      	bge.n	8008494 <dcd_int_handler+0x150>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_WKUINT;
 800844c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800844e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008452:	615a      	str	r2, [r3, #20]
 8008454:	79fb      	ldrb	r3, [r7, #7]
 8008456:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800845a:	2305      	movs	r3, #5
 800845c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8008460:	2301      	movs	r3, #1
 8008462:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8008466:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800846a:	2200      	movs	r2, #0
 800846c:	601a      	str	r2, [r3, #0]
 800846e:	605a      	str	r2, [r3, #4]
 8008470:	609a      	str	r2, [r3, #8]
 8008472:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008476:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800847a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800847e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dcd_event_handler(&event, in_isr);
 8008482:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8008486:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800848a:	4611      	mov	r1, r2
 800848c:	4618      	mov	r0, r3
 800848e:	f7fd ff73 	bl	8006378 <dcd_event_handler>
}
 8008492:	bf00      	nop
  }

  // TODO check USB_OTG_GINTSTS_DISCINT for disconnect detection
  // if(int_status & USB_OTG_GINTSTS_DISCINT)

  if(int_status & USB_OTG_GINTSTS_OTGINT)
 8008494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008496:	f003 0304 	and.w	r3, r3, #4
 800849a:	2b00      	cmp	r3, #0
 800849c:	d028      	beq.n	80084f0 <dcd_int_handler+0x1ac>
  {
    // OTG INT bit is read-only
    uint32_t const otg_int = usb_otg->GOTGINT;
 800849e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	657b      	str	r3, [r7, #84]	; 0x54

    if (otg_int & USB_OTG_GOTGINT_SEDET)
 80084a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084a6:	f003 0304 	and.w	r3, r3, #4
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d01d      	beq.n	80084ea <dcd_int_handler+0x1a6>
 80084ae:	79fb      	ldrb	r3, [r7, #7]
 80084b0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80084b4:	2302      	movs	r3, #2
 80084b6:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80084ba:	2301      	movs	r3, #1
 80084bc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 80084c0:	f107 0308 	add.w	r3, r7, #8
 80084c4:	2200      	movs	r2, #0
 80084c6:	601a      	str	r2, [r3, #0]
 80084c8:	605a      	str	r2, [r3, #4]
 80084ca:	609a      	str	r2, [r3, #8]
 80084cc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80084d0:	723b      	strb	r3, [r7, #8]
 80084d2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80084d6:	727b      	strb	r3, [r7, #9]
  dcd_event_handler(&event, in_isr);
 80084d8:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 80084dc:	f107 0308 	add.w	r3, r7, #8
 80084e0:	4611      	mov	r1, r2
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7fd ff48 	bl	8006378 <dcd_event_handler>
}
 80084e8:	bf00      	nop
    {
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    usb_otg->GOTGINT = otg_int;
 80084ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084ee:	605a      	str	r2, [r3, #4]
  }

  if(int_status & USB_OTG_GINTSTS_SOF)
 80084f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084f2:	f003 0308 	and.w	r3, r3, #8
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d028      	beq.n	800854c <dcd_int_handler+0x208>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_SOF;
 80084fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084fc:	2208      	movs	r2, #8
 80084fe:	615a      	str	r2, [r3, #20]

    // Disable SOF interrupt since currently only used for remote wakeup detection
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_SOFM;
 8008500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008502:	699b      	ldr	r3, [r3, #24]
 8008504:	f023 0208 	bic.w	r2, r3, #8
 8008508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800850a:	619a      	str	r2, [r3, #24]
 800850c:	79fb      	ldrb	r3, [r7, #7]
 800850e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008512:	2303      	movs	r3, #3
 8008514:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8008518:	2301      	movs	r3, #1
 800851a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 800851e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008522:	2200      	movs	r2, #0
 8008524:	601a      	str	r2, [r3, #0]
 8008526:	605a      	str	r2, [r3, #4]
 8008528:	609a      	str	r2, [r3, #8]
 800852a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800852e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8008532:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008536:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  dcd_event_handler(&event, in_isr);
 800853a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800853e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008542:	4611      	mov	r1, r2
 8008544:	4618      	mov	r0, r3
 8008546:	f7fd ff17 	bl	8006378 <dcd_event_handler>
}
 800854a:	bf00      	nop

    dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
  }

  // RxFIFO non-empty interrupt handling.
  if(int_status & USB_OTG_GINTSTS_RXFLVL)
 800854c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800854e:	f003 0310 	and.w	r3, r3, #16
 8008552:	2b00      	cmp	r3, #0
 8008554:	d021      	beq.n	800859a <dcd_int_handler+0x256>
  {
    // RXFLVL bit is read-only

    // Mask out RXFLVL while reading data from FIFO
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_RXFLVLM;
 8008556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	f023 0210 	bic.w	r2, r3, #16
 800855e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008560:	619a      	str	r2, [r3, #24]

    // Loop until all available packets were handled
    do
    {
      handle_rxflvl_ints(rhport, out_ep);
 8008562:	79fb      	ldrb	r3, [r7, #7]
 8008564:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008566:	4618      	mov	r0, r3
 8008568:	f7ff fc84 	bl	8007e74 <handle_rxflvl_ints>
    } while(usb_otg->GINTSTS & USB_OTG_GINTSTS_RXFLVL);
 800856c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800856e:	695b      	ldr	r3, [r3, #20]
 8008570:	f003 0310 	and.w	r3, r3, #16
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1f4      	bne.n	8008562 <dcd_int_handler+0x21e>

    // Manage RX FIFO size
    if (_out_ep_closed)
 8008578:	4b18      	ldr	r3, [pc, #96]	; (80085dc <dcd_int_handler+0x298>)
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d006      	beq.n	800858e <dcd_int_handler+0x24a>
    {
      update_grxfsiz(rhport);
 8008580:	79fb      	ldrb	r3, [r7, #7]
 8008582:	4618      	mov	r0, r3
 8008584:	f7fe fd70 	bl	8007068 <update_grxfsiz>

      // Disable flag
      _out_ep_closed = false;
 8008588:	4b14      	ldr	r3, [pc, #80]	; (80085dc <dcd_int_handler+0x298>)
 800858a:	2200      	movs	r2, #0
 800858c:	701a      	strb	r2, [r3, #0]
    }

    usb_otg->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800858e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	f043 0210 	orr.w	r2, r3, #16
 8008596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008598:	619a      	str	r2, [r3, #24]
  }

  // OUT endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_OEPINT)
 800859a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800859c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d005      	beq.n	80085b0 <dcd_int_handler+0x26c>
  {
    // OEPINT is read-only
    handle_epout_ints(rhport, dev, out_ep);
 80085a4:	79fb      	ldrb	r3, [r7, #7]
 80085a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80085a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7ff fd08 	bl	8007fc0 <handle_epout_ints>
  }

  // IN endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_IEPINT)
 80085b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d005      	beq.n	80085c6 <dcd_int_handler+0x282>
  {
    // IEPINT bit read-only
    handle_epin_ints(rhport, dev, in_ep);
 80085ba:	79fb      	ldrb	r3, [r7, #7]
 80085bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7ff fdb7 	bl	8008134 <handle_epin_ints>
  //  // Check for Incomplete isochronous IN transfer
  //  if(int_status & USB_OTG_GINTSTS_IISOIXFR) {
  //    printf("      IISOIXFR!\r\n");
  ////    TU_LOG2("      IISOIXFR!\r\n");
  //  }
}
 80085c6:	bf00      	nop
 80085c8:	3770      	adds	r7, #112	; 0x70
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	50000800 	.word	0x50000800
 80085d4:	50000b00 	.word	0x50000b00
 80085d8:	50000900 	.word	0x50000900
 80085dc:	20006ffa 	.word	0x20006ffa

080085e0 <tusb_init>:
#if CFG_TUD_ENABLED
#include "device/usbd_pvt.h"
#endif

bool tusb_init(void)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
#if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
  // init device stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) );
 80085e6:	2000      	movs	r0, #0
 80085e8:	f7fd f824 	bl	8005634 <tud_init>
 80085ec:	4603      	mov	r3, r0
 80085ee:	f083 0301 	eor.w	r3, r3, #1
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00a      	beq.n	800860e <tusb_init+0x2e>
 80085f8:	4b07      	ldr	r3, [pc, #28]	; (8008618 <tusb_init+0x38>)
 80085fa:	607b      	str	r3, [r7, #4]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 0301 	and.w	r3, r3, #1
 8008604:	2b00      	cmp	r3, #0
 8008606:	d000      	beq.n	800860a <tusb_init+0x2a>
 8008608:	be00      	bkpt	0x0000
 800860a:	2300      	movs	r3, #0
 800860c:	e000      	b.n	8008610 <tusb_init+0x30>
#if CFG_TUH_ENABLED && defined(TUH_OPT_RHPORT)
  // init host stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) );
#endif

  return true;
 800860e:	2301      	movs	r3, #1
}
 8008610:	4618      	mov	r0, r3
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	e000edf0 	.word	0xe000edf0

0800861c <tusb_inited>:

bool tusb_inited(void)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
  bool ret = false;
 8008622:	2300      	movs	r3, #0
 8008624:	71fb      	strb	r3, [r7, #7]

#if CFG_TUD_ENABLED
  ret = ret || tud_inited();
 8008626:	79fb      	ldrb	r3, [r7, #7]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d104      	bne.n	8008636 <tusb_inited+0x1a>
 800862c:	f7fc fff2 	bl	8005614 <tud_inited>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <tusb_inited+0x1e>
 8008636:	2301      	movs	r3, #1
 8008638:	e000      	b.n	800863c <tusb_inited+0x20>
 800863a:	2300      	movs	r3, #0
 800863c:	71fb      	strb	r3, [r7, #7]
 800863e:	79fb      	ldrb	r3, [r7, #7]
 8008640:	f003 0301 	and.w	r3, r3, #1
 8008644:	71fb      	strb	r3, [r7, #7]

#if CFG_TUH_ENABLED
  ret = ret || tuh_inited();
#endif

  return ret;
 8008646:	79fb      	ldrb	r3, [r7, #7]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3708      	adds	r7, #8
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <tu_edpt_claim>:
//--------------------------------------------------------------------+
// Internal Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
  osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
#endif

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b00      	cmp	r3, #0
 8008666:	d108      	bne.n	800867a <tu_edpt_claim+0x2a>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b00      	cmp	r3, #0
 8008674:	d101      	bne.n	800867a <tu_edpt_claim+0x2a>
 8008676:	2301      	movs	r3, #1
 8008678:	e000      	b.n	800867c <tu_edpt_claim+0x2c>
 800867a:	2300      	movs	r3, #0
 800867c:	73fb      	strb	r3, [r7, #15]
 800867e:	7bfb      	ldrb	r3, [r7, #15]
 8008680:	f003 0301 	and.w	r3, r3, #1
 8008684:	73fb      	strb	r3, [r7, #15]
  if (available)
 8008686:	7bfb      	ldrb	r3, [r7, #15]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d004      	beq.n	8008696 <tu_edpt_claim+0x46>
  {
    ep_state->claimed = 1;
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	7813      	ldrb	r3, [r2, #0]
 8008690:	f043 0304 	orr.w	r3, r3, #4
 8008694:	7013      	strb	r3, [r2, #0]

#if TUSB_OPT_MUTEX
  osal_mutex_unlock(mutex);
#endif

  return available;
 8008696:	7bfb      	ldrb	r3, [r7, #15]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3714      	adds	r7, #20
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
#if TUSB_OPT_MUTEX
  osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
#endif

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d108      	bne.n	80086ce <tu_edpt_release+0x2a>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d101      	bne.n	80086ce <tu_edpt_release+0x2a>
 80086ca:	2301      	movs	r3, #1
 80086cc:	e000      	b.n	80086d0 <tu_edpt_release+0x2c>
 80086ce:	2300      	movs	r3, #0
 80086d0:	73fb      	strb	r3, [r7, #15]
 80086d2:	7bfb      	ldrb	r3, [r7, #15]
 80086d4:	f003 0301 	and.w	r3, r3, #1
 80086d8:	73fb      	strb	r3, [r7, #15]
  if (ret)
 80086da:	7bfb      	ldrb	r3, [r7, #15]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d004      	beq.n	80086ea <tu_edpt_release+0x46>
  {
    ep_state->claimed = 0;
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	7813      	ldrb	r3, [r2, #0]
 80086e4:	f36f 0382 	bfc	r3, #2, #1
 80086e8:	7013      	strb	r3, [r2, #0]

#if TUSB_OPT_MUTEX
  osal_mutex_unlock(mutex);
#endif

  return ret;
 80086ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3714      	adds	r7, #20
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b08b      	sub	sp, #44	; 0x2c
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	460b      	mov	r3, r1
 8008702:	70fb      	strb	r3, [r7, #3]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	60fb      	str	r3, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	889b      	ldrh	r3, [r3, #4]
 800870c:	b29b      	uxth	r3, r3
 800870e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008712:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 8008714:	84fb      	strh	r3, [r7, #38]	; 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	78db      	ldrb	r3, [r3, #3]
 800871a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b03      	cmp	r3, #3
 8008722:	d03e      	beq.n	80087a2 <tu_edpt_validate+0xaa>
 8008724:	2b03      	cmp	r3, #3
 8008726:	dc53      	bgt.n	80087d0 <tu_edpt_validate+0xd8>
 8008728:	2b01      	cmp	r3, #1
 800872a:	d002      	beq.n	8008732 <tu_edpt_validate+0x3a>
 800872c:	2b02      	cmp	r3, #2
 800872e:	d018      	beq.n	8008762 <tu_edpt_validate+0x6a>
 8008730:	e04e      	b.n	80087d0 <tu_edpt_validate+0xd8>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8008732:	78fb      	ldrb	r3, [r7, #3]
 8008734:	2b02      	cmp	r3, #2
 8008736:	d102      	bne.n	800873e <tu_edpt_validate+0x46>
 8008738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800873c:	e001      	b.n	8008742 <tu_edpt_validate+0x4a>
 800873e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8008742:	82fb      	strh	r3, [r7, #22]
      TU_ASSERT(max_packet_size <= spec_size);
 8008744:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008746:	8afb      	ldrh	r3, [r7, #22]
 8008748:	429a      	cmp	r2, r3
 800874a:	d943      	bls.n	80087d4 <tu_edpt_validate+0xdc>
 800874c:	4b27      	ldr	r3, [pc, #156]	; (80087ec <tu_edpt_validate+0xf4>)
 800874e:	613b      	str	r3, [r7, #16]
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0301 	and.w	r3, r3, #1
 8008758:	2b00      	cmp	r3, #0
 800875a:	d000      	beq.n	800875e <tu_edpt_validate+0x66>
 800875c:	be00      	bkpt	0x0000
 800875e:	2300      	movs	r3, #0
 8008760:	e03e      	b.n	80087e0 <tu_edpt_validate+0xe8>
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 8008762:	78fb      	ldrb	r3, [r7, #3]
 8008764:	2b02      	cmp	r3, #2
 8008766:	d10e      	bne.n	8008786 <tu_edpt_validate+0x8e>
      {
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 8008768:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800876a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800876e:	d033      	beq.n	80087d8 <tu_edpt_validate+0xe0>
 8008770:	4b1e      	ldr	r3, [pc, #120]	; (80087ec <tu_edpt_validate+0xf4>)
 8008772:	61bb      	str	r3, [r7, #24]
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 0301 	and.w	r3, r3, #1
 800877c:	2b00      	cmp	r3, #0
 800877e:	d000      	beq.n	8008782 <tu_edpt_validate+0x8a>
 8008780:	be00      	bkpt	0x0000
 8008782:	2300      	movs	r3, #0
 8008784:	e02c      	b.n	80087e0 <tu_edpt_validate+0xe8>
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 8008786:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008788:	2b40      	cmp	r3, #64	; 0x40
 800878a:	d925      	bls.n	80087d8 <tu_edpt_validate+0xe0>
 800878c:	4b17      	ldr	r3, [pc, #92]	; (80087ec <tu_edpt_validate+0xf4>)
 800878e:	61fb      	str	r3, [r7, #28]
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 0301 	and.w	r3, r3, #1
 8008798:	2b00      	cmp	r3, #0
 800879a:	d000      	beq.n	800879e <tu_edpt_validate+0xa6>
 800879c:	be00      	bkpt	0x0000
 800879e:	2300      	movs	r3, #0
 80087a0:	e01e      	b.n	80087e0 <tu_edpt_validate+0xe8>
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 80087a2:	78fb      	ldrb	r3, [r7, #3]
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	d102      	bne.n	80087ae <tu_edpt_validate+0xb6>
 80087a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087ac:	e000      	b.n	80087b0 <tu_edpt_validate+0xb8>
 80087ae:	2340      	movs	r3, #64	; 0x40
 80087b0:	84bb      	strh	r3, [r7, #36]	; 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 80087b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80087b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d910      	bls.n	80087dc <tu_edpt_validate+0xe4>
 80087ba:	4b0c      	ldr	r3, [pc, #48]	; (80087ec <tu_edpt_validate+0xf4>)
 80087bc:	623b      	str	r3, [r7, #32]
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 0301 	and.w	r3, r3, #1
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d000      	beq.n	80087cc <tu_edpt_validate+0xd4>
 80087ca:	be00      	bkpt	0x0000
 80087cc:	2300      	movs	r3, #0
 80087ce:	e007      	b.n	80087e0 <tu_edpt_validate+0xe8>
    }
    break;

    default: return false;
 80087d0:	2300      	movs	r3, #0
 80087d2:	e005      	b.n	80087e0 <tu_edpt_validate+0xe8>
    break;
 80087d4:	bf00      	nop
 80087d6:	e002      	b.n	80087de <tu_edpt_validate+0xe6>
    break;
 80087d8:	bf00      	nop
 80087da:	e000      	b.n	80087de <tu_edpt_validate+0xe6>
    break;
 80087dc:	bf00      	nop
  }

  return true;
 80087de:	2301      	movs	r3, #1
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	372c      	adds	r7, #44	; 0x2c
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	e000edf0 	.word	0xe000edf0

080087f0 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b08d      	sub	sp, #52	; 0x34
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	4611      	mov	r1, r2
 80087fc:	461a      	mov	r2, r3
 80087fe:	460b      	mov	r3, r1
 8008800:	80fb      	strh	r3, [r7, #6]
 8008802:	4613      	mov	r3, r2
 8008804:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800880a:	88fb      	ldrh	r3, [r7, #6]
 800880c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800880e:	4413      	add	r3, r2
 8008810:	62bb      	str	r3, [r7, #40]	; 0x28

  while( p_desc < desc_end )
 8008812:	e027      	b.n	8008864 <tu_edpt_bind_driver+0x74>
 8008814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008816:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8008818:	6a3b      	ldr	r3, [r7, #32]
 800881a:	3301      	adds	r3, #1
 800881c:	781b      	ldrb	r3, [r3, #0]
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 800881e:	2b05      	cmp	r3, #5
 8008820:	d116      	bne.n	8008850 <tu_edpt_bind_driver+0x60>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 8008822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008824:	789b      	ldrb	r3, [r3, #2]
 8008826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800882a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800882e:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008830:	7fbb      	ldrb	r3, [r7, #30]
 8008832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008836:	b2db      	uxtb	r3, r3

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	4413      	add	r3, r2
 800883e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008842:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008844:	7ffa      	ldrb	r2, [r7, #31]
 8008846:	09d2      	lsrs	r2, r2, #7
 8008848:	b2d2      	uxtb	r2, r2
 800884a:	4611      	mov	r1, r2
 800884c:	797a      	ldrb	r2, [r7, #5]
 800884e:	545a      	strb	r2, [r3, r1]
 8008850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008852:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	461a      	mov	r2, r3
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 8008862:	62fb      	str	r3, [r7, #44]	; 0x2c
  while( p_desc < desc_end )
 8008864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008868:	429a      	cmp	r2, r3
 800886a:	d3d3      	bcc.n	8008814 <tu_edpt_bind_driver+0x24>
  }
}
 800886c:	bf00      	nop
 800886e:	bf00      	nop
 8008870:	3734      	adds	r7, #52	; 0x34
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
	...

0800887c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008880:	4b0e      	ldr	r3, [pc, #56]	; (80088bc <HAL_Init+0x40>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a0d      	ldr	r2, [pc, #52]	; (80088bc <HAL_Init+0x40>)
 8008886:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800888a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800888c:	4b0b      	ldr	r3, [pc, #44]	; (80088bc <HAL_Init+0x40>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a0a      	ldr	r2, [pc, #40]	; (80088bc <HAL_Init+0x40>)
 8008892:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008896:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008898:	4b08      	ldr	r3, [pc, #32]	; (80088bc <HAL_Init+0x40>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a07      	ldr	r2, [pc, #28]	; (80088bc <HAL_Init+0x40>)
 800889e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80088a4:	2003      	movs	r0, #3
 80088a6:	f000 f94f 	bl	8008b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80088aa:	200f      	movs	r0, #15
 80088ac:	f000 f808 	bl	80088c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80088b0:	f7fa fcac 	bl	800320c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	40023c00 	.word	0x40023c00

080088c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80088c8:	4b12      	ldr	r3, [pc, #72]	; (8008914 <HAL_InitTick+0x54>)
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	4b12      	ldr	r3, [pc, #72]	; (8008918 <HAL_InitTick+0x58>)
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	4619      	mov	r1, r3
 80088d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80088d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80088da:	fbb2 f3f3 	udiv	r3, r2, r3
 80088de:	4618      	mov	r0, r3
 80088e0:	f000 f967 	bl	8008bb2 <HAL_SYSTICK_Config>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d001      	beq.n	80088ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e00e      	b.n	800890c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2b0f      	cmp	r3, #15
 80088f2:	d80a      	bhi.n	800890a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80088f4:	2200      	movs	r2, #0
 80088f6:	6879      	ldr	r1, [r7, #4]
 80088f8:	f04f 30ff 	mov.w	r0, #4294967295
 80088fc:	f000 f92f 	bl	8008b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008900:	4a06      	ldr	r2, [pc, #24]	; (800891c <HAL_InitTick+0x5c>)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008906:	2300      	movs	r3, #0
 8008908:	e000      	b.n	800890c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800890a:	2301      	movs	r3, #1
}
 800890c:	4618      	mov	r0, r3
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	20000410 	.word	0x20000410
 8008918:	20000450 	.word	0x20000450
 800891c:	2000044c 	.word	0x2000044c

08008920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008920:	b480      	push	{r7}
 8008922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008924:	4b06      	ldr	r3, [pc, #24]	; (8008940 <HAL_IncTick+0x20>)
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	461a      	mov	r2, r3
 800892a:	4b06      	ldr	r3, [pc, #24]	; (8008944 <HAL_IncTick+0x24>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4413      	add	r3, r2
 8008930:	4a04      	ldr	r2, [pc, #16]	; (8008944 <HAL_IncTick+0x24>)
 8008932:	6013      	str	r3, [r2, #0]
}
 8008934:	bf00      	nop
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	20000450 	.word	0x20000450
 8008944:	20006ffc 	.word	0x20006ffc

08008948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008948:	b480      	push	{r7}
 800894a:	af00      	add	r7, sp, #0
  return uwTick;
 800894c:	4b03      	ldr	r3, [pc, #12]	; (800895c <HAL_GetTick+0x14>)
 800894e:	681b      	ldr	r3, [r3, #0]
}
 8008950:	4618      	mov	r0, r3
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	20006ffc 	.word	0x20006ffc

08008960 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008968:	f7ff ffee 	bl	8008948 <HAL_GetTick>
 800896c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008978:	d005      	beq.n	8008986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800897a:	4b0a      	ldr	r3, [pc, #40]	; (80089a4 <HAL_Delay+0x44>)
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	461a      	mov	r2, r3
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	4413      	add	r3, r2
 8008984:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008986:	bf00      	nop
 8008988:	f7ff ffde 	bl	8008948 <HAL_GetTick>
 800898c:	4602      	mov	r2, r0
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	429a      	cmp	r2, r3
 8008996:	d8f7      	bhi.n	8008988 <HAL_Delay+0x28>
  {
  }
}
 8008998:	bf00      	nop
 800899a:	bf00      	nop
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	20000450 	.word	0x20000450

080089a8 <__NVIC_SetPriorityGrouping>:
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f003 0307 	and.w	r3, r3, #7
 80089b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80089b8:	4b0c      	ldr	r3, [pc, #48]	; (80089ec <__NVIC_SetPriorityGrouping+0x44>)
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80089c4:	4013      	ands	r3, r2
 80089c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80089d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80089d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80089da:	4a04      	ldr	r2, [pc, #16]	; (80089ec <__NVIC_SetPriorityGrouping+0x44>)
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	60d3      	str	r3, [r2, #12]
}
 80089e0:	bf00      	nop
 80089e2:	3714      	adds	r7, #20
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr
 80089ec:	e000ed00 	.word	0xe000ed00

080089f0 <__NVIC_GetPriorityGrouping>:
{
 80089f0:	b480      	push	{r7}
 80089f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80089f4:	4b04      	ldr	r3, [pc, #16]	; (8008a08 <__NVIC_GetPriorityGrouping+0x18>)
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	0a1b      	lsrs	r3, r3, #8
 80089fa:	f003 0307 	and.w	r3, r3, #7
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr
 8008a08:	e000ed00 	.word	0xe000ed00

08008a0c <__NVIC_EnableIRQ>:
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	4603      	mov	r3, r0
 8008a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	db0b      	blt.n	8008a36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008a1e:	79fb      	ldrb	r3, [r7, #7]
 8008a20:	f003 021f 	and.w	r2, r3, #31
 8008a24:	4907      	ldr	r1, [pc, #28]	; (8008a44 <__NVIC_EnableIRQ+0x38>)
 8008a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a2a:	095b      	lsrs	r3, r3, #5
 8008a2c:	2001      	movs	r0, #1
 8008a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8008a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008a36:	bf00      	nop
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	e000e100 	.word	0xe000e100

08008a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	6039      	str	r1, [r7, #0]
 8008a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	db0a      	blt.n	8008a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	b2da      	uxtb	r2, r3
 8008a60:	490c      	ldr	r1, [pc, #48]	; (8008a94 <__NVIC_SetPriority+0x4c>)
 8008a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a66:	0112      	lsls	r2, r2, #4
 8008a68:	b2d2      	uxtb	r2, r2
 8008a6a:	440b      	add	r3, r1
 8008a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008a70:	e00a      	b.n	8008a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	4908      	ldr	r1, [pc, #32]	; (8008a98 <__NVIC_SetPriority+0x50>)
 8008a78:	79fb      	ldrb	r3, [r7, #7]
 8008a7a:	f003 030f 	and.w	r3, r3, #15
 8008a7e:	3b04      	subs	r3, #4
 8008a80:	0112      	lsls	r2, r2, #4
 8008a82:	b2d2      	uxtb	r2, r2
 8008a84:	440b      	add	r3, r1
 8008a86:	761a      	strb	r2, [r3, #24]
}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr
 8008a94:	e000e100 	.word	0xe000e100
 8008a98:	e000ed00 	.word	0xe000ed00

08008a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b089      	sub	sp, #36	; 0x24
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f003 0307 	and.w	r3, r3, #7
 8008aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	f1c3 0307 	rsb	r3, r3, #7
 8008ab6:	2b04      	cmp	r3, #4
 8008ab8:	bf28      	it	cs
 8008aba:	2304      	movcs	r3, #4
 8008abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	2b06      	cmp	r3, #6
 8008ac4:	d902      	bls.n	8008acc <NVIC_EncodePriority+0x30>
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	3b03      	subs	r3, #3
 8008aca:	e000      	b.n	8008ace <NVIC_EncodePriority+0x32>
 8008acc:	2300      	movs	r3, #0
 8008ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8008ada:	43da      	mvns	r2, r3
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	401a      	ands	r2, r3
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	fa01 f303 	lsl.w	r3, r1, r3
 8008aee:	43d9      	mvns	r1, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008af4:	4313      	orrs	r3, r2
         );
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3724      	adds	r7, #36	; 0x24
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr
	...

08008b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b14:	d301      	bcc.n	8008b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008b16:	2301      	movs	r3, #1
 8008b18:	e00f      	b.n	8008b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b1a:	4a0a      	ldr	r2, [pc, #40]	; (8008b44 <SysTick_Config+0x40>)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008b22:	210f      	movs	r1, #15
 8008b24:	f04f 30ff 	mov.w	r0, #4294967295
 8008b28:	f7ff ff8e 	bl	8008a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b2c:	4b05      	ldr	r3, [pc, #20]	; (8008b44 <SysTick_Config+0x40>)
 8008b2e:	2200      	movs	r2, #0
 8008b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b32:	4b04      	ldr	r3, [pc, #16]	; (8008b44 <SysTick_Config+0x40>)
 8008b34:	2207      	movs	r2, #7
 8008b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	e000e010 	.word	0xe000e010

08008b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f7ff ff29 	bl	80089a8 <__NVIC_SetPriorityGrouping>
}
 8008b56:	bf00      	nop
 8008b58:	3708      	adds	r7, #8
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b086      	sub	sp, #24
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	4603      	mov	r3, r0
 8008b66:	60b9      	str	r1, [r7, #8]
 8008b68:	607a      	str	r2, [r7, #4]
 8008b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008b70:	f7ff ff3e 	bl	80089f0 <__NVIC_GetPriorityGrouping>
 8008b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	68b9      	ldr	r1, [r7, #8]
 8008b7a:	6978      	ldr	r0, [r7, #20]
 8008b7c:	f7ff ff8e 	bl	8008a9c <NVIC_EncodePriority>
 8008b80:	4602      	mov	r2, r0
 8008b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b86:	4611      	mov	r1, r2
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7ff ff5d 	bl	8008a48 <__NVIC_SetPriority>
}
 8008b8e:	bf00      	nop
 8008b90:	3718      	adds	r7, #24
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b082      	sub	sp, #8
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7ff ff31 	bl	8008a0c <__NVIC_EnableIRQ>
}
 8008baa:	bf00      	nop
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b082      	sub	sp, #8
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7ff ffa2 	bl	8008b04 <SysTick_Config>
 8008bc0:	4603      	mov	r3, r0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b082      	sub	sp, #8
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d101      	bne.n	8008bdc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e00e      	b.n	8008bfa <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	795b      	ldrb	r3, [r3, #5]
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d105      	bne.n	8008bf2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f7f7 fe7b 	bl	80008e8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
	...

08008c04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008c10:	f7ff fe9a 	bl	8008948 <HAL_GetTick>
 8008c14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d101      	bne.n	8008c20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e099      	b.n	8008d54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2202      	movs	r2, #2
 8008c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f022 0201 	bic.w	r2, r2, #1
 8008c3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008c40:	e00f      	b.n	8008c62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008c42:	f7ff fe81 	bl	8008948 <HAL_GetTick>
 8008c46:	4602      	mov	r2, r0
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	2b05      	cmp	r3, #5
 8008c4e:	d908      	bls.n	8008c62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2220      	movs	r2, #32
 8008c54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2203      	movs	r2, #3
 8008c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e078      	b.n	8008d54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 0301 	and.w	r3, r3, #1
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1e8      	bne.n	8008c42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	4b38      	ldr	r3, [pc, #224]	; (8008d5c <HAL_DMA_Init+0x158>)
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685a      	ldr	r2, [r3, #4]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008c9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ca6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a1b      	ldr	r3, [r3, #32]
 8008cac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008cae:	697a      	ldr	r2, [r7, #20]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb8:	2b04      	cmp	r3, #4
 8008cba:	d107      	bne.n	8008ccc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	697a      	ldr	r2, [r7, #20]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	697a      	ldr	r2, [r7, #20]
 8008cd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	695b      	ldr	r3, [r3, #20]
 8008cda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	f023 0307 	bic.w	r3, r3, #7
 8008ce2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf2:	2b04      	cmp	r3, #4
 8008cf4:	d117      	bne.n	8008d26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfa:	697a      	ldr	r2, [r7, #20]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00e      	beq.n	8008d26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fa6f 	bl	80091ec <DMA_CheckFifoParam>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d008      	beq.n	8008d26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2240      	movs	r2, #64	; 0x40
 8008d18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008d22:	2301      	movs	r3, #1
 8008d24:	e016      	b.n	8008d54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	697a      	ldr	r2, [r7, #20]
 8008d2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fa26 	bl	8009180 <DMA_CalcBaseAndBitshift>
 8008d34:	4603      	mov	r3, r0
 8008d36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d3c:	223f      	movs	r2, #63	; 0x3f
 8008d3e:	409a      	lsls	r2, r3
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3718      	adds	r7, #24
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	f010803f 	.word	0xf010803f

08008d60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	607a      	str	r2, [r7, #4]
 8008d6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d101      	bne.n	8008d86 <HAL_DMA_Start_IT+0x26>
 8008d82:	2302      	movs	r3, #2
 8008d84:	e040      	b.n	8008e08 <HAL_DMA_Start_IT+0xa8>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d12f      	bne.n	8008dfa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2202      	movs	r2, #2
 8008d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	68b9      	ldr	r1, [r7, #8]
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f000 f9b8 	bl	8009124 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008db8:	223f      	movs	r2, #63	; 0x3f
 8008dba:	409a      	lsls	r2, r3
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f042 0216 	orr.w	r2, r2, #22
 8008dce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d007      	beq.n	8008de8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f042 0208 	orr.w	r2, r2, #8
 8008de6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f042 0201 	orr.w	r2, r2, #1
 8008df6:	601a      	str	r2, [r3, #0]
 8008df8:	e005      	b.n	8008e06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008e02:	2302      	movs	r3, #2
 8008e04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3718      	adds	r7, #24
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b086      	sub	sp, #24
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008e1c:	4b8e      	ldr	r3, [pc, #568]	; (8009058 <HAL_DMA_IRQHandler+0x248>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a8e      	ldr	r2, [pc, #568]	; (800905c <HAL_DMA_IRQHandler+0x24c>)
 8008e22:	fba2 2303 	umull	r2, r3, r2, r3
 8008e26:	0a9b      	lsrs	r3, r3, #10
 8008e28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e3a:	2208      	movs	r2, #8
 8008e3c:	409a      	lsls	r2, r3
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	4013      	ands	r3, r2
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d01a      	beq.n	8008e7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f003 0304 	and.w	r3, r3, #4
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d013      	beq.n	8008e7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f022 0204 	bic.w	r2, r2, #4
 8008e62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e68:	2208      	movs	r2, #8
 8008e6a:	409a      	lsls	r2, r3
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e74:	f043 0201 	orr.w	r2, r3, #1
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e80:	2201      	movs	r2, #1
 8008e82:	409a      	lsls	r2, r3
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	4013      	ands	r3, r2
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d012      	beq.n	8008eb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	695b      	ldr	r3, [r3, #20]
 8008e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00b      	beq.n	8008eb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	409a      	lsls	r2, r3
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eaa:	f043 0202 	orr.w	r2, r3, #2
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eb6:	2204      	movs	r2, #4
 8008eb8:	409a      	lsls	r2, r3
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d012      	beq.n	8008ee8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 0302 	and.w	r3, r3, #2
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00b      	beq.n	8008ee8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ed4:	2204      	movs	r2, #4
 8008ed6:	409a      	lsls	r2, r3
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ee0:	f043 0204 	orr.w	r2, r3, #4
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eec:	2210      	movs	r2, #16
 8008eee:	409a      	lsls	r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d043      	beq.n	8008f80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 0308 	and.w	r3, r3, #8
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d03c      	beq.n	8008f80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f0a:	2210      	movs	r2, #16
 8008f0c:	409a      	lsls	r2, r3
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d018      	beq.n	8008f52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d108      	bne.n	8008f40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d024      	beq.n	8008f80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	4798      	blx	r3
 8008f3e:	e01f      	b.n	8008f80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d01b      	beq.n	8008f80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	4798      	blx	r3
 8008f50:	e016      	b.n	8008f80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d107      	bne.n	8008f70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f022 0208 	bic.w	r2, r2, #8
 8008f6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d003      	beq.n	8008f80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f84:	2220      	movs	r2, #32
 8008f86:	409a      	lsls	r2, r3
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f000 808f 	beq.w	80090b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 0310 	and.w	r3, r3, #16
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f000 8087 	beq.w	80090b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fa6:	2220      	movs	r2, #32
 8008fa8:	409a      	lsls	r2, r3
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	2b05      	cmp	r3, #5
 8008fb8:	d136      	bne.n	8009028 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f022 0216 	bic.w	r2, r2, #22
 8008fc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	695a      	ldr	r2, [r3, #20]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d103      	bne.n	8008fea <HAL_DMA_IRQHandler+0x1da>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d007      	beq.n	8008ffa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f022 0208 	bic.w	r2, r2, #8
 8008ff8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ffe:	223f      	movs	r2, #63	; 0x3f
 8009000:	409a      	lsls	r2, r3
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2201      	movs	r2, #1
 800900a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800901a:	2b00      	cmp	r3, #0
 800901c:	d07e      	beq.n	800911c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	4798      	blx	r3
        }
        return;
 8009026:	e079      	b.n	800911c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009032:	2b00      	cmp	r3, #0
 8009034:	d01d      	beq.n	8009072 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009040:	2b00      	cmp	r3, #0
 8009042:	d10d      	bne.n	8009060 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009048:	2b00      	cmp	r3, #0
 800904a:	d031      	beq.n	80090b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	4798      	blx	r3
 8009054:	e02c      	b.n	80090b0 <HAL_DMA_IRQHandler+0x2a0>
 8009056:	bf00      	nop
 8009058:	20000410 	.word	0x20000410
 800905c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009064:	2b00      	cmp	r3, #0
 8009066:	d023      	beq.n	80090b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	4798      	blx	r3
 8009070:	e01e      	b.n	80090b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800907c:	2b00      	cmp	r3, #0
 800907e:	d10f      	bne.n	80090a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f022 0210 	bic.w	r2, r2, #16
 800908e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d003      	beq.n	80090b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d032      	beq.n	800911e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090bc:	f003 0301 	and.w	r3, r3, #1
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d022      	beq.n	800910a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2205      	movs	r2, #5
 80090c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f022 0201 	bic.w	r2, r2, #1
 80090da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	3301      	adds	r3, #1
 80090e0:	60bb      	str	r3, [r7, #8]
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d307      	bcc.n	80090f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 0301 	and.w	r3, r3, #1
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1f2      	bne.n	80090dc <HAL_DMA_IRQHandler+0x2cc>
 80090f6:	e000      	b.n	80090fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80090f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2201      	movs	r2, #1
 80090fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800910e:	2b00      	cmp	r3, #0
 8009110:	d005      	beq.n	800911e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	4798      	blx	r3
 800911a:	e000      	b.n	800911e <HAL_DMA_IRQHandler+0x30e>
        return;
 800911c:	bf00      	nop
    }
  }
}
 800911e:	3718      	adds	r7, #24
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]
 8009130:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009140:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	683a      	ldr	r2, [r7, #0]
 8009148:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	2b40      	cmp	r3, #64	; 0x40
 8009150:	d108      	bne.n	8009164 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009162:	e007      	b.n	8009174 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	60da      	str	r2, [r3, #12]
}
 8009174:	bf00      	nop
 8009176:	3714      	adds	r7, #20
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	b2db      	uxtb	r3, r3
 800918e:	3b10      	subs	r3, #16
 8009190:	4a14      	ldr	r2, [pc, #80]	; (80091e4 <DMA_CalcBaseAndBitshift+0x64>)
 8009192:	fba2 2303 	umull	r2, r3, r2, r3
 8009196:	091b      	lsrs	r3, r3, #4
 8009198:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800919a:	4a13      	ldr	r2, [pc, #76]	; (80091e8 <DMA_CalcBaseAndBitshift+0x68>)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	4413      	add	r3, r2
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	461a      	mov	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2b03      	cmp	r3, #3
 80091ac:	d909      	bls.n	80091c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80091b6:	f023 0303 	bic.w	r3, r3, #3
 80091ba:	1d1a      	adds	r2, r3, #4
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	659a      	str	r2, [r3, #88]	; 0x58
 80091c0:	e007      	b.n	80091d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80091ca:	f023 0303 	bic.w	r3, r3, #3
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3714      	adds	r7, #20
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	aaaaaaab 	.word	0xaaaaaaab
 80091e8:	08011770 	.word	0x08011770

080091ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091f4:	2300      	movs	r3, #0
 80091f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d11f      	bne.n	8009246 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	2b03      	cmp	r3, #3
 800920a:	d856      	bhi.n	80092ba <DMA_CheckFifoParam+0xce>
 800920c:	a201      	add	r2, pc, #4	; (adr r2, 8009214 <DMA_CheckFifoParam+0x28>)
 800920e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009212:	bf00      	nop
 8009214:	08009225 	.word	0x08009225
 8009218:	08009237 	.word	0x08009237
 800921c:	08009225 	.word	0x08009225
 8009220:	080092bb 	.word	0x080092bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800922c:	2b00      	cmp	r3, #0
 800922e:	d046      	beq.n	80092be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009234:	e043      	b.n	80092be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800923e:	d140      	bne.n	80092c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009244:	e03d      	b.n	80092c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	699b      	ldr	r3, [r3, #24]
 800924a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800924e:	d121      	bne.n	8009294 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	2b03      	cmp	r3, #3
 8009254:	d837      	bhi.n	80092c6 <DMA_CheckFifoParam+0xda>
 8009256:	a201      	add	r2, pc, #4	; (adr r2, 800925c <DMA_CheckFifoParam+0x70>)
 8009258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925c:	0800926d 	.word	0x0800926d
 8009260:	08009273 	.word	0x08009273
 8009264:	0800926d 	.word	0x0800926d
 8009268:	08009285 	.word	0x08009285
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	73fb      	strb	r3, [r7, #15]
      break;
 8009270:	e030      	b.n	80092d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009276:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800927a:	2b00      	cmp	r3, #0
 800927c:	d025      	beq.n	80092ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009282:	e022      	b.n	80092ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009288:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800928c:	d11f      	bne.n	80092ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009292:	e01c      	b.n	80092ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	2b02      	cmp	r3, #2
 8009298:	d903      	bls.n	80092a2 <DMA_CheckFifoParam+0xb6>
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	2b03      	cmp	r3, #3
 800929e:	d003      	beq.n	80092a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80092a0:	e018      	b.n	80092d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	73fb      	strb	r3, [r7, #15]
      break;
 80092a6:	e015      	b.n	80092d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00e      	beq.n	80092d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	73fb      	strb	r3, [r7, #15]
      break;
 80092b8:	e00b      	b.n	80092d2 <DMA_CheckFifoParam+0xe6>
      break;
 80092ba:	bf00      	nop
 80092bc:	e00a      	b.n	80092d4 <DMA_CheckFifoParam+0xe8>
      break;
 80092be:	bf00      	nop
 80092c0:	e008      	b.n	80092d4 <DMA_CheckFifoParam+0xe8>
      break;
 80092c2:	bf00      	nop
 80092c4:	e006      	b.n	80092d4 <DMA_CheckFifoParam+0xe8>
      break;
 80092c6:	bf00      	nop
 80092c8:	e004      	b.n	80092d4 <DMA_CheckFifoParam+0xe8>
      break;
 80092ca:	bf00      	nop
 80092cc:	e002      	b.n	80092d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80092ce:	bf00      	nop
 80092d0:	e000      	b.n	80092d4 <DMA_CheckFifoParam+0xe8>
      break;
 80092d2:	bf00      	nop
    }
  } 
  
  return status; 
 80092d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3714      	adds	r7, #20
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop

080092e4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80092f6:	4b23      	ldr	r3, [pc, #140]	; (8009384 <HAL_FLASH_Program+0xa0>)
 80092f8:	7e1b      	ldrb	r3, [r3, #24]
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d101      	bne.n	8009302 <HAL_FLASH_Program+0x1e>
 80092fe:	2302      	movs	r3, #2
 8009300:	e03b      	b.n	800937a <HAL_FLASH_Program+0x96>
 8009302:	4b20      	ldr	r3, [pc, #128]	; (8009384 <HAL_FLASH_Program+0xa0>)
 8009304:	2201      	movs	r2, #1
 8009306:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009308:	f24c 3050 	movw	r0, #50000	; 0xc350
 800930c:	f000 f87c 	bl	8009408 <FLASH_WaitForLastOperation>
 8009310:	4603      	mov	r3, r0
 8009312:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8009314:	7dfb      	ldrb	r3, [r7, #23]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d12b      	bne.n	8009372 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d105      	bne.n	800932c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8009320:	783b      	ldrb	r3, [r7, #0]
 8009322:	4619      	mov	r1, r3
 8009324:	68b8      	ldr	r0, [r7, #8]
 8009326:	f000 f927 	bl	8009578 <FLASH_Program_Byte>
 800932a:	e016      	b.n	800935a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2b01      	cmp	r3, #1
 8009330:	d105      	bne.n	800933e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8009332:	883b      	ldrh	r3, [r7, #0]
 8009334:	4619      	mov	r1, r3
 8009336:	68b8      	ldr	r0, [r7, #8]
 8009338:	f000 f8fa 	bl	8009530 <FLASH_Program_HalfWord>
 800933c:	e00d      	b.n	800935a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2b02      	cmp	r3, #2
 8009342:	d105      	bne.n	8009350 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	4619      	mov	r1, r3
 8009348:	68b8      	ldr	r0, [r7, #8]
 800934a:	f000 f8cf 	bl	80094ec <FLASH_Program_Word>
 800934e:	e004      	b.n	800935a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8009350:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009354:	68b8      	ldr	r0, [r7, #8]
 8009356:	f000 f897 	bl	8009488 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800935a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800935e:	f000 f853 	bl	8009408 <FLASH_WaitForLastOperation>
 8009362:	4603      	mov	r3, r0
 8009364:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8009366:	4b08      	ldr	r3, [pc, #32]	; (8009388 <HAL_FLASH_Program+0xa4>)
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	4a07      	ldr	r2, [pc, #28]	; (8009388 <HAL_FLASH_Program+0xa4>)
 800936c:	f023 0301 	bic.w	r3, r3, #1
 8009370:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009372:	4b04      	ldr	r3, [pc, #16]	; (8009384 <HAL_FLASH_Program+0xa0>)
 8009374:	2200      	movs	r2, #0
 8009376:	761a      	strb	r2, [r3, #24]
  
  return status;
 8009378:	7dfb      	ldrb	r3, [r7, #23]
}
 800937a:	4618      	mov	r0, r3
 800937c:	3718      	adds	r7, #24
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	20007000 	.word	0x20007000
 8009388:	40023c00 	.word	0x40023c00

0800938c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009392:	2300      	movs	r3, #0
 8009394:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009396:	4b0b      	ldr	r3, [pc, #44]	; (80093c4 <HAL_FLASH_Unlock+0x38>)
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	2b00      	cmp	r3, #0
 800939c:	da0b      	bge.n	80093b6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800939e:	4b09      	ldr	r3, [pc, #36]	; (80093c4 <HAL_FLASH_Unlock+0x38>)
 80093a0:	4a09      	ldr	r2, [pc, #36]	; (80093c8 <HAL_FLASH_Unlock+0x3c>)
 80093a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80093a4:	4b07      	ldr	r3, [pc, #28]	; (80093c4 <HAL_FLASH_Unlock+0x38>)
 80093a6:	4a09      	ldr	r2, [pc, #36]	; (80093cc <HAL_FLASH_Unlock+0x40>)
 80093a8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80093aa:	4b06      	ldr	r3, [pc, #24]	; (80093c4 <HAL_FLASH_Unlock+0x38>)
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	da01      	bge.n	80093b6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80093b6:	79fb      	ldrb	r3, [r7, #7]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr
 80093c4:	40023c00 	.word	0x40023c00
 80093c8:	45670123 	.word	0x45670123
 80093cc:	cdef89ab 	.word	0xcdef89ab

080093d0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80093d0:	b480      	push	{r7}
 80093d2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80093d4:	4b05      	ldr	r3, [pc, #20]	; (80093ec <HAL_FLASH_Lock+0x1c>)
 80093d6:	691b      	ldr	r3, [r3, #16]
 80093d8:	4a04      	ldr	r2, [pc, #16]	; (80093ec <HAL_FLASH_Lock+0x1c>)
 80093da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80093de:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr
 80093ec:	40023c00 	.word	0x40023c00

080093f0 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 80093f0:	b480      	push	{r7}
 80093f2:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80093f4:	4b03      	ldr	r3, [pc, #12]	; (8009404 <HAL_FLASH_GetError+0x14>)
 80093f6:	69db      	ldr	r3, [r3, #28]
}  
 80093f8:	4618      	mov	r0, r3
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	20007000 	.word	0x20007000

08009408 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009410:	2300      	movs	r3, #0
 8009412:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009414:	4b1a      	ldr	r3, [pc, #104]	; (8009480 <FLASH_WaitForLastOperation+0x78>)
 8009416:	2200      	movs	r2, #0
 8009418:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800941a:	f7ff fa95 	bl	8008948 <HAL_GetTick>
 800941e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8009420:	e010      	b.n	8009444 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009428:	d00c      	beq.n	8009444 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d007      	beq.n	8009440 <FLASH_WaitForLastOperation+0x38>
 8009430:	f7ff fa8a 	bl	8008948 <HAL_GetTick>
 8009434:	4602      	mov	r2, r0
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	429a      	cmp	r2, r3
 800943e:	d201      	bcs.n	8009444 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8009440:	2303      	movs	r3, #3
 8009442:	e019      	b.n	8009478 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8009444:	4b0f      	ldr	r3, [pc, #60]	; (8009484 <FLASH_WaitForLastOperation+0x7c>)
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1e8      	bne.n	8009422 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8009450:	4b0c      	ldr	r3, [pc, #48]	; (8009484 <FLASH_WaitForLastOperation+0x7c>)
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	f003 0301 	and.w	r3, r3, #1
 8009458:	2b00      	cmp	r3, #0
 800945a:	d002      	beq.n	8009462 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800945c:	4b09      	ldr	r3, [pc, #36]	; (8009484 <FLASH_WaitForLastOperation+0x7c>)
 800945e:	2201      	movs	r2, #1
 8009460:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8009462:	4b08      	ldr	r3, [pc, #32]	; (8009484 <FLASH_WaitForLastOperation+0x7c>)
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800946a:	2b00      	cmp	r3, #0
 800946c:	d003      	beq.n	8009476 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800946e:	f000 f8a5 	bl	80095bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e000      	b.n	8009478 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8009476:	2300      	movs	r3, #0
  
}  
 8009478:	4618      	mov	r0, r3
 800947a:	3710      	adds	r7, #16
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	20007000 	.word	0x20007000
 8009484:	40023c00 	.word	0x40023c00

08009488 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009494:	4b14      	ldr	r3, [pc, #80]	; (80094e8 <FLASH_Program_DoubleWord+0x60>)
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	4a13      	ldr	r2, [pc, #76]	; (80094e8 <FLASH_Program_DoubleWord+0x60>)
 800949a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800949e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80094a0:	4b11      	ldr	r3, [pc, #68]	; (80094e8 <FLASH_Program_DoubleWord+0x60>)
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	4a10      	ldr	r2, [pc, #64]	; (80094e8 <FLASH_Program_DoubleWord+0x60>)
 80094a6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80094aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80094ac:	4b0e      	ldr	r3, [pc, #56]	; (80094e8 <FLASH_Program_DoubleWord+0x60>)
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	4a0d      	ldr	r2, [pc, #52]	; (80094e8 <FLASH_Program_DoubleWord+0x60>)
 80094b2:	f043 0301 	orr.w	r3, r3, #1
 80094b6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	683a      	ldr	r2, [r7, #0]
 80094bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80094be:	f3bf 8f6f 	isb	sy
}
 80094c2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80094c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094c8:	f04f 0200 	mov.w	r2, #0
 80094cc:	f04f 0300 	mov.w	r3, #0
 80094d0:	000a      	movs	r2, r1
 80094d2:	2300      	movs	r3, #0
 80094d4:	68f9      	ldr	r1, [r7, #12]
 80094d6:	3104      	adds	r1, #4
 80094d8:	4613      	mov	r3, r2
 80094da:	600b      	str	r3, [r1, #0]
}
 80094dc:	bf00      	nop
 80094de:	3714      	adds	r7, #20
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr
 80094e8:	40023c00 	.word	0x40023c00

080094ec <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80094f6:	4b0d      	ldr	r3, [pc, #52]	; (800952c <FLASH_Program_Word+0x40>)
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	4a0c      	ldr	r2, [pc, #48]	; (800952c <FLASH_Program_Word+0x40>)
 80094fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009500:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8009502:	4b0a      	ldr	r3, [pc, #40]	; (800952c <FLASH_Program_Word+0x40>)
 8009504:	691b      	ldr	r3, [r3, #16]
 8009506:	4a09      	ldr	r2, [pc, #36]	; (800952c <FLASH_Program_Word+0x40>)
 8009508:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800950c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800950e:	4b07      	ldr	r3, [pc, #28]	; (800952c <FLASH_Program_Word+0x40>)
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	4a06      	ldr	r2, [pc, #24]	; (800952c <FLASH_Program_Word+0x40>)
 8009514:	f043 0301 	orr.w	r3, r3, #1
 8009518:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	683a      	ldr	r2, [r7, #0]
 800951e:	601a      	str	r2, [r3, #0]
}
 8009520:	bf00      	nop
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr
 800952c:	40023c00 	.word	0x40023c00

08009530 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	460b      	mov	r3, r1
 800953a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800953c:	4b0d      	ldr	r3, [pc, #52]	; (8009574 <FLASH_Program_HalfWord+0x44>)
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	4a0c      	ldr	r2, [pc, #48]	; (8009574 <FLASH_Program_HalfWord+0x44>)
 8009542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009546:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8009548:	4b0a      	ldr	r3, [pc, #40]	; (8009574 <FLASH_Program_HalfWord+0x44>)
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	4a09      	ldr	r2, [pc, #36]	; (8009574 <FLASH_Program_HalfWord+0x44>)
 800954e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009552:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009554:	4b07      	ldr	r3, [pc, #28]	; (8009574 <FLASH_Program_HalfWord+0x44>)
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	4a06      	ldr	r2, [pc, #24]	; (8009574 <FLASH_Program_HalfWord+0x44>)
 800955a:	f043 0301 	orr.w	r3, r3, #1
 800955e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	887a      	ldrh	r2, [r7, #2]
 8009564:	801a      	strh	r2, [r3, #0]
}
 8009566:	bf00      	nop
 8009568:	370c      	adds	r7, #12
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	40023c00 	.word	0x40023c00

08009578 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	460b      	mov	r3, r1
 8009582:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009584:	4b0c      	ldr	r3, [pc, #48]	; (80095b8 <FLASH_Program_Byte+0x40>)
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	4a0b      	ldr	r2, [pc, #44]	; (80095b8 <FLASH_Program_Byte+0x40>)
 800958a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800958e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8009590:	4b09      	ldr	r3, [pc, #36]	; (80095b8 <FLASH_Program_Byte+0x40>)
 8009592:	4a09      	ldr	r2, [pc, #36]	; (80095b8 <FLASH_Program_Byte+0x40>)
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009598:	4b07      	ldr	r3, [pc, #28]	; (80095b8 <FLASH_Program_Byte+0x40>)
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	4a06      	ldr	r2, [pc, #24]	; (80095b8 <FLASH_Program_Byte+0x40>)
 800959e:	f043 0301 	orr.w	r3, r3, #1
 80095a2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	78fa      	ldrb	r2, [r7, #3]
 80095a8:	701a      	strb	r2, [r3, #0]
}
 80095aa:	bf00      	nop
 80095ac:	370c      	adds	r7, #12
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	40023c00 	.word	0x40023c00

080095bc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80095bc:	b480      	push	{r7}
 80095be:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80095c0:	4b2f      	ldr	r3, [pc, #188]	; (8009680 <FLASH_SetErrorCode+0xc4>)
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	f003 0310 	and.w	r3, r3, #16
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d008      	beq.n	80095de <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80095cc:	4b2d      	ldr	r3, [pc, #180]	; (8009684 <FLASH_SetErrorCode+0xc8>)
 80095ce:	69db      	ldr	r3, [r3, #28]
 80095d0:	f043 0310 	orr.w	r3, r3, #16
 80095d4:	4a2b      	ldr	r2, [pc, #172]	; (8009684 <FLASH_SetErrorCode+0xc8>)
 80095d6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80095d8:	4b29      	ldr	r3, [pc, #164]	; (8009680 <FLASH_SetErrorCode+0xc4>)
 80095da:	2210      	movs	r2, #16
 80095dc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80095de:	4b28      	ldr	r3, [pc, #160]	; (8009680 <FLASH_SetErrorCode+0xc4>)
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	f003 0320 	and.w	r3, r3, #32
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d008      	beq.n	80095fc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80095ea:	4b26      	ldr	r3, [pc, #152]	; (8009684 <FLASH_SetErrorCode+0xc8>)
 80095ec:	69db      	ldr	r3, [r3, #28]
 80095ee:	f043 0308 	orr.w	r3, r3, #8
 80095f2:	4a24      	ldr	r2, [pc, #144]	; (8009684 <FLASH_SetErrorCode+0xc8>)
 80095f4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80095f6:	4b22      	ldr	r3, [pc, #136]	; (8009680 <FLASH_SetErrorCode+0xc4>)
 80095f8:	2220      	movs	r2, #32
 80095fa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80095fc:	4b20      	ldr	r3, [pc, #128]	; (8009680 <FLASH_SetErrorCode+0xc4>)
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009604:	2b00      	cmp	r3, #0
 8009606:	d008      	beq.n	800961a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8009608:	4b1e      	ldr	r3, [pc, #120]	; (8009684 <FLASH_SetErrorCode+0xc8>)
 800960a:	69db      	ldr	r3, [r3, #28]
 800960c:	f043 0304 	orr.w	r3, r3, #4
 8009610:	4a1c      	ldr	r2, [pc, #112]	; (8009684 <FLASH_SetErrorCode+0xc8>)
 8009612:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8009614:	4b1a      	ldr	r3, [pc, #104]	; (8009680 <FLASH_SetErrorCode+0xc4>)
 8009616:	2240      	movs	r2, #64	; 0x40
 8009618:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800961a:	4b19      	ldr	r3, [pc, #100]	; (8009680 <FLASH_SetErrorCode+0xc4>)
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009622:	2b00      	cmp	r3, #0
 8009624:	d008      	beq.n	8009638 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8009626:	4b17      	ldr	r3, [pc, #92]	; (8009684 <FLASH_SetErrorCode+0xc8>)
 8009628:	69db      	ldr	r3, [r3, #28]
 800962a:	f043 0302 	orr.w	r3, r3, #2
 800962e:	4a15      	ldr	r2, [pc, #84]	; (8009684 <FLASH_SetErrorCode+0xc8>)
 8009630:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8009632:	4b13      	ldr	r3, [pc, #76]	; (8009680 <FLASH_SetErrorCode+0xc4>)
 8009634:	2280      	movs	r2, #128	; 0x80
 8009636:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8009638:	4b11      	ldr	r3, [pc, #68]	; (8009680 <FLASH_SetErrorCode+0xc4>)
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009640:	2b00      	cmp	r3, #0
 8009642:	d009      	beq.n	8009658 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8009644:	4b0f      	ldr	r3, [pc, #60]	; (8009684 <FLASH_SetErrorCode+0xc8>)
 8009646:	69db      	ldr	r3, [r3, #28]
 8009648:	f043 0301 	orr.w	r3, r3, #1
 800964c:	4a0d      	ldr	r2, [pc, #52]	; (8009684 <FLASH_SetErrorCode+0xc8>)
 800964e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8009650:	4b0b      	ldr	r3, [pc, #44]	; (8009680 <FLASH_SetErrorCode+0xc4>)
 8009652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009656:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8009658:	4b09      	ldr	r3, [pc, #36]	; (8009680 <FLASH_SetErrorCode+0xc4>)
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	f003 0302 	and.w	r3, r3, #2
 8009660:	2b00      	cmp	r3, #0
 8009662:	d008      	beq.n	8009676 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8009664:	4b07      	ldr	r3, [pc, #28]	; (8009684 <FLASH_SetErrorCode+0xc8>)
 8009666:	69db      	ldr	r3, [r3, #28]
 8009668:	f043 0320 	orr.w	r3, r3, #32
 800966c:	4a05      	ldr	r2, [pc, #20]	; (8009684 <FLASH_SetErrorCode+0xc8>)
 800966e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8009670:	4b03      	ldr	r3, [pc, #12]	; (8009680 <FLASH_SetErrorCode+0xc4>)
 8009672:	2202      	movs	r2, #2
 8009674:	60da      	str	r2, [r3, #12]
  }
}
 8009676:	bf00      	nop
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr
 8009680:	40023c00 	.word	0x40023c00
 8009684:	20007000 	.word	0x20007000

08009688 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8009696:	2300      	movs	r3, #0
 8009698:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800969a:	4b31      	ldr	r3, [pc, #196]	; (8009760 <HAL_FLASHEx_Erase+0xd8>)
 800969c:	7e1b      	ldrb	r3, [r3, #24]
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d101      	bne.n	80096a6 <HAL_FLASHEx_Erase+0x1e>
 80096a2:	2302      	movs	r3, #2
 80096a4:	e058      	b.n	8009758 <HAL_FLASHEx_Erase+0xd0>
 80096a6:	4b2e      	ldr	r3, [pc, #184]	; (8009760 <HAL_FLASHEx_Erase+0xd8>)
 80096a8:	2201      	movs	r2, #1
 80096aa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80096ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80096b0:	f7ff feaa 	bl	8009408 <FLASH_WaitForLastOperation>
 80096b4:	4603      	mov	r3, r0
 80096b6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80096b8:	7bfb      	ldrb	r3, [r7, #15]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d148      	bne.n	8009750 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	f04f 32ff 	mov.w	r2, #4294967295
 80096c4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d115      	bne.n	80096fa <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	b2da      	uxtb	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	4619      	mov	r1, r3
 80096da:	4610      	mov	r0, r2
 80096dc:	f000 f844 	bl	8009768 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80096e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80096e4:	f7ff fe90 	bl	8009408 <FLASH_WaitForLastOperation>
 80096e8:	4603      	mov	r3, r0
 80096ea:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80096ec:	4b1d      	ldr	r3, [pc, #116]	; (8009764 <HAL_FLASHEx_Erase+0xdc>)
 80096ee:	691b      	ldr	r3, [r3, #16]
 80096f0:	4a1c      	ldr	r2, [pc, #112]	; (8009764 <HAL_FLASHEx_Erase+0xdc>)
 80096f2:	f023 0304 	bic.w	r3, r3, #4
 80096f6:	6113      	str	r3, [r2, #16]
 80096f8:	e028      	b.n	800974c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	60bb      	str	r3, [r7, #8]
 8009700:	e01c      	b.n	800973c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	b2db      	uxtb	r3, r3
 8009708:	4619      	mov	r1, r3
 800970a:	68b8      	ldr	r0, [r7, #8]
 800970c:	f000 f850 	bl	80097b0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009710:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009714:	f7ff fe78 	bl	8009408 <FLASH_WaitForLastOperation>
 8009718:	4603      	mov	r3, r0
 800971a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800971c:	4b11      	ldr	r3, [pc, #68]	; (8009764 <HAL_FLASHEx_Erase+0xdc>)
 800971e:	691b      	ldr	r3, [r3, #16]
 8009720:	4a10      	ldr	r2, [pc, #64]	; (8009764 <HAL_FLASHEx_Erase+0xdc>)
 8009722:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8009726:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8009728:	7bfb      	ldrb	r3, [r7, #15]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d003      	beq.n	8009736 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	601a      	str	r2, [r3, #0]
          break;
 8009734:	e00a      	b.n	800974c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	3301      	adds	r3, #1
 800973a:	60bb      	str	r3, [r7, #8]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	68da      	ldr	r2, [r3, #12]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	4413      	add	r3, r2
 8009746:	68ba      	ldr	r2, [r7, #8]
 8009748:	429a      	cmp	r2, r3
 800974a:	d3da      	bcc.n	8009702 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800974c:	f000 f878 	bl	8009840 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009750:	4b03      	ldr	r3, [pc, #12]	; (8009760 <HAL_FLASHEx_Erase+0xd8>)
 8009752:	2200      	movs	r2, #0
 8009754:	761a      	strb	r2, [r3, #24]

  return status;
 8009756:	7bfb      	ldrb	r3, [r7, #15]
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	20007000 	.word	0x20007000
 8009764:	40023c00 	.word	0x40023c00

08009768 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	4603      	mov	r3, r0
 8009770:	6039      	str	r1, [r7, #0]
 8009772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009774:	4b0d      	ldr	r3, [pc, #52]	; (80097ac <FLASH_MassErase+0x44>)
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	4a0c      	ldr	r2, [pc, #48]	; (80097ac <FLASH_MassErase+0x44>)
 800977a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800977e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8009780:	4b0a      	ldr	r3, [pc, #40]	; (80097ac <FLASH_MassErase+0x44>)
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	4a09      	ldr	r2, [pc, #36]	; (80097ac <FLASH_MassErase+0x44>)
 8009786:	f043 0304 	orr.w	r3, r3, #4
 800978a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800978c:	4b07      	ldr	r3, [pc, #28]	; (80097ac <FLASH_MassErase+0x44>)
 800978e:	691a      	ldr	r2, [r3, #16]
 8009790:	79fb      	ldrb	r3, [r7, #7]
 8009792:	021b      	lsls	r3, r3, #8
 8009794:	4313      	orrs	r3, r2
 8009796:	4a05      	ldr	r2, [pc, #20]	; (80097ac <FLASH_MassErase+0x44>)
 8009798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800979c:	6113      	str	r3, [r2, #16]
}
 800979e:	bf00      	nop
 80097a0:	370c      	adds	r7, #12
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	40023c00 	.word	0x40023c00

080097b0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	460b      	mov	r3, r1
 80097ba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80097bc:	2300      	movs	r3, #0
 80097be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80097c0:	78fb      	ldrb	r3, [r7, #3]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d102      	bne.n	80097cc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80097c6:	2300      	movs	r3, #0
 80097c8:	60fb      	str	r3, [r7, #12]
 80097ca:	e010      	b.n	80097ee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80097cc:	78fb      	ldrb	r3, [r7, #3]
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d103      	bne.n	80097da <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80097d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097d6:	60fb      	str	r3, [r7, #12]
 80097d8:	e009      	b.n	80097ee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80097da:	78fb      	ldrb	r3, [r7, #3]
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d103      	bne.n	80097e8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80097e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097e4:	60fb      	str	r3, [r7, #12]
 80097e6:	e002      	b.n	80097ee <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80097e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80097ec:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80097ee:	4b13      	ldr	r3, [pc, #76]	; (800983c <FLASH_Erase_Sector+0x8c>)
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	4a12      	ldr	r2, [pc, #72]	; (800983c <FLASH_Erase_Sector+0x8c>)
 80097f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80097fa:	4b10      	ldr	r3, [pc, #64]	; (800983c <FLASH_Erase_Sector+0x8c>)
 80097fc:	691a      	ldr	r2, [r3, #16]
 80097fe:	490f      	ldr	r1, [pc, #60]	; (800983c <FLASH_Erase_Sector+0x8c>)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	4313      	orrs	r3, r2
 8009804:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8009806:	4b0d      	ldr	r3, [pc, #52]	; (800983c <FLASH_Erase_Sector+0x8c>)
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	4a0c      	ldr	r2, [pc, #48]	; (800983c <FLASH_Erase_Sector+0x8c>)
 800980c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009810:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8009812:	4b0a      	ldr	r3, [pc, #40]	; (800983c <FLASH_Erase_Sector+0x8c>)
 8009814:	691a      	ldr	r2, [r3, #16]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	00db      	lsls	r3, r3, #3
 800981a:	4313      	orrs	r3, r2
 800981c:	4a07      	ldr	r2, [pc, #28]	; (800983c <FLASH_Erase_Sector+0x8c>)
 800981e:	f043 0302 	orr.w	r3, r3, #2
 8009822:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8009824:	4b05      	ldr	r3, [pc, #20]	; (800983c <FLASH_Erase_Sector+0x8c>)
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	4a04      	ldr	r2, [pc, #16]	; (800983c <FLASH_Erase_Sector+0x8c>)
 800982a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800982e:	6113      	str	r3, [r2, #16]
}
 8009830:	bf00      	nop
 8009832:	3714      	adds	r7, #20
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr
 800983c:	40023c00 	.word	0x40023c00

08009840 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8009840:	b480      	push	{r7}
 8009842:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8009844:	4b20      	ldr	r3, [pc, #128]	; (80098c8 <FLASH_FlushCaches+0x88>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800984c:	2b00      	cmp	r3, #0
 800984e:	d017      	beq.n	8009880 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8009850:	4b1d      	ldr	r3, [pc, #116]	; (80098c8 <FLASH_FlushCaches+0x88>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a1c      	ldr	r2, [pc, #112]	; (80098c8 <FLASH_FlushCaches+0x88>)
 8009856:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800985a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800985c:	4b1a      	ldr	r3, [pc, #104]	; (80098c8 <FLASH_FlushCaches+0x88>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a19      	ldr	r2, [pc, #100]	; (80098c8 <FLASH_FlushCaches+0x88>)
 8009862:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009866:	6013      	str	r3, [r2, #0]
 8009868:	4b17      	ldr	r3, [pc, #92]	; (80098c8 <FLASH_FlushCaches+0x88>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a16      	ldr	r2, [pc, #88]	; (80098c8 <FLASH_FlushCaches+0x88>)
 800986e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009872:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009874:	4b14      	ldr	r3, [pc, #80]	; (80098c8 <FLASH_FlushCaches+0x88>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a13      	ldr	r2, [pc, #76]	; (80098c8 <FLASH_FlushCaches+0x88>)
 800987a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800987e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8009880:	4b11      	ldr	r3, [pc, #68]	; (80098c8 <FLASH_FlushCaches+0x88>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009888:	2b00      	cmp	r3, #0
 800988a:	d017      	beq.n	80098bc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800988c:	4b0e      	ldr	r3, [pc, #56]	; (80098c8 <FLASH_FlushCaches+0x88>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a0d      	ldr	r2, [pc, #52]	; (80098c8 <FLASH_FlushCaches+0x88>)
 8009892:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009896:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009898:	4b0b      	ldr	r3, [pc, #44]	; (80098c8 <FLASH_FlushCaches+0x88>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a0a      	ldr	r2, [pc, #40]	; (80098c8 <FLASH_FlushCaches+0x88>)
 800989e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80098a2:	6013      	str	r3, [r2, #0]
 80098a4:	4b08      	ldr	r3, [pc, #32]	; (80098c8 <FLASH_FlushCaches+0x88>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a07      	ldr	r2, [pc, #28]	; (80098c8 <FLASH_FlushCaches+0x88>)
 80098aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098ae:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80098b0:	4b05      	ldr	r3, [pc, #20]	; (80098c8 <FLASH_FlushCaches+0x88>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a04      	ldr	r2, [pc, #16]	; (80098c8 <FLASH_FlushCaches+0x88>)
 80098b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80098ba:	6013      	str	r3, [r2, #0]
  }
}
 80098bc:	bf00      	nop
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	40023c00 	.word	0x40023c00

080098cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b089      	sub	sp, #36	; 0x24
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80098d6:	2300      	movs	r3, #0
 80098d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80098da:	2300      	movs	r3, #0
 80098dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80098de:	2300      	movs	r3, #0
 80098e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80098e2:	2300      	movs	r3, #0
 80098e4:	61fb      	str	r3, [r7, #28]
 80098e6:	e159      	b.n	8009b9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80098e8:	2201      	movs	r2, #1
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	fa02 f303 	lsl.w	r3, r2, r3
 80098f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	697a      	ldr	r2, [r7, #20]
 80098f8:	4013      	ands	r3, r2
 80098fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	429a      	cmp	r2, r3
 8009902:	f040 8148 	bne.w	8009b96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	f003 0303 	and.w	r3, r3, #3
 800990e:	2b01      	cmp	r3, #1
 8009910:	d005      	beq.n	800991e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800991a:	2b02      	cmp	r3, #2
 800991c:	d130      	bne.n	8009980 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	005b      	lsls	r3, r3, #1
 8009928:	2203      	movs	r2, #3
 800992a:	fa02 f303 	lsl.w	r3, r2, r3
 800992e:	43db      	mvns	r3, r3
 8009930:	69ba      	ldr	r2, [r7, #24]
 8009932:	4013      	ands	r3, r2
 8009934:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	68da      	ldr	r2, [r3, #12]
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	005b      	lsls	r3, r3, #1
 800993e:	fa02 f303 	lsl.w	r3, r2, r3
 8009942:	69ba      	ldr	r2, [r7, #24]
 8009944:	4313      	orrs	r3, r2
 8009946:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	69ba      	ldr	r2, [r7, #24]
 800994c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009954:	2201      	movs	r2, #1
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	fa02 f303 	lsl.w	r3, r2, r3
 800995c:	43db      	mvns	r3, r3
 800995e:	69ba      	ldr	r2, [r7, #24]
 8009960:	4013      	ands	r3, r2
 8009962:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	091b      	lsrs	r3, r3, #4
 800996a:	f003 0201 	and.w	r2, r3, #1
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	fa02 f303 	lsl.w	r3, r2, r3
 8009974:	69ba      	ldr	r2, [r7, #24]
 8009976:	4313      	orrs	r3, r2
 8009978:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	69ba      	ldr	r2, [r7, #24]
 800997e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	f003 0303 	and.w	r3, r3, #3
 8009988:	2b03      	cmp	r3, #3
 800998a:	d017      	beq.n	80099bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	005b      	lsls	r3, r3, #1
 8009996:	2203      	movs	r2, #3
 8009998:	fa02 f303 	lsl.w	r3, r2, r3
 800999c:	43db      	mvns	r3, r3
 800999e:	69ba      	ldr	r2, [r7, #24]
 80099a0:	4013      	ands	r3, r2
 80099a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	689a      	ldr	r2, [r3, #8]
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	005b      	lsls	r3, r3, #1
 80099ac:	fa02 f303 	lsl.w	r3, r2, r3
 80099b0:	69ba      	ldr	r2, [r7, #24]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	69ba      	ldr	r2, [r7, #24]
 80099ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	f003 0303 	and.w	r3, r3, #3
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	d123      	bne.n	8009a10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80099c8:	69fb      	ldr	r3, [r7, #28]
 80099ca:	08da      	lsrs	r2, r3, #3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	3208      	adds	r2, #8
 80099d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	f003 0307 	and.w	r3, r3, #7
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	220f      	movs	r2, #15
 80099e0:	fa02 f303 	lsl.w	r3, r2, r3
 80099e4:	43db      	mvns	r3, r3
 80099e6:	69ba      	ldr	r2, [r7, #24]
 80099e8:	4013      	ands	r3, r2
 80099ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	691a      	ldr	r2, [r3, #16]
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	f003 0307 	and.w	r3, r3, #7
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	fa02 f303 	lsl.w	r3, r2, r3
 80099fc:	69ba      	ldr	r2, [r7, #24]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	08da      	lsrs	r2, r3, #3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	3208      	adds	r2, #8
 8009a0a:	69b9      	ldr	r1, [r7, #24]
 8009a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009a16:	69fb      	ldr	r3, [r7, #28]
 8009a18:	005b      	lsls	r3, r3, #1
 8009a1a:	2203      	movs	r2, #3
 8009a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a20:	43db      	mvns	r3, r3
 8009a22:	69ba      	ldr	r2, [r7, #24]
 8009a24:	4013      	ands	r3, r2
 8009a26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	f003 0203 	and.w	r2, r3, #3
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	005b      	lsls	r3, r3, #1
 8009a34:	fa02 f303 	lsl.w	r3, r2, r3
 8009a38:	69ba      	ldr	r2, [r7, #24]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	69ba      	ldr	r2, [r7, #24]
 8009a42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	f000 80a2 	beq.w	8009b96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a52:	2300      	movs	r3, #0
 8009a54:	60fb      	str	r3, [r7, #12]
 8009a56:	4b57      	ldr	r3, [pc, #348]	; (8009bb4 <HAL_GPIO_Init+0x2e8>)
 8009a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a5a:	4a56      	ldr	r2, [pc, #344]	; (8009bb4 <HAL_GPIO_Init+0x2e8>)
 8009a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a60:	6453      	str	r3, [r2, #68]	; 0x44
 8009a62:	4b54      	ldr	r3, [pc, #336]	; (8009bb4 <HAL_GPIO_Init+0x2e8>)
 8009a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a6a:	60fb      	str	r3, [r7, #12]
 8009a6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009a6e:	4a52      	ldr	r2, [pc, #328]	; (8009bb8 <HAL_GPIO_Init+0x2ec>)
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	089b      	lsrs	r3, r3, #2
 8009a74:	3302      	adds	r3, #2
 8009a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	f003 0303 	and.w	r3, r3, #3
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	220f      	movs	r2, #15
 8009a86:	fa02 f303 	lsl.w	r3, r2, r3
 8009a8a:	43db      	mvns	r3, r3
 8009a8c:	69ba      	ldr	r2, [r7, #24]
 8009a8e:	4013      	ands	r3, r2
 8009a90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a49      	ldr	r2, [pc, #292]	; (8009bbc <HAL_GPIO_Init+0x2f0>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d019      	beq.n	8009ace <HAL_GPIO_Init+0x202>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4a48      	ldr	r2, [pc, #288]	; (8009bc0 <HAL_GPIO_Init+0x2f4>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d013      	beq.n	8009aca <HAL_GPIO_Init+0x1fe>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a47      	ldr	r2, [pc, #284]	; (8009bc4 <HAL_GPIO_Init+0x2f8>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d00d      	beq.n	8009ac6 <HAL_GPIO_Init+0x1fa>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4a46      	ldr	r2, [pc, #280]	; (8009bc8 <HAL_GPIO_Init+0x2fc>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d007      	beq.n	8009ac2 <HAL_GPIO_Init+0x1f6>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4a45      	ldr	r2, [pc, #276]	; (8009bcc <HAL_GPIO_Init+0x300>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d101      	bne.n	8009abe <HAL_GPIO_Init+0x1f2>
 8009aba:	2304      	movs	r3, #4
 8009abc:	e008      	b.n	8009ad0 <HAL_GPIO_Init+0x204>
 8009abe:	2307      	movs	r3, #7
 8009ac0:	e006      	b.n	8009ad0 <HAL_GPIO_Init+0x204>
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	e004      	b.n	8009ad0 <HAL_GPIO_Init+0x204>
 8009ac6:	2302      	movs	r3, #2
 8009ac8:	e002      	b.n	8009ad0 <HAL_GPIO_Init+0x204>
 8009aca:	2301      	movs	r3, #1
 8009acc:	e000      	b.n	8009ad0 <HAL_GPIO_Init+0x204>
 8009ace:	2300      	movs	r3, #0
 8009ad0:	69fa      	ldr	r2, [r7, #28]
 8009ad2:	f002 0203 	and.w	r2, r2, #3
 8009ad6:	0092      	lsls	r2, r2, #2
 8009ad8:	4093      	lsls	r3, r2
 8009ada:	69ba      	ldr	r2, [r7, #24]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009ae0:	4935      	ldr	r1, [pc, #212]	; (8009bb8 <HAL_GPIO_Init+0x2ec>)
 8009ae2:	69fb      	ldr	r3, [r7, #28]
 8009ae4:	089b      	lsrs	r3, r3, #2
 8009ae6:	3302      	adds	r3, #2
 8009ae8:	69ba      	ldr	r2, [r7, #24]
 8009aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009aee:	4b38      	ldr	r3, [pc, #224]	; (8009bd0 <HAL_GPIO_Init+0x304>)
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	43db      	mvns	r3, r3
 8009af8:	69ba      	ldr	r2, [r7, #24]
 8009afa:	4013      	ands	r3, r2
 8009afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d003      	beq.n	8009b12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8009b0a:	69ba      	ldr	r2, [r7, #24]
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009b12:	4a2f      	ldr	r2, [pc, #188]	; (8009bd0 <HAL_GPIO_Init+0x304>)
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009b18:	4b2d      	ldr	r3, [pc, #180]	; (8009bd0 <HAL_GPIO_Init+0x304>)
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	43db      	mvns	r3, r3
 8009b22:	69ba      	ldr	r2, [r7, #24]
 8009b24:	4013      	ands	r3, r2
 8009b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d003      	beq.n	8009b3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8009b34:	69ba      	ldr	r2, [r7, #24]
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009b3c:	4a24      	ldr	r2, [pc, #144]	; (8009bd0 <HAL_GPIO_Init+0x304>)
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009b42:	4b23      	ldr	r3, [pc, #140]	; (8009bd0 <HAL_GPIO_Init+0x304>)
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	43db      	mvns	r3, r3
 8009b4c:	69ba      	ldr	r2, [r7, #24]
 8009b4e:	4013      	ands	r3, r2
 8009b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d003      	beq.n	8009b66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8009b5e:	69ba      	ldr	r2, [r7, #24]
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	4313      	orrs	r3, r2
 8009b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009b66:	4a1a      	ldr	r2, [pc, #104]	; (8009bd0 <HAL_GPIO_Init+0x304>)
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009b6c:	4b18      	ldr	r3, [pc, #96]	; (8009bd0 <HAL_GPIO_Init+0x304>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	43db      	mvns	r3, r3
 8009b76:	69ba      	ldr	r2, [r7, #24]
 8009b78:	4013      	ands	r3, r2
 8009b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d003      	beq.n	8009b90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8009b88:	69ba      	ldr	r2, [r7, #24]
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009b90:	4a0f      	ldr	r2, [pc, #60]	; (8009bd0 <HAL_GPIO_Init+0x304>)
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	3301      	adds	r3, #1
 8009b9a:	61fb      	str	r3, [r7, #28]
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	2b0f      	cmp	r3, #15
 8009ba0:	f67f aea2 	bls.w	80098e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009ba4:	bf00      	nop
 8009ba6:	bf00      	nop
 8009ba8:	3724      	adds	r7, #36	; 0x24
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr
 8009bb2:	bf00      	nop
 8009bb4:	40023800 	.word	0x40023800
 8009bb8:	40013800 	.word	0x40013800
 8009bbc:	40020000 	.word	0x40020000
 8009bc0:	40020400 	.word	0x40020400
 8009bc4:	40020800 	.word	0x40020800
 8009bc8:	40020c00 	.word	0x40020c00
 8009bcc:	40021000 	.word	0x40021000
 8009bd0:	40013c00 	.word	0x40013c00

08009bd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b085      	sub	sp, #20
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	460b      	mov	r3, r1
 8009bde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	691a      	ldr	r2, [r3, #16]
 8009be4:	887b      	ldrh	r3, [r7, #2]
 8009be6:	4013      	ands	r3, r2
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d002      	beq.n	8009bf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009bec:	2301      	movs	r3, #1
 8009bee:	73fb      	strb	r3, [r7, #15]
 8009bf0:	e001      	b.n	8009bf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3714      	adds	r7, #20
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	807b      	strh	r3, [r7, #2]
 8009c10:	4613      	mov	r3, r2
 8009c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009c14:	787b      	ldrb	r3, [r7, #1]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d003      	beq.n	8009c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009c1a:	887a      	ldrh	r2, [r7, #2]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009c20:	e003      	b.n	8009c2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009c22:	887b      	ldrh	r3, [r7, #2]
 8009c24:	041a      	lsls	r2, r3, #16
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	619a      	str	r2, [r3, #24]
}
 8009c2a:	bf00      	nop
 8009c2c:	370c      	adds	r7, #12
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr

08009c36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009c36:	b480      	push	{r7}
 8009c38:	b085      	sub	sp, #20
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
 8009c3e:	460b      	mov	r3, r1
 8009c40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	695b      	ldr	r3, [r3, #20]
 8009c46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009c48:	887a      	ldrh	r2, [r7, #2]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	041a      	lsls	r2, r3, #16
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	43d9      	mvns	r1, r3
 8009c54:	887b      	ldrh	r3, [r7, #2]
 8009c56:	400b      	ands	r3, r1
 8009c58:	431a      	orrs	r2, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	619a      	str	r2, [r3, #24]
}
 8009c5e:	bf00      	nop
 8009c60:	3714      	adds	r7, #20
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
	...

08009c6c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b088      	sub	sp, #32
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d101      	bne.n	8009c7e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e128      	b.n	8009ed0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d109      	bne.n	8009c9e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a90      	ldr	r2, [pc, #576]	; (8009ed8 <HAL_I2S_Init+0x26c>)
 8009c96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f7f6 ff0b 	bl	8000ab4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2202      	movs	r2, #2
 8009ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	69db      	ldr	r3, [r3, #28]
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	6812      	ldr	r2, [r2, #0]
 8009cb0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8009cb4:	f023 030f 	bic.w	r3, r3, #15
 8009cb8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2202      	movs	r2, #2
 8009cc0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	695b      	ldr	r3, [r3, #20]
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d060      	beq.n	8009d8c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d102      	bne.n	8009cd8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8009cd2:	2310      	movs	r3, #16
 8009cd4:	617b      	str	r3, [r7, #20]
 8009cd6:	e001      	b.n	8009cdc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8009cd8:	2320      	movs	r3, #32
 8009cda:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	2b20      	cmp	r3, #32
 8009ce2:	d802      	bhi.n	8009cea <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	005b      	lsls	r3, r3, #1
 8009ce8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8009cea:	2001      	movs	r0, #1
 8009cec:	f001 fc3c 	bl	800b568 <HAL_RCCEx_GetPeriphCLKFreq>
 8009cf0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cfa:	d125      	bne.n	8009d48 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d010      	beq.n	8009d26 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	68fa      	ldr	r2, [r7, #12]
 8009d0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d0e:	4613      	mov	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4413      	add	r3, r2
 8009d14:	005b      	lsls	r3, r3, #1
 8009d16:	461a      	mov	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	695b      	ldr	r3, [r3, #20]
 8009d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d20:	3305      	adds	r3, #5
 8009d22:	613b      	str	r3, [r7, #16]
 8009d24:	e01f      	b.n	8009d66 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	00db      	lsls	r3, r3, #3
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d30:	4613      	mov	r3, r2
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	4413      	add	r3, r2
 8009d36:	005b      	lsls	r3, r3, #1
 8009d38:	461a      	mov	r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	695b      	ldr	r3, [r3, #20]
 8009d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d42:	3305      	adds	r3, #5
 8009d44:	613b      	str	r3, [r7, #16]
 8009d46:	e00e      	b.n	8009d66 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d50:	4613      	mov	r3, r2
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	4413      	add	r3, r2
 8009d56:	005b      	lsls	r3, r3, #1
 8009d58:	461a      	mov	r2, r3
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	695b      	ldr	r3, [r3, #20]
 8009d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d62:	3305      	adds	r3, #5
 8009d64:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	4a5c      	ldr	r2, [pc, #368]	; (8009edc <HAL_I2S_Init+0x270>)
 8009d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d6e:	08db      	lsrs	r3, r3, #3
 8009d70:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	f003 0301 	and.w	r3, r3, #1
 8009d78:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8009d7a:	693a      	ldr	r2, [r7, #16]
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	1ad3      	subs	r3, r2, r3
 8009d80:	085b      	lsrs	r3, r3, #1
 8009d82:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	021b      	lsls	r3, r3, #8
 8009d88:	61bb      	str	r3, [r7, #24]
 8009d8a:	e003      	b.n	8009d94 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8009d8c:	2302      	movs	r3, #2
 8009d8e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8009d90:	2300      	movs	r3, #0
 8009d92:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d902      	bls.n	8009da0 <HAL_I2S_Init+0x134>
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	2bff      	cmp	r3, #255	; 0xff
 8009d9e:	d907      	bls.n	8009db0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009da4:	f043 0210 	orr.w	r2, r3, #16
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	e08f      	b.n	8009ed0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	691a      	ldr	r2, [r3, #16]
 8009db4:	69bb      	ldr	r3, [r7, #24]
 8009db6:	ea42 0103 	orr.w	r1, r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	69fa      	ldr	r2, [r7, #28]
 8009dc0:	430a      	orrs	r2, r1
 8009dc2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	69db      	ldr	r3, [r3, #28]
 8009dca:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8009dce:	f023 030f 	bic.w	r3, r3, #15
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	6851      	ldr	r1, [r2, #4]
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	6892      	ldr	r2, [r2, #8]
 8009dda:	4311      	orrs	r1, r2
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	68d2      	ldr	r2, [r2, #12]
 8009de0:	4311      	orrs	r1, r2
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	6992      	ldr	r2, [r2, #24]
 8009de6:	430a      	orrs	r2, r1
 8009de8:	431a      	orrs	r2, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009df2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6a1b      	ldr	r3, [r3, #32]
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d161      	bne.n	8009ec0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a38      	ldr	r2, [pc, #224]	; (8009ee0 <HAL_I2S_Init+0x274>)
 8009e00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a37      	ldr	r2, [pc, #220]	; (8009ee4 <HAL_I2S_Init+0x278>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d101      	bne.n	8009e10 <HAL_I2S_Init+0x1a4>
 8009e0c:	4b36      	ldr	r3, [pc, #216]	; (8009ee8 <HAL_I2S_Init+0x27c>)
 8009e0e:	e001      	b.n	8009e14 <HAL_I2S_Init+0x1a8>
 8009e10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009e14:	69db      	ldr	r3, [r3, #28]
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	6812      	ldr	r2, [r2, #0]
 8009e1a:	4932      	ldr	r1, [pc, #200]	; (8009ee4 <HAL_I2S_Init+0x278>)
 8009e1c:	428a      	cmp	r2, r1
 8009e1e:	d101      	bne.n	8009e24 <HAL_I2S_Init+0x1b8>
 8009e20:	4a31      	ldr	r2, [pc, #196]	; (8009ee8 <HAL_I2S_Init+0x27c>)
 8009e22:	e001      	b.n	8009e28 <HAL_I2S_Init+0x1bc>
 8009e24:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8009e28:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8009e2c:	f023 030f 	bic.w	r3, r3, #15
 8009e30:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a2b      	ldr	r2, [pc, #172]	; (8009ee4 <HAL_I2S_Init+0x278>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d101      	bne.n	8009e40 <HAL_I2S_Init+0x1d4>
 8009e3c:	4b2a      	ldr	r3, [pc, #168]	; (8009ee8 <HAL_I2S_Init+0x27c>)
 8009e3e:	e001      	b.n	8009e44 <HAL_I2S_Init+0x1d8>
 8009e40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009e44:	2202      	movs	r2, #2
 8009e46:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a25      	ldr	r2, [pc, #148]	; (8009ee4 <HAL_I2S_Init+0x278>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d101      	bne.n	8009e56 <HAL_I2S_Init+0x1ea>
 8009e52:	4b25      	ldr	r3, [pc, #148]	; (8009ee8 <HAL_I2S_Init+0x27c>)
 8009e54:	e001      	b.n	8009e5a <HAL_I2S_Init+0x1ee>
 8009e56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009e5a:	69db      	ldr	r3, [r3, #28]
 8009e5c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e66:	d003      	beq.n	8009e70 <HAL_I2S_Init+0x204>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d103      	bne.n	8009e78 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8009e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e74:	613b      	str	r3, [r7, #16]
 8009e76:	e001      	b.n	8009e7c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8009e86:	4313      	orrs	r3, r2
 8009e88:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8009e90:	4313      	orrs	r3, r2
 8009e92:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	699b      	ldr	r3, [r3, #24]
 8009e98:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	b29a      	uxth	r2, r3
 8009e9e:	897b      	ldrh	r3, [r7, #10]
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009ea8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a0d      	ldr	r2, [pc, #52]	; (8009ee4 <HAL_I2S_Init+0x278>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d101      	bne.n	8009eb8 <HAL_I2S_Init+0x24c>
 8009eb4:	4b0c      	ldr	r3, [pc, #48]	; (8009ee8 <HAL_I2S_Init+0x27c>)
 8009eb6:	e001      	b.n	8009ebc <HAL_I2S_Init+0x250>
 8009eb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009ebc:	897a      	ldrh	r2, [r7, #10]
 8009ebe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3720      	adds	r7, #32
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	0800a21d 	.word	0x0800a21d
 8009edc:	cccccccd 	.word	0xcccccccd
 8009ee0:	0800a331 	.word	0x0800a331
 8009ee4:	40003800 	.word	0x40003800
 8009ee8:	40003400 	.word	0x40003400

08009eec <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b086      	sub	sp, #24
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d002      	beq.n	8009f06 <HAL_I2S_Receive_DMA+0x1a>
 8009f00:	88fb      	ldrh	r3, [r7, #6]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d101      	bne.n	8009f0a <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e0a1      	b.n	800a04e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d101      	bne.n	8009f1a <HAL_I2S_Receive_DMA+0x2e>
 8009f16:	2302      	movs	r3, #2
 8009f18:	e099      	b.n	800a04e <HAL_I2S_Receive_DMA+0x162>
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d005      	beq.n	8009f3a <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2200      	movs	r2, #0
 8009f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8009f36:	2302      	movs	r3, #2
 8009f38:	e089      	b.n	800a04e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2204      	movs	r2, #4
 8009f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2200      	movs	r2, #0
 8009f46:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	68ba      	ldr	r2, [r7, #8]
 8009f4c:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	69db      	ldr	r3, [r3, #28]
 8009f54:	f003 0307 	and.w	r3, r3, #7
 8009f58:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	2b03      	cmp	r3, #3
 8009f5e:	d002      	beq.n	8009f66 <HAL_I2S_Receive_DMA+0x7a>
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	2b05      	cmp	r3, #5
 8009f64:	d10a      	bne.n	8009f7c <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8009f66:	88fb      	ldrh	r3, [r7, #6]
 8009f68:	005b      	lsls	r3, r3, #1
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8009f70:	88fb      	ldrh	r3, [r7, #6]
 8009f72:	005b      	lsls	r3, r3, #1
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	865a      	strh	r2, [r3, #50]	; 0x32
 8009f7a:	e005      	b.n	8009f88 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	88fa      	ldrh	r2, [r7, #6]
 8009f80:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	88fa      	ldrh	r2, [r7, #6]
 8009f86:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f8c:	4a32      	ldr	r2, [pc, #200]	; (800a058 <HAL_I2S_Receive_DMA+0x16c>)
 8009f8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f94:	4a31      	ldr	r2, [pc, #196]	; (800a05c <HAL_I2S_Receive_DMA+0x170>)
 8009f96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f9c:	4a30      	ldr	r2, [pc, #192]	; (800a060 <HAL_I2S_Receive_DMA+0x174>)
 8009f9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	69db      	ldr	r3, [r3, #28]
 8009fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009faa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009fae:	d10a      	bne.n	8009fc6 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	613b      	str	r3, [r7, #16]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	613b      	str	r3, [r7, #16]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	613b      	str	r3, [r7, #16]
 8009fc4:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	330c      	adds	r3, #12
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd6:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8009fdc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8009fde:	f7fe febf 	bl	8008d60 <HAL_DMA_Start_IT>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d00f      	beq.n	800a008 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fec:	f043 0208 	orr.w	r2, r3, #8
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	e022      	b.n	800a04e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	69db      	ldr	r3, [r3, #28]
 800a00e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a012:	2b00      	cmp	r3, #0
 800a014:	d107      	bne.n	800a026 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	69da      	ldr	r2, [r3, #28]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a024:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	f003 0301 	and.w	r3, r3, #1
 800a030:	2b00      	cmp	r3, #0
 800a032:	d107      	bne.n	800a044 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	685a      	ldr	r2, [r3, #4]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f042 0201 	orr.w	r2, r2, #1
 800a042:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2200      	movs	r2, #0
 800a048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3718      	adds	r7, #24
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	0800a0fb 	.word	0x0800a0fb
 800a05c:	0800a0b9 	.word	0x0800a0b9
 800a060:	0800a117 	.word	0x0800a117

0800a064 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	4798      	blx	r3
}
 800a074:	bf00      	nop
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800a084:	bf00      	nop
 800a086:	370c      	adds	r7, #12
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a098:	bf00      	nop
 800a09a:	370c      	adds	r7, #12
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800a0ac:	bf00      	nop
 800a0ae:	370c      	adds	r7, #12
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	69db      	ldr	r3, [r3, #28]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d10e      	bne.n	800a0ec <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	685a      	ldr	r2, [r3, #4]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f022 0201 	bic.w	r2, r2, #1
 800a0dc:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f7f8 ffd5 	bl	800309c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800a0f2:	bf00      	nop
 800a0f4:	3710      	adds	r7, #16
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b084      	sub	sp, #16
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a106:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f7ff ffc1 	bl	800a090 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800a10e:	bf00      	nop
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b084      	sub	sp, #16
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a122:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	685a      	ldr	r2, [r3, #4]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f022 0203 	bic.w	r2, r2, #3
 800a132:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2200      	movs	r2, #0
 800a138:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2200      	movs	r2, #0
 800a13e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2201      	movs	r2, #1
 800a144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a14c:	f043 0208 	orr.w	r2, r3, #8
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f7ff ffa5 	bl	800a0a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800a15a:	bf00      	nop
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b082      	sub	sp, #8
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16e:	881a      	ldrh	r2, [r3, #0]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17a:	1c9a      	adds	r2, r3, #2
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a184:	b29b      	uxth	r3, r3
 800a186:	3b01      	subs	r3, #1
 800a188:	b29a      	uxth	r2, r3
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a192:	b29b      	uxth	r3, r3
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10e      	bne.n	800a1b6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	685a      	ldr	r2, [r3, #4]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a1a6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f7ff ff63 	bl	800a07c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800a1b6:	bf00      	nop
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b082      	sub	sp, #8
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	68da      	ldr	r2, [r3, #12]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d0:	b292      	uxth	r2, r2
 800a1d2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d8:	1c9a      	adds	r2, r3, #2
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	3b01      	subs	r3, #1
 800a1e6:	b29a      	uxth	r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d10e      	bne.n	800a214 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	685a      	ldr	r2, [r3, #4]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a204:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2201      	movs	r2, #1
 800a20a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f7f8 ff44 	bl	800309c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800a214:	bf00      	nop
 800a216:	3708      	adds	r7, #8
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b086      	sub	sp, #24
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a232:	b2db      	uxtb	r3, r3
 800a234:	2b04      	cmp	r3, #4
 800a236:	d13a      	bne.n	800a2ae <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	f003 0301 	and.w	r3, r3, #1
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d109      	bne.n	800a256 <I2S_IRQHandler+0x3a>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a24c:	2b40      	cmp	r3, #64	; 0x40
 800a24e:	d102      	bne.n	800a256 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f7ff ffb4 	bl	800a1be <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a25c:	2b40      	cmp	r3, #64	; 0x40
 800a25e:	d126      	bne.n	800a2ae <I2S_IRQHandler+0x92>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	f003 0320 	and.w	r3, r3, #32
 800a26a:	2b20      	cmp	r3, #32
 800a26c:	d11f      	bne.n	800a2ae <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	685a      	ldr	r2, [r3, #4]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a27c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800a27e:	2300      	movs	r3, #0
 800a280:	613b      	str	r3, [r7, #16]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	613b      	str	r3, [r7, #16]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	613b      	str	r3, [r7, #16]
 800a292:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2201      	movs	r2, #1
 800a298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2a0:	f043 0202 	orr.w	r2, r3, #2
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f7ff fefb 	bl	800a0a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b03      	cmp	r3, #3
 800a2b8:	d136      	bne.n	800a328 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	f003 0302 	and.w	r3, r3, #2
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	d109      	bne.n	800a2d8 <I2S_IRQHandler+0xbc>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2ce:	2b80      	cmp	r3, #128	; 0x80
 800a2d0:	d102      	bne.n	800a2d8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f7ff ff45 	bl	800a162 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	f003 0308 	and.w	r3, r3, #8
 800a2de:	2b08      	cmp	r3, #8
 800a2e0:	d122      	bne.n	800a328 <I2S_IRQHandler+0x10c>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	f003 0320 	and.w	r3, r3, #32
 800a2ec:	2b20      	cmp	r3, #32
 800a2ee:	d11b      	bne.n	800a328 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	685a      	ldr	r2, [r3, #4]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a2fe:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800a300:	2300      	movs	r3, #0
 800a302:	60fb      	str	r3, [r7, #12]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	60fb      	str	r3, [r7, #12]
 800a30c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2201      	movs	r2, #1
 800a312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a31a:	f043 0204 	orr.w	r2, r3, #4
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f7ff febe 	bl	800a0a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a328:	bf00      	nop
 800a32a:	3718      	adds	r7, #24
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b088      	sub	sp, #32
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a92      	ldr	r2, [pc, #584]	; (800a590 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d101      	bne.n	800a34e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800a34a:	4b92      	ldr	r3, [pc, #584]	; (800a594 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a34c:	e001      	b.n	800a352 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800a34e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a8b      	ldr	r2, [pc, #556]	; (800a590 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d101      	bne.n	800a36c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800a368:	4b8a      	ldr	r3, [pc, #552]	; (800a594 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a36a:	e001      	b.n	800a370 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800a36c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a37c:	d004      	beq.n	800a388 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	f040 8099 	bne.w	800a4ba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	f003 0302 	and.w	r3, r3, #2
 800a38e:	2b02      	cmp	r3, #2
 800a390:	d107      	bne.n	800a3a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d002      	beq.n	800a3a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 f925 	bl	800a5ec <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	f003 0301 	and.w	r3, r3, #1
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d107      	bne.n	800a3bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d002      	beq.n	800a3bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 f9c8 	bl	800a74c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3c2:	2b40      	cmp	r3, #64	; 0x40
 800a3c4:	d13a      	bne.n	800a43c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	f003 0320 	and.w	r3, r3, #32
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d035      	beq.n	800a43c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a6e      	ldr	r2, [pc, #440]	; (800a590 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d101      	bne.n	800a3de <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800a3da:	4b6e      	ldr	r3, [pc, #440]	; (800a594 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a3dc:	e001      	b.n	800a3e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800a3de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a3e2:	685a      	ldr	r2, [r3, #4]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4969      	ldr	r1, [pc, #420]	; (800a590 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a3ea:	428b      	cmp	r3, r1
 800a3ec:	d101      	bne.n	800a3f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800a3ee:	4b69      	ldr	r3, [pc, #420]	; (800a594 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a3f0:	e001      	b.n	800a3f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800a3f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a3f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a3fa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	685a      	ldr	r2, [r3, #4]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a40a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800a40c:	2300      	movs	r3, #0
 800a40e:	60fb      	str	r3, [r7, #12]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68db      	ldr	r3, [r3, #12]
 800a416:	60fb      	str	r3, [r7, #12]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	60fb      	str	r3, [r7, #12]
 800a420:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a42e:	f043 0202 	orr.w	r2, r3, #2
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f7ff fe34 	bl	800a0a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	f003 0308 	and.w	r3, r3, #8
 800a442:	2b08      	cmp	r3, #8
 800a444:	f040 80c3 	bne.w	800a5ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	f003 0320 	and.w	r3, r3, #32
 800a44e:	2b00      	cmp	r3, #0
 800a450:	f000 80bd 	beq.w	800a5ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	685a      	ldr	r2, [r3, #4]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a462:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a49      	ldr	r2, [pc, #292]	; (800a590 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d101      	bne.n	800a472 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800a46e:	4b49      	ldr	r3, [pc, #292]	; (800a594 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a470:	e001      	b.n	800a476 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800a472:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a476:	685a      	ldr	r2, [r3, #4]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4944      	ldr	r1, [pc, #272]	; (800a590 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a47e:	428b      	cmp	r3, r1
 800a480:	d101      	bne.n	800a486 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800a482:	4b44      	ldr	r3, [pc, #272]	; (800a594 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a484:	e001      	b.n	800a48a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800a486:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a48a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a48e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800a490:	2300      	movs	r3, #0
 800a492:	60bb      	str	r3, [r7, #8]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	60bb      	str	r3, [r7, #8]
 800a49c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4aa:	f043 0204 	orr.w	r2, r3, #4
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f7ff fdf6 	bl	800a0a4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800a4b8:	e089      	b.n	800a5ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	f003 0302 	and.w	r3, r3, #2
 800a4c0:	2b02      	cmp	r3, #2
 800a4c2:	d107      	bne.n	800a4d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d002      	beq.n	800a4d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 f8be 	bl	800a650 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	f003 0301 	and.w	r3, r3, #1
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d107      	bne.n	800a4ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d002      	beq.n	800a4ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 f8fd 	bl	800a6e8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800a4ee:	69fb      	ldr	r3, [r7, #28]
 800a4f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f4:	2b40      	cmp	r3, #64	; 0x40
 800a4f6:	d12f      	bne.n	800a558 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	f003 0320 	and.w	r3, r3, #32
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d02a      	beq.n	800a558 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	685a      	ldr	r2, [r3, #4]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a510:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a1e      	ldr	r2, [pc, #120]	; (800a590 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d101      	bne.n	800a520 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800a51c:	4b1d      	ldr	r3, [pc, #116]	; (800a594 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a51e:	e001      	b.n	800a524 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800a520:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a524:	685a      	ldr	r2, [r3, #4]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4919      	ldr	r1, [pc, #100]	; (800a590 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a52c:	428b      	cmp	r3, r1
 800a52e:	d101      	bne.n	800a534 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800a530:	4b18      	ldr	r3, [pc, #96]	; (800a594 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a532:	e001      	b.n	800a538 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800a534:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a538:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a53c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2201      	movs	r2, #1
 800a542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a54a:	f043 0202 	orr.w	r2, r3, #2
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f7ff fda6 	bl	800a0a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	f003 0308 	and.w	r3, r3, #8
 800a55e:	2b08      	cmp	r3, #8
 800a560:	d136      	bne.n	800a5d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	f003 0320 	and.w	r3, r3, #32
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d031      	beq.n	800a5d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a07      	ldr	r2, [pc, #28]	; (800a590 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d101      	bne.n	800a57a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800a576:	4b07      	ldr	r3, [pc, #28]	; (800a594 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a578:	e001      	b.n	800a57e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800a57a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a57e:	685a      	ldr	r2, [r3, #4]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4902      	ldr	r1, [pc, #8]	; (800a590 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a586:	428b      	cmp	r3, r1
 800a588:	d106      	bne.n	800a598 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800a58a:	4b02      	ldr	r3, [pc, #8]	; (800a594 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a58c:	e006      	b.n	800a59c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800a58e:	bf00      	nop
 800a590:	40003800 	.word	0x40003800
 800a594:	40003400 	.word	0x40003400
 800a598:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a59c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a5a0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	685a      	ldr	r2, [r3, #4]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a5b0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5be:	f043 0204 	orr.w	r2, r3, #4
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f7ff fd6c 	bl	800a0a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a5cc:	e000      	b.n	800a5d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800a5ce:	bf00      	nop
}
 800a5d0:	bf00      	nop
 800a5d2:	3720      	adds	r7, #32
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f8:	1c99      	adds	r1, r3, #2
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	6251      	str	r1, [r2, #36]	; 0x24
 800a5fe:	881a      	ldrh	r2, [r3, #0]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	3b01      	subs	r3, #1
 800a60e:	b29a      	uxth	r2, r3
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a618:	b29b      	uxth	r3, r3
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d113      	bne.n	800a646 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	685a      	ldr	r2, [r3, #4]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a62c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a632:	b29b      	uxth	r3, r3
 800a634:	2b00      	cmp	r3, #0
 800a636:	d106      	bne.n	800a646 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f7ff ffc9 	bl	800a5d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a646:	bf00      	nop
 800a648:	3708      	adds	r7, #8
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
	...

0800a650 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65c:	1c99      	adds	r1, r3, #2
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	6251      	str	r1, [r2, #36]	; 0x24
 800a662:	8819      	ldrh	r1, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a1d      	ldr	r2, [pc, #116]	; (800a6e0 <I2SEx_TxISR_I2SExt+0x90>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d101      	bne.n	800a672 <I2SEx_TxISR_I2SExt+0x22>
 800a66e:	4b1d      	ldr	r3, [pc, #116]	; (800a6e4 <I2SEx_TxISR_I2SExt+0x94>)
 800a670:	e001      	b.n	800a676 <I2SEx_TxISR_I2SExt+0x26>
 800a672:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a676:	460a      	mov	r2, r1
 800a678:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a67e:	b29b      	uxth	r3, r3
 800a680:	3b01      	subs	r3, #1
 800a682:	b29a      	uxth	r2, r3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d121      	bne.n	800a6d6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a12      	ldr	r2, [pc, #72]	; (800a6e0 <I2SEx_TxISR_I2SExt+0x90>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d101      	bne.n	800a6a0 <I2SEx_TxISR_I2SExt+0x50>
 800a69c:	4b11      	ldr	r3, [pc, #68]	; (800a6e4 <I2SEx_TxISR_I2SExt+0x94>)
 800a69e:	e001      	b.n	800a6a4 <I2SEx_TxISR_I2SExt+0x54>
 800a6a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a6a4:	685a      	ldr	r2, [r3, #4]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	490d      	ldr	r1, [pc, #52]	; (800a6e0 <I2SEx_TxISR_I2SExt+0x90>)
 800a6ac:	428b      	cmp	r3, r1
 800a6ae:	d101      	bne.n	800a6b4 <I2SEx_TxISR_I2SExt+0x64>
 800a6b0:	4b0c      	ldr	r3, [pc, #48]	; (800a6e4 <I2SEx_TxISR_I2SExt+0x94>)
 800a6b2:	e001      	b.n	800a6b8 <I2SEx_TxISR_I2SExt+0x68>
 800a6b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a6b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a6bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d106      	bne.n	800a6d6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f7ff ff81 	bl	800a5d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a6d6:	bf00      	nop
 800a6d8:	3708      	adds	r7, #8
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	40003800 	.word	0x40003800
 800a6e4:	40003400 	.word	0x40003400

0800a6e8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68d8      	ldr	r0, [r3, #12]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6fa:	1c99      	adds	r1, r3, #2
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	62d1      	str	r1, [r2, #44]	; 0x2c
 800a700:	b282      	uxth	r2, r0
 800a702:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a708:	b29b      	uxth	r3, r3
 800a70a:	3b01      	subs	r3, #1
 800a70c:	b29a      	uxth	r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a716:	b29b      	uxth	r3, r3
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d113      	bne.n	800a744 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	685a      	ldr	r2, [r3, #4]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a72a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a730:	b29b      	uxth	r3, r3
 800a732:	2b00      	cmp	r3, #0
 800a734:	d106      	bne.n	800a744 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2201      	movs	r2, #1
 800a73a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f7ff ff4a 	bl	800a5d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a744:	bf00      	nop
 800a746:	3708      	adds	r7, #8
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a20      	ldr	r2, [pc, #128]	; (800a7dc <I2SEx_RxISR_I2SExt+0x90>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d101      	bne.n	800a762 <I2SEx_RxISR_I2SExt+0x16>
 800a75e:	4b20      	ldr	r3, [pc, #128]	; (800a7e0 <I2SEx_RxISR_I2SExt+0x94>)
 800a760:	e001      	b.n	800a766 <I2SEx_RxISR_I2SExt+0x1a>
 800a762:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a766:	68d8      	ldr	r0, [r3, #12]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a76c:	1c99      	adds	r1, r3, #2
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	62d1      	str	r1, [r2, #44]	; 0x2c
 800a772:	b282      	uxth	r2, r0
 800a774:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	3b01      	subs	r3, #1
 800a77e:	b29a      	uxth	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a788:	b29b      	uxth	r3, r3
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d121      	bne.n	800a7d2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a12      	ldr	r2, [pc, #72]	; (800a7dc <I2SEx_RxISR_I2SExt+0x90>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d101      	bne.n	800a79c <I2SEx_RxISR_I2SExt+0x50>
 800a798:	4b11      	ldr	r3, [pc, #68]	; (800a7e0 <I2SEx_RxISR_I2SExt+0x94>)
 800a79a:	e001      	b.n	800a7a0 <I2SEx_RxISR_I2SExt+0x54>
 800a79c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a7a0:	685a      	ldr	r2, [r3, #4]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	490d      	ldr	r1, [pc, #52]	; (800a7dc <I2SEx_RxISR_I2SExt+0x90>)
 800a7a8:	428b      	cmp	r3, r1
 800a7aa:	d101      	bne.n	800a7b0 <I2SEx_RxISR_I2SExt+0x64>
 800a7ac:	4b0c      	ldr	r3, [pc, #48]	; (800a7e0 <I2SEx_RxISR_I2SExt+0x94>)
 800a7ae:	e001      	b.n	800a7b4 <I2SEx_RxISR_I2SExt+0x68>
 800a7b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a7b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a7b8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d106      	bne.n	800a7d2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f7ff ff03 	bl	800a5d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a7d2:	bf00      	nop
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	40003800 	.word	0x40003800
 800a7e0:	40003400 	.word	0x40003400

0800a7e4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d101      	bne.n	800a7f6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e034      	b.n	800a860 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800a7fe:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f245 5255 	movw	r2, #21845	; 0x5555
 800a808:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	6852      	ldr	r2, [r2, #4]
 800a812:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	6892      	ldr	r2, [r2, #8]
 800a81c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800a81e:	f7fe f893 	bl	8008948 <HAL_GetTick>
 800a822:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a824:	e00f      	b.n	800a846 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800a826:	f7fe f88f 	bl	8008948 <HAL_GetTick>
 800a82a:	4602      	mov	r2, r0
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	2b31      	cmp	r3, #49	; 0x31
 800a832:	d908      	bls.n	800a846 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	f003 0303 	and.w	r3, r3, #3
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d001      	beq.n	800a846 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800a842:	2303      	movs	r3, #3
 800a844:	e00c      	b.n	800a860 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	f003 0303 	and.w	r3, r3, #3
 800a850:	2b00      	cmp	r3, #0
 800a852:	d1e8      	bne.n	800a826 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a85c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3710      	adds	r7, #16
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a878:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	370c      	adds	r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a88a:	b08f      	sub	sp, #60	; 0x3c
 800a88c:	af0a      	add	r7, sp, #40	; 0x28
 800a88e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d101      	bne.n	800a89a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a896:	2301      	movs	r3, #1
 800a898:	e10f      	b.n	800aaba <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d106      	bne.n	800a8ba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f7f9 f8d3 	bl	8003a60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2203      	movs	r2, #3
 800a8be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d102      	bne.n	800a8d4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f001 fd20 	bl	800c31e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	603b      	str	r3, [r7, #0]
 800a8e4:	687e      	ldr	r6, [r7, #4]
 800a8e6:	466d      	mov	r5, sp
 800a8e8:	f106 0410 	add.w	r4, r6, #16
 800a8ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a8ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a8f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a8f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a8f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a8f8:	e885 0003 	stmia.w	r5, {r0, r1}
 800a8fc:	1d33      	adds	r3, r6, #4
 800a8fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a900:	6838      	ldr	r0, [r7, #0]
 800a902:	f001 fcab 	bl	800c25c <USB_CoreInit>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d005      	beq.n	800a918 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2202      	movs	r2, #2
 800a910:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800a914:	2301      	movs	r3, #1
 800a916:	e0d0      	b.n	800aaba <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2100      	movs	r1, #0
 800a91e:	4618      	mov	r0, r3
 800a920:	f001 fd0e 	bl	800c340 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a924:	2300      	movs	r3, #0
 800a926:	73fb      	strb	r3, [r7, #15]
 800a928:	e04a      	b.n	800a9c0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a92a:	7bfa      	ldrb	r2, [r7, #15]
 800a92c:	6879      	ldr	r1, [r7, #4]
 800a92e:	4613      	mov	r3, r2
 800a930:	00db      	lsls	r3, r3, #3
 800a932:	4413      	add	r3, r2
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	440b      	add	r3, r1
 800a938:	333d      	adds	r3, #61	; 0x3d
 800a93a:	2201      	movs	r2, #1
 800a93c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a93e:	7bfa      	ldrb	r2, [r7, #15]
 800a940:	6879      	ldr	r1, [r7, #4]
 800a942:	4613      	mov	r3, r2
 800a944:	00db      	lsls	r3, r3, #3
 800a946:	4413      	add	r3, r2
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	440b      	add	r3, r1
 800a94c:	333c      	adds	r3, #60	; 0x3c
 800a94e:	7bfa      	ldrb	r2, [r7, #15]
 800a950:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a952:	7bfa      	ldrb	r2, [r7, #15]
 800a954:	7bfb      	ldrb	r3, [r7, #15]
 800a956:	b298      	uxth	r0, r3
 800a958:	6879      	ldr	r1, [r7, #4]
 800a95a:	4613      	mov	r3, r2
 800a95c:	00db      	lsls	r3, r3, #3
 800a95e:	4413      	add	r3, r2
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	440b      	add	r3, r1
 800a964:	3344      	adds	r3, #68	; 0x44
 800a966:	4602      	mov	r2, r0
 800a968:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a96a:	7bfa      	ldrb	r2, [r7, #15]
 800a96c:	6879      	ldr	r1, [r7, #4]
 800a96e:	4613      	mov	r3, r2
 800a970:	00db      	lsls	r3, r3, #3
 800a972:	4413      	add	r3, r2
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	440b      	add	r3, r1
 800a978:	3340      	adds	r3, #64	; 0x40
 800a97a:	2200      	movs	r2, #0
 800a97c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a97e:	7bfa      	ldrb	r2, [r7, #15]
 800a980:	6879      	ldr	r1, [r7, #4]
 800a982:	4613      	mov	r3, r2
 800a984:	00db      	lsls	r3, r3, #3
 800a986:	4413      	add	r3, r2
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	440b      	add	r3, r1
 800a98c:	3348      	adds	r3, #72	; 0x48
 800a98e:	2200      	movs	r2, #0
 800a990:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a992:	7bfa      	ldrb	r2, [r7, #15]
 800a994:	6879      	ldr	r1, [r7, #4]
 800a996:	4613      	mov	r3, r2
 800a998:	00db      	lsls	r3, r3, #3
 800a99a:	4413      	add	r3, r2
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	440b      	add	r3, r1
 800a9a0:	334c      	adds	r3, #76	; 0x4c
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a9a6:	7bfa      	ldrb	r2, [r7, #15]
 800a9a8:	6879      	ldr	r1, [r7, #4]
 800a9aa:	4613      	mov	r3, r2
 800a9ac:	00db      	lsls	r3, r3, #3
 800a9ae:	4413      	add	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	440b      	add	r3, r1
 800a9b4:	3354      	adds	r3, #84	; 0x54
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a9ba:	7bfb      	ldrb	r3, [r7, #15]
 800a9bc:	3301      	adds	r3, #1
 800a9be:	73fb      	strb	r3, [r7, #15]
 800a9c0:	7bfa      	ldrb	r2, [r7, #15]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d3af      	bcc.n	800a92a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	73fb      	strb	r3, [r7, #15]
 800a9ce:	e044      	b.n	800aa5a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a9d0:	7bfa      	ldrb	r2, [r7, #15]
 800a9d2:	6879      	ldr	r1, [r7, #4]
 800a9d4:	4613      	mov	r3, r2
 800a9d6:	00db      	lsls	r3, r3, #3
 800a9d8:	4413      	add	r3, r2
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	440b      	add	r3, r1
 800a9de:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a9e6:	7bfa      	ldrb	r2, [r7, #15]
 800a9e8:	6879      	ldr	r1, [r7, #4]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	00db      	lsls	r3, r3, #3
 800a9ee:	4413      	add	r3, r2
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	440b      	add	r3, r1
 800a9f4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800a9f8:	7bfa      	ldrb	r2, [r7, #15]
 800a9fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a9fc:	7bfa      	ldrb	r2, [r7, #15]
 800a9fe:	6879      	ldr	r1, [r7, #4]
 800aa00:	4613      	mov	r3, r2
 800aa02:	00db      	lsls	r3, r3, #3
 800aa04:	4413      	add	r3, r2
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	440b      	add	r3, r1
 800aa0a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800aa0e:	2200      	movs	r2, #0
 800aa10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800aa12:	7bfa      	ldrb	r2, [r7, #15]
 800aa14:	6879      	ldr	r1, [r7, #4]
 800aa16:	4613      	mov	r3, r2
 800aa18:	00db      	lsls	r3, r3, #3
 800aa1a:	4413      	add	r3, r2
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	440b      	add	r3, r1
 800aa20:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800aa24:	2200      	movs	r2, #0
 800aa26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800aa28:	7bfa      	ldrb	r2, [r7, #15]
 800aa2a:	6879      	ldr	r1, [r7, #4]
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	00db      	lsls	r3, r3, #3
 800aa30:	4413      	add	r3, r2
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	440b      	add	r3, r1
 800aa36:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800aa3e:	7bfa      	ldrb	r2, [r7, #15]
 800aa40:	6879      	ldr	r1, [r7, #4]
 800aa42:	4613      	mov	r3, r2
 800aa44:	00db      	lsls	r3, r3, #3
 800aa46:	4413      	add	r3, r2
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	440b      	add	r3, r1
 800aa4c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800aa50:	2200      	movs	r2, #0
 800aa52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa54:	7bfb      	ldrb	r3, [r7, #15]
 800aa56:	3301      	adds	r3, #1
 800aa58:	73fb      	strb	r3, [r7, #15]
 800aa5a:	7bfa      	ldrb	r2, [r7, #15]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d3b5      	bcc.n	800a9d0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	603b      	str	r3, [r7, #0]
 800aa6a:	687e      	ldr	r6, [r7, #4]
 800aa6c:	466d      	mov	r5, sp
 800aa6e:	f106 0410 	add.w	r4, r6, #16
 800aa72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aa76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aa7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aa7e:	e885 0003 	stmia.w	r5, {r0, r1}
 800aa82:	1d33      	adds	r3, r6, #4
 800aa84:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aa86:	6838      	ldr	r0, [r7, #0]
 800aa88:	f001 fca6 	bl	800c3d8 <USB_DevInit>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d005      	beq.n	800aa9e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2202      	movs	r2, #2
 800aa96:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e00d      	b.n	800aaba <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4618      	mov	r0, r3
 800aab4:	f001 fe71 	bl	800c79a <USB_DevDisconnect>

  return HAL_OK;
 800aab8:	2300      	movs	r3, #0
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3714      	adds	r7, #20
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800aac4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b086      	sub	sp, #24
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d101      	bne.n	800aad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aad2:	2301      	movs	r3, #1
 800aad4:	e267      	b.n	800afa6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f003 0301 	and.w	r3, r3, #1
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d075      	beq.n	800abce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800aae2:	4b88      	ldr	r3, [pc, #544]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	f003 030c 	and.w	r3, r3, #12
 800aaea:	2b04      	cmp	r3, #4
 800aaec:	d00c      	beq.n	800ab08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aaee:	4b85      	ldr	r3, [pc, #532]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800aaf0:	689b      	ldr	r3, [r3, #8]
 800aaf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800aaf6:	2b08      	cmp	r3, #8
 800aaf8:	d112      	bne.n	800ab20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aafa:	4b82      	ldr	r3, [pc, #520]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab06:	d10b      	bne.n	800ab20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab08:	4b7e      	ldr	r3, [pc, #504]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d05b      	beq.n	800abcc <HAL_RCC_OscConfig+0x108>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d157      	bne.n	800abcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	e242      	b.n	800afa6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab28:	d106      	bne.n	800ab38 <HAL_RCC_OscConfig+0x74>
 800ab2a:	4b76      	ldr	r3, [pc, #472]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a75      	ldr	r2, [pc, #468]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800ab30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab34:	6013      	str	r3, [r2, #0]
 800ab36:	e01d      	b.n	800ab74 <HAL_RCC_OscConfig+0xb0>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab40:	d10c      	bne.n	800ab5c <HAL_RCC_OscConfig+0x98>
 800ab42:	4b70      	ldr	r3, [pc, #448]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4a6f      	ldr	r2, [pc, #444]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800ab48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab4c:	6013      	str	r3, [r2, #0]
 800ab4e:	4b6d      	ldr	r3, [pc, #436]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a6c      	ldr	r2, [pc, #432]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800ab54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab58:	6013      	str	r3, [r2, #0]
 800ab5a:	e00b      	b.n	800ab74 <HAL_RCC_OscConfig+0xb0>
 800ab5c:	4b69      	ldr	r3, [pc, #420]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a68      	ldr	r2, [pc, #416]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800ab62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab66:	6013      	str	r3, [r2, #0]
 800ab68:	4b66      	ldr	r3, [pc, #408]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a65      	ldr	r2, [pc, #404]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800ab6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ab72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d013      	beq.n	800aba4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab7c:	f7fd fee4 	bl	8008948 <HAL_GetTick>
 800ab80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab82:	e008      	b.n	800ab96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ab84:	f7fd fee0 	bl	8008948 <HAL_GetTick>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	1ad3      	subs	r3, r2, r3
 800ab8e:	2b64      	cmp	r3, #100	; 0x64
 800ab90:	d901      	bls.n	800ab96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ab92:	2303      	movs	r3, #3
 800ab94:	e207      	b.n	800afa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab96:	4b5b      	ldr	r3, [pc, #364]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d0f0      	beq.n	800ab84 <HAL_RCC_OscConfig+0xc0>
 800aba2:	e014      	b.n	800abce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aba4:	f7fd fed0 	bl	8008948 <HAL_GetTick>
 800aba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800abaa:	e008      	b.n	800abbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800abac:	f7fd fecc 	bl	8008948 <HAL_GetTick>
 800abb0:	4602      	mov	r2, r0
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	2b64      	cmp	r3, #100	; 0x64
 800abb8:	d901      	bls.n	800abbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800abba:	2303      	movs	r3, #3
 800abbc:	e1f3      	b.n	800afa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800abbe:	4b51      	ldr	r3, [pc, #324]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d1f0      	bne.n	800abac <HAL_RCC_OscConfig+0xe8>
 800abca:	e000      	b.n	800abce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800abcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f003 0302 	and.w	r3, r3, #2
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d063      	beq.n	800aca2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800abda:	4b4a      	ldr	r3, [pc, #296]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	f003 030c 	and.w	r3, r3, #12
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d00b      	beq.n	800abfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800abe6:	4b47      	ldr	r3, [pc, #284]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800abee:	2b08      	cmp	r3, #8
 800abf0:	d11c      	bne.n	800ac2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800abf2:	4b44      	ldr	r3, [pc, #272]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d116      	bne.n	800ac2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800abfe:	4b41      	ldr	r3, [pc, #260]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f003 0302 	and.w	r3, r3, #2
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d005      	beq.n	800ac16 <HAL_RCC_OscConfig+0x152>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	68db      	ldr	r3, [r3, #12]
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d001      	beq.n	800ac16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ac12:	2301      	movs	r3, #1
 800ac14:	e1c7      	b.n	800afa6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac16:	4b3b      	ldr	r3, [pc, #236]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	00db      	lsls	r3, r3, #3
 800ac24:	4937      	ldr	r1, [pc, #220]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800ac26:	4313      	orrs	r3, r2
 800ac28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ac2a:	e03a      	b.n	800aca2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d020      	beq.n	800ac76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ac34:	4b34      	ldr	r3, [pc, #208]	; (800ad08 <HAL_RCC_OscConfig+0x244>)
 800ac36:	2201      	movs	r2, #1
 800ac38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac3a:	f7fd fe85 	bl	8008948 <HAL_GetTick>
 800ac3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac40:	e008      	b.n	800ac54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ac42:	f7fd fe81 	bl	8008948 <HAL_GetTick>
 800ac46:	4602      	mov	r2, r0
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	1ad3      	subs	r3, r2, r3
 800ac4c:	2b02      	cmp	r3, #2
 800ac4e:	d901      	bls.n	800ac54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ac50:	2303      	movs	r3, #3
 800ac52:	e1a8      	b.n	800afa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac54:	4b2b      	ldr	r3, [pc, #172]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f003 0302 	and.w	r3, r3, #2
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d0f0      	beq.n	800ac42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac60:	4b28      	ldr	r3, [pc, #160]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	691b      	ldr	r3, [r3, #16]
 800ac6c:	00db      	lsls	r3, r3, #3
 800ac6e:	4925      	ldr	r1, [pc, #148]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800ac70:	4313      	orrs	r3, r2
 800ac72:	600b      	str	r3, [r1, #0]
 800ac74:	e015      	b.n	800aca2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ac76:	4b24      	ldr	r3, [pc, #144]	; (800ad08 <HAL_RCC_OscConfig+0x244>)
 800ac78:	2200      	movs	r2, #0
 800ac7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac7c:	f7fd fe64 	bl	8008948 <HAL_GetTick>
 800ac80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ac82:	e008      	b.n	800ac96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ac84:	f7fd fe60 	bl	8008948 <HAL_GetTick>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	1ad3      	subs	r3, r2, r3
 800ac8e:	2b02      	cmp	r3, #2
 800ac90:	d901      	bls.n	800ac96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ac92:	2303      	movs	r3, #3
 800ac94:	e187      	b.n	800afa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ac96:	4b1b      	ldr	r3, [pc, #108]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f003 0302 	and.w	r3, r3, #2
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d1f0      	bne.n	800ac84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f003 0308 	and.w	r3, r3, #8
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d036      	beq.n	800ad1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	695b      	ldr	r3, [r3, #20]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d016      	beq.n	800ace4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800acb6:	4b15      	ldr	r3, [pc, #84]	; (800ad0c <HAL_RCC_OscConfig+0x248>)
 800acb8:	2201      	movs	r2, #1
 800acba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acbc:	f7fd fe44 	bl	8008948 <HAL_GetTick>
 800acc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800acc2:	e008      	b.n	800acd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800acc4:	f7fd fe40 	bl	8008948 <HAL_GetTick>
 800acc8:	4602      	mov	r2, r0
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	1ad3      	subs	r3, r2, r3
 800acce:	2b02      	cmp	r3, #2
 800acd0:	d901      	bls.n	800acd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800acd2:	2303      	movs	r3, #3
 800acd4:	e167      	b.n	800afa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800acd6:	4b0b      	ldr	r3, [pc, #44]	; (800ad04 <HAL_RCC_OscConfig+0x240>)
 800acd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acda:	f003 0302 	and.w	r3, r3, #2
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d0f0      	beq.n	800acc4 <HAL_RCC_OscConfig+0x200>
 800ace2:	e01b      	b.n	800ad1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ace4:	4b09      	ldr	r3, [pc, #36]	; (800ad0c <HAL_RCC_OscConfig+0x248>)
 800ace6:	2200      	movs	r2, #0
 800ace8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800acea:	f7fd fe2d 	bl	8008948 <HAL_GetTick>
 800acee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800acf0:	e00e      	b.n	800ad10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800acf2:	f7fd fe29 	bl	8008948 <HAL_GetTick>
 800acf6:	4602      	mov	r2, r0
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	1ad3      	subs	r3, r2, r3
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	d907      	bls.n	800ad10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ad00:	2303      	movs	r3, #3
 800ad02:	e150      	b.n	800afa6 <HAL_RCC_OscConfig+0x4e2>
 800ad04:	40023800 	.word	0x40023800
 800ad08:	42470000 	.word	0x42470000
 800ad0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ad10:	4b88      	ldr	r3, [pc, #544]	; (800af34 <HAL_RCC_OscConfig+0x470>)
 800ad12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad14:	f003 0302 	and.w	r3, r3, #2
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d1ea      	bne.n	800acf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f003 0304 	and.w	r3, r3, #4
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f000 8097 	beq.w	800ae58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ad2e:	4b81      	ldr	r3, [pc, #516]	; (800af34 <HAL_RCC_OscConfig+0x470>)
 800ad30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d10f      	bne.n	800ad5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	60bb      	str	r3, [r7, #8]
 800ad3e:	4b7d      	ldr	r3, [pc, #500]	; (800af34 <HAL_RCC_OscConfig+0x470>)
 800ad40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad42:	4a7c      	ldr	r2, [pc, #496]	; (800af34 <HAL_RCC_OscConfig+0x470>)
 800ad44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad48:	6413      	str	r3, [r2, #64]	; 0x40
 800ad4a:	4b7a      	ldr	r3, [pc, #488]	; (800af34 <HAL_RCC_OscConfig+0x470>)
 800ad4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad52:	60bb      	str	r3, [r7, #8]
 800ad54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ad56:	2301      	movs	r3, #1
 800ad58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ad5a:	4b77      	ldr	r3, [pc, #476]	; (800af38 <HAL_RCC_OscConfig+0x474>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d118      	bne.n	800ad98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ad66:	4b74      	ldr	r3, [pc, #464]	; (800af38 <HAL_RCC_OscConfig+0x474>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a73      	ldr	r2, [pc, #460]	; (800af38 <HAL_RCC_OscConfig+0x474>)
 800ad6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ad72:	f7fd fde9 	bl	8008948 <HAL_GetTick>
 800ad76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ad78:	e008      	b.n	800ad8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad7a:	f7fd fde5 	bl	8008948 <HAL_GetTick>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	1ad3      	subs	r3, r2, r3
 800ad84:	2b02      	cmp	r3, #2
 800ad86:	d901      	bls.n	800ad8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ad88:	2303      	movs	r3, #3
 800ad8a:	e10c      	b.n	800afa6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ad8c:	4b6a      	ldr	r3, [pc, #424]	; (800af38 <HAL_RCC_OscConfig+0x474>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d0f0      	beq.n	800ad7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	689b      	ldr	r3, [r3, #8]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d106      	bne.n	800adae <HAL_RCC_OscConfig+0x2ea>
 800ada0:	4b64      	ldr	r3, [pc, #400]	; (800af34 <HAL_RCC_OscConfig+0x470>)
 800ada2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ada4:	4a63      	ldr	r2, [pc, #396]	; (800af34 <HAL_RCC_OscConfig+0x470>)
 800ada6:	f043 0301 	orr.w	r3, r3, #1
 800adaa:	6713      	str	r3, [r2, #112]	; 0x70
 800adac:	e01c      	b.n	800ade8 <HAL_RCC_OscConfig+0x324>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	2b05      	cmp	r3, #5
 800adb4:	d10c      	bne.n	800add0 <HAL_RCC_OscConfig+0x30c>
 800adb6:	4b5f      	ldr	r3, [pc, #380]	; (800af34 <HAL_RCC_OscConfig+0x470>)
 800adb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adba:	4a5e      	ldr	r2, [pc, #376]	; (800af34 <HAL_RCC_OscConfig+0x470>)
 800adbc:	f043 0304 	orr.w	r3, r3, #4
 800adc0:	6713      	str	r3, [r2, #112]	; 0x70
 800adc2:	4b5c      	ldr	r3, [pc, #368]	; (800af34 <HAL_RCC_OscConfig+0x470>)
 800adc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adc6:	4a5b      	ldr	r2, [pc, #364]	; (800af34 <HAL_RCC_OscConfig+0x470>)
 800adc8:	f043 0301 	orr.w	r3, r3, #1
 800adcc:	6713      	str	r3, [r2, #112]	; 0x70
 800adce:	e00b      	b.n	800ade8 <HAL_RCC_OscConfig+0x324>
 800add0:	4b58      	ldr	r3, [pc, #352]	; (800af34 <HAL_RCC_OscConfig+0x470>)
 800add2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800add4:	4a57      	ldr	r2, [pc, #348]	; (800af34 <HAL_RCC_OscConfig+0x470>)
 800add6:	f023 0301 	bic.w	r3, r3, #1
 800adda:	6713      	str	r3, [r2, #112]	; 0x70
 800addc:	4b55      	ldr	r3, [pc, #340]	; (800af34 <HAL_RCC_OscConfig+0x470>)
 800adde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ade0:	4a54      	ldr	r2, [pc, #336]	; (800af34 <HAL_RCC_OscConfig+0x470>)
 800ade2:	f023 0304 	bic.w	r3, r3, #4
 800ade6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d015      	beq.n	800ae1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adf0:	f7fd fdaa 	bl	8008948 <HAL_GetTick>
 800adf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800adf6:	e00a      	b.n	800ae0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800adf8:	f7fd fda6 	bl	8008948 <HAL_GetTick>
 800adfc:	4602      	mov	r2, r0
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	1ad3      	subs	r3, r2, r3
 800ae02:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d901      	bls.n	800ae0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ae0a:	2303      	movs	r3, #3
 800ae0c:	e0cb      	b.n	800afa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae0e:	4b49      	ldr	r3, [pc, #292]	; (800af34 <HAL_RCC_OscConfig+0x470>)
 800ae10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae12:	f003 0302 	and.w	r3, r3, #2
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d0ee      	beq.n	800adf8 <HAL_RCC_OscConfig+0x334>
 800ae1a:	e014      	b.n	800ae46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ae1c:	f7fd fd94 	bl	8008948 <HAL_GetTick>
 800ae20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ae22:	e00a      	b.n	800ae3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ae24:	f7fd fd90 	bl	8008948 <HAL_GetTick>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	1ad3      	subs	r3, r2, r3
 800ae2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d901      	bls.n	800ae3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ae36:	2303      	movs	r3, #3
 800ae38:	e0b5      	b.n	800afa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ae3a:	4b3e      	ldr	r3, [pc, #248]	; (800af34 <HAL_RCC_OscConfig+0x470>)
 800ae3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae3e:	f003 0302 	and.w	r3, r3, #2
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d1ee      	bne.n	800ae24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ae46:	7dfb      	ldrb	r3, [r7, #23]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d105      	bne.n	800ae58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ae4c:	4b39      	ldr	r3, [pc, #228]	; (800af34 <HAL_RCC_OscConfig+0x470>)
 800ae4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae50:	4a38      	ldr	r2, [pc, #224]	; (800af34 <HAL_RCC_OscConfig+0x470>)
 800ae52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	699b      	ldr	r3, [r3, #24]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f000 80a1 	beq.w	800afa4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ae62:	4b34      	ldr	r3, [pc, #208]	; (800af34 <HAL_RCC_OscConfig+0x470>)
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	f003 030c 	and.w	r3, r3, #12
 800ae6a:	2b08      	cmp	r3, #8
 800ae6c:	d05c      	beq.n	800af28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	699b      	ldr	r3, [r3, #24]
 800ae72:	2b02      	cmp	r3, #2
 800ae74:	d141      	bne.n	800aefa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae76:	4b31      	ldr	r3, [pc, #196]	; (800af3c <HAL_RCC_OscConfig+0x478>)
 800ae78:	2200      	movs	r2, #0
 800ae7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae7c:	f7fd fd64 	bl	8008948 <HAL_GetTick>
 800ae80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae82:	e008      	b.n	800ae96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae84:	f7fd fd60 	bl	8008948 <HAL_GetTick>
 800ae88:	4602      	mov	r2, r0
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	1ad3      	subs	r3, r2, r3
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	d901      	bls.n	800ae96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ae92:	2303      	movs	r3, #3
 800ae94:	e087      	b.n	800afa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae96:	4b27      	ldr	r3, [pc, #156]	; (800af34 <HAL_RCC_OscConfig+0x470>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1f0      	bne.n	800ae84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	69da      	ldr	r2, [r3, #28]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6a1b      	ldr	r3, [r3, #32]
 800aeaa:	431a      	orrs	r2, r3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb0:	019b      	lsls	r3, r3, #6
 800aeb2:	431a      	orrs	r2, r3
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeb8:	085b      	lsrs	r3, r3, #1
 800aeba:	3b01      	subs	r3, #1
 800aebc:	041b      	lsls	r3, r3, #16
 800aebe:	431a      	orrs	r2, r3
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec4:	061b      	lsls	r3, r3, #24
 800aec6:	491b      	ldr	r1, [pc, #108]	; (800af34 <HAL_RCC_OscConfig+0x470>)
 800aec8:	4313      	orrs	r3, r2
 800aeca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aecc:	4b1b      	ldr	r3, [pc, #108]	; (800af3c <HAL_RCC_OscConfig+0x478>)
 800aece:	2201      	movs	r2, #1
 800aed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aed2:	f7fd fd39 	bl	8008948 <HAL_GetTick>
 800aed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aed8:	e008      	b.n	800aeec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aeda:	f7fd fd35 	bl	8008948 <HAL_GetTick>
 800aede:	4602      	mov	r2, r0
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	1ad3      	subs	r3, r2, r3
 800aee4:	2b02      	cmp	r3, #2
 800aee6:	d901      	bls.n	800aeec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800aee8:	2303      	movs	r3, #3
 800aeea:	e05c      	b.n	800afa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aeec:	4b11      	ldr	r3, [pc, #68]	; (800af34 <HAL_RCC_OscConfig+0x470>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d0f0      	beq.n	800aeda <HAL_RCC_OscConfig+0x416>
 800aef8:	e054      	b.n	800afa4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aefa:	4b10      	ldr	r3, [pc, #64]	; (800af3c <HAL_RCC_OscConfig+0x478>)
 800aefc:	2200      	movs	r2, #0
 800aefe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af00:	f7fd fd22 	bl	8008948 <HAL_GetTick>
 800af04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800af06:	e008      	b.n	800af1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800af08:	f7fd fd1e 	bl	8008948 <HAL_GetTick>
 800af0c:	4602      	mov	r2, r0
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	1ad3      	subs	r3, r2, r3
 800af12:	2b02      	cmp	r3, #2
 800af14:	d901      	bls.n	800af1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800af16:	2303      	movs	r3, #3
 800af18:	e045      	b.n	800afa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800af1a:	4b06      	ldr	r3, [pc, #24]	; (800af34 <HAL_RCC_OscConfig+0x470>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1f0      	bne.n	800af08 <HAL_RCC_OscConfig+0x444>
 800af26:	e03d      	b.n	800afa4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	699b      	ldr	r3, [r3, #24]
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d107      	bne.n	800af40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800af30:	2301      	movs	r3, #1
 800af32:	e038      	b.n	800afa6 <HAL_RCC_OscConfig+0x4e2>
 800af34:	40023800 	.word	0x40023800
 800af38:	40007000 	.word	0x40007000
 800af3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800af40:	4b1b      	ldr	r3, [pc, #108]	; (800afb0 <HAL_RCC_OscConfig+0x4ec>)
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	699b      	ldr	r3, [r3, #24]
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d028      	beq.n	800afa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af58:	429a      	cmp	r2, r3
 800af5a:	d121      	bne.n	800afa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af66:	429a      	cmp	r2, r3
 800af68:	d11a      	bne.n	800afa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800af6a:	68fa      	ldr	r2, [r7, #12]
 800af6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800af70:	4013      	ands	r3, r2
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800af76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800af78:	4293      	cmp	r3, r2
 800af7a:	d111      	bne.n	800afa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af86:	085b      	lsrs	r3, r3, #1
 800af88:	3b01      	subs	r3, #1
 800af8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d107      	bne.n	800afa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d001      	beq.n	800afa4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800afa0:	2301      	movs	r3, #1
 800afa2:	e000      	b.n	800afa6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3718      	adds	r7, #24
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	40023800 	.word	0x40023800

0800afb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d101      	bne.n	800afc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800afc4:	2301      	movs	r3, #1
 800afc6:	e0cc      	b.n	800b162 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800afc8:	4b68      	ldr	r3, [pc, #416]	; (800b16c <HAL_RCC_ClockConfig+0x1b8>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f003 0307 	and.w	r3, r3, #7
 800afd0:	683a      	ldr	r2, [r7, #0]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d90c      	bls.n	800aff0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800afd6:	4b65      	ldr	r3, [pc, #404]	; (800b16c <HAL_RCC_ClockConfig+0x1b8>)
 800afd8:	683a      	ldr	r2, [r7, #0]
 800afda:	b2d2      	uxtb	r2, r2
 800afdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800afde:	4b63      	ldr	r3, [pc, #396]	; (800b16c <HAL_RCC_ClockConfig+0x1b8>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f003 0307 	and.w	r3, r3, #7
 800afe6:	683a      	ldr	r2, [r7, #0]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d001      	beq.n	800aff0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800afec:	2301      	movs	r3, #1
 800afee:	e0b8      	b.n	800b162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f003 0302 	and.w	r3, r3, #2
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d020      	beq.n	800b03e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f003 0304 	and.w	r3, r3, #4
 800b004:	2b00      	cmp	r3, #0
 800b006:	d005      	beq.n	800b014 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b008:	4b59      	ldr	r3, [pc, #356]	; (800b170 <HAL_RCC_ClockConfig+0x1bc>)
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	4a58      	ldr	r2, [pc, #352]	; (800b170 <HAL_RCC_ClockConfig+0x1bc>)
 800b00e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b012:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f003 0308 	and.w	r3, r3, #8
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d005      	beq.n	800b02c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b020:	4b53      	ldr	r3, [pc, #332]	; (800b170 <HAL_RCC_ClockConfig+0x1bc>)
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	4a52      	ldr	r2, [pc, #328]	; (800b170 <HAL_RCC_ClockConfig+0x1bc>)
 800b026:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b02a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b02c:	4b50      	ldr	r3, [pc, #320]	; (800b170 <HAL_RCC_ClockConfig+0x1bc>)
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	689b      	ldr	r3, [r3, #8]
 800b038:	494d      	ldr	r1, [pc, #308]	; (800b170 <HAL_RCC_ClockConfig+0x1bc>)
 800b03a:	4313      	orrs	r3, r2
 800b03c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f003 0301 	and.w	r3, r3, #1
 800b046:	2b00      	cmp	r3, #0
 800b048:	d044      	beq.n	800b0d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d107      	bne.n	800b062 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b052:	4b47      	ldr	r3, [pc, #284]	; (800b170 <HAL_RCC_ClockConfig+0x1bc>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d119      	bne.n	800b092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b05e:	2301      	movs	r3, #1
 800b060:	e07f      	b.n	800b162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	2b02      	cmp	r3, #2
 800b068:	d003      	beq.n	800b072 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b06e:	2b03      	cmp	r3, #3
 800b070:	d107      	bne.n	800b082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b072:	4b3f      	ldr	r3, [pc, #252]	; (800b170 <HAL_RCC_ClockConfig+0x1bc>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d109      	bne.n	800b092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b07e:	2301      	movs	r3, #1
 800b080:	e06f      	b.n	800b162 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b082:	4b3b      	ldr	r3, [pc, #236]	; (800b170 <HAL_RCC_ClockConfig+0x1bc>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f003 0302 	and.w	r3, r3, #2
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d101      	bne.n	800b092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b08e:	2301      	movs	r3, #1
 800b090:	e067      	b.n	800b162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b092:	4b37      	ldr	r3, [pc, #220]	; (800b170 <HAL_RCC_ClockConfig+0x1bc>)
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	f023 0203 	bic.w	r2, r3, #3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	4934      	ldr	r1, [pc, #208]	; (800b170 <HAL_RCC_ClockConfig+0x1bc>)
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b0a4:	f7fd fc50 	bl	8008948 <HAL_GetTick>
 800b0a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0aa:	e00a      	b.n	800b0c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b0ac:	f7fd fc4c 	bl	8008948 <HAL_GetTick>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	1ad3      	subs	r3, r2, r3
 800b0b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d901      	bls.n	800b0c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b0be:	2303      	movs	r3, #3
 800b0c0:	e04f      	b.n	800b162 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0c2:	4b2b      	ldr	r3, [pc, #172]	; (800b170 <HAL_RCC_ClockConfig+0x1bc>)
 800b0c4:	689b      	ldr	r3, [r3, #8]
 800b0c6:	f003 020c 	and.w	r2, r3, #12
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d1eb      	bne.n	800b0ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b0d4:	4b25      	ldr	r3, [pc, #148]	; (800b16c <HAL_RCC_ClockConfig+0x1b8>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f003 0307 	and.w	r3, r3, #7
 800b0dc:	683a      	ldr	r2, [r7, #0]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d20c      	bcs.n	800b0fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0e2:	4b22      	ldr	r3, [pc, #136]	; (800b16c <HAL_RCC_ClockConfig+0x1b8>)
 800b0e4:	683a      	ldr	r2, [r7, #0]
 800b0e6:	b2d2      	uxtb	r2, r2
 800b0e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0ea:	4b20      	ldr	r3, [pc, #128]	; (800b16c <HAL_RCC_ClockConfig+0x1b8>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f003 0307 	and.w	r3, r3, #7
 800b0f2:	683a      	ldr	r2, [r7, #0]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d001      	beq.n	800b0fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	e032      	b.n	800b162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f003 0304 	and.w	r3, r3, #4
 800b104:	2b00      	cmp	r3, #0
 800b106:	d008      	beq.n	800b11a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b108:	4b19      	ldr	r3, [pc, #100]	; (800b170 <HAL_RCC_ClockConfig+0x1bc>)
 800b10a:	689b      	ldr	r3, [r3, #8]
 800b10c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	68db      	ldr	r3, [r3, #12]
 800b114:	4916      	ldr	r1, [pc, #88]	; (800b170 <HAL_RCC_ClockConfig+0x1bc>)
 800b116:	4313      	orrs	r3, r2
 800b118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f003 0308 	and.w	r3, r3, #8
 800b122:	2b00      	cmp	r3, #0
 800b124:	d009      	beq.n	800b13a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b126:	4b12      	ldr	r3, [pc, #72]	; (800b170 <HAL_RCC_ClockConfig+0x1bc>)
 800b128:	689b      	ldr	r3, [r3, #8]
 800b12a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	691b      	ldr	r3, [r3, #16]
 800b132:	00db      	lsls	r3, r3, #3
 800b134:	490e      	ldr	r1, [pc, #56]	; (800b170 <HAL_RCC_ClockConfig+0x1bc>)
 800b136:	4313      	orrs	r3, r2
 800b138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b13a:	f000 f821 	bl	800b180 <HAL_RCC_GetSysClockFreq>
 800b13e:	4602      	mov	r2, r0
 800b140:	4b0b      	ldr	r3, [pc, #44]	; (800b170 <HAL_RCC_ClockConfig+0x1bc>)
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	091b      	lsrs	r3, r3, #4
 800b146:	f003 030f 	and.w	r3, r3, #15
 800b14a:	490a      	ldr	r1, [pc, #40]	; (800b174 <HAL_RCC_ClockConfig+0x1c0>)
 800b14c:	5ccb      	ldrb	r3, [r1, r3]
 800b14e:	fa22 f303 	lsr.w	r3, r2, r3
 800b152:	4a09      	ldr	r2, [pc, #36]	; (800b178 <HAL_RCC_ClockConfig+0x1c4>)
 800b154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b156:	4b09      	ldr	r3, [pc, #36]	; (800b17c <HAL_RCC_ClockConfig+0x1c8>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7fd fbb0 	bl	80088c0 <HAL_InitTick>

  return HAL_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	40023c00 	.word	0x40023c00
 800b170:	40023800 	.word	0x40023800
 800b174:	080116b0 	.word	0x080116b0
 800b178:	20000410 	.word	0x20000410
 800b17c:	2000044c 	.word	0x2000044c

0800b180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b184:	b094      	sub	sp, #80	; 0x50
 800b186:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b188:	2300      	movs	r3, #0
 800b18a:	647b      	str	r3, [r7, #68]	; 0x44
 800b18c:	2300      	movs	r3, #0
 800b18e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b190:	2300      	movs	r3, #0
 800b192:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800b194:	2300      	movs	r3, #0
 800b196:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b198:	4b79      	ldr	r3, [pc, #484]	; (800b380 <HAL_RCC_GetSysClockFreq+0x200>)
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	f003 030c 	and.w	r3, r3, #12
 800b1a0:	2b08      	cmp	r3, #8
 800b1a2:	d00d      	beq.n	800b1c0 <HAL_RCC_GetSysClockFreq+0x40>
 800b1a4:	2b08      	cmp	r3, #8
 800b1a6:	f200 80e1 	bhi.w	800b36c <HAL_RCC_GetSysClockFreq+0x1ec>
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d002      	beq.n	800b1b4 <HAL_RCC_GetSysClockFreq+0x34>
 800b1ae:	2b04      	cmp	r3, #4
 800b1b0:	d003      	beq.n	800b1ba <HAL_RCC_GetSysClockFreq+0x3a>
 800b1b2:	e0db      	b.n	800b36c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b1b4:	4b73      	ldr	r3, [pc, #460]	; (800b384 <HAL_RCC_GetSysClockFreq+0x204>)
 800b1b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800b1b8:	e0db      	b.n	800b372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b1ba:	4b72      	ldr	r3, [pc, #456]	; (800b384 <HAL_RCC_GetSysClockFreq+0x204>)
 800b1bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b1be:	e0d8      	b.n	800b372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b1c0:	4b6f      	ldr	r3, [pc, #444]	; (800b380 <HAL_RCC_GetSysClockFreq+0x200>)
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b1ca:	4b6d      	ldr	r3, [pc, #436]	; (800b380 <HAL_RCC_GetSysClockFreq+0x200>)
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d063      	beq.n	800b29e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b1d6:	4b6a      	ldr	r3, [pc, #424]	; (800b380 <HAL_RCC_GetSysClockFreq+0x200>)
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	099b      	lsrs	r3, r3, #6
 800b1dc:	2200      	movs	r2, #0
 800b1de:	63bb      	str	r3, [r7, #56]	; 0x38
 800b1e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1e8:	633b      	str	r3, [r7, #48]	; 0x30
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	637b      	str	r3, [r7, #52]	; 0x34
 800b1ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b1f2:	4622      	mov	r2, r4
 800b1f4:	462b      	mov	r3, r5
 800b1f6:	f04f 0000 	mov.w	r0, #0
 800b1fa:	f04f 0100 	mov.w	r1, #0
 800b1fe:	0159      	lsls	r1, r3, #5
 800b200:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b204:	0150      	lsls	r0, r2, #5
 800b206:	4602      	mov	r2, r0
 800b208:	460b      	mov	r3, r1
 800b20a:	4621      	mov	r1, r4
 800b20c:	1a51      	subs	r1, r2, r1
 800b20e:	6139      	str	r1, [r7, #16]
 800b210:	4629      	mov	r1, r5
 800b212:	eb63 0301 	sbc.w	r3, r3, r1
 800b216:	617b      	str	r3, [r7, #20]
 800b218:	f04f 0200 	mov.w	r2, #0
 800b21c:	f04f 0300 	mov.w	r3, #0
 800b220:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b224:	4659      	mov	r1, fp
 800b226:	018b      	lsls	r3, r1, #6
 800b228:	4651      	mov	r1, sl
 800b22a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b22e:	4651      	mov	r1, sl
 800b230:	018a      	lsls	r2, r1, #6
 800b232:	4651      	mov	r1, sl
 800b234:	ebb2 0801 	subs.w	r8, r2, r1
 800b238:	4659      	mov	r1, fp
 800b23a:	eb63 0901 	sbc.w	r9, r3, r1
 800b23e:	f04f 0200 	mov.w	r2, #0
 800b242:	f04f 0300 	mov.w	r3, #0
 800b246:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b24a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b24e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b252:	4690      	mov	r8, r2
 800b254:	4699      	mov	r9, r3
 800b256:	4623      	mov	r3, r4
 800b258:	eb18 0303 	adds.w	r3, r8, r3
 800b25c:	60bb      	str	r3, [r7, #8]
 800b25e:	462b      	mov	r3, r5
 800b260:	eb49 0303 	adc.w	r3, r9, r3
 800b264:	60fb      	str	r3, [r7, #12]
 800b266:	f04f 0200 	mov.w	r2, #0
 800b26a:	f04f 0300 	mov.w	r3, #0
 800b26e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b272:	4629      	mov	r1, r5
 800b274:	028b      	lsls	r3, r1, #10
 800b276:	4621      	mov	r1, r4
 800b278:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b27c:	4621      	mov	r1, r4
 800b27e:	028a      	lsls	r2, r1, #10
 800b280:	4610      	mov	r0, r2
 800b282:	4619      	mov	r1, r3
 800b284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b286:	2200      	movs	r2, #0
 800b288:	62bb      	str	r3, [r7, #40]	; 0x28
 800b28a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b28c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b290:	f7f5 f85e 	bl	8000350 <__aeabi_uldivmod>
 800b294:	4602      	mov	r2, r0
 800b296:	460b      	mov	r3, r1
 800b298:	4613      	mov	r3, r2
 800b29a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b29c:	e058      	b.n	800b350 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b29e:	4b38      	ldr	r3, [pc, #224]	; (800b380 <HAL_RCC_GetSysClockFreq+0x200>)
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	099b      	lsrs	r3, r3, #6
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	4611      	mov	r1, r2
 800b2aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b2ae:	623b      	str	r3, [r7, #32]
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	627b      	str	r3, [r7, #36]	; 0x24
 800b2b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b2b8:	4642      	mov	r2, r8
 800b2ba:	464b      	mov	r3, r9
 800b2bc:	f04f 0000 	mov.w	r0, #0
 800b2c0:	f04f 0100 	mov.w	r1, #0
 800b2c4:	0159      	lsls	r1, r3, #5
 800b2c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b2ca:	0150      	lsls	r0, r2, #5
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	4641      	mov	r1, r8
 800b2d2:	ebb2 0a01 	subs.w	sl, r2, r1
 800b2d6:	4649      	mov	r1, r9
 800b2d8:	eb63 0b01 	sbc.w	fp, r3, r1
 800b2dc:	f04f 0200 	mov.w	r2, #0
 800b2e0:	f04f 0300 	mov.w	r3, #0
 800b2e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b2e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b2ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b2f0:	ebb2 040a 	subs.w	r4, r2, sl
 800b2f4:	eb63 050b 	sbc.w	r5, r3, fp
 800b2f8:	f04f 0200 	mov.w	r2, #0
 800b2fc:	f04f 0300 	mov.w	r3, #0
 800b300:	00eb      	lsls	r3, r5, #3
 800b302:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b306:	00e2      	lsls	r2, r4, #3
 800b308:	4614      	mov	r4, r2
 800b30a:	461d      	mov	r5, r3
 800b30c:	4643      	mov	r3, r8
 800b30e:	18e3      	adds	r3, r4, r3
 800b310:	603b      	str	r3, [r7, #0]
 800b312:	464b      	mov	r3, r9
 800b314:	eb45 0303 	adc.w	r3, r5, r3
 800b318:	607b      	str	r3, [r7, #4]
 800b31a:	f04f 0200 	mov.w	r2, #0
 800b31e:	f04f 0300 	mov.w	r3, #0
 800b322:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b326:	4629      	mov	r1, r5
 800b328:	028b      	lsls	r3, r1, #10
 800b32a:	4621      	mov	r1, r4
 800b32c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b330:	4621      	mov	r1, r4
 800b332:	028a      	lsls	r2, r1, #10
 800b334:	4610      	mov	r0, r2
 800b336:	4619      	mov	r1, r3
 800b338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b33a:	2200      	movs	r2, #0
 800b33c:	61bb      	str	r3, [r7, #24]
 800b33e:	61fa      	str	r2, [r7, #28]
 800b340:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b344:	f7f5 f804 	bl	8000350 <__aeabi_uldivmod>
 800b348:	4602      	mov	r2, r0
 800b34a:	460b      	mov	r3, r1
 800b34c:	4613      	mov	r3, r2
 800b34e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b350:	4b0b      	ldr	r3, [pc, #44]	; (800b380 <HAL_RCC_GetSysClockFreq+0x200>)
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	0c1b      	lsrs	r3, r3, #16
 800b356:	f003 0303 	and.w	r3, r3, #3
 800b35a:	3301      	adds	r3, #1
 800b35c:	005b      	lsls	r3, r3, #1
 800b35e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b360:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b364:	fbb2 f3f3 	udiv	r3, r2, r3
 800b368:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b36a:	e002      	b.n	800b372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b36c:	4b05      	ldr	r3, [pc, #20]	; (800b384 <HAL_RCC_GetSysClockFreq+0x204>)
 800b36e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b370:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b374:	4618      	mov	r0, r3
 800b376:	3750      	adds	r7, #80	; 0x50
 800b378:	46bd      	mov	sp, r7
 800b37a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b37e:	bf00      	nop
 800b380:	40023800 	.word	0x40023800
 800b384:	00f42400 	.word	0x00f42400

0800b388 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b086      	sub	sp, #24
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b390:	2300      	movs	r3, #0
 800b392:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800b394:	2300      	movs	r3, #0
 800b396:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f003 0301 	and.w	r3, r3, #1
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d105      	bne.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d038      	beq.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b3b0:	4b68      	ldr	r3, [pc, #416]	; (800b554 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b3b6:	f7fd fac7 	bl	8008948 <HAL_GetTick>
 800b3ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b3bc:	e008      	b.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b3be:	f7fd fac3 	bl	8008948 <HAL_GetTick>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	1ad3      	subs	r3, r2, r3
 800b3c8:	2b02      	cmp	r3, #2
 800b3ca:	d901      	bls.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b3cc:	2303      	movs	r3, #3
 800b3ce:	e0bd      	b.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b3d0:	4b61      	ldr	r3, [pc, #388]	; (800b558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d1f0      	bne.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	685a      	ldr	r2, [r3, #4]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	019b      	lsls	r3, r3, #6
 800b3e6:	431a      	orrs	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	68db      	ldr	r3, [r3, #12]
 800b3ec:	071b      	lsls	r3, r3, #28
 800b3ee:	495a      	ldr	r1, [pc, #360]	; (800b558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b3f6:	4b57      	ldr	r3, [pc, #348]	; (800b554 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b3fc:	f7fd faa4 	bl	8008948 <HAL_GetTick>
 800b400:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b402:	e008      	b.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b404:	f7fd faa0 	bl	8008948 <HAL_GetTick>
 800b408:	4602      	mov	r2, r0
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	1ad3      	subs	r3, r2, r3
 800b40e:	2b02      	cmp	r3, #2
 800b410:	d901      	bls.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b412:	2303      	movs	r3, #3
 800b414:	e09a      	b.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b416:	4b50      	ldr	r3, [pc, #320]	; (800b558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d0f0      	beq.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f003 0302 	and.w	r3, r3, #2
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	f000 8083 	beq.w	800b536 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b430:	2300      	movs	r3, #0
 800b432:	60fb      	str	r3, [r7, #12]
 800b434:	4b48      	ldr	r3, [pc, #288]	; (800b558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b438:	4a47      	ldr	r2, [pc, #284]	; (800b558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b43a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b43e:	6413      	str	r3, [r2, #64]	; 0x40
 800b440:	4b45      	ldr	r3, [pc, #276]	; (800b558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b448:	60fb      	str	r3, [r7, #12]
 800b44a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b44c:	4b43      	ldr	r3, [pc, #268]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4a42      	ldr	r2, [pc, #264]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b456:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b458:	f7fd fa76 	bl	8008948 <HAL_GetTick>
 800b45c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b45e:	e008      	b.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b460:	f7fd fa72 	bl	8008948 <HAL_GetTick>
 800b464:	4602      	mov	r2, r0
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	1ad3      	subs	r3, r2, r3
 800b46a:	2b02      	cmp	r3, #2
 800b46c:	d901      	bls.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800b46e:	2303      	movs	r3, #3
 800b470:	e06c      	b.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b472:	4b3a      	ldr	r3, [pc, #232]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d0f0      	beq.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b47e:	4b36      	ldr	r3, [pc, #216]	; (800b558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b486:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d02f      	beq.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x166>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	691b      	ldr	r3, [r3, #16]
 800b492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b496:	693a      	ldr	r2, [r7, #16]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d028      	beq.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b49c:	4b2e      	ldr	r3, [pc, #184]	; (800b558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b49e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4a4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b4a6:	4b2e      	ldr	r3, [pc, #184]	; (800b560 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b4ac:	4b2c      	ldr	r3, [pc, #176]	; (800b560 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b4b2:	4a29      	ldr	r2, [pc, #164]	; (800b558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b4b8:	4b27      	ldr	r3, [pc, #156]	; (800b558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b4ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4bc:	f003 0301 	and.w	r3, r3, #1
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d114      	bne.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b4c4:	f7fd fa40 	bl	8008948 <HAL_GetTick>
 800b4c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b4ca:	e00a      	b.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b4cc:	f7fd fa3c 	bl	8008948 <HAL_GetTick>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	1ad3      	subs	r3, r2, r3
 800b4d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d901      	bls.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800b4de:	2303      	movs	r3, #3
 800b4e0:	e034      	b.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b4e2:	4b1d      	ldr	r3, [pc, #116]	; (800b558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b4e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4e6:	f003 0302 	and.w	r3, r3, #2
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d0ee      	beq.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	691b      	ldr	r3, [r3, #16]
 800b4f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4fa:	d10d      	bne.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800b4fc:	4b16      	ldr	r3, [pc, #88]	; (800b558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	691b      	ldr	r3, [r3, #16]
 800b508:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b50c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b510:	4911      	ldr	r1, [pc, #68]	; (800b558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b512:	4313      	orrs	r3, r2
 800b514:	608b      	str	r3, [r1, #8]
 800b516:	e005      	b.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800b518:	4b0f      	ldr	r3, [pc, #60]	; (800b558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	4a0e      	ldr	r2, [pc, #56]	; (800b558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b51e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b522:	6093      	str	r3, [r2, #8]
 800b524:	4b0c      	ldr	r3, [pc, #48]	; (800b558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b526:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	691b      	ldr	r3, [r3, #16]
 800b52c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b530:	4909      	ldr	r1, [pc, #36]	; (800b558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b532:	4313      	orrs	r3, r2
 800b534:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f003 0308 	and.w	r3, r3, #8
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d003      	beq.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	7d1a      	ldrb	r2, [r3, #20]
 800b546:	4b07      	ldr	r3, [pc, #28]	; (800b564 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800b548:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800b54a:	2300      	movs	r3, #0
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3718      	adds	r7, #24
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	42470068 	.word	0x42470068
 800b558:	40023800 	.word	0x40023800
 800b55c:	40007000 	.word	0x40007000
 800b560:	42470e40 	.word	0x42470e40
 800b564:	424711e0 	.word	0x424711e0

0800b568 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b568:	b480      	push	{r7}
 800b56a:	b087      	sub	sp, #28
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800b570:	2300      	movs	r3, #0
 800b572:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800b574:	2300      	movs	r3, #0
 800b576:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800b578:	2300      	movs	r3, #0
 800b57a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800b57c:	2300      	movs	r3, #0
 800b57e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2b01      	cmp	r3, #1
 800b584:	d140      	bne.n	800b608 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800b586:	4b24      	ldr	r3, [pc, #144]	; (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b58e:	60fb      	str	r3, [r7, #12]
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d005      	beq.n	800b5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d131      	bne.n	800b600 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800b59c:	4b1f      	ldr	r3, [pc, #124]	; (800b61c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800b59e:	617b      	str	r3, [r7, #20]
          break;
 800b5a0:	e031      	b.n	800b606 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800b5a2:	4b1d      	ldr	r3, [pc, #116]	; (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b5ae:	d109      	bne.n	800b5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800b5b0:	4b19      	ldr	r3, [pc, #100]	; (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b5b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5ba:	4a19      	ldr	r2, [pc, #100]	; (800b620 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800b5bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5c0:	613b      	str	r3, [r7, #16]
 800b5c2:	e008      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800b5c4:	4b14      	ldr	r3, [pc, #80]	; (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b5c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5ce:	4a14      	ldr	r2, [pc, #80]	; (800b620 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800b5d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5d4:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800b5d6:	4b10      	ldr	r3, [pc, #64]	; (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b5d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5dc:	099b      	lsrs	r3, r3, #6
 800b5de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	fb02 f303 	mul.w	r3, r2, r3
 800b5e8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800b5ea:	4b0b      	ldr	r3, [pc, #44]	; (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b5ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5f0:	0f1b      	lsrs	r3, r3, #28
 800b5f2:	f003 0307 	and.w	r3, r3, #7
 800b5f6:	68ba      	ldr	r2, [r7, #8]
 800b5f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5fc:	617b      	str	r3, [r7, #20]
          break;
 800b5fe:	e002      	b.n	800b606 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800b600:	2300      	movs	r3, #0
 800b602:	617b      	str	r3, [r7, #20]
          break;
 800b604:	bf00      	nop
        }
      }
      break;
 800b606:	bf00      	nop
    }
  }
  return frequency;
 800b608:	697b      	ldr	r3, [r7, #20]
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	371c      	adds	r7, #28
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr
 800b616:	bf00      	nop
 800b618:	40023800 	.word	0x40023800
 800b61c:	00bb8000 	.word	0x00bb8000
 800b620:	00f42400 	.word	0x00f42400

0800b624 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d101      	bne.n	800b636 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b632:	2301      	movs	r3, #1
 800b634:	e041      	b.n	800b6ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d106      	bne.n	800b650 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f7f8 f880 	bl	8003750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2202      	movs	r2, #2
 800b654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	3304      	adds	r3, #4
 800b660:	4619      	mov	r1, r3
 800b662:	4610      	mov	r0, r2
 800b664:	f000 fac0 	bl	800bbe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2201      	movs	r2, #1
 800b66c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2201      	movs	r2, #1
 800b674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2201      	movs	r2, #1
 800b67c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2201      	movs	r2, #1
 800b684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2201      	movs	r2, #1
 800b68c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2201      	movs	r2, #1
 800b694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2201      	movs	r2, #1
 800b69c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b6b8:	2300      	movs	r3, #0
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3708      	adds	r7, #8
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b082      	sub	sp, #8
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d101      	bne.n	800b6d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	e041      	b.n	800b758 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d106      	bne.n	800b6ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 f839 	bl	800b760 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2202      	movs	r2, #2
 800b6f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	3304      	adds	r3, #4
 800b6fe:	4619      	mov	r1, r3
 800b700:	4610      	mov	r0, r2
 800b702:	f000 fa71 	bl	800bbe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2201      	movs	r2, #1
 800b70a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2201      	movs	r2, #1
 800b712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2201      	movs	r2, #1
 800b71a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2201      	movs	r2, #1
 800b722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2201      	movs	r2, #1
 800b72a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2201      	movs	r2, #1
 800b732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2201      	movs	r2, #1
 800b73a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2201      	movs	r2, #1
 800b742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2201      	movs	r2, #1
 800b74a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2201      	movs	r2, #1
 800b752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b756:	2300      	movs	r3, #0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3708      	adds	r7, #8
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b768:	bf00      	nop
 800b76a:	370c      	adds	r7, #12
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d109      	bne.n	800b798 <HAL_TIM_PWM_Start+0x24>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	bf14      	ite	ne
 800b790:	2301      	movne	r3, #1
 800b792:	2300      	moveq	r3, #0
 800b794:	b2db      	uxtb	r3, r3
 800b796:	e022      	b.n	800b7de <HAL_TIM_PWM_Start+0x6a>
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	2b04      	cmp	r3, #4
 800b79c:	d109      	bne.n	800b7b2 <HAL_TIM_PWM_Start+0x3e>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	bf14      	ite	ne
 800b7aa:	2301      	movne	r3, #1
 800b7ac:	2300      	moveq	r3, #0
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	e015      	b.n	800b7de <HAL_TIM_PWM_Start+0x6a>
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	2b08      	cmp	r3, #8
 800b7b6:	d109      	bne.n	800b7cc <HAL_TIM_PWM_Start+0x58>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	bf14      	ite	ne
 800b7c4:	2301      	movne	r3, #1
 800b7c6:	2300      	moveq	r3, #0
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	e008      	b.n	800b7de <HAL_TIM_PWM_Start+0x6a>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	bf14      	ite	ne
 800b7d8:	2301      	movne	r3, #1
 800b7da:	2300      	moveq	r3, #0
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d001      	beq.n	800b7e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e068      	b.n	800b8b8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d104      	bne.n	800b7f6 <HAL_TIM_PWM_Start+0x82>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2202      	movs	r2, #2
 800b7f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b7f4:	e013      	b.n	800b81e <HAL_TIM_PWM_Start+0xaa>
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	2b04      	cmp	r3, #4
 800b7fa:	d104      	bne.n	800b806 <HAL_TIM_PWM_Start+0x92>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2202      	movs	r2, #2
 800b800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b804:	e00b      	b.n	800b81e <HAL_TIM_PWM_Start+0xaa>
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	2b08      	cmp	r3, #8
 800b80a:	d104      	bne.n	800b816 <HAL_TIM_PWM_Start+0xa2>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2202      	movs	r2, #2
 800b810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b814:	e003      	b.n	800b81e <HAL_TIM_PWM_Start+0xaa>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2202      	movs	r2, #2
 800b81a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2201      	movs	r2, #1
 800b824:	6839      	ldr	r1, [r7, #0]
 800b826:	4618      	mov	r0, r3
 800b828:	f000 fc84 	bl	800c134 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a23      	ldr	r2, [pc, #140]	; (800b8c0 <HAL_TIM_PWM_Start+0x14c>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d107      	bne.n	800b846 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b844:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a1d      	ldr	r2, [pc, #116]	; (800b8c0 <HAL_TIM_PWM_Start+0x14c>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d018      	beq.n	800b882 <HAL_TIM_PWM_Start+0x10e>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b858:	d013      	beq.n	800b882 <HAL_TIM_PWM_Start+0x10e>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a19      	ldr	r2, [pc, #100]	; (800b8c4 <HAL_TIM_PWM_Start+0x150>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d00e      	beq.n	800b882 <HAL_TIM_PWM_Start+0x10e>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a17      	ldr	r2, [pc, #92]	; (800b8c8 <HAL_TIM_PWM_Start+0x154>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d009      	beq.n	800b882 <HAL_TIM_PWM_Start+0x10e>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a16      	ldr	r2, [pc, #88]	; (800b8cc <HAL_TIM_PWM_Start+0x158>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d004      	beq.n	800b882 <HAL_TIM_PWM_Start+0x10e>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a14      	ldr	r2, [pc, #80]	; (800b8d0 <HAL_TIM_PWM_Start+0x15c>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d111      	bne.n	800b8a6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	689b      	ldr	r3, [r3, #8]
 800b888:	f003 0307 	and.w	r3, r3, #7
 800b88c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2b06      	cmp	r3, #6
 800b892:	d010      	beq.n	800b8b6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f042 0201 	orr.w	r2, r2, #1
 800b8a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8a4:	e007      	b.n	800b8b6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f042 0201 	orr.w	r2, r2, #1
 800b8b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b8b6:	2300      	movs	r3, #0
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3710      	adds	r7, #16
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	40010000 	.word	0x40010000
 800b8c4:	40000400 	.word	0x40000400
 800b8c8:	40000800 	.word	0x40000800
 800b8cc:	40000c00 	.word	0x40000c00
 800b8d0:	40014000 	.word	0x40014000

0800b8d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b086      	sub	sp, #24
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	60b9      	str	r1, [r7, #8]
 800b8de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d101      	bne.n	800b8f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b8ee:	2302      	movs	r3, #2
 800b8f0:	e0ae      	b.n	800ba50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2b0c      	cmp	r3, #12
 800b8fe:	f200 809f 	bhi.w	800ba40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b902:	a201      	add	r2, pc, #4	; (adr r2, 800b908 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b908:	0800b93d 	.word	0x0800b93d
 800b90c:	0800ba41 	.word	0x0800ba41
 800b910:	0800ba41 	.word	0x0800ba41
 800b914:	0800ba41 	.word	0x0800ba41
 800b918:	0800b97d 	.word	0x0800b97d
 800b91c:	0800ba41 	.word	0x0800ba41
 800b920:	0800ba41 	.word	0x0800ba41
 800b924:	0800ba41 	.word	0x0800ba41
 800b928:	0800b9bf 	.word	0x0800b9bf
 800b92c:	0800ba41 	.word	0x0800ba41
 800b930:	0800ba41 	.word	0x0800ba41
 800b934:	0800ba41 	.word	0x0800ba41
 800b938:	0800b9ff 	.word	0x0800b9ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	68b9      	ldr	r1, [r7, #8]
 800b942:	4618      	mov	r0, r3
 800b944:	f000 f9d0 	bl	800bce8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	699a      	ldr	r2, [r3, #24]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f042 0208 	orr.w	r2, r2, #8
 800b956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	699a      	ldr	r2, [r3, #24]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f022 0204 	bic.w	r2, r2, #4
 800b966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	6999      	ldr	r1, [r3, #24]
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	691a      	ldr	r2, [r3, #16]
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	430a      	orrs	r2, r1
 800b978:	619a      	str	r2, [r3, #24]
      break;
 800b97a:	e064      	b.n	800ba46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	68b9      	ldr	r1, [r7, #8]
 800b982:	4618      	mov	r0, r3
 800b984:	f000 fa16 	bl	800bdb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	699a      	ldr	r2, [r3, #24]
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	699a      	ldr	r2, [r3, #24]
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	6999      	ldr	r1, [r3, #24]
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	691b      	ldr	r3, [r3, #16]
 800b9b2:	021a      	lsls	r2, r3, #8
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	430a      	orrs	r2, r1
 800b9ba:	619a      	str	r2, [r3, #24]
      break;
 800b9bc:	e043      	b.n	800ba46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	68b9      	ldr	r1, [r7, #8]
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f000 fa61 	bl	800be8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	69da      	ldr	r2, [r3, #28]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f042 0208 	orr.w	r2, r2, #8
 800b9d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	69da      	ldr	r2, [r3, #28]
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f022 0204 	bic.w	r2, r2, #4
 800b9e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	69d9      	ldr	r1, [r3, #28]
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	691a      	ldr	r2, [r3, #16]
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	430a      	orrs	r2, r1
 800b9fa:	61da      	str	r2, [r3, #28]
      break;
 800b9fc:	e023      	b.n	800ba46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	68b9      	ldr	r1, [r7, #8]
 800ba04:	4618      	mov	r0, r3
 800ba06:	f000 faab 	bl	800bf60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	69da      	ldr	r2, [r3, #28]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	69da      	ldr	r2, [r3, #28]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	69d9      	ldr	r1, [r3, #28]
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	691b      	ldr	r3, [r3, #16]
 800ba34:	021a      	lsls	r2, r3, #8
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	430a      	orrs	r2, r1
 800ba3c:	61da      	str	r2, [r3, #28]
      break;
 800ba3e:	e002      	b.n	800ba46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ba40:	2301      	movs	r3, #1
 800ba42:	75fb      	strb	r3, [r7, #23]
      break;
 800ba44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ba4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3718      	adds	r7, #24
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba62:	2300      	movs	r3, #0
 800ba64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d101      	bne.n	800ba74 <HAL_TIM_ConfigClockSource+0x1c>
 800ba70:	2302      	movs	r3, #2
 800ba72:	e0b4      	b.n	800bbde <HAL_TIM_ConfigClockSource+0x186>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2201      	movs	r2, #1
 800ba78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2202      	movs	r2, #2
 800ba80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ba92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	68ba      	ldr	r2, [r7, #8]
 800baa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800baac:	d03e      	beq.n	800bb2c <HAL_TIM_ConfigClockSource+0xd4>
 800baae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bab2:	f200 8087 	bhi.w	800bbc4 <HAL_TIM_ConfigClockSource+0x16c>
 800bab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baba:	f000 8086 	beq.w	800bbca <HAL_TIM_ConfigClockSource+0x172>
 800babe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bac2:	d87f      	bhi.n	800bbc4 <HAL_TIM_ConfigClockSource+0x16c>
 800bac4:	2b70      	cmp	r3, #112	; 0x70
 800bac6:	d01a      	beq.n	800bafe <HAL_TIM_ConfigClockSource+0xa6>
 800bac8:	2b70      	cmp	r3, #112	; 0x70
 800baca:	d87b      	bhi.n	800bbc4 <HAL_TIM_ConfigClockSource+0x16c>
 800bacc:	2b60      	cmp	r3, #96	; 0x60
 800bace:	d050      	beq.n	800bb72 <HAL_TIM_ConfigClockSource+0x11a>
 800bad0:	2b60      	cmp	r3, #96	; 0x60
 800bad2:	d877      	bhi.n	800bbc4 <HAL_TIM_ConfigClockSource+0x16c>
 800bad4:	2b50      	cmp	r3, #80	; 0x50
 800bad6:	d03c      	beq.n	800bb52 <HAL_TIM_ConfigClockSource+0xfa>
 800bad8:	2b50      	cmp	r3, #80	; 0x50
 800bada:	d873      	bhi.n	800bbc4 <HAL_TIM_ConfigClockSource+0x16c>
 800badc:	2b40      	cmp	r3, #64	; 0x40
 800bade:	d058      	beq.n	800bb92 <HAL_TIM_ConfigClockSource+0x13a>
 800bae0:	2b40      	cmp	r3, #64	; 0x40
 800bae2:	d86f      	bhi.n	800bbc4 <HAL_TIM_ConfigClockSource+0x16c>
 800bae4:	2b30      	cmp	r3, #48	; 0x30
 800bae6:	d064      	beq.n	800bbb2 <HAL_TIM_ConfigClockSource+0x15a>
 800bae8:	2b30      	cmp	r3, #48	; 0x30
 800baea:	d86b      	bhi.n	800bbc4 <HAL_TIM_ConfigClockSource+0x16c>
 800baec:	2b20      	cmp	r3, #32
 800baee:	d060      	beq.n	800bbb2 <HAL_TIM_ConfigClockSource+0x15a>
 800baf0:	2b20      	cmp	r3, #32
 800baf2:	d867      	bhi.n	800bbc4 <HAL_TIM_ConfigClockSource+0x16c>
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d05c      	beq.n	800bbb2 <HAL_TIM_ConfigClockSource+0x15a>
 800baf8:	2b10      	cmp	r3, #16
 800bafa:	d05a      	beq.n	800bbb2 <HAL_TIM_ConfigClockSource+0x15a>
 800bafc:	e062      	b.n	800bbc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6818      	ldr	r0, [r3, #0]
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	6899      	ldr	r1, [r3, #8]
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	685a      	ldr	r2, [r3, #4]
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	f000 faf1 	bl	800c0f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bb20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	68ba      	ldr	r2, [r7, #8]
 800bb28:	609a      	str	r2, [r3, #8]
      break;
 800bb2a:	e04f      	b.n	800bbcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6818      	ldr	r0, [r3, #0]
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	6899      	ldr	r1, [r3, #8]
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	685a      	ldr	r2, [r3, #4]
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	f000 fada 	bl	800c0f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	689a      	ldr	r2, [r3, #8]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bb4e:	609a      	str	r2, [r3, #8]
      break;
 800bb50:	e03c      	b.n	800bbcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6818      	ldr	r0, [r3, #0]
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	6859      	ldr	r1, [r3, #4]
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	461a      	mov	r2, r3
 800bb60:	f000 fa4e 	bl	800c000 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	2150      	movs	r1, #80	; 0x50
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f000 faa7 	bl	800c0be <TIM_ITRx_SetConfig>
      break;
 800bb70:	e02c      	b.n	800bbcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6818      	ldr	r0, [r3, #0]
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	6859      	ldr	r1, [r3, #4]
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	68db      	ldr	r3, [r3, #12]
 800bb7e:	461a      	mov	r2, r3
 800bb80:	f000 fa6d 	bl	800c05e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2160      	movs	r1, #96	; 0x60
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f000 fa97 	bl	800c0be <TIM_ITRx_SetConfig>
      break;
 800bb90:	e01c      	b.n	800bbcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6818      	ldr	r0, [r3, #0]
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	6859      	ldr	r1, [r3, #4]
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	461a      	mov	r2, r3
 800bba0:	f000 fa2e 	bl	800c000 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	2140      	movs	r1, #64	; 0x40
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f000 fa87 	bl	800c0be <TIM_ITRx_SetConfig>
      break;
 800bbb0:	e00c      	b.n	800bbcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4619      	mov	r1, r3
 800bbbc:	4610      	mov	r0, r2
 800bbbe:	f000 fa7e 	bl	800c0be <TIM_ITRx_SetConfig>
      break;
 800bbc2:	e003      	b.n	800bbcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	73fb      	strb	r3, [r7, #15]
      break;
 800bbc8:	e000      	b.n	800bbcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bbca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2201      	movs	r2, #1
 800bbd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bbdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3710      	adds	r7, #16
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
	...

0800bbe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b085      	sub	sp, #20
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	4a34      	ldr	r2, [pc, #208]	; (800bccc <TIM_Base_SetConfig+0xe4>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d00f      	beq.n	800bc20 <TIM_Base_SetConfig+0x38>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc06:	d00b      	beq.n	800bc20 <TIM_Base_SetConfig+0x38>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	4a31      	ldr	r2, [pc, #196]	; (800bcd0 <TIM_Base_SetConfig+0xe8>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d007      	beq.n	800bc20 <TIM_Base_SetConfig+0x38>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	4a30      	ldr	r2, [pc, #192]	; (800bcd4 <TIM_Base_SetConfig+0xec>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d003      	beq.n	800bc20 <TIM_Base_SetConfig+0x38>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	4a2f      	ldr	r2, [pc, #188]	; (800bcd8 <TIM_Base_SetConfig+0xf0>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d108      	bne.n	800bc32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	4a25      	ldr	r2, [pc, #148]	; (800bccc <TIM_Base_SetConfig+0xe4>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d01b      	beq.n	800bc72 <TIM_Base_SetConfig+0x8a>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc40:	d017      	beq.n	800bc72 <TIM_Base_SetConfig+0x8a>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	4a22      	ldr	r2, [pc, #136]	; (800bcd0 <TIM_Base_SetConfig+0xe8>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d013      	beq.n	800bc72 <TIM_Base_SetConfig+0x8a>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	4a21      	ldr	r2, [pc, #132]	; (800bcd4 <TIM_Base_SetConfig+0xec>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d00f      	beq.n	800bc72 <TIM_Base_SetConfig+0x8a>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	4a20      	ldr	r2, [pc, #128]	; (800bcd8 <TIM_Base_SetConfig+0xf0>)
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d00b      	beq.n	800bc72 <TIM_Base_SetConfig+0x8a>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4a1f      	ldr	r2, [pc, #124]	; (800bcdc <TIM_Base_SetConfig+0xf4>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d007      	beq.n	800bc72 <TIM_Base_SetConfig+0x8a>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	4a1e      	ldr	r2, [pc, #120]	; (800bce0 <TIM_Base_SetConfig+0xf8>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d003      	beq.n	800bc72 <TIM_Base_SetConfig+0x8a>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	4a1d      	ldr	r2, [pc, #116]	; (800bce4 <TIM_Base_SetConfig+0xfc>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d108      	bne.n	800bc84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	68fa      	ldr	r2, [r7, #12]
 800bc80:	4313      	orrs	r3, r2
 800bc82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	695b      	ldr	r3, [r3, #20]
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	689a      	ldr	r2, [r3, #8]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	4a08      	ldr	r2, [pc, #32]	; (800bccc <TIM_Base_SetConfig+0xe4>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d103      	bne.n	800bcb8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	691a      	ldr	r2, [r3, #16]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	615a      	str	r2, [r3, #20]
}
 800bcbe:	bf00      	nop
 800bcc0:	3714      	adds	r7, #20
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr
 800bcca:	bf00      	nop
 800bccc:	40010000 	.word	0x40010000
 800bcd0:	40000400 	.word	0x40000400
 800bcd4:	40000800 	.word	0x40000800
 800bcd8:	40000c00 	.word	0x40000c00
 800bcdc:	40014000 	.word	0x40014000
 800bce0:	40014400 	.word	0x40014400
 800bce4:	40014800 	.word	0x40014800

0800bce8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b087      	sub	sp, #28
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6a1b      	ldr	r3, [r3, #32]
 800bcf6:	f023 0201 	bic.w	r2, r3, #1
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6a1b      	ldr	r3, [r3, #32]
 800bd02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	699b      	ldr	r3, [r3, #24]
 800bd0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f023 0303 	bic.w	r3, r3, #3
 800bd1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	68fa      	ldr	r2, [r7, #12]
 800bd26:	4313      	orrs	r3, r2
 800bd28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	f023 0302 	bic.w	r3, r3, #2
 800bd30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	697a      	ldr	r2, [r7, #20]
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	4a1c      	ldr	r2, [pc, #112]	; (800bdb0 <TIM_OC1_SetConfig+0xc8>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d10c      	bne.n	800bd5e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	f023 0308 	bic.w	r3, r3, #8
 800bd4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	68db      	ldr	r3, [r3, #12]
 800bd50:	697a      	ldr	r2, [r7, #20]
 800bd52:	4313      	orrs	r3, r2
 800bd54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	f023 0304 	bic.w	r3, r3, #4
 800bd5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	4a13      	ldr	r2, [pc, #76]	; (800bdb0 <TIM_OC1_SetConfig+0xc8>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d111      	bne.n	800bd8a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bd74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	695b      	ldr	r3, [r3, #20]
 800bd7a:	693a      	ldr	r2, [r7, #16]
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	699b      	ldr	r3, [r3, #24]
 800bd84:	693a      	ldr	r2, [r7, #16]
 800bd86:	4313      	orrs	r3, r2
 800bd88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	693a      	ldr	r2, [r7, #16]
 800bd8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	68fa      	ldr	r2, [r7, #12]
 800bd94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	685a      	ldr	r2, [r3, #4]
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	697a      	ldr	r2, [r7, #20]
 800bda2:	621a      	str	r2, [r3, #32]
}
 800bda4:	bf00      	nop
 800bda6:	371c      	adds	r7, #28
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr
 800bdb0:	40010000 	.word	0x40010000

0800bdb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b087      	sub	sp, #28
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6a1b      	ldr	r3, [r3, #32]
 800bdc2:	f023 0210 	bic.w	r2, r3, #16
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6a1b      	ldr	r3, [r3, #32]
 800bdce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	699b      	ldr	r3, [r3, #24]
 800bdda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bde2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bdea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	021b      	lsls	r3, r3, #8
 800bdf2:	68fa      	ldr	r2, [r7, #12]
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	f023 0320 	bic.w	r3, r3, #32
 800bdfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	689b      	ldr	r3, [r3, #8]
 800be04:	011b      	lsls	r3, r3, #4
 800be06:	697a      	ldr	r2, [r7, #20]
 800be08:	4313      	orrs	r3, r2
 800be0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	4a1e      	ldr	r2, [pc, #120]	; (800be88 <TIM_OC2_SetConfig+0xd4>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d10d      	bne.n	800be30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	68db      	ldr	r3, [r3, #12]
 800be20:	011b      	lsls	r3, r3, #4
 800be22:	697a      	ldr	r2, [r7, #20]
 800be24:	4313      	orrs	r3, r2
 800be26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	4a15      	ldr	r2, [pc, #84]	; (800be88 <TIM_OC2_SetConfig+0xd4>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d113      	bne.n	800be60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800be3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800be46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	695b      	ldr	r3, [r3, #20]
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	693a      	ldr	r2, [r7, #16]
 800be50:	4313      	orrs	r3, r2
 800be52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	699b      	ldr	r3, [r3, #24]
 800be58:	009b      	lsls	r3, r3, #2
 800be5a:	693a      	ldr	r2, [r7, #16]
 800be5c:	4313      	orrs	r3, r2
 800be5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	693a      	ldr	r2, [r7, #16]
 800be64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	685a      	ldr	r2, [r3, #4]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	697a      	ldr	r2, [r7, #20]
 800be78:	621a      	str	r2, [r3, #32]
}
 800be7a:	bf00      	nop
 800be7c:	371c      	adds	r7, #28
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr
 800be86:	bf00      	nop
 800be88:	40010000 	.word	0x40010000

0800be8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b087      	sub	sp, #28
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6a1b      	ldr	r3, [r3, #32]
 800be9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6a1b      	ldr	r3, [r3, #32]
 800bea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	685b      	ldr	r3, [r3, #4]
 800beac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	69db      	ldr	r3, [r3, #28]
 800beb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800beba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f023 0303 	bic.w	r3, r3, #3
 800bec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	68fa      	ldr	r2, [r7, #12]
 800beca:	4313      	orrs	r3, r2
 800becc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	689b      	ldr	r3, [r3, #8]
 800beda:	021b      	lsls	r3, r3, #8
 800bedc:	697a      	ldr	r2, [r7, #20]
 800bede:	4313      	orrs	r3, r2
 800bee0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	4a1d      	ldr	r2, [pc, #116]	; (800bf5c <TIM_OC3_SetConfig+0xd0>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d10d      	bne.n	800bf06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bef0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	021b      	lsls	r3, r3, #8
 800bef8:	697a      	ldr	r2, [r7, #20]
 800befa:	4313      	orrs	r3, r2
 800befc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bf04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	4a14      	ldr	r2, [pc, #80]	; (800bf5c <TIM_OC3_SetConfig+0xd0>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d113      	bne.n	800bf36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bf1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	695b      	ldr	r3, [r3, #20]
 800bf22:	011b      	lsls	r3, r3, #4
 800bf24:	693a      	ldr	r2, [r7, #16]
 800bf26:	4313      	orrs	r3, r2
 800bf28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	699b      	ldr	r3, [r3, #24]
 800bf2e:	011b      	lsls	r3, r3, #4
 800bf30:	693a      	ldr	r2, [r7, #16]
 800bf32:	4313      	orrs	r3, r2
 800bf34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	693a      	ldr	r2, [r7, #16]
 800bf3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	68fa      	ldr	r2, [r7, #12]
 800bf40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	685a      	ldr	r2, [r3, #4]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	697a      	ldr	r2, [r7, #20]
 800bf4e:	621a      	str	r2, [r3, #32]
}
 800bf50:	bf00      	nop
 800bf52:	371c      	adds	r7, #28
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr
 800bf5c:	40010000 	.word	0x40010000

0800bf60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b087      	sub	sp, #28
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6a1b      	ldr	r3, [r3, #32]
 800bf6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6a1b      	ldr	r3, [r3, #32]
 800bf7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	69db      	ldr	r3, [r3, #28]
 800bf86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	021b      	lsls	r3, r3, #8
 800bf9e:	68fa      	ldr	r2, [r7, #12]
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bfaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	689b      	ldr	r3, [r3, #8]
 800bfb0:	031b      	lsls	r3, r3, #12
 800bfb2:	693a      	ldr	r2, [r7, #16]
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	4a10      	ldr	r2, [pc, #64]	; (800bffc <TIM_OC4_SetConfig+0x9c>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d109      	bne.n	800bfd4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bfc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	695b      	ldr	r3, [r3, #20]
 800bfcc:	019b      	lsls	r3, r3, #6
 800bfce:	697a      	ldr	r2, [r7, #20]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	697a      	ldr	r2, [r7, #20]
 800bfd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	68fa      	ldr	r2, [r7, #12]
 800bfde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	685a      	ldr	r2, [r3, #4]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	693a      	ldr	r2, [r7, #16]
 800bfec:	621a      	str	r2, [r3, #32]
}
 800bfee:	bf00      	nop
 800bff0:	371c      	adds	r7, #28
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	40010000 	.word	0x40010000

0800c000 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c000:	b480      	push	{r7}
 800c002:	b087      	sub	sp, #28
 800c004:	af00      	add	r7, sp, #0
 800c006:	60f8      	str	r0, [r7, #12]
 800c008:	60b9      	str	r1, [r7, #8]
 800c00a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	6a1b      	ldr	r3, [r3, #32]
 800c010:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	6a1b      	ldr	r3, [r3, #32]
 800c016:	f023 0201 	bic.w	r2, r3, #1
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	699b      	ldr	r3, [r3, #24]
 800c022:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c02a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	011b      	lsls	r3, r3, #4
 800c030:	693a      	ldr	r2, [r7, #16]
 800c032:	4313      	orrs	r3, r2
 800c034:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	f023 030a 	bic.w	r3, r3, #10
 800c03c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c03e:	697a      	ldr	r2, [r7, #20]
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	4313      	orrs	r3, r2
 800c044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	693a      	ldr	r2, [r7, #16]
 800c04a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	697a      	ldr	r2, [r7, #20]
 800c050:	621a      	str	r2, [r3, #32]
}
 800c052:	bf00      	nop
 800c054:	371c      	adds	r7, #28
 800c056:	46bd      	mov	sp, r7
 800c058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05c:	4770      	bx	lr

0800c05e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c05e:	b480      	push	{r7}
 800c060:	b087      	sub	sp, #28
 800c062:	af00      	add	r7, sp, #0
 800c064:	60f8      	str	r0, [r7, #12]
 800c066:	60b9      	str	r1, [r7, #8]
 800c068:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	6a1b      	ldr	r3, [r3, #32]
 800c06e:	f023 0210 	bic.w	r2, r3, #16
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	699b      	ldr	r3, [r3, #24]
 800c07a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	6a1b      	ldr	r3, [r3, #32]
 800c080:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c088:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	031b      	lsls	r3, r3, #12
 800c08e:	697a      	ldr	r2, [r7, #20]
 800c090:	4313      	orrs	r3, r2
 800c092:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c09a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	011b      	lsls	r3, r3, #4
 800c0a0:	693a      	ldr	r2, [r7, #16]
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	697a      	ldr	r2, [r7, #20]
 800c0aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	693a      	ldr	r2, [r7, #16]
 800c0b0:	621a      	str	r2, [r3, #32]
}
 800c0b2:	bf00      	nop
 800c0b4:	371c      	adds	r7, #28
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr

0800c0be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c0be:	b480      	push	{r7}
 800c0c0:	b085      	sub	sp, #20
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
 800c0c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	689b      	ldr	r3, [r3, #8]
 800c0cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c0d6:	683a      	ldr	r2, [r7, #0]
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	f043 0307 	orr.w	r3, r3, #7
 800c0e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	68fa      	ldr	r2, [r7, #12]
 800c0e6:	609a      	str	r2, [r3, #8]
}
 800c0e8:	bf00      	nop
 800c0ea:	3714      	adds	r7, #20
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b087      	sub	sp, #28
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	60f8      	str	r0, [r7, #12]
 800c0fc:	60b9      	str	r1, [r7, #8]
 800c0fe:	607a      	str	r2, [r7, #4]
 800c100:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	689b      	ldr	r3, [r3, #8]
 800c106:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c10e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	021a      	lsls	r2, r3, #8
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	431a      	orrs	r2, r3
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	4313      	orrs	r3, r2
 800c11c:	697a      	ldr	r2, [r7, #20]
 800c11e:	4313      	orrs	r3, r2
 800c120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	697a      	ldr	r2, [r7, #20]
 800c126:	609a      	str	r2, [r3, #8]
}
 800c128:	bf00      	nop
 800c12a:	371c      	adds	r7, #28
 800c12c:	46bd      	mov	sp, r7
 800c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c132:	4770      	bx	lr

0800c134 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c134:	b480      	push	{r7}
 800c136:	b087      	sub	sp, #28
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	f003 031f 	and.w	r3, r3, #31
 800c146:	2201      	movs	r2, #1
 800c148:	fa02 f303 	lsl.w	r3, r2, r3
 800c14c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	6a1a      	ldr	r2, [r3, #32]
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	43db      	mvns	r3, r3
 800c156:	401a      	ands	r2, r3
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	6a1a      	ldr	r2, [r3, #32]
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	f003 031f 	and.w	r3, r3, #31
 800c166:	6879      	ldr	r1, [r7, #4]
 800c168:	fa01 f303 	lsl.w	r3, r1, r3
 800c16c:	431a      	orrs	r2, r3
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	621a      	str	r2, [r3, #32]
}
 800c172:	bf00      	nop
 800c174:	371c      	adds	r7, #28
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr
	...

0800c180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c180:	b480      	push	{r7}
 800c182:	b085      	sub	sp, #20
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c190:	2b01      	cmp	r3, #1
 800c192:	d101      	bne.n	800c198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c194:	2302      	movs	r3, #2
 800c196:	e050      	b.n	800c23a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2201      	movs	r2, #1
 800c19c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2202      	movs	r2, #2
 800c1a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	685b      	ldr	r3, [r3, #4]
 800c1ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	689b      	ldr	r3, [r3, #8]
 800c1b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	68fa      	ldr	r2, [r7, #12]
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	68fa      	ldr	r2, [r7, #12]
 800c1d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4a1c      	ldr	r2, [pc, #112]	; (800c248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d018      	beq.n	800c20e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1e4:	d013      	beq.n	800c20e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4a18      	ldr	r2, [pc, #96]	; (800c24c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d00e      	beq.n	800c20e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a16      	ldr	r2, [pc, #88]	; (800c250 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d009      	beq.n	800c20e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4a15      	ldr	r2, [pc, #84]	; (800c254 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c200:	4293      	cmp	r3, r2
 800c202:	d004      	beq.n	800c20e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a13      	ldr	r2, [pc, #76]	; (800c258 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d10c      	bne.n	800c228 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c214:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	685b      	ldr	r3, [r3, #4]
 800c21a:	68ba      	ldr	r2, [r7, #8]
 800c21c:	4313      	orrs	r3, r2
 800c21e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	68ba      	ldr	r2, [r7, #8]
 800c226:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2201      	movs	r2, #1
 800c22c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2200      	movs	r2, #0
 800c234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c238:	2300      	movs	r3, #0
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3714      	adds	r7, #20
 800c23e:	46bd      	mov	sp, r7
 800c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c244:	4770      	bx	lr
 800c246:	bf00      	nop
 800c248:	40010000 	.word	0x40010000
 800c24c:	40000400 	.word	0x40000400
 800c250:	40000800 	.word	0x40000800
 800c254:	40000c00 	.word	0x40000c00
 800c258:	40014000 	.word	0x40014000

0800c25c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c25c:	b084      	sub	sp, #16
 800c25e:	b580      	push	{r7, lr}
 800c260:	b084      	sub	sp, #16
 800c262:	af00      	add	r7, sp, #0
 800c264:	6078      	str	r0, [r7, #4]
 800c266:	f107 001c 	add.w	r0, r7, #28
 800c26a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c270:	2b01      	cmp	r3, #1
 800c272:	d122      	bne.n	800c2ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c278:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	68db      	ldr	r3, [r3, #12]
 800c284:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c29c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d105      	bne.n	800c2ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	68db      	ldr	r3, [r3, #12]
 800c2a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f000 faa2 	bl	800c7f8 <USB_CoreReset>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	73fb      	strb	r3, [r7, #15]
 800c2b8:	e01a      	b.n	800c2f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	68db      	ldr	r3, [r3, #12]
 800c2be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 fa96 	bl	800c7f8 <USB_CoreReset>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c2d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d106      	bne.n	800c2e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	639a      	str	r2, [r3, #56]	; 0x38
 800c2e2:	e005      	b.n	800c2f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f2:	2b01      	cmp	r3, #1
 800c2f4:	d10b      	bne.n	800c30e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	689b      	ldr	r3, [r3, #8]
 800c2fa:	f043 0206 	orr.w	r2, r3, #6
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	689b      	ldr	r3, [r3, #8]
 800c306:	f043 0220 	orr.w	r2, r3, #32
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c30e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c310:	4618      	mov	r0, r3
 800c312:	3710      	adds	r7, #16
 800c314:	46bd      	mov	sp, r7
 800c316:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c31a:	b004      	add	sp, #16
 800c31c:	4770      	bx	lr

0800c31e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c31e:	b480      	push	{r7}
 800c320:	b083      	sub	sp, #12
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	689b      	ldr	r3, [r3, #8]
 800c32a:	f023 0201 	bic.w	r2, r3, #1
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c332:	2300      	movs	r3, #0
}
 800c334:	4618      	mov	r0, r3
 800c336:	370c      	adds	r7, #12
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr

0800c340 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	460b      	mov	r3, r1
 800c34a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c34c:	2300      	movs	r3, #0
 800c34e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	68db      	ldr	r3, [r3, #12]
 800c354:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c35c:	78fb      	ldrb	r3, [r7, #3]
 800c35e:	2b01      	cmp	r3, #1
 800c360:	d115      	bne.n	800c38e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c36e:	2001      	movs	r0, #1
 800c370:	f7fc faf6 	bl	8008960 <HAL_Delay>
      ms++;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	3301      	adds	r3, #1
 800c378:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 fa2e 	bl	800c7dc <USB_GetMode>
 800c380:	4603      	mov	r3, r0
 800c382:	2b01      	cmp	r3, #1
 800c384:	d01e      	beq.n	800c3c4 <USB_SetCurrentMode+0x84>
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	2b31      	cmp	r3, #49	; 0x31
 800c38a:	d9f0      	bls.n	800c36e <USB_SetCurrentMode+0x2e>
 800c38c:	e01a      	b.n	800c3c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c38e:	78fb      	ldrb	r3, [r7, #3]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d115      	bne.n	800c3c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	68db      	ldr	r3, [r3, #12]
 800c398:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c3a0:	2001      	movs	r0, #1
 800c3a2:	f7fc fadd 	bl	8008960 <HAL_Delay>
      ms++;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 fa15 	bl	800c7dc <USB_GetMode>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d005      	beq.n	800c3c4 <USB_SetCurrentMode+0x84>
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2b31      	cmp	r3, #49	; 0x31
 800c3bc:	d9f0      	bls.n	800c3a0 <USB_SetCurrentMode+0x60>
 800c3be:	e001      	b.n	800c3c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e005      	b.n	800c3d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2b32      	cmp	r3, #50	; 0x32
 800c3c8:	d101      	bne.n	800c3ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	e000      	b.n	800c3d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c3ce:	2300      	movs	r3, #0
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3710      	adds	r7, #16
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c3d8:	b084      	sub	sp, #16
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b086      	sub	sp, #24
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
 800c3e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c3e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	613b      	str	r3, [r7, #16]
 800c3f6:	e009      	b.n	800c40c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	3340      	adds	r3, #64	; 0x40
 800c3fe:	009b      	lsls	r3, r3, #2
 800c400:	4413      	add	r3, r2
 800c402:	2200      	movs	r2, #0
 800c404:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	3301      	adds	r3, #1
 800c40a:	613b      	str	r3, [r7, #16]
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	2b0e      	cmp	r3, #14
 800c410:	d9f2      	bls.n	800c3f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c414:	2b00      	cmp	r3, #0
 800c416:	d11c      	bne.n	800c452 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c426:	f043 0302 	orr.w	r3, r3, #2
 800c42a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c430:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c43c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c448:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	639a      	str	r2, [r3, #56]	; 0x38
 800c450:	e00b      	b.n	800c46a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c456:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c462:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c470:	461a      	mov	r2, r3
 800c472:	2300      	movs	r3, #0
 800c474:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c47c:	4619      	mov	r1, r3
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c484:	461a      	mov	r2, r3
 800c486:	680b      	ldr	r3, [r1, #0]
 800c488:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d10c      	bne.n	800c4aa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c492:	2b00      	cmp	r3, #0
 800c494:	d104      	bne.n	800c4a0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c496:	2100      	movs	r1, #0
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f000 f965 	bl	800c768 <USB_SetDevSpeed>
 800c49e:	e008      	b.n	800c4b2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c4a0:	2101      	movs	r1, #1
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 f960 	bl	800c768 <USB_SetDevSpeed>
 800c4a8:	e003      	b.n	800c4b2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c4aa:	2103      	movs	r1, #3
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f000 f95b 	bl	800c768 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c4b2:	2110      	movs	r1, #16
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f000 f8f3 	bl	800c6a0 <USB_FlushTxFifo>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d001      	beq.n	800c4c4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f000 f91f 	bl	800c708 <USB_FlushRxFifo>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d001      	beq.n	800c4d4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4da:	461a      	mov	r2, r3
 800c4dc:	2300      	movs	r3, #0
 800c4de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	613b      	str	r3, [r7, #16]
 800c4fc:	e043      	b.n	800c586 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	015a      	lsls	r2, r3, #5
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	4413      	add	r3, r2
 800c506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c510:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c514:	d118      	bne.n	800c548 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d10a      	bne.n	800c532 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	015a      	lsls	r2, r3, #5
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	4413      	add	r3, r2
 800c524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c528:	461a      	mov	r2, r3
 800c52a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c52e:	6013      	str	r3, [r2, #0]
 800c530:	e013      	b.n	800c55a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	015a      	lsls	r2, r3, #5
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	4413      	add	r3, r2
 800c53a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c53e:	461a      	mov	r2, r3
 800c540:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c544:	6013      	str	r3, [r2, #0]
 800c546:	e008      	b.n	800c55a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	015a      	lsls	r2, r3, #5
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	4413      	add	r3, r2
 800c550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c554:	461a      	mov	r2, r3
 800c556:	2300      	movs	r3, #0
 800c558:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	015a      	lsls	r2, r3, #5
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	4413      	add	r3, r2
 800c562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c566:	461a      	mov	r2, r3
 800c568:	2300      	movs	r3, #0
 800c56a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	015a      	lsls	r2, r3, #5
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	4413      	add	r3, r2
 800c574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c578:	461a      	mov	r2, r3
 800c57a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c57e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	3301      	adds	r3, #1
 800c584:	613b      	str	r3, [r7, #16]
 800c586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c588:	693a      	ldr	r2, [r7, #16]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d3b7      	bcc.n	800c4fe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c58e:	2300      	movs	r3, #0
 800c590:	613b      	str	r3, [r7, #16]
 800c592:	e043      	b.n	800c61c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	015a      	lsls	r2, r3, #5
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	4413      	add	r3, r2
 800c59c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5aa:	d118      	bne.n	800c5de <USB_DevInit+0x206>
    {
      if (i == 0U)
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d10a      	bne.n	800c5c8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	015a      	lsls	r2, r3, #5
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5be:	461a      	mov	r2, r3
 800c5c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c5c4:	6013      	str	r3, [r2, #0]
 800c5c6:	e013      	b.n	800c5f0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	015a      	lsls	r2, r3, #5
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	4413      	add	r3, r2
 800c5d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c5da:	6013      	str	r3, [r2, #0]
 800c5dc:	e008      	b.n	800c5f0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	015a      	lsls	r2, r3, #5
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	4413      	add	r3, r2
 800c5e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	015a      	lsls	r2, r3, #5
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	4413      	add	r3, r2
 800c5f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	2300      	movs	r3, #0
 800c600:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	015a      	lsls	r2, r3, #5
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	4413      	add	r3, r2
 800c60a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c60e:	461a      	mov	r2, r3
 800c610:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c614:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	3301      	adds	r3, #1
 800c61a:	613b      	str	r3, [r7, #16]
 800c61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61e:	693a      	ldr	r2, [r7, #16]
 800c620:	429a      	cmp	r2, r3
 800c622:	d3b7      	bcc.n	800c594 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c62a:	691b      	ldr	r3, [r3, #16]
 800c62c:	68fa      	ldr	r2, [r7, #12]
 800c62e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c632:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c636:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2200      	movs	r2, #0
 800c63c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c644:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d105      	bne.n	800c658 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	699b      	ldr	r3, [r3, #24]
 800c650:	f043 0210 	orr.w	r2, r3, #16
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	699a      	ldr	r2, [r3, #24]
 800c65c:	4b0f      	ldr	r3, [pc, #60]	; (800c69c <USB_DevInit+0x2c4>)
 800c65e:	4313      	orrs	r3, r2
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c666:	2b00      	cmp	r3, #0
 800c668:	d005      	beq.n	800c676 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	699b      	ldr	r3, [r3, #24]
 800c66e:	f043 0208 	orr.w	r2, r3, #8
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c678:	2b01      	cmp	r3, #1
 800c67a:	d107      	bne.n	800c68c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	699b      	ldr	r3, [r3, #24]
 800c680:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c684:	f043 0304 	orr.w	r3, r3, #4
 800c688:	687a      	ldr	r2, [r7, #4]
 800c68a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c68c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3718      	adds	r7, #24
 800c692:	46bd      	mov	sp, r7
 800c694:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c698:	b004      	add	sp, #16
 800c69a:	4770      	bx	lr
 800c69c:	803c3800 	.word	0x803c3800

0800c6a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b085      	sub	sp, #20
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	4a13      	ldr	r2, [pc, #76]	; (800c704 <USB_FlushTxFifo+0x64>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d901      	bls.n	800c6c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c6bc:	2303      	movs	r3, #3
 800c6be:	e01b      	b.n	800c6f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	691b      	ldr	r3, [r3, #16]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	daf2      	bge.n	800c6ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	019b      	lsls	r3, r3, #6
 800c6d0:	f043 0220 	orr.w	r2, r3, #32
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	3301      	adds	r3, #1
 800c6dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	4a08      	ldr	r2, [pc, #32]	; (800c704 <USB_FlushTxFifo+0x64>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d901      	bls.n	800c6ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c6e6:	2303      	movs	r3, #3
 800c6e8:	e006      	b.n	800c6f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	691b      	ldr	r3, [r3, #16]
 800c6ee:	f003 0320 	and.w	r3, r3, #32
 800c6f2:	2b20      	cmp	r3, #32
 800c6f4:	d0f0      	beq.n	800c6d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c6f6:	2300      	movs	r3, #0
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3714      	adds	r7, #20
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr
 800c704:	00030d40 	.word	0x00030d40

0800c708 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c708:	b480      	push	{r7}
 800c70a:	b085      	sub	sp, #20
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c710:	2300      	movs	r3, #0
 800c712:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	3301      	adds	r3, #1
 800c718:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	4a11      	ldr	r2, [pc, #68]	; (800c764 <USB_FlushRxFifo+0x5c>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d901      	bls.n	800c726 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c722:	2303      	movs	r3, #3
 800c724:	e018      	b.n	800c758 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	691b      	ldr	r3, [r3, #16]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	daf2      	bge.n	800c714 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c72e:	2300      	movs	r3, #0
 800c730:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2210      	movs	r2, #16
 800c736:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	3301      	adds	r3, #1
 800c73c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	4a08      	ldr	r2, [pc, #32]	; (800c764 <USB_FlushRxFifo+0x5c>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d901      	bls.n	800c74a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c746:	2303      	movs	r3, #3
 800c748:	e006      	b.n	800c758 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	691b      	ldr	r3, [r3, #16]
 800c74e:	f003 0310 	and.w	r3, r3, #16
 800c752:	2b10      	cmp	r3, #16
 800c754:	d0f0      	beq.n	800c738 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c756:	2300      	movs	r3, #0
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3714      	adds	r7, #20
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr
 800c764:	00030d40 	.word	0x00030d40

0800c768 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c768:	b480      	push	{r7}
 800c76a:	b085      	sub	sp, #20
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	460b      	mov	r3, r1
 800c772:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c77e:	681a      	ldr	r2, [r3, #0]
 800c780:	78fb      	ldrb	r3, [r7, #3]
 800c782:	68f9      	ldr	r1, [r7, #12]
 800c784:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c788:	4313      	orrs	r3, r2
 800c78a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c78c:	2300      	movs	r3, #0
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3714      	adds	r7, #20
 800c792:	46bd      	mov	sp, r7
 800c794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c798:	4770      	bx	lr

0800c79a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c79a:	b480      	push	{r7}
 800c79c:	b085      	sub	sp, #20
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	68fa      	ldr	r2, [r7, #12]
 800c7b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c7b4:	f023 0303 	bic.w	r3, r3, #3
 800c7b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	68fa      	ldr	r2, [r7, #12]
 800c7c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c7c8:	f043 0302 	orr.w	r3, r3, #2
 800c7cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c7ce:	2300      	movs	r3, #0
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3714      	adds	r7, #20
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr

0800c7dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b083      	sub	sp, #12
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	695b      	ldr	r3, [r3, #20]
 800c7e8:	f003 0301 	and.w	r3, r3, #1
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	370c      	adds	r7, #12
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr

0800c7f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b085      	sub	sp, #20
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c800:	2300      	movs	r3, #0
 800c802:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	3301      	adds	r3, #1
 800c808:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	4a13      	ldr	r2, [pc, #76]	; (800c85c <USB_CoreReset+0x64>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d901      	bls.n	800c816 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c812:	2303      	movs	r3, #3
 800c814:	e01b      	b.n	800c84e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	691b      	ldr	r3, [r3, #16]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	daf2      	bge.n	800c804 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c81e:	2300      	movs	r3, #0
 800c820:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	691b      	ldr	r3, [r3, #16]
 800c826:	f043 0201 	orr.w	r2, r3, #1
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	3301      	adds	r3, #1
 800c832:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	4a09      	ldr	r2, [pc, #36]	; (800c85c <USB_CoreReset+0x64>)
 800c838:	4293      	cmp	r3, r2
 800c83a:	d901      	bls.n	800c840 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c83c:	2303      	movs	r3, #3
 800c83e:	e006      	b.n	800c84e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	691b      	ldr	r3, [r3, #16]
 800c844:	f003 0301 	and.w	r3, r3, #1
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d0f0      	beq.n	800c82e <USB_CoreReset+0x36>

  return HAL_OK;
 800c84c:	2300      	movs	r3, #0
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3714      	adds	r7, #20
 800c852:	46bd      	mov	sp, r7
 800c854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c858:	4770      	bx	lr
 800c85a:	bf00      	nop
 800c85c:	00030d40 	.word	0x00030d40

0800c860 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 800c864:	4b10      	ldr	r3, [pc, #64]	; (800c8a8 <MX_PDM2PCM_Init+0x48>)
 800c866:	2201      	movs	r2, #1
 800c868:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_LE;
 800c86a:	4b0f      	ldr	r3, [pc, #60]	; (800c8a8 <MX_PDM2PCM_Init+0x48>)
 800c86c:	2200      	movs	r2, #0
 800c86e:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 800c870:	4b0d      	ldr	r3, [pc, #52]	; (800c8a8 <MX_PDM2PCM_Init+0x48>)
 800c872:	4a0e      	ldr	r2, [pc, #56]	; (800c8ac <MX_PDM2PCM_Init+0x4c>)
 800c874:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800c876:	4b0c      	ldr	r3, [pc, #48]	; (800c8a8 <MX_PDM2PCM_Init+0x48>)
 800c878:	2201      	movs	r2, #1
 800c87a:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 800c87c:	4b0a      	ldr	r3, [pc, #40]	; (800c8a8 <MX_PDM2PCM_Init+0x48>)
 800c87e:	2201      	movs	r2, #1
 800c880:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800c882:	4809      	ldr	r0, [pc, #36]	; (800c8a8 <MX_PDM2PCM_Init+0x48>)
 800c884:	f001 fd66 	bl	800e354 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800c888:	4b09      	ldr	r3, [pc, #36]	; (800c8b0 <MX_PDM2PCM_Init+0x50>)
 800c88a:	2202      	movs	r2, #2
 800c88c:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 1024;
 800c88e:	4b08      	ldr	r3, [pc, #32]	; (800c8b0 <MX_PDM2PCM_Init+0x50>)
 800c890:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c894:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 800c896:	4b06      	ldr	r3, [pc, #24]	; (800c8b0 <MX_PDM2PCM_Init+0x50>)
 800c898:	2200      	movs	r2, #0
 800c89a:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800c89c:	4904      	ldr	r1, [pc, #16]	; (800c8b0 <MX_PDM2PCM_Init+0x50>)
 800c89e:	4802      	ldr	r0, [pc, #8]	; (800c8a8 <MX_PDM2PCM_Init+0x48>)
 800c8a0:	f001 fde2 	bl	800e468 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800c8a4:	bf00      	nop
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	20007020 	.word	0x20007020
 800c8ac:	7d70a3d6 	.word	0x7d70a3d6
 800c8b0:	2000706c 	.word	0x2000706c

0800c8b4 <D16_GENERIC>:
 800c8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b8:	b089      	sub	sp, #36	; 0x24
 800c8ba:	68d4      	ldr	r4, [r2, #12]
 800c8bc:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800c8be:	6993      	ldr	r3, [r2, #24]
 800c8c0:	9407      	str	r4, [sp, #28]
 800c8c2:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800c8c4:	9306      	str	r3, [sp, #24]
 800c8c6:	9402      	str	r4, [sp, #8]
 800c8c8:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800c8cc:	f8d2 b014 	ldr.w	fp, [r2, #20]
 800c8d0:	69d3      	ldr	r3, [r2, #28]
 800c8d2:	6896      	ldr	r6, [r2, #8]
 800c8d4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800c8d6:	9103      	str	r1, [sp, #12]
 800c8d8:	2d00      	cmp	r5, #0
 800c8da:	d066      	beq.n	800c9aa <D16_GENERIC+0xf6>
 800c8dc:	f004 0510 	and.w	r5, r4, #16
 800c8e0:	f004 0420 	and.w	r4, r4, #32
 800c8e4:	9504      	str	r5, [sp, #16]
 800c8e6:	4938      	ldr	r1, [pc, #224]	; (800c9c8 <D16_GENERIC+0x114>)
 800c8e8:	9405      	str	r4, [sp, #20]
 800c8ea:	f04f 0e00 	mov.w	lr, #0
 800c8ee:	4635      	mov	r5, r6
 800c8f0:	e04f      	b.n	800c992 <D16_GENERIC+0xde>
 800c8f2:	5d87      	ldrb	r7, [r0, r6]
 800c8f4:	7804      	ldrb	r4, [r0, #0]
 800c8f6:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800c8fa:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 800c8fe:	b2e6      	uxtb	r6, r4
 800c900:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800c904:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800c908:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800c90c:	4433      	add	r3, r6
 800c90e:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800c912:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800c916:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c91a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800c91e:	0aa3      	lsrs	r3, r4, #10
 800c920:	4c2a      	ldr	r4, [pc, #168]	; (800c9cc <D16_GENERIC+0x118>)
 800c922:	fb26 5404 	smlad	r4, r6, r4, r5
 800c926:	4d2a      	ldr	r5, [pc, #168]	; (800c9d0 <D16_GENERIC+0x11c>)
 800c928:	fb26 f505 	smuad	r5, r6, r5
 800c92c:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800c930:	eb04 080a 	add.w	r8, r4, sl
 800c934:	eba8 080b 	sub.w	r8, r8, fp
 800c938:	4646      	mov	r6, r8
 800c93a:	17f7      	asrs	r7, r6, #31
 800c93c:	e9cd 6700 	strd	r6, r7, [sp]
 800c940:	9e04      	ldr	r6, [sp, #16]
 800c942:	f10e 0c01 	add.w	ip, lr, #1
 800c946:	b16e      	cbz	r6, 800c964 <D16_GENERIC+0xb0>
 800c948:	6a16      	ldr	r6, [r2, #32]
 800c94a:	9f01      	ldr	r7, [sp, #4]
 800c94c:	fba8 8906 	umull	r8, r9, r8, r6
 800c950:	fb06 9907 	mla	r9, r6, r7, r9
 800c954:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800c958:	f149 0900 	adc.w	r9, r9, #0
 800c95c:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800c960:	46a3      	mov	fp, r4
 800c962:	4654      	mov	r4, sl
 800c964:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800c966:	9f02      	ldr	r7, [sp, #8]
 800c968:	0424      	lsls	r4, r4, #16
 800c96a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800c96e:	f04f 0900 	mov.w	r9, #0
 800c972:	fb0e fe06 	mul.w	lr, lr, r6
 800c976:	fbc7 8904 	smlal	r8, r9, r7, r4
 800c97a:	9e03      	ldr	r6, [sp, #12]
 800c97c:	464f      	mov	r7, r9
 800c97e:	10bc      	asrs	r4, r7, #2
 800c980:	f304 040f 	ssat	r4, #16, r4
 800c984:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 800c988:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800c98a:	fa1f fe8c 	uxth.w	lr, ip
 800c98e:	4574      	cmp	r4, lr
 800c990:	d90a      	bls.n	800c9a8 <D16_GENERIC+0xf4>
 800c992:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800c994:	2c01      	cmp	r4, #1
 800c996:	b2e6      	uxtb	r6, r4
 800c998:	d1ab      	bne.n	800c8f2 <D16_GENERIC+0x3e>
 800c99a:	9e05      	ldr	r6, [sp, #20]
 800c99c:	f850 4b02 	ldr.w	r4, [r0], #2
 800c9a0:	2e00      	cmp	r6, #0
 800c9a2:	d0ac      	beq.n	800c8fe <D16_GENERIC+0x4a>
 800c9a4:	ba64      	rev16	r4, r4
 800c9a6:	e7aa      	b.n	800c8fe <D16_GENERIC+0x4a>
 800c9a8:	462e      	mov	r6, r5
 800c9aa:	9907      	ldr	r1, [sp, #28]
 800c9ac:	61d3      	str	r3, [r2, #28]
 800c9ae:	9b06      	ldr	r3, [sp, #24]
 800c9b0:	6096      	str	r6, [r2, #8]
 800c9b2:	2000      	movs	r0, #0
 800c9b4:	60d1      	str	r1, [r2, #12]
 800c9b6:	f8c2 a010 	str.w	sl, [r2, #16]
 800c9ba:	f8c2 b014 	str.w	fp, [r2, #20]
 800c9be:	6193      	str	r3, [r2, #24]
 800c9c0:	b009      	add	sp, #36	; 0x24
 800c9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9c6:	bf00      	nop
 800c9c8:	20000000 	.word	0x20000000
 800c9cc:	00030001 	.word	0x00030001
 800c9d0:	00010003 	.word	0x00010003

0800c9d4 <D24_GENERIC>:
 800c9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d8:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800c9da:	6993      	ldr	r3, [r2, #24]
 800c9dc:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800c9de:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800c9e2:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800c9e6:	6894      	ldr	r4, [r2, #8]
 800c9e8:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800c9ec:	b089      	sub	sp, #36	; 0x24
 800c9ee:	9307      	str	r3, [sp, #28]
 800c9f0:	9503      	str	r5, [sp, #12]
 800c9f2:	69d3      	ldr	r3, [r2, #28]
 800c9f4:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800c9f6:	9104      	str	r1, [sp, #16]
 800c9f8:	2e00      	cmp	r6, #0
 800c9fa:	f000 8096 	beq.w	800cb2a <D24_GENERIC+0x156>
 800c9fe:	f005 0610 	and.w	r6, r5, #16
 800ca02:	f005 0520 	and.w	r5, r5, #32
 800ca06:	4954      	ldr	r1, [pc, #336]	; (800cb58 <D24_GENERIC+0x184>)
 800ca08:	9605      	str	r6, [sp, #20]
 800ca0a:	9506      	str	r5, [sp, #24]
 800ca0c:	f04f 0e00 	mov.w	lr, #0
 800ca10:	f8cd 9008 	str.w	r9, [sp, #8]
 800ca14:	e06a      	b.n	800caec <D24_GENERIC+0x118>
 800ca16:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800ca1a:	f810 8007 	ldrb.w	r8, [r0, r7]
 800ca1e:	f890 c000 	ldrb.w	ip, [r0]
 800ca22:	042d      	lsls	r5, r5, #16
 800ca24:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800ca28:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 800ca2c:	44ac      	add	ip, r5
 800ca2e:	4438      	add	r0, r7
 800ca30:	fa5f f68c 	uxtb.w	r6, ip
 800ca34:	f3cc 2507 	ubfx	r5, ip, #8, #8
 800ca38:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800ca3c:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 800ca40:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ca44:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800ca48:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800ca4c:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 800ca50:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800ca54:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ca58:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800ca5c:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800ca60:	4d3e      	ldr	r5, [pc, #248]	; (800cb5c <D24_GENERIC+0x188>)
 800ca62:	fb26 b705 	smlad	r7, r6, r5, fp
 800ca66:	4d3e      	ldr	r5, [pc, #248]	; (800cb60 <D24_GENERIC+0x18c>)
 800ca68:	fb26 4b05 	smlad	fp, r6, r5, r4
 800ca6c:	f3c3 0409 	ubfx	r4, r3, #0, #10
 800ca70:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 800ca74:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 800ca78:	2401      	movs	r4, #1
 800ca7a:	fb26 f604 	smuad	r6, r6, r4
 800ca7e:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800ca82:	9f02      	ldr	r7, [sp, #8]
 800ca84:	eb0e 0c04 	add.w	ip, lr, r4
 800ca88:	eb08 0406 	add.w	r4, r8, r6
 800ca8c:	eb05 060a 	add.w	r6, r5, sl
 800ca90:	1bf6      	subs	r6, r6, r7
 800ca92:	4637      	mov	r7, r6
 800ca94:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800ca98:	e9cd 7800 	strd	r7, r8, [sp]
 800ca9c:	9f05      	ldr	r7, [sp, #20]
 800ca9e:	b177      	cbz	r7, 800cabe <D24_GENERIC+0xea>
 800caa0:	f8d2 8020 	ldr.w	r8, [r2, #32]
 800caa4:	9502      	str	r5, [sp, #8]
 800caa6:	fba6 9a08 	umull	r9, sl, r6, r8
 800caaa:	9e01      	ldr	r6, [sp, #4]
 800caac:	fb08 aa06 	mla	sl, r8, r6, sl
 800cab0:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 800cab4:	f14a 0700 	adc.w	r7, sl, #0
 800cab8:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 800cabc:	4655      	mov	r5, sl
 800cabe:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800cac0:	9f03      	ldr	r7, [sp, #12]
 800cac2:	03ad      	lsls	r5, r5, #14
 800cac4:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800cac8:	f04f 0900 	mov.w	r9, #0
 800cacc:	fb0e fe06 	mul.w	lr, lr, r6
 800cad0:	fbc7 8905 	smlal	r8, r9, r7, r5
 800cad4:	9e04      	ldr	r6, [sp, #16]
 800cad6:	464f      	mov	r7, r9
 800cad8:	10bd      	asrs	r5, r7, #2
 800cada:	f305 050f 	ssat	r5, #16, r5
 800cade:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 800cae2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800cae4:	fa1f fe8c 	uxth.w	lr, ip
 800cae8:	4575      	cmp	r5, lr
 800caea:	d91c      	bls.n	800cb26 <D24_GENERIC+0x152>
 800caec:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800caee:	b2ef      	uxtb	r7, r5
 800caf0:	2d01      	cmp	r5, #1
 800caf2:	b23e      	sxth	r6, r7
 800caf4:	d18f      	bne.n	800ca16 <D24_GENERIC+0x42>
 800caf6:	9d06      	ldr	r5, [sp, #24]
 800caf8:	b15d      	cbz	r5, 800cb12 <D24_GENERIC+0x13e>
 800cafa:	f01e 0f01 	tst.w	lr, #1
 800cafe:	d122      	bne.n	800cb46 <D24_GENERIC+0x172>
 800cb00:	7805      	ldrb	r5, [r0, #0]
 800cb02:	78c7      	ldrb	r7, [r0, #3]
 800cb04:	7846      	ldrb	r6, [r0, #1]
 800cb06:	022d      	lsls	r5, r5, #8
 800cb08:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800cb0c:	44b4      	add	ip, r6
 800cb0e:	3002      	adds	r0, #2
 800cb10:	e78e      	b.n	800ca30 <D24_GENERIC+0x5c>
 800cb12:	7846      	ldrb	r6, [r0, #1]
 800cb14:	f890 c002 	ldrb.w	ip, [r0, #2]
 800cb18:	f810 5b03 	ldrb.w	r5, [r0], #3
 800cb1c:	0236      	lsls	r6, r6, #8
 800cb1e:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 800cb22:	44ac      	add	ip, r5
 800cb24:	e784      	b.n	800ca30 <D24_GENERIC+0x5c>
 800cb26:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800cb2a:	61d3      	str	r3, [r2, #28]
 800cb2c:	9b07      	ldr	r3, [sp, #28]
 800cb2e:	6094      	str	r4, [r2, #8]
 800cb30:	2000      	movs	r0, #0
 800cb32:	f8c2 b00c 	str.w	fp, [r2, #12]
 800cb36:	f8c2 a010 	str.w	sl, [r2, #16]
 800cb3a:	f8c2 9014 	str.w	r9, [r2, #20]
 800cb3e:	6193      	str	r3, [r2, #24]
 800cb40:	b009      	add	sp, #36	; 0x24
 800cb42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb46:	78c5      	ldrb	r5, [r0, #3]
 800cb48:	7887      	ldrb	r7, [r0, #2]
 800cb4a:	f810 6b04 	ldrb.w	r6, [r0], #4
 800cb4e:	022d      	lsls	r5, r5, #8
 800cb50:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800cb54:	44b4      	add	ip, r6
 800cb56:	e76b      	b.n	800ca30 <D24_GENERIC+0x5c>
 800cb58:	20000000 	.word	0x20000000
 800cb5c:	00030001 	.word	0x00030001
 800cb60:	00060007 	.word	0x00060007

0800cb64 <D32_GENERIC>:
 800cb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb68:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800cb6a:	6993      	ldr	r3, [r2, #24]
 800cb6c:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800cb6e:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800cb72:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800cb76:	69d6      	ldr	r6, [r2, #28]
 800cb78:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800cb7c:	b089      	sub	sp, #36	; 0x24
 800cb7e:	9307      	str	r3, [sp, #28]
 800cb80:	9403      	str	r4, [sp, #12]
 800cb82:	6893      	ldr	r3, [r2, #8]
 800cb84:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800cb86:	9104      	str	r1, [sp, #16]
 800cb88:	2d00      	cmp	r5, #0
 800cb8a:	f000 809f 	beq.w	800cccc <D32_GENERIC+0x168>
 800cb8e:	f004 0510 	and.w	r5, r4, #16
 800cb92:	f004 0420 	and.w	r4, r4, #32
 800cb96:	9505      	str	r5, [sp, #20]
 800cb98:	4953      	ldr	r1, [pc, #332]	; (800cce8 <D32_GENERIC+0x184>)
 800cb9a:	9406      	str	r4, [sp, #24]
 800cb9c:	f04f 0c00 	mov.w	ip, #0
 800cba0:	f8cd 9008 	str.w	r9, [sp, #8]
 800cba4:	461d      	mov	r5, r3
 800cba6:	4617      	mov	r7, r2
 800cba8:	e077      	b.n	800cc9a <D32_GENERIC+0x136>
 800cbaa:	f818 3003 	ldrb.w	r3, [r8, r3]
 800cbae:	f810 800e 	ldrb.w	r8, [r0, lr]
 800cbb2:	f810 e002 	ldrb.w	lr, [r0, r2]
 800cbb6:	7800      	ldrb	r0, [r0, #0]
 800cbb8:	041b      	lsls	r3, r3, #16
 800cbba:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800cbbe:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800cbc2:	4403      	add	r3, r0
 800cbc4:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800cbc8:	b2dc      	uxtb	r4, r3
 800cbca:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800cbce:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800cbd2:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800cbd6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800cbda:	0e1b      	lsrs	r3, r3, #24
 800cbdc:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 800cbe0:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 800cbe4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cbe8:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800cbec:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 800cbf0:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 800cbf4:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800cbf8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800cbfc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800cc00:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800cc04:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 800cc08:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cc0c:	4b37      	ldr	r3, [pc, #220]	; (800ccec <D32_GENERIC+0x188>)
 800cc0e:	fb22 b403 	smlad	r4, r2, r3, fp
 800cc12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cc16:	fb2e 4803 	smlad	r8, lr, r3, r4
 800cc1a:	4b35      	ldr	r3, [pc, #212]	; (800ccf0 <D32_GENERIC+0x18c>)
 800cc1c:	fb22 5503 	smlad	r5, r2, r3, r5
 800cc20:	4b34      	ldr	r3, [pc, #208]	; (800ccf4 <D32_GENERIC+0x190>)
 800cc22:	fb2e 5b03 	smlad	fp, lr, r3, r5
 800cc26:	2301      	movs	r3, #1
 800cc28:	fb22 f203 	smuad	r2, r2, r3
 800cc2c:	4b32      	ldr	r3, [pc, #200]	; (800ccf8 <D32_GENERIC+0x194>)
 800cc2e:	fb2e 2503 	smlad	r5, lr, r3, r2
 800cc32:	9b02      	ldr	r3, [sp, #8]
 800cc34:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 800cc38:	eb04 080a 	add.w	r8, r4, sl
 800cc3c:	eba8 0803 	sub.w	r8, r8, r3
 800cc40:	4642      	mov	r2, r8
 800cc42:	17d3      	asrs	r3, r2, #31
 800cc44:	e9cd 2300 	strd	r2, r3, [sp]
 800cc48:	9b05      	ldr	r3, [sp, #20]
 800cc4a:	f10c 0e01 	add.w	lr, ip, #1
 800cc4e:	b16b      	cbz	r3, 800cc6c <D32_GENERIC+0x108>
 800cc50:	6a3a      	ldr	r2, [r7, #32]
 800cc52:	9b01      	ldr	r3, [sp, #4]
 800cc54:	9402      	str	r4, [sp, #8]
 800cc56:	fba8 8902 	umull	r8, r9, r8, r2
 800cc5a:	fb02 9903 	mla	r9, r2, r3, r9
 800cc5e:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800cc62:	f149 0900 	adc.w	r9, r9, #0
 800cc66:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800cc6a:	4654      	mov	r4, sl
 800cc6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cc6e:	9a04      	ldr	r2, [sp, #16]
 800cc70:	fb0c fc03 	mul.w	ip, ip, r3
 800cc74:	9b03      	ldr	r3, [sp, #12]
 800cc76:	0364      	lsls	r4, r4, #13
 800cc78:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800cc7c:	f04f 0900 	mov.w	r9, #0
 800cc80:	fbc3 8904 	smlal	r8, r9, r3, r4
 800cc84:	464b      	mov	r3, r9
 800cc86:	109b      	asrs	r3, r3, #2
 800cc88:	f303 030f 	ssat	r3, #16, r3
 800cc8c:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 800cc90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cc92:	fa1f fc8e 	uxth.w	ip, lr
 800cc96:	4563      	cmp	r3, ip
 800cc98:	d914      	bls.n	800ccc4 <D32_GENERIC+0x160>
 800cc9a:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800cc9c:	b2e2      	uxtb	r2, r4
 800cc9e:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 800cca2:	eb00 080e 	add.w	r8, r0, lr
 800cca6:	4253      	negs	r3, r2
 800cca8:	2c01      	cmp	r4, #1
 800ccaa:	eb08 0403 	add.w	r4, r8, r3
 800ccae:	f47f af7c 	bne.w	800cbaa <D32_GENERIC+0x46>
 800ccb2:	1d02      	adds	r2, r0, #4
 800ccb4:	6803      	ldr	r3, [r0, #0]
 800ccb6:	9806      	ldr	r0, [sp, #24]
 800ccb8:	b110      	cbz	r0, 800ccc0 <D32_GENERIC+0x15c>
 800ccba:	ba5b      	rev16	r3, r3
 800ccbc:	4610      	mov	r0, r2
 800ccbe:	e783      	b.n	800cbc8 <D32_GENERIC+0x64>
 800ccc0:	4610      	mov	r0, r2
 800ccc2:	e781      	b.n	800cbc8 <D32_GENERIC+0x64>
 800ccc4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800ccc8:	462b      	mov	r3, r5
 800ccca:	463a      	mov	r2, r7
 800cccc:	6093      	str	r3, [r2, #8]
 800ccce:	9b07      	ldr	r3, [sp, #28]
 800ccd0:	f8c2 b00c 	str.w	fp, [r2, #12]
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	61d6      	str	r6, [r2, #28]
 800ccd8:	f8c2 a010 	str.w	sl, [r2, #16]
 800ccdc:	f8c2 9014 	str.w	r9, [r2, #20]
 800cce0:	6193      	str	r3, [r2, #24]
 800cce2:	b009      	add	sp, #36	; 0x24
 800cce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cce8:	20000000 	.word	0x20000000
 800ccec:	00060003 	.word	0x00060003
 800ccf0:	000a000c 	.word	0x000a000c
 800ccf4:	000c000a 	.word	0x000c000a
 800ccf8:	00030006 	.word	0x00030006

0800ccfc <D48_GENERIC>:
 800ccfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd00:	b089      	sub	sp, #36	; 0x24
 800cd02:	6953      	ldr	r3, [r2, #20]
 800cd04:	68d4      	ldr	r4, [r2, #12]
 800cd06:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800cd08:	9302      	str	r3, [sp, #8]
 800cd0a:	9400      	str	r4, [sp, #0]
 800cd0c:	6993      	ldr	r3, [r2, #24]
 800cd0e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800cd10:	9307      	str	r3, [sp, #28]
 800cd12:	9403      	str	r4, [sp, #12]
 800cd14:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800cd18:	69d6      	ldr	r6, [r2, #28]
 800cd1a:	6893      	ldr	r3, [r2, #8]
 800cd1c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800cd1e:	9104      	str	r1, [sp, #16]
 800cd20:	2d00      	cmp	r5, #0
 800cd22:	f000 80c5 	beq.w	800ceb0 <D48_GENERIC+0x1b4>
 800cd26:	f004 0510 	and.w	r5, r4, #16
 800cd2a:	f004 0420 	and.w	r4, r4, #32
 800cd2e:	4967      	ldr	r1, [pc, #412]	; (800cecc <D48_GENERIC+0x1d0>)
 800cd30:	9505      	str	r5, [sp, #20]
 800cd32:	9406      	str	r4, [sp, #24]
 800cd34:	f04f 0c00 	mov.w	ip, #0
 800cd38:	4657      	mov	r7, sl
 800cd3a:	9301      	str	r3, [sp, #4]
 800cd3c:	e09c      	b.n	800ce78 <D48_GENERIC+0x17c>
 800cd3e:	f81b 4005 	ldrb.w	r4, [fp, r5]
 800cd42:	f810 b009 	ldrb.w	fp, [r0, r9]
 800cd46:	f81a 9009 	ldrb.w	r9, [sl, r9]
 800cd4a:	f810 a00e 	ldrb.w	sl, [r0, lr]
 800cd4e:	7800      	ldrb	r0, [r0, #0]
 800cd50:	0424      	lsls	r4, r4, #16
 800cd52:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800cd56:	f818 4005 	ldrb.w	r4, [r8, r5]
 800cd5a:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 800cd5e:	44a8      	add	r8, r5
 800cd60:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 800cd64:	eb0b 0500 	add.w	r5, fp, r0
 800cd68:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 800cd6c:	fa5f f885 	uxtb.w	r8, r5
 800cd70:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 800cd74:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 800cd78:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 800cd7c:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 800cd80:	0e2d      	lsrs	r5, r5, #24
 800cd82:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800cd86:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 800cd8a:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 800cd8e:	b2e6      	uxtb	r6, r4
 800cd90:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 800cd94:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800cd98:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 800cd9c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800cda0:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 800cda4:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 800cda8:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800cdac:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 800cdb0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800cdb4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800cdb8:	f3c6 0909 	ubfx	r9, r6, #0, #10
 800cdbc:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800cdc0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800cdc4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800cdc8:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 800cdcc:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 800cdd0:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 800cdd4:	4c3e      	ldr	r4, [pc, #248]	; (800ced0 <D48_GENERIC+0x1d4>)
 800cdd6:	9d00      	ldr	r5, [sp, #0]
 800cdd8:	fb2a 5404 	smlad	r4, sl, r4, r5
 800cddc:	4d3d      	ldr	r5, [pc, #244]	; (800ced4 <D48_GENERIC+0x1d8>)
 800cdde:	fb28 4405 	smlad	r4, r8, r5, r4
 800cde2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cde6:	fb2e 4b03 	smlad	fp, lr, r3, r4
 800cdea:	4c3b      	ldr	r4, [pc, #236]	; (800ced8 <D48_GENERIC+0x1dc>)
 800cdec:	9b01      	ldr	r3, [sp, #4]
 800cdee:	fb2a 3304 	smlad	r3, sl, r4, r3
 800cdf2:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800cdf6:	fb28 3304 	smlad	r3, r8, r4, r3
 800cdfa:	4c38      	ldr	r4, [pc, #224]	; (800cedc <D48_GENERIC+0x1e0>)
 800cdfc:	fb2e 3304 	smlad	r3, lr, r4, r3
 800ce00:	2501      	movs	r5, #1
 800ce02:	9300      	str	r3, [sp, #0]
 800ce04:	fb2a fa05 	smuad	sl, sl, r5
 800ce08:	4b35      	ldr	r3, [pc, #212]	; (800cee0 <D48_GENERIC+0x1e4>)
 800ce0a:	fb28 a803 	smlad	r8, r8, r3, sl
 800ce0e:	4b35      	ldr	r3, [pc, #212]	; (800cee4 <D48_GENERIC+0x1e8>)
 800ce10:	fb2e 8303 	smlad	r3, lr, r3, r8
 800ce14:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 800ce18:	9301      	str	r3, [sp, #4]
 800ce1a:	9b02      	ldr	r3, [sp, #8]
 800ce1c:	eb04 0807 	add.w	r8, r4, r7
 800ce20:	eba8 0803 	sub.w	r8, r8, r3
 800ce24:	9b05      	ldr	r3, [sp, #20]
 800ce26:	4465      	add	r5, ip
 800ce28:	ea4f 7be8 	mov.w	fp, r8, asr #31
 800ce2c:	b163      	cbz	r3, 800ce48 <D48_GENERIC+0x14c>
 800ce2e:	6a17      	ldr	r7, [r2, #32]
 800ce30:	9402      	str	r4, [sp, #8]
 800ce32:	fba8 8907 	umull	r8, r9, r8, r7
 800ce36:	fb07 990b 	mla	r9, r7, fp, r9
 800ce3a:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800ce3e:	f149 0900 	adc.w	r9, r9, #0
 800ce42:	ea4f 0749 	mov.w	r7, r9, lsl #1
 800ce46:	463c      	mov	r4, r7
 800ce48:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 800ce4c:	9b03      	ldr	r3, [sp, #12]
 800ce4e:	02e4      	lsls	r4, r4, #11
 800ce50:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800ce54:	f04f 0900 	mov.w	r9, #0
 800ce58:	fb0c fc0e 	mul.w	ip, ip, lr
 800ce5c:	fbc3 8904 	smlal	r8, r9, r3, r4
 800ce60:	9b04      	ldr	r3, [sp, #16]
 800ce62:	ea4f 04a9 	mov.w	r4, r9, asr #2
 800ce66:	f304 040f 	ssat	r4, #16, r4
 800ce6a:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 800ce6e:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800ce70:	fa1f fc85 	uxth.w	ip, r5
 800ce74:	4564      	cmp	r4, ip
 800ce76:	d919      	bls.n	800ceac <D48_GENERIC+0x1b0>
 800ce78:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800ce7a:	fa5f fe84 	uxtb.w	lr, r4
 800ce7e:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 800ce82:	f1ce 0500 	rsb	r5, lr, #0
 800ce86:	eb00 0b09 	add.w	fp, r0, r9
 800ce8a:	eb0b 0a05 	add.w	sl, fp, r5
 800ce8e:	2c01      	cmp	r4, #1
 800ce90:	eb0a 0809 	add.w	r8, sl, r9
 800ce94:	f47f af53 	bne.w	800cd3e <D48_GENERIC+0x42>
 800ce98:	9b06      	ldr	r3, [sp, #24]
 800ce9a:	6805      	ldr	r5, [r0, #0]
 800ce9c:	6844      	ldr	r4, [r0, #4]
 800ce9e:	3006      	adds	r0, #6
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	f43f af63 	beq.w	800cd6c <D48_GENERIC+0x70>
 800cea6:	ba6d      	rev16	r5, r5
 800cea8:	ba64      	rev16	r4, r4
 800ceaa:	e75f      	b.n	800cd6c <D48_GENERIC+0x70>
 800ceac:	9b01      	ldr	r3, [sp, #4]
 800ceae:	46ba      	mov	sl, r7
 800ceb0:	6093      	str	r3, [r2, #8]
 800ceb2:	9b00      	ldr	r3, [sp, #0]
 800ceb4:	60d3      	str	r3, [r2, #12]
 800ceb6:	9b02      	ldr	r3, [sp, #8]
 800ceb8:	6153      	str	r3, [r2, #20]
 800ceba:	9b07      	ldr	r3, [sp, #28]
 800cebc:	61d6      	str	r6, [r2, #28]
 800cebe:	2000      	movs	r0, #0
 800cec0:	f8c2 a010 	str.w	sl, [r2, #16]
 800cec4:	6193      	str	r3, [r2, #24]
 800cec6:	b009      	add	sp, #36	; 0x24
 800cec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cecc:	20000000 	.word	0x20000000
 800ced0:	000f000a 	.word	0x000f000a
 800ced4:	00060003 	.word	0x00060003
 800ced8:	00150019 	.word	0x00150019
 800cedc:	00190015 	.word	0x00190015
 800cee0:	00030006 	.word	0x00030006
 800cee4:	000a000f 	.word	0x000a000f

0800cee8 <D64_GENERIC>:
 800cee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceec:	b089      	sub	sp, #36	; 0x24
 800ceee:	6913      	ldr	r3, [r2, #16]
 800cef0:	6895      	ldr	r5, [r2, #8]
 800cef2:	9303      	str	r3, [sp, #12]
 800cef4:	9501      	str	r5, [sp, #4]
 800cef6:	6953      	ldr	r3, [r2, #20]
 800cef8:	68d5      	ldr	r5, [r2, #12]
 800cefa:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800cefc:	9304      	str	r3, [sp, #16]
 800cefe:	9500      	str	r5, [sp, #0]
 800cf00:	6993      	ldr	r3, [r2, #24]
 800cf02:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800cf04:	9307      	str	r3, [sp, #28]
 800cf06:	9505      	str	r5, [sp, #20]
 800cf08:	69d3      	ldr	r3, [r2, #28]
 800cf0a:	9106      	str	r1, [sp, #24]
 800cf0c:	2c00      	cmp	r4, #0
 800cf0e:	f000 80d9 	beq.w	800d0c4 <D64_GENERIC+0x1dc>
 800cf12:	6a11      	ldr	r1, [r2, #32]
 800cf14:	9102      	str	r1, [sp, #8]
 800cf16:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 800d104 <D64_GENERIC+0x21c>
 800cf1a:	f04f 0c00 	mov.w	ip, #0
 800cf1e:	4681      	mov	r9, r0
 800cf20:	e0c1      	b.n	800d0a6 <D64_GENERIC+0x1be>
 800cf22:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800cf26:	4274      	negs	r4, r6
 800cf28:	eb09 0708 	add.w	r7, r9, r8
 800cf2c:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 800cf30:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 800cf34:	5d38      	ldrb	r0, [r7, r4]
 800cf36:	5d29      	ldrb	r1, [r5, r4]
 800cf38:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 800cf3c:	f819 a008 	ldrb.w	sl, [r9, r8]
 800cf40:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 800cf44:	f899 7000 	ldrb.w	r7, [r9]
 800cf48:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 800cf4c:	4425      	add	r5, r4
 800cf4e:	0409      	lsls	r1, r1, #16
 800cf50:	0400      	lsls	r0, r0, #16
 800cf52:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800cf56:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800cf5a:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 800cf5e:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 800cf62:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800cf66:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800cf6a:	4459      	add	r1, fp
 800cf6c:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 800cf70:	4438      	add	r0, r7
 800cf72:	b2c5      	uxtb	r5, r0
 800cf74:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800cf78:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 800cf7c:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 800cf80:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800cf84:	0e00      	lsrs	r0, r0, #24
 800cf86:	eb03 0806 	add.w	r8, r3, r6
 800cf8a:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 800cf8e:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 800cf92:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800cf96:	b2c8      	uxtb	r0, r1
 800cf98:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800cf9c:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800cfa0:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 800cfa4:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 800cfa8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800cfac:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800cfb0:	0e09      	lsrs	r1, r1, #24
 800cfb2:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800cfb6:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 800cfba:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800cfbe:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800cfc2:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800cfc6:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800cfca:	f3ca 0309 	ubfx	r3, sl, #0, #10
 800cfce:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800cfd2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800cfd6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800cfda:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800cfde:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800cfe2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800cfe6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800cfea:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800cfee:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800cff2:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800cff6:	0a8b      	lsrs	r3, r1, #10
 800cff8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800cffc:	4939      	ldr	r1, [pc, #228]	; (800d0e4 <D64_GENERIC+0x1fc>)
 800cffe:	9c00      	ldr	r4, [sp, #0]
 800d000:	fb28 4101 	smlad	r1, r8, r1, r4
 800d004:	4c38      	ldr	r4, [pc, #224]	; (800d0e8 <D64_GENERIC+0x200>)
 800d006:	fb27 1104 	smlad	r1, r7, r4, r1
 800d00a:	4c38      	ldr	r4, [pc, #224]	; (800d0ec <D64_GENERIC+0x204>)
 800d00c:	fb20 1104 	smlad	r1, r0, r4, r1
 800d010:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800d014:	fb2a 1106 	smlad	r1, sl, r6, r1
 800d018:	4c35      	ldr	r4, [pc, #212]	; (800d0f0 <D64_GENERIC+0x208>)
 800d01a:	9d01      	ldr	r5, [sp, #4]
 800d01c:	fb28 5404 	smlad	r4, r8, r4, r5
 800d020:	4d33      	ldr	r5, [pc, #204]	; (800d0f0 <D64_GENERIC+0x208>)
 800d022:	fb2a 4415 	smladx	r4, sl, r5, r4
 800d026:	4d33      	ldr	r5, [pc, #204]	; (800d0f4 <D64_GENERIC+0x20c>)
 800d028:	fb27 4405 	smlad	r4, r7, r5, r4
 800d02c:	fb20 4415 	smladx	r4, r0, r5, r4
 800d030:	2501      	movs	r5, #1
 800d032:	9400      	str	r4, [sp, #0]
 800d034:	fb28 f805 	smuad	r8, r8, r5
 800d038:	4c2f      	ldr	r4, [pc, #188]	; (800d0f8 <D64_GENERIC+0x210>)
 800d03a:	fb27 8704 	smlad	r7, r7, r4, r8
 800d03e:	4c2f      	ldr	r4, [pc, #188]	; (800d0fc <D64_GENERIC+0x214>)
 800d040:	fb20 7004 	smlad	r0, r0, r4, r7
 800d044:	4c2e      	ldr	r4, [pc, #184]	; (800d100 <D64_GENERIC+0x218>)
 800d046:	fb2a 0004 	smlad	r0, sl, r4, r0
 800d04a:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 800d04e:	9902      	ldr	r1, [sp, #8]
 800d050:	9001      	str	r0, [sp, #4]
 800d052:	b189      	cbz	r1, 800d078 <D64_GENERIC+0x190>
 800d054:	9803      	ldr	r0, [sp, #12]
 800d056:	9c04      	ldr	r4, [sp, #16]
 800d058:	9604      	str	r6, [sp, #16]
 800d05a:	4430      	add	r0, r6
 800d05c:	1b00      	subs	r0, r0, r4
 800d05e:	17c5      	asrs	r5, r0, #31
 800d060:	460f      	mov	r7, r1
 800d062:	fba0 0101 	umull	r0, r1, r0, r1
 800d066:	fb07 1105 	mla	r1, r7, r5, r1
 800d06a:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800d06e:	f141 0100 	adc.w	r1, r1, #0
 800d072:	0049      	lsls	r1, r1, #1
 800d074:	9103      	str	r1, [sp, #12]
 800d076:	460e      	mov	r6, r1
 800d078:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 800d07a:	9905      	ldr	r1, [sp, #20]
 800d07c:	9806      	ldr	r0, [sp, #24]
 800d07e:	02b6      	lsls	r6, r6, #10
 800d080:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800d084:	f04f 0800 	mov.w	r8, #0
 800d088:	fb0c f404 	mul.w	r4, ip, r4
 800d08c:	fbc1 7806 	smlal	r7, r8, r1, r6
 800d090:	4641      	mov	r1, r8
 800d092:	1089      	asrs	r1, r1, #2
 800d094:	f301 010f 	ssat	r1, #16, r1
 800d098:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 800d09c:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800d09e:	f10c 0c01 	add.w	ip, ip, #1
 800d0a2:	4561      	cmp	r1, ip
 800d0a4:	dd0e      	ble.n	800d0c4 <D64_GENERIC+0x1dc>
 800d0a6:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 800d0a8:	2e01      	cmp	r6, #1
 800d0aa:	f47f af3a 	bne.w	800cf22 <D64_GENERIC+0x3a>
 800d0ae:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800d0b0:	06b4      	lsls	r4, r6, #26
 800d0b2:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d0b6:	f109 0908 	add.w	r9, r9, #8
 800d0ba:	f57f af5a 	bpl.w	800cf72 <D64_GENERIC+0x8a>
 800d0be:	ba40      	rev16	r0, r0
 800d0c0:	ba49      	rev16	r1, r1
 800d0c2:	e756      	b.n	800cf72 <D64_GENERIC+0x8a>
 800d0c4:	61d3      	str	r3, [r2, #28]
 800d0c6:	9b03      	ldr	r3, [sp, #12]
 800d0c8:	9901      	ldr	r1, [sp, #4]
 800d0ca:	6113      	str	r3, [r2, #16]
 800d0cc:	9b04      	ldr	r3, [sp, #16]
 800d0ce:	6091      	str	r1, [r2, #8]
 800d0d0:	6153      	str	r3, [r2, #20]
 800d0d2:	9900      	ldr	r1, [sp, #0]
 800d0d4:	9b07      	ldr	r3, [sp, #28]
 800d0d6:	60d1      	str	r1, [r2, #12]
 800d0d8:	2000      	movs	r0, #0
 800d0da:	6193      	str	r3, [r2, #24]
 800d0dc:	b009      	add	sp, #36	; 0x24
 800d0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0e2:	bf00      	nop
 800d0e4:	001c0015 	.word	0x001c0015
 800d0e8:	000f000a 	.word	0x000f000a
 800d0ec:	00060003 	.word	0x00060003
 800d0f0:	0024002a 	.word	0x0024002a
 800d0f4:	002e0030 	.word	0x002e0030
 800d0f8:	00030006 	.word	0x00030006
 800d0fc:	000a000f 	.word	0x000a000f
 800d100:	0015001c 	.word	0x0015001c
 800d104:	20000000 	.word	0x20000000

0800d108 <D80_GENERIC>:
 800d108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d10c:	b08b      	sub	sp, #44	; 0x2c
 800d10e:	6914      	ldr	r4, [r2, #16]
 800d110:	9404      	str	r4, [sp, #16]
 800d112:	6954      	ldr	r4, [r2, #20]
 800d114:	9405      	str	r4, [sp, #20]
 800d116:	6994      	ldr	r4, [r2, #24]
 800d118:	9409      	str	r4, [sp, #36]	; 0x24
 800d11a:	6894      	ldr	r4, [r2, #8]
 800d11c:	9402      	str	r4, [sp, #8]
 800d11e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800d120:	68d4      	ldr	r4, [r2, #12]
 800d122:	9401      	str	r4, [sp, #4]
 800d124:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800d126:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 800d12a:	9406      	str	r4, [sp, #24]
 800d12c:	9107      	str	r1, [sp, #28]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	f000 810f 	beq.w	800d352 <D80_GENERIC+0x24a>
 800d134:	6a13      	ldr	r3, [r2, #32]
 800d136:	9308      	str	r3, [sp, #32]
 800d138:	2300      	movs	r3, #0
 800d13a:	9200      	str	r2, [sp, #0]
 800d13c:	f8df 9264 	ldr.w	r9, [pc, #612]	; 800d3a4 <D80_GENERIC+0x29c>
 800d140:	f8cd b00c 	str.w	fp, [sp, #12]
 800d144:	461a      	mov	r2, r3
 800d146:	e0ed      	b.n	800d324 <D80_GENERIC+0x21c>
 800d148:	fa5f fc8c 	uxtb.w	ip, ip
 800d14c:	fa0f f48c 	sxth.w	r4, ip
 800d150:	0066      	lsls	r6, r4, #1
 800d152:	eb06 0804 	add.w	r8, r6, r4
 800d156:	f1cc 0500 	rsb	r5, ip, #0
 800d15a:	eb00 0108 	add.w	r1, r0, r8
 800d15e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800d162:	194b      	adds	r3, r1, r5
 800d164:	5d49      	ldrb	r1, [r1, r5]
 800d166:	f810 a008 	ldrb.w	sl, [r0, r8]
 800d16a:	f813 b004 	ldrb.w	fp, [r3, r4]
 800d16e:	f810 c00c 	ldrb.w	ip, [r0, ip]
 800d172:	f890 8000 	ldrb.w	r8, [r0]
 800d176:	eb03 0e04 	add.w	lr, r3, r4
 800d17a:	eb0e 0705 	add.w	r7, lr, r5
 800d17e:	0409      	lsls	r1, r1, #16
 800d180:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800d184:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800d188:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800d18c:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 800d190:	eb0a 0004 	add.w	r0, sl, r4
 800d194:	041b      	lsls	r3, r3, #16
 800d196:	f81a a004 	ldrb.w	sl, [sl, r4]
 800d19a:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 800d19e:	5d44      	ldrb	r4, [r0, r5]
 800d1a0:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800d1a4:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800d1a8:	4428      	add	r0, r5
 800d1aa:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800d1ae:	4441      	add	r1, r8
 800d1b0:	4430      	add	r0, r6
 800d1b2:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800d1b6:	441f      	add	r7, r3
 800d1b8:	b2cd      	uxtb	r5, r1
 800d1ba:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800d1be:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800d1c2:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 800d1c6:	9b03      	ldr	r3, [sp, #12]
 800d1c8:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800d1cc:	0e09      	lsrs	r1, r1, #24
 800d1ce:	4433      	add	r3, r6
 800d1d0:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 800d1d4:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 800d1d8:	b2fd      	uxtb	r5, r7
 800d1da:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 800d1de:	469b      	mov	fp, r3
 800d1e0:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800d1e4:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 800d1e8:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 800d1ec:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 800d1f0:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800d1f4:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 800d1f8:	0e3b      	lsrs	r3, r7, #24
 800d1fa:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800d1fe:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 800d202:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d206:	fa5f fe84 	uxtb.w	lr, r4
 800d20a:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 800d20e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800d212:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800d216:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 800d21a:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 800d21e:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800d222:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 800d226:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800d22a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800d22e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d232:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800d236:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d23a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800d23e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d242:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800d246:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800d24a:	f3c4 0109 	ubfx	r1, r4, #0, #10
 800d24e:	0aa3      	lsrs	r3, r4, #10
 800d250:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800d254:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800d258:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800d25c:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 800d260:	9303      	str	r3, [sp, #12]
 800d262:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 800d266:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 800d26a:	4b42      	ldr	r3, [pc, #264]	; (800d374 <D80_GENERIC+0x26c>)
 800d26c:	9901      	ldr	r1, [sp, #4]
 800d26e:	fb2b 1303 	smlad	r3, fp, r3, r1
 800d272:	4941      	ldr	r1, [pc, #260]	; (800d378 <D80_GENERIC+0x270>)
 800d274:	fb28 3301 	smlad	r3, r8, r1, r3
 800d278:	4940      	ldr	r1, [pc, #256]	; (800d37c <D80_GENERIC+0x274>)
 800d27a:	fb2c 3301 	smlad	r3, ip, r1, r3
 800d27e:	4940      	ldr	r1, [pc, #256]	; (800d380 <D80_GENERIC+0x278>)
 800d280:	fb27 3301 	smlad	r3, r7, r1, r3
 800d284:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800d288:	fb2e 3301 	smlad	r3, lr, r1, r3
 800d28c:	493d      	ldr	r1, [pc, #244]	; (800d384 <D80_GENERIC+0x27c>)
 800d28e:	9c02      	ldr	r4, [sp, #8]
 800d290:	fb2b 4401 	smlad	r4, fp, r1, r4
 800d294:	493c      	ldr	r1, [pc, #240]	; (800d388 <D80_GENERIC+0x280>)
 800d296:	fb28 4401 	smlad	r4, r8, r1, r4
 800d29a:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 800d29e:	fb2c 4101 	smlad	r1, ip, r1, r4
 800d2a2:	4c3a      	ldr	r4, [pc, #232]	; (800d38c <D80_GENERIC+0x284>)
 800d2a4:	fb27 1104 	smlad	r1, r7, r4, r1
 800d2a8:	4c39      	ldr	r4, [pc, #228]	; (800d390 <D80_GENERIC+0x288>)
 800d2aa:	fb2e 1104 	smlad	r1, lr, r4, r1
 800d2ae:	9101      	str	r1, [sp, #4]
 800d2b0:	2101      	movs	r1, #1
 800d2b2:	fb2b fb01 	smuad	fp, fp, r1
 800d2b6:	4937      	ldr	r1, [pc, #220]	; (800d394 <D80_GENERIC+0x28c>)
 800d2b8:	fb28 b801 	smlad	r8, r8, r1, fp
 800d2bc:	4d36      	ldr	r5, [pc, #216]	; (800d398 <D80_GENERIC+0x290>)
 800d2be:	fb2c 8c05 	smlad	ip, ip, r5, r8
 800d2c2:	4d36      	ldr	r5, [pc, #216]	; (800d39c <D80_GENERIC+0x294>)
 800d2c4:	fb27 c705 	smlad	r7, r7, r5, ip
 800d2c8:	4d35      	ldr	r5, [pc, #212]	; (800d3a0 <D80_GENERIC+0x298>)
 800d2ca:	fb2e 7105 	smlad	r1, lr, r5, r7
 800d2ce:	9102      	str	r1, [sp, #8]
 800d2d0:	9908      	ldr	r1, [sp, #32]
 800d2d2:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800d2d6:	b181      	cbz	r1, 800d2fa <D80_GENERIC+0x1f2>
 800d2d8:	9c04      	ldr	r4, [sp, #16]
 800d2da:	9d05      	ldr	r5, [sp, #20]
 800d2dc:	9305      	str	r3, [sp, #20]
 800d2de:	441c      	add	r4, r3
 800d2e0:	1b64      	subs	r4, r4, r5
 800d2e2:	17e7      	asrs	r7, r4, #31
 800d2e4:	fba4 4501 	umull	r4, r5, r4, r1
 800d2e8:	fb01 5507 	mla	r5, r1, r7, r5
 800d2ec:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800d2f0:	f145 0500 	adc.w	r5, r5, #0
 800d2f4:	0069      	lsls	r1, r5, #1
 800d2f6:	9104      	str	r1, [sp, #16]
 800d2f8:	460b      	mov	r3, r1
 800d2fa:	9e00      	ldr	r6, [sp, #0]
 800d2fc:	9f06      	ldr	r7, [sp, #24]
 800d2fe:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 800d300:	025b      	lsls	r3, r3, #9
 800d302:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d306:	2500      	movs	r5, #0
 800d308:	fb02 f101 	mul.w	r1, r2, r1
 800d30c:	fbc7 4503 	smlal	r4, r5, r7, r3
 800d310:	9c07      	ldr	r4, [sp, #28]
 800d312:	10ab      	asrs	r3, r5, #2
 800d314:	f303 030f 	ssat	r3, #16, r3
 800d318:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 800d31c:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800d31e:	3201      	adds	r2, #1
 800d320:	4293      	cmp	r3, r2
 800d322:	dd13      	ble.n	800d34c <D80_GENERIC+0x244>
 800d324:	9b00      	ldr	r3, [sp, #0]
 800d326:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 800d32a:	f1bc 0f01 	cmp.w	ip, #1
 800d32e:	f47f af0b 	bne.w	800d148 <D80_GENERIC+0x40>
 800d332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d334:	6884      	ldr	r4, [r0, #8]
 800d336:	069b      	lsls	r3, r3, #26
 800d338:	e890 0082 	ldmia.w	r0, {r1, r7}
 800d33c:	f100 000a 	add.w	r0, r0, #10
 800d340:	f57f af3a 	bpl.w	800d1b8 <D80_GENERIC+0xb0>
 800d344:	ba49      	rev16	r1, r1
 800d346:	ba7f      	rev16	r7, r7
 800d348:	ba64      	rev16	r4, r4
 800d34a:	e735      	b.n	800d1b8 <D80_GENERIC+0xb0>
 800d34c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d350:	4632      	mov	r2, r6
 800d352:	9b02      	ldr	r3, [sp, #8]
 800d354:	6093      	str	r3, [r2, #8]
 800d356:	9b01      	ldr	r3, [sp, #4]
 800d358:	60d3      	str	r3, [r2, #12]
 800d35a:	9b04      	ldr	r3, [sp, #16]
 800d35c:	6113      	str	r3, [r2, #16]
 800d35e:	9b05      	ldr	r3, [sp, #20]
 800d360:	6153      	str	r3, [r2, #20]
 800d362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d364:	f8c2 b01c 	str.w	fp, [r2, #28]
 800d368:	2000      	movs	r0, #0
 800d36a:	6193      	str	r3, [r2, #24]
 800d36c:	b00b      	add	sp, #44	; 0x2c
 800d36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d372:	bf00      	nop
 800d374:	002d0024 	.word	0x002d0024
 800d378:	001c0015 	.word	0x001c0015
 800d37c:	000f000a 	.word	0x000f000a
 800d380:	00060003 	.word	0x00060003
 800d384:	0037003f 	.word	0x0037003f
 800d388:	00450049 	.word	0x00450049
 800d38c:	00490045 	.word	0x00490045
 800d390:	003f0037 	.word	0x003f0037
 800d394:	00030006 	.word	0x00030006
 800d398:	000a000f 	.word	0x000a000f
 800d39c:	0015001c 	.word	0x0015001c
 800d3a0:	0024002d 	.word	0x0024002d
 800d3a4:	20000000 	.word	0x20000000

0800d3a8 <D128_GENERIC>:
 800d3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ac:	b093      	sub	sp, #76	; 0x4c
 800d3ae:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800d3b0:	9005      	str	r0, [sp, #20]
 800d3b2:	4610      	mov	r0, r2
 800d3b4:	9201      	str	r2, [sp, #4]
 800d3b6:	6912      	ldr	r2, [r2, #16]
 800d3b8:	920c      	str	r2, [sp, #48]	; 0x30
 800d3ba:	4602      	mov	r2, r0
 800d3bc:	6940      	ldr	r0, [r0, #20]
 800d3be:	900d      	str	r0, [sp, #52]	; 0x34
 800d3c0:	4610      	mov	r0, r2
 800d3c2:	4614      	mov	r4, r2
 800d3c4:	6992      	ldr	r2, [r2, #24]
 800d3c6:	9211      	str	r2, [sp, #68]	; 0x44
 800d3c8:	69c2      	ldr	r2, [r0, #28]
 800d3ca:	9202      	str	r2, [sp, #8]
 800d3cc:	68e2      	ldr	r2, [r4, #12]
 800d3ce:	6880      	ldr	r0, [r0, #8]
 800d3d0:	9203      	str	r2, [sp, #12]
 800d3d2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d3d4:	9004      	str	r0, [sp, #16]
 800d3d6:	920e      	str	r2, [sp, #56]	; 0x38
 800d3d8:	910f      	str	r1, [sp, #60]	; 0x3c
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	f000 819b 	beq.w	800d716 <D128_GENERIC+0x36e>
 800d3e0:	6a23      	ldr	r3, [r4, #32]
 800d3e2:	9310      	str	r3, [sp, #64]	; 0x40
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 800d790 <D128_GENERIC+0x3e8>
 800d3ea:	9306      	str	r3, [sp, #24]
 800d3ec:	e17a      	b.n	800d6e4 <D128_GENERIC+0x33c>
 800d3ee:	b2d2      	uxtb	r2, r2
 800d3f0:	9d05      	ldr	r5, [sp, #20]
 800d3f2:	b214      	sxth	r4, r2
 800d3f4:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 800d3f8:	4250      	negs	r0, r2
 800d3fa:	eb05 010a 	add.w	r1, r5, sl
 800d3fe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d402:	eb01 0800 	add.w	r8, r1, r0
 800d406:	eb0b 0c04 	add.w	ip, fp, r4
 800d40a:	eb08 070c 	add.w	r7, r8, ip
 800d40e:	183b      	adds	r3, r7, r0
 800d410:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800d414:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 800d418:	eb0e 0604 	add.w	r6, lr, r4
 800d41c:	9307      	str	r3, [sp, #28]
 800d41e:	1833      	adds	r3, r6, r0
 800d420:	9305      	str	r3, [sp, #20]
 800d422:	462b      	mov	r3, r5
 800d424:	f815 a00a 	ldrb.w	sl, [r5, sl]
 800d428:	f8cd a020 	str.w	sl, [sp, #32]
 800d42c:	f818 a00c 	ldrb.w	sl, [r8, ip]
 800d430:	f813 c002 	ldrb.w	ip, [r3, r2]
 800d434:	f81e 8004 	ldrb.w	r8, [lr, r4]
 800d438:	5c3a      	ldrb	r2, [r7, r0]
 800d43a:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 800d43e:	781f      	ldrb	r7, [r3, #0]
 800d440:	9b07      	ldr	r3, [sp, #28]
 800d442:	9d05      	ldr	r5, [sp, #20]
 800d444:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 800d448:	5c09      	ldrb	r1, [r1, r0]
 800d44a:	9709      	str	r7, [sp, #36]	; 0x24
 800d44c:	9307      	str	r3, [sp, #28]
 800d44e:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800d452:	5c33      	ldrb	r3, [r6, r0]
 800d454:	0412      	lsls	r2, r2, #16
 800d456:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 800d45a:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 800d45e:	9d08      	ldr	r5, [sp, #32]
 800d460:	eb06 0a04 	add.w	sl, r6, r4
 800d464:	0409      	lsls	r1, r1, #16
 800d466:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 800d46a:	f81a 5000 	ldrb.w	r5, [sl, r0]
 800d46e:	5d36      	ldrb	r6, [r6, r4]
 800d470:	9c05      	ldr	r4, [sp, #20]
 800d472:	042d      	lsls	r5, r5, #16
 800d474:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 800d478:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800d47c:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 800d480:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 800d484:	eb0a 0c00 	add.w	ip, sl, r0
 800d488:	041b      	lsls	r3, r3, #16
 800d48a:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800d48e:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 800d492:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 800d496:	9d07      	ldr	r5, [sp, #28]
 800d498:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800d49c:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 800d4a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d4a2:	4458      	add	r0, fp
 800d4a4:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 800d4a8:	9005      	str	r0, [sp, #20]
 800d4aa:	4439      	add	r1, r7
 800d4ac:	442a      	add	r2, r5
 800d4ae:	44b2      	add	sl, r6
 800d4b0:	1918      	adds	r0, r3, r4
 800d4b2:	b2cb      	uxtb	r3, r1
 800d4b4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800d4b8:	9e02      	ldr	r6, [sp, #8]
 800d4ba:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d4be:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800d4c2:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800d4c6:	441e      	add	r6, r3
 800d4c8:	0e09      	lsrs	r1, r1, #24
 800d4ca:	4633      	mov	r3, r6
 800d4cc:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800d4d0:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 800d4d4:	b2d4      	uxtb	r4, r2
 800d4d6:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800d4da:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d4de:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 800d4e2:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800d4e6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d4ea:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800d4ee:	0e12      	lsrs	r2, r2, #24
 800d4f0:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800d4f4:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 800d4f8:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800d4fc:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800d500:	9702      	str	r7, [sp, #8]
 800d502:	b2c2      	uxtb	r2, r0
 800d504:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800d508:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 800d50c:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 800d510:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800d514:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800d518:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800d51c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800d520:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800d524:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 800d528:	0e00      	lsrs	r0, r0, #24
 800d52a:	fa5f f68a 	uxtb.w	r6, sl
 800d52e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d532:	9309      	str	r3, [sp, #36]	; 0x24
 800d534:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800d538:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 800d53c:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800d540:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800d544:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d548:	950a      	str	r5, [sp, #40]	; 0x28
 800d54a:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800d54e:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800d552:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800d556:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d55a:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800d55e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d562:	920b      	str	r2, [sp, #44]	; 0x2c
 800d564:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800d568:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d56a:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800d56e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800d572:	9307      	str	r3, [sp, #28]
 800d574:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800d578:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800d57c:	9b02      	ldr	r3, [sp, #8]
 800d57e:	f8cd c008 	str.w	ip, [sp, #8]
 800d582:	4694      	mov	ip, r2
 800d584:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d586:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 800d58a:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800d58e:	9a02      	ldr	r2, [sp, #8]
 800d590:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800d594:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800d598:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d59c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d59e:	f8cd a020 	str.w	sl, [sp, #32]
 800d5a2:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800d5a6:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800d5aa:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800d5ae:	9b07      	ldr	r3, [sp, #28]
 800d5b0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800d5b4:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800d5b8:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 800d5bc:	9a08      	ldr	r2, [sp, #32]
 800d5be:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800d5c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d5c6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800d5ca:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d5ce:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 800d5d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800d5d6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800d5da:	0a96      	lsrs	r6, r2, #10
 800d5dc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d5e0:	9602      	str	r6, [sp, #8]
 800d5e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800d5e6:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800d5ea:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 800d5ee:	4e53      	ldr	r6, [pc, #332]	; (800d73c <D128_GENERIC+0x394>)
 800d5f0:	9f03      	ldr	r7, [sp, #12]
 800d5f2:	fb2c 7606 	smlad	r6, ip, r6, r7
 800d5f6:	4f52      	ldr	r7, [pc, #328]	; (800d740 <D128_GENERIC+0x398>)
 800d5f8:	fb2a 6607 	smlad	r6, sl, r7, r6
 800d5fc:	4f51      	ldr	r7, [pc, #324]	; (800d744 <D128_GENERIC+0x39c>)
 800d5fe:	fb21 6607 	smlad	r6, r1, r7, r6
 800d602:	4f51      	ldr	r7, [pc, #324]	; (800d748 <D128_GENERIC+0x3a0>)
 800d604:	fb24 6607 	smlad	r6, r4, r7, r6
 800d608:	4f50      	ldr	r7, [pc, #320]	; (800d74c <D128_GENERIC+0x3a4>)
 800d60a:	fb28 6607 	smlad	r6, r8, r7, r6
 800d60e:	4f50      	ldr	r7, [pc, #320]	; (800d750 <D128_GENERIC+0x3a8>)
 800d610:	fb20 6607 	smlad	r6, r0, r7, r6
 800d614:	4f4f      	ldr	r7, [pc, #316]	; (800d754 <D128_GENERIC+0x3ac>)
 800d616:	fb23 6607 	smlad	r6, r3, r7, r6
 800d61a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800d61e:	fb25 6607 	smlad	r6, r5, r7, r6
 800d622:	4f4d      	ldr	r7, [pc, #308]	; (800d758 <D128_GENERIC+0x3b0>)
 800d624:	9a04      	ldr	r2, [sp, #16]
 800d626:	fb2c 2e07 	smlad	lr, ip, r7, r2
 800d62a:	4a4c      	ldr	r2, [pc, #304]	; (800d75c <D128_GENERIC+0x3b4>)
 800d62c:	fb2a ee02 	smlad	lr, sl, r2, lr
 800d630:	4f4b      	ldr	r7, [pc, #300]	; (800d760 <D128_GENERIC+0x3b8>)
 800d632:	fb21 ee07 	smlad	lr, r1, r7, lr
 800d636:	4f4b      	ldr	r7, [pc, #300]	; (800d764 <D128_GENERIC+0x3bc>)
 800d638:	fb24 ee07 	smlad	lr, r4, r7, lr
 800d63c:	4f4a      	ldr	r7, [pc, #296]	; (800d768 <D128_GENERIC+0x3c0>)
 800d63e:	fb28 ee07 	smlad	lr, r8, r7, lr
 800d642:	4f4a      	ldr	r7, [pc, #296]	; (800d76c <D128_GENERIC+0x3c4>)
 800d644:	fb20 ee07 	smlad	lr, r0, r7, lr
 800d648:	4f49      	ldr	r7, [pc, #292]	; (800d770 <D128_GENERIC+0x3c8>)
 800d64a:	fb23 e707 	smlad	r7, r3, r7, lr
 800d64e:	f8df e144 	ldr.w	lr, [pc, #324]	; 800d794 <D128_GENERIC+0x3ec>
 800d652:	fb25 720e 	smlad	r2, r5, lr, r7
 800d656:	f04f 0b01 	mov.w	fp, #1
 800d65a:	9203      	str	r2, [sp, #12]
 800d65c:	fb2c fb0b 	smuad	fp, ip, fp
 800d660:	4f44      	ldr	r7, [pc, #272]	; (800d774 <D128_GENERIC+0x3cc>)
 800d662:	fb2a ba07 	smlad	sl, sl, r7, fp
 800d666:	4f44      	ldr	r7, [pc, #272]	; (800d778 <D128_GENERIC+0x3d0>)
 800d668:	fb21 aa07 	smlad	sl, r1, r7, sl
 800d66c:	4f43      	ldr	r7, [pc, #268]	; (800d77c <D128_GENERIC+0x3d4>)
 800d66e:	fb24 aa07 	smlad	sl, r4, r7, sl
 800d672:	4f43      	ldr	r7, [pc, #268]	; (800d780 <D128_GENERIC+0x3d8>)
 800d674:	fb28 a707 	smlad	r7, r8, r7, sl
 800d678:	4a42      	ldr	r2, [pc, #264]	; (800d784 <D128_GENERIC+0x3dc>)
 800d67a:	fb20 7702 	smlad	r7, r0, r2, r7
 800d67e:	4a42      	ldr	r2, [pc, #264]	; (800d788 <D128_GENERIC+0x3e0>)
 800d680:	fb23 7702 	smlad	r7, r3, r2, r7
 800d684:	4b41      	ldr	r3, [pc, #260]	; (800d78c <D128_GENERIC+0x3e4>)
 800d686:	fb25 7303 	smlad	r3, r5, r3, r7
 800d68a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d68c:	9304      	str	r3, [sp, #16]
 800d68e:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800d692:	b185      	cbz	r5, 800d6b6 <D128_GENERIC+0x30e>
 800d694:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d696:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d698:	960d      	str	r6, [sp, #52]	; 0x34
 800d69a:	4432      	add	r2, r6
 800d69c:	1a52      	subs	r2, r2, r1
 800d69e:	17d1      	asrs	r1, r2, #31
 800d6a0:	fba2 2305 	umull	r2, r3, r2, r5
 800d6a4:	fb05 3301 	mla	r3, r5, r1, r3
 800d6a8:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800d6ac:	f143 0300 	adc.w	r3, r3, #0
 800d6b0:	005b      	lsls	r3, r3, #1
 800d6b2:	930c      	str	r3, [sp, #48]	; 0x30
 800d6b4:	461e      	mov	r6, r3
 800d6b6:	9801      	ldr	r0, [sp, #4]
 800d6b8:	9c06      	ldr	r4, [sp, #24]
 800d6ba:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800d6bc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800d6be:	01f6      	lsls	r6, r6, #7
 800d6c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	fbc5 2306 	smlal	r2, r3, r5, r6
 800d6ca:	fb04 f101 	mul.w	r1, r4, r1
 800d6ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d6d0:	109b      	asrs	r3, r3, #2
 800d6d2:	f303 030f 	ssat	r3, #16, r3
 800d6d6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800d6da:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800d6dc:	1c62      	adds	r2, r4, #1
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	9206      	str	r2, [sp, #24]
 800d6e2:	dd18      	ble.n	800d716 <D128_GENERIC+0x36e>
 800d6e4:	9b01      	ldr	r3, [sp, #4]
 800d6e6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d6e8:	2a01      	cmp	r2, #1
 800d6ea:	f47f ae80 	bne.w	800d3ee <D128_GENERIC+0x46>
 800d6ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6f0:	9d05      	ldr	r5, [sp, #20]
 800d6f2:	069b      	lsls	r3, r3, #26
 800d6f4:	6829      	ldr	r1, [r5, #0]
 800d6f6:	686a      	ldr	r2, [r5, #4]
 800d6f8:	68a8      	ldr	r0, [r5, #8]
 800d6fa:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800d6fe:	f105 0410 	add.w	r4, r5, #16
 800d702:	d506      	bpl.n	800d712 <D128_GENERIC+0x36a>
 800d704:	ba49      	rev16	r1, r1
 800d706:	ba52      	rev16	r2, r2
 800d708:	ba40      	rev16	r0, r0
 800d70a:	fa9a fa9a 	rev16.w	sl, sl
 800d70e:	9405      	str	r4, [sp, #20]
 800d710:	e6cf      	b.n	800d4b2 <D128_GENERIC+0x10a>
 800d712:	9405      	str	r4, [sp, #20]
 800d714:	e6cd      	b.n	800d4b2 <D128_GENERIC+0x10a>
 800d716:	9a01      	ldr	r2, [sp, #4]
 800d718:	9904      	ldr	r1, [sp, #16]
 800d71a:	6091      	str	r1, [r2, #8]
 800d71c:	9903      	ldr	r1, [sp, #12]
 800d71e:	60d1      	str	r1, [r2, #12]
 800d720:	9b02      	ldr	r3, [sp, #8]
 800d722:	61d3      	str	r3, [r2, #28]
 800d724:	4611      	mov	r1, r2
 800d726:	4613      	mov	r3, r2
 800d728:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d72a:	610a      	str	r2, [r1, #16]
 800d72c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d72e:	6159      	str	r1, [r3, #20]
 800d730:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d732:	6199      	str	r1, [r3, #24]
 800d734:	2000      	movs	r0, #0
 800d736:	b013      	add	sp, #76	; 0x4c
 800d738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d73c:	00780069 	.word	0x00780069
 800d740:	005b004e 	.word	0x005b004e
 800d744:	00420037 	.word	0x00420037
 800d748:	002d0024 	.word	0x002d0024
 800d74c:	001c0015 	.word	0x001c0015
 800d750:	000f000a 	.word	0x000f000a
 800d754:	00060003 	.word	0x00060003
 800d758:	00880096 	.word	0x00880096
 800d75c:	00a200ac 	.word	0x00a200ac
 800d760:	00b400ba 	.word	0x00b400ba
 800d764:	00be00c0 	.word	0x00be00c0
 800d768:	00c000be 	.word	0x00c000be
 800d76c:	00ba00b4 	.word	0x00ba00b4
 800d770:	00ac00a2 	.word	0x00ac00a2
 800d774:	00030006 	.word	0x00030006
 800d778:	000a000f 	.word	0x000a000f
 800d77c:	0015001c 	.word	0x0015001c
 800d780:	0024002d 	.word	0x0024002d
 800d784:	00370042 	.word	0x00370042
 800d788:	004e005b 	.word	0x004e005b
 800d78c:	00690078 	.word	0x00690078
 800d790:	20000000 	.word	0x20000000
 800d794:	00960088 	.word	0x00960088

0800d798 <D16_1CH_HTONS_VOL_HP>:
 800d798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d79c:	4691      	mov	r9, r2
 800d79e:	b083      	sub	sp, #12
 800d7a0:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800d7a2:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800d7a6:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800d7aa:	9300      	str	r3, [sp, #0]
 800d7ac:	4680      	mov	r8, r0
 800d7ae:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800d7b2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d7b6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d7ba:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800d7be:	9401      	str	r4, [sp, #4]
 800d7c0:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800d7c4:	f8d9 e020 	ldr.w	lr, [r9, #32]
 800d7c8:	2a00      	cmp	r2, #0
 800d7ca:	d04e      	beq.n	800d86a <D16_1CH_HTONS_VOL_HP+0xd2>
 800d7cc:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800d878 <D16_1CH_HTONS_VOL_HP+0xe0>
 800d7d0:	1e8c      	subs	r4, r1, #2
 800d7d2:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800d7d6:	f858 2b02 	ldr.w	r2, [r8], #2
 800d7da:	ba52      	rev16	r2, r2
 800d7dc:	b2d6      	uxtb	r6, r2
 800d7de:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d7e2:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800d7e6:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800d7ea:	4413      	add	r3, r2
 800d7ec:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 800d7f0:	f3c2 0109 	ubfx	r1, r2, #0, #10
 800d7f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d7f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800d7fc:	0a93      	lsrs	r3, r2, #10
 800d7fe:	4a1c      	ldr	r2, [pc, #112]	; (800d870 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800d800:	fb21 5202 	smlad	r2, r1, r2, r5
 800d804:	4d1b      	ldr	r5, [pc, #108]	; (800d874 <D16_1CH_HTONS_VOL_HP+0xdc>)
 800d806:	fb21 f505 	smuad	r5, r1, r5
 800d80a:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800d80e:	4410      	add	r0, r2
 800d810:	1bc0      	subs	r0, r0, r7
 800d812:	17c7      	asrs	r7, r0, #31
 800d814:	fba0 010e 	umull	r0, r1, r0, lr
 800d818:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800d81c:	fb0e 1107 	mla	r1, lr, r7, r1
 800d820:	f141 0100 	adc.w	r1, r1, #0
 800d824:	0448      	lsls	r0, r1, #17
 800d826:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d82a:	2700      	movs	r7, #0
 800d82c:	fbc0 670a 	smlal	r6, r7, r0, sl
 800d830:	45d8      	cmp	r8, fp
 800d832:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800d836:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800d83a:	4617      	mov	r7, r2
 800d83c:	f301 010f 	ssat	r1, #16, r1
 800d840:	f824 1f02 	strh.w	r1, [r4, #2]!
 800d844:	d1c7      	bne.n	800d7d6 <D16_1CH_HTONS_VOL_HP+0x3e>
 800d846:	9901      	ldr	r1, [sp, #4]
 800d848:	f8c9 301c 	str.w	r3, [r9, #28]
 800d84c:	9b00      	ldr	r3, [sp, #0]
 800d84e:	f8c9 0010 	str.w	r0, [r9, #16]
 800d852:	2000      	movs	r0, #0
 800d854:	f8c9 5008 	str.w	r5, [r9, #8]
 800d858:	f8c9 100c 	str.w	r1, [r9, #12]
 800d85c:	f8c9 2014 	str.w	r2, [r9, #20]
 800d860:	f8c9 3018 	str.w	r3, [r9, #24]
 800d864:	b003      	add	sp, #12
 800d866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d86a:	463a      	mov	r2, r7
 800d86c:	4621      	mov	r1, r4
 800d86e:	e7eb      	b.n	800d848 <D16_1CH_HTONS_VOL_HP+0xb0>
 800d870:	00030001 	.word	0x00030001
 800d874:	00010003 	.word	0x00010003
 800d878:	20000000 	.word	0x20000000

0800d87c <D24_1CH_HTONS_VOL_HP>:
 800d87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d880:	b089      	sub	sp, #36	; 0x24
 800d882:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800d884:	6996      	ldr	r6, [r2, #24]
 800d886:	9304      	str	r3, [sp, #16]
 800d888:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800d88a:	9207      	str	r2, [sp, #28]
 800d88c:	6915      	ldr	r5, [r2, #16]
 800d88e:	6954      	ldr	r4, [r2, #20]
 800d890:	9606      	str	r6, [sp, #24]
 800d892:	6893      	ldr	r3, [r2, #8]
 800d894:	69d6      	ldr	r6, [r2, #28]
 800d896:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800d89a:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800d89e:	9a04      	ldr	r2, [sp, #16]
 800d8a0:	9705      	str	r7, [sp, #20]
 800d8a2:	2a00      	cmp	r2, #0
 800d8a4:	d07e      	beq.n	800d9a4 <D24_1CH_HTONS_VOL_HP+0x128>
 800d8a6:	f1a1 0b02 	sub.w	fp, r1, #2
 800d8aa:	2700      	movs	r7, #0
 800d8ac:	46a8      	mov	r8, r5
 800d8ae:	f8cd b004 	str.w	fp, [sp, #4]
 800d8b2:	4655      	mov	r5, sl
 800d8b4:	46e3      	mov	fp, ip
 800d8b6:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 800d9b0 <D24_1CH_HTONS_VOL_HP+0x134>
 800d8ba:	46ba      	mov	sl, r7
 800d8bc:	469c      	mov	ip, r3
 800d8be:	e055      	b.n	800d96c <D24_1CH_HTONS_VOL_HP+0xf0>
 800d8c0:	7802      	ldrb	r2, [r0, #0]
 800d8c2:	78c3      	ldrb	r3, [r0, #3]
 800d8c4:	7841      	ldrb	r1, [r0, #1]
 800d8c6:	0212      	lsls	r2, r2, #8
 800d8c8:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800d8cc:	440b      	add	r3, r1
 800d8ce:	3002      	adds	r0, #2
 800d8d0:	b2d9      	uxtb	r1, r3
 800d8d2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800d8d6:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800d8da:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 800d8de:	0c1b      	lsrs	r3, r3, #16
 800d8e0:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800d8e4:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800d8e8:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 800d8ec:	f3c7 0309 	ubfx	r3, r7, #0, #10
 800d8f0:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800d8f4:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800d8f8:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800d8fc:	4a2a      	ldr	r2, [pc, #168]	; (800d9a8 <D24_1CH_HTONS_VOL_HP+0x12c>)
 800d8fe:	fb23 b102 	smlad	r1, r3, r2, fp
 800d902:	4a2a      	ldr	r2, [pc, #168]	; (800d9ac <D24_1CH_HTONS_VOL_HP+0x130>)
 800d904:	fb23 cb02 	smlad	fp, r3, r2, ip
 800d908:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 800d90c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800d910:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 800d914:	2201      	movs	r2, #1
 800d916:	fb23 f702 	smuad	r7, r3, r2
 800d91a:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 800d91e:	eb01 0208 	add.w	r2, r1, r8
 800d922:	1b12      	subs	r2, r2, r4
 800d924:	17d4      	asrs	r4, r2, #31
 800d926:	fba2 2305 	umull	r2, r3, r2, r5
 800d92a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800d92e:	fb05 3304 	mla	r3, r5, r4, r3
 800d932:	f143 0300 	adc.w	r3, r3, #0
 800d936:	9c05      	ldr	r4, [sp, #20]
 800d938:	03da      	lsls	r2, r3, #15
 800d93a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800d93e:	f04f 0900 	mov.w	r9, #0
 800d942:	fbc4 8902 	smlal	r8, r9, r4, r2
 800d946:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d94a:	9a01      	ldr	r2, [sp, #4]
 800d94c:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800d950:	9b03      	ldr	r3, [sp, #12]
 800d952:	109b      	asrs	r3, r3, #2
 800d954:	f303 030f 	ssat	r3, #16, r3
 800d958:	f822 3f02 	strh.w	r3, [r2, #2]!
 800d95c:	9b04      	ldr	r3, [sp, #16]
 800d95e:	9201      	str	r2, [sp, #4]
 800d960:	f10a 0a01 	add.w	sl, sl, #1
 800d964:	459a      	cmp	sl, r3
 800d966:	44bc      	add	ip, r7
 800d968:	460c      	mov	r4, r1
 800d96a:	d00b      	beq.n	800d984 <D24_1CH_HTONS_VOL_HP+0x108>
 800d96c:	f01a 0f01 	tst.w	sl, #1
 800d970:	d0a6      	beq.n	800d8c0 <D24_1CH_HTONS_VOL_HP+0x44>
 800d972:	78c2      	ldrb	r2, [r0, #3]
 800d974:	7883      	ldrb	r3, [r0, #2]
 800d976:	f810 1b04 	ldrb.w	r1, [r0], #4
 800d97a:	0212      	lsls	r2, r2, #8
 800d97c:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800d980:	440b      	add	r3, r1
 800d982:	e7a5      	b.n	800d8d0 <D24_1CH_HTONS_VOL_HP+0x54>
 800d984:	4663      	mov	r3, ip
 800d986:	4645      	mov	r5, r8
 800d988:	46dc      	mov	ip, fp
 800d98a:	9807      	ldr	r0, [sp, #28]
 800d98c:	6141      	str	r1, [r0, #20]
 800d98e:	9906      	ldr	r1, [sp, #24]
 800d990:	6083      	str	r3, [r0, #8]
 800d992:	f8c0 c00c 	str.w	ip, [r0, #12]
 800d996:	61c6      	str	r6, [r0, #28]
 800d998:	6105      	str	r5, [r0, #16]
 800d99a:	6181      	str	r1, [r0, #24]
 800d99c:	2000      	movs	r0, #0
 800d99e:	b009      	add	sp, #36	; 0x24
 800d9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9a4:	4621      	mov	r1, r4
 800d9a6:	e7f0      	b.n	800d98a <D24_1CH_HTONS_VOL_HP+0x10e>
 800d9a8:	00030001 	.word	0x00030001
 800d9ac:	00060007 	.word	0x00060007
 800d9b0:	20000000 	.word	0x20000000

0800d9b4 <D32_1CH_HTONS_VOL_HP>:
 800d9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b8:	4692      	mov	sl, r2
 800d9ba:	b087      	sub	sp, #28
 800d9bc:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800d9be:	f8da 3018 	ldr.w	r3, [sl, #24]
 800d9c2:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800d9c6:	9304      	str	r3, [sp, #16]
 800d9c8:	f8da 4010 	ldr.w	r4, [sl, #16]
 800d9cc:	f8da 8014 	ldr.w	r8, [sl, #20]
 800d9d0:	f8da 601c 	ldr.w	r6, [sl, #28]
 800d9d4:	f8da 3008 	ldr.w	r3, [sl, #8]
 800d9d8:	f8da e00c 	ldr.w	lr, [sl, #12]
 800d9dc:	9501      	str	r5, [sp, #4]
 800d9de:	f8da c020 	ldr.w	ip, [sl, #32]
 800d9e2:	2a00      	cmp	r2, #0
 800d9e4:	d07b      	beq.n	800dade <D32_1CH_HTONS_VOL_HP+0x12a>
 800d9e6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800d9ea:	4f3e      	ldr	r7, [pc, #248]	; (800dae4 <D32_1CH_HTONS_VOL_HP+0x130>)
 800d9ec:	f8cd c00c 	str.w	ip, [sp, #12]
 800d9f0:	9202      	str	r2, [sp, #8]
 800d9f2:	460d      	mov	r5, r1
 800d9f4:	46a1      	mov	r9, r4
 800d9f6:	4684      	mov	ip, r0
 800d9f8:	f8cd a014 	str.w	sl, [sp, #20]
 800d9fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800da00:	ba49      	rev16	r1, r1
 800da02:	b2c8      	uxtb	r0, r1
 800da04:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800da08:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 800da0c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800da10:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800da14:	0e09      	lsrs	r1, r1, #24
 800da16:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800da1a:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 800da1e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800da22:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800da26:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800da2a:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 800da2e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800da32:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800da36:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800da3a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800da3e:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800da42:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800da46:	4a28      	ldr	r2, [pc, #160]	; (800dae8 <D32_1CH_HTONS_VOL_HP+0x134>)
 800da48:	fb20 e202 	smlad	r2, r0, r2, lr
 800da4c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800da50:	fb2a 2101 	smlad	r1, sl, r1, r2
 800da54:	4a25      	ldr	r2, [pc, #148]	; (800daec <D32_1CH_HTONS_VOL_HP+0x138>)
 800da56:	fb20 3302 	smlad	r3, r0, r2, r3
 800da5a:	4a25      	ldr	r2, [pc, #148]	; (800daf0 <D32_1CH_HTONS_VOL_HP+0x13c>)
 800da5c:	fb2a 3e02 	smlad	lr, sl, r2, r3
 800da60:	2301      	movs	r3, #1
 800da62:	fb20 f003 	smuad	r0, r0, r3
 800da66:	4b23      	ldr	r3, [pc, #140]	; (800daf4 <D32_1CH_HTONS_VOL_HP+0x140>)
 800da68:	fb2a 0303 	smlad	r3, sl, r3, r0
 800da6c:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 800da70:	9c03      	ldr	r4, [sp, #12]
 800da72:	eb02 0009 	add.w	r0, r2, r9
 800da76:	eba0 0008 	sub.w	r0, r0, r8
 800da7a:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800da7e:	fba0 0104 	umull	r0, r1, r0, r4
 800da82:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800da86:	fb04 110b 	mla	r1, r4, fp, r1
 800da8a:	f141 0100 	adc.w	r1, r1, #0
 800da8e:	9c01      	ldr	r4, [sp, #4]
 800da90:	0388      	lsls	r0, r1, #14
 800da92:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800da96:	f04f 0900 	mov.w	r9, #0
 800da9a:	fbc0 8904 	smlal	r8, r9, r0, r4
 800da9e:	ea4f 00a9 	mov.w	r0, r9, asr #2
 800daa2:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800daa6:	f300 000f 	ssat	r0, #16, r0
 800daaa:	9902      	ldr	r1, [sp, #8]
 800daac:	f825 0b02 	strh.w	r0, [r5], #2
 800dab0:	428d      	cmp	r5, r1
 800dab2:	4690      	mov	r8, r2
 800dab4:	d1a2      	bne.n	800d9fc <D32_1CH_HTONS_VOL_HP+0x48>
 800dab6:	f8dd a014 	ldr.w	sl, [sp, #20]
 800daba:	464c      	mov	r4, r9
 800dabc:	f8ca 3008 	str.w	r3, [sl, #8]
 800dac0:	9b04      	ldr	r3, [sp, #16]
 800dac2:	f8ca e00c 	str.w	lr, [sl, #12]
 800dac6:	2000      	movs	r0, #0
 800dac8:	f8ca 601c 	str.w	r6, [sl, #28]
 800dacc:	f8ca 4010 	str.w	r4, [sl, #16]
 800dad0:	f8ca 2014 	str.w	r2, [sl, #20]
 800dad4:	f8ca 3018 	str.w	r3, [sl, #24]
 800dad8:	b007      	add	sp, #28
 800dada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dade:	4642      	mov	r2, r8
 800dae0:	e7ec      	b.n	800dabc <D32_1CH_HTONS_VOL_HP+0x108>
 800dae2:	bf00      	nop
 800dae4:	20000000 	.word	0x20000000
 800dae8:	00060003 	.word	0x00060003
 800daec:	000a000c 	.word	0x000a000c
 800daf0:	000c000a 	.word	0x000c000a
 800daf4:	00030006 	.word	0x00030006

0800daf8 <D48_1CH_HTONS_VOL_HP>:
 800daf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dafc:	4613      	mov	r3, r2
 800dafe:	461c      	mov	r4, r3
 800db00:	b087      	sub	sp, #28
 800db02:	4625      	mov	r5, r4
 800db04:	4626      	mov	r6, r4
 800db06:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800db08:	9205      	str	r2, [sp, #20]
 800db0a:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800db0c:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800db10:	9501      	str	r5, [sp, #4]
 800db12:	4680      	mov	r8, r0
 800db14:	6a35      	ldr	r5, [r6, #32]
 800db16:	6918      	ldr	r0, [r3, #16]
 800db18:	699b      	ldr	r3, [r3, #24]
 800db1a:	9304      	str	r3, [sp, #16]
 800db1c:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800db20:	68a3      	ldr	r3, [r4, #8]
 800db22:	9502      	str	r5, [sp, #8]
 800db24:	68e4      	ldr	r4, [r4, #12]
 800db26:	2a00      	cmp	r2, #0
 800db28:	f000 808c 	beq.w	800dc44 <D48_1CH_HTONS_VOL_HP+0x14c>
 800db2c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800db30:	4d45      	ldr	r5, [pc, #276]	; (800dc48 <D48_1CH_HTONS_VOL_HP+0x150>)
 800db32:	9203      	str	r2, [sp, #12]
 800db34:	468c      	mov	ip, r1
 800db36:	e898 0044 	ldmia.w	r8, {r2, r6}
 800db3a:	f108 0806 	add.w	r8, r8, #6
 800db3e:	ba52      	rev16	r2, r2
 800db40:	ba76      	rev16	r6, r6
 800db42:	b2d7      	uxtb	r7, r2
 800db44:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800db48:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 800db4c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800db50:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800db54:	0e12      	lsrs	r2, r2, #24
 800db56:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800db5a:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800db5e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800db62:	fa5f fb86 	uxtb.w	fp, r6
 800db66:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800db6a:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 800db6e:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800db72:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800db76:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800db7a:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800db7e:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800db82:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800db86:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800db8a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800db8e:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800db92:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800db96:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800db9a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800db9e:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800dba2:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800dba6:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800dbaa:	4a28      	ldr	r2, [pc, #160]	; (800dc4c <D48_1CH_HTONS_VOL_HP+0x154>)
 800dbac:	fb2a 4202 	smlad	r2, sl, r2, r4
 800dbb0:	4927      	ldr	r1, [pc, #156]	; (800dc50 <D48_1CH_HTONS_VOL_HP+0x158>)
 800dbb2:	fb27 2201 	smlad	r2, r7, r1, r2
 800dbb6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800dbba:	fb26 2201 	smlad	r2, r6, r1, r2
 800dbbe:	4925      	ldr	r1, [pc, #148]	; (800dc54 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800dbc0:	fb2a 3401 	smlad	r4, sl, r1, r3
 800dbc4:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800dbc8:	fb27 4403 	smlad	r4, r7, r3, r4
 800dbcc:	4b22      	ldr	r3, [pc, #136]	; (800dc58 <D48_1CH_HTONS_VOL_HP+0x160>)
 800dbce:	fb26 4403 	smlad	r4, r6, r3, r4
 800dbd2:	2101      	movs	r1, #1
 800dbd4:	fb2a fa01 	smuad	sl, sl, r1
 800dbd8:	4b20      	ldr	r3, [pc, #128]	; (800dc5c <D48_1CH_HTONS_VOL_HP+0x164>)
 800dbda:	fb27 a703 	smlad	r7, r7, r3, sl
 800dbde:	4b20      	ldr	r3, [pc, #128]	; (800dc60 <D48_1CH_HTONS_VOL_HP+0x168>)
 800dbe0:	fb26 7303 	smlad	r3, r6, r3, r7
 800dbe4:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 800dbe8:	9e02      	ldr	r6, [sp, #8]
 800dbea:	9f01      	ldr	r7, [sp, #4]
 800dbec:	4410      	add	r0, r2
 800dbee:	eba0 0009 	sub.w	r0, r0, r9
 800dbf2:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800dbf6:	fba0 0106 	umull	r0, r1, r0, r6
 800dbfa:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800dbfe:	fb06 110a 	mla	r1, r6, sl, r1
 800dc02:	f141 0100 	adc.w	r1, r1, #0
 800dc06:	0308      	lsls	r0, r1, #12
 800dc08:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800dc0c:	f04f 0a00 	mov.w	sl, #0
 800dc10:	fbc0 9a07 	smlal	r9, sl, r0, r7
 800dc14:	4657      	mov	r7, sl
 800dc16:	10b8      	asrs	r0, r7, #2
 800dc18:	f300 000f 	ssat	r0, #16, r0
 800dc1c:	f82c 0b02 	strh.w	r0, [ip], #2
 800dc20:	0048      	lsls	r0, r1, #1
 800dc22:	9903      	ldr	r1, [sp, #12]
 800dc24:	458c      	cmp	ip, r1
 800dc26:	4691      	mov	r9, r2
 800dc28:	d185      	bne.n	800db36 <D48_1CH_HTONS_VOL_HP+0x3e>
 800dc2a:	9d05      	ldr	r5, [sp, #20]
 800dc2c:	616a      	str	r2, [r5, #20]
 800dc2e:	9a04      	ldr	r2, [sp, #16]
 800dc30:	6128      	str	r0, [r5, #16]
 800dc32:	2000      	movs	r0, #0
 800dc34:	60ab      	str	r3, [r5, #8]
 800dc36:	60ec      	str	r4, [r5, #12]
 800dc38:	f8c5 e01c 	str.w	lr, [r5, #28]
 800dc3c:	61aa      	str	r2, [r5, #24]
 800dc3e:	b007      	add	sp, #28
 800dc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc44:	464a      	mov	r2, r9
 800dc46:	e7f0      	b.n	800dc2a <D48_1CH_HTONS_VOL_HP+0x132>
 800dc48:	20000000 	.word	0x20000000
 800dc4c:	000f000a 	.word	0x000f000a
 800dc50:	00060003 	.word	0x00060003
 800dc54:	00150019 	.word	0x00150019
 800dc58:	00190015 	.word	0x00190015
 800dc5c:	00030006 	.word	0x00030006
 800dc60:	000a000f 	.word	0x000a000f

0800dc64 <D64_1CH_HTONS_VOL_HP>:
 800dc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc68:	b089      	sub	sp, #36	; 0x24
 800dc6a:	4614      	mov	r4, r2
 800dc6c:	9207      	str	r2, [sp, #28]
 800dc6e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800dc70:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800dc74:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800dc78:	6992      	ldr	r2, [r2, #24]
 800dc7a:	9206      	str	r2, [sp, #24]
 800dc7c:	68e2      	ldr	r2, [r4, #12]
 800dc7e:	9201      	str	r2, [sp, #4]
 800dc80:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800dc82:	9203      	str	r2, [sp, #12]
 800dc84:	6a22      	ldr	r2, [r4, #32]
 800dc86:	69e5      	ldr	r5, [r4, #28]
 800dc88:	68a6      	ldr	r6, [r4, #8]
 800dc8a:	9204      	str	r2, [sp, #16]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	f000 80b0 	beq.w	800ddf2 <D64_1CH_HTONS_VOL_HP+0x18e>
 800dc92:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800dc96:	4f58      	ldr	r7, [pc, #352]	; (800ddf8 <D64_1CH_HTONS_VOL_HP+0x194>)
 800dc98:	9305      	str	r3, [sp, #20]
 800dc9a:	9102      	str	r1, [sp, #8]
 800dc9c:	f850 2b08 	ldr.w	r2, [r0], #8
 800dca0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800dca4:	ba52      	rev16	r2, r2
 800dca6:	fa93 f993 	rev16.w	r9, r3
 800dcaa:	b2d4      	uxtb	r4, r2
 800dcac:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800dcb0:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 800dcb4:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800dcb8:	9901      	ldr	r1, [sp, #4]
 800dcba:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800dcbe:	0e12      	lsrs	r2, r2, #24
 800dcc0:	44ab      	add	fp, r5
 800dcc2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800dcc6:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800dcca:	fa5f f289 	uxtb.w	r2, r9
 800dcce:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800dcd2:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800dcd6:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800dcda:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800dcde:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800dce2:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800dce6:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800dcea:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800dcee:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800dcf2:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800dcf6:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 800dcfa:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800dcfe:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800dd02:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800dd06:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800dd0a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800dd0e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800dd12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dd16:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800dd1a:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 800dd1e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800dd22:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800dd26:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800dd2a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800dd2e:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800dd32:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800dd36:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800dd3a:	4b30      	ldr	r3, [pc, #192]	; (800ddfc <D64_1CH_HTONS_VOL_HP+0x198>)
 800dd3c:	fb2b 1303 	smlad	r3, fp, r3, r1
 800dd40:	492f      	ldr	r1, [pc, #188]	; (800de00 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800dd42:	fb24 3301 	smlad	r3, r4, r1, r3
 800dd46:	492f      	ldr	r1, [pc, #188]	; (800de04 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800dd48:	fb22 3301 	smlad	r3, r2, r1, r3
 800dd4c:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800dd50:	fb2e 390a 	smlad	r9, lr, sl, r3
 800dd54:	4b2c      	ldr	r3, [pc, #176]	; (800de08 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800dd56:	fb2b 6603 	smlad	r6, fp, r3, r6
 800dd5a:	fb2e 6613 	smladx	r6, lr, r3, r6
 800dd5e:	4b2b      	ldr	r3, [pc, #172]	; (800de0c <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800dd60:	fb24 6603 	smlad	r6, r4, r3, r6
 800dd64:	fb22 6313 	smladx	r3, r2, r3, r6
 800dd68:	f04f 0a01 	mov.w	sl, #1
 800dd6c:	9301      	str	r3, [sp, #4]
 800dd6e:	fb2b fb0a 	smuad	fp, fp, sl
 800dd72:	4b27      	ldr	r3, [pc, #156]	; (800de10 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 800dd74:	fb24 ba03 	smlad	sl, r4, r3, fp
 800dd78:	4b26      	ldr	r3, [pc, #152]	; (800de14 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800dd7a:	fb22 a203 	smlad	r2, r2, r3, sl
 800dd7e:	4b26      	ldr	r3, [pc, #152]	; (800de18 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 800dd80:	fb2e 2603 	smlad	r6, lr, r3, r2
 800dd84:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 800dd88:	eb0a 020c 	add.w	r2, sl, ip
 800dd8c:	9c04      	ldr	r4, [sp, #16]
 800dd8e:	9903      	ldr	r1, [sp, #12]
 800dd90:	eba2 0208 	sub.w	r2, r2, r8
 800dd94:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800dd98:	fba2 2304 	umull	r2, r3, r2, r4
 800dd9c:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800dda0:	fb04 3309 	mla	r3, r4, r9, r3
 800dda4:	f143 0300 	adc.w	r3, r3, #0
 800dda8:	02da      	lsls	r2, r3, #11
 800ddaa:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800ddae:	f04f 0900 	mov.w	r9, #0
 800ddb2:	fbc1 8902 	smlal	r8, r9, r1, r2
 800ddb6:	9902      	ldr	r1, [sp, #8]
 800ddb8:	ea4f 02a9 	mov.w	r2, r9, asr #2
 800ddbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800ddc0:	f302 020f 	ssat	r2, #16, r2
 800ddc4:	9b05      	ldr	r3, [sp, #20]
 800ddc6:	f821 2b02 	strh.w	r2, [r1], #2
 800ddca:	4299      	cmp	r1, r3
 800ddcc:	9102      	str	r1, [sp, #8]
 800ddce:	46d0      	mov	r8, sl
 800ddd0:	f47f af64 	bne.w	800dc9c <D64_1CH_HTONS_VOL_HP+0x38>
 800ddd4:	9a07      	ldr	r2, [sp, #28]
 800ddd6:	9901      	ldr	r1, [sp, #4]
 800ddd8:	60d1      	str	r1, [r2, #12]
 800ddda:	9906      	ldr	r1, [sp, #24]
 800dddc:	6096      	str	r6, [r2, #8]
 800ddde:	2000      	movs	r0, #0
 800dde0:	61d5      	str	r5, [r2, #28]
 800dde2:	f8c2 c010 	str.w	ip, [r2, #16]
 800dde6:	f8c2 a014 	str.w	sl, [r2, #20]
 800ddea:	6191      	str	r1, [r2, #24]
 800ddec:	b009      	add	sp, #36	; 0x24
 800ddee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddf2:	46c2      	mov	sl, r8
 800ddf4:	4622      	mov	r2, r4
 800ddf6:	e7ee      	b.n	800ddd6 <D64_1CH_HTONS_VOL_HP+0x172>
 800ddf8:	20000000 	.word	0x20000000
 800ddfc:	001c0015 	.word	0x001c0015
 800de00:	000f000a 	.word	0x000f000a
 800de04:	00060003 	.word	0x00060003
 800de08:	0024002a 	.word	0x0024002a
 800de0c:	002e0030 	.word	0x002e0030
 800de10:	00030006 	.word	0x00030006
 800de14:	000a000f 	.word	0x000a000f
 800de18:	0015001c 	.word	0x0015001c

0800de1c <D80_1CH_HTONS_VOL_HP>:
 800de1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de20:	4613      	mov	r3, r2
 800de22:	b089      	sub	sp, #36	; 0x24
 800de24:	4686      	mov	lr, r0
 800de26:	6918      	ldr	r0, [r3, #16]
 800de28:	9000      	str	r0, [sp, #0]
 800de2a:	4618      	mov	r0, r3
 800de2c:	461c      	mov	r4, r3
 800de2e:	695b      	ldr	r3, [r3, #20]
 800de30:	9302      	str	r3, [sp, #8]
 800de32:	6983      	ldr	r3, [r0, #24]
 800de34:	9306      	str	r3, [sp, #24]
 800de36:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800de3a:	69c3      	ldr	r3, [r0, #28]
 800de3c:	68c0      	ldr	r0, [r0, #12]
 800de3e:	9207      	str	r2, [sp, #28]
 800de40:	9001      	str	r0, [sp, #4]
 800de42:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800de44:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800de46:	9003      	str	r0, [sp, #12]
 800de48:	6a20      	ldr	r0, [r4, #32]
 800de4a:	9004      	str	r0, [sp, #16]
 800de4c:	2a00      	cmp	r2, #0
 800de4e:	f000 80d2 	beq.w	800dff6 <D80_1CH_HTONS_VOL_HP+0x1da>
 800de52:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800de56:	4869      	ldr	r0, [pc, #420]	; (800dffc <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800de58:	9205      	str	r2, [sp, #20]
 800de5a:	461c      	mov	r4, r3
 800de5c:	f8de 5000 	ldr.w	r5, [lr]
 800de60:	f8de 2004 	ldr.w	r2, [lr, #4]
 800de64:	f8de 3008 	ldr.w	r3, [lr, #8]
 800de68:	f10e 0e0a 	add.w	lr, lr, #10
 800de6c:	ba6d      	rev16	r5, r5
 800de6e:	ba52      	rev16	r2, r2
 800de70:	fa93 fb93 	rev16.w	fp, r3
 800de74:	b2ee      	uxtb	r6, r5
 800de76:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800de7a:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800de7e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800de82:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800de86:	eb04 0a07 	add.w	sl, r4, r7
 800de8a:	0e2d      	lsrs	r5, r5, #24
 800de8c:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 800de90:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800de94:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800de98:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 800de9c:	b2d5      	uxtb	r5, r2
 800de9e:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800dea2:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800dea6:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800deaa:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800deae:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800deb2:	0e12      	lsrs	r2, r2, #24
 800deb4:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 800deb8:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 800debc:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800dec0:	fa5f f48b 	uxtb.w	r4, fp
 800dec4:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800dec8:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800decc:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800ded0:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800ded4:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800ded8:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800dedc:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800dee0:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 800dee4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800dee8:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800deec:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800def0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800def4:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800def8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800defc:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 800df00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800df04:	f3cb 0609 	ubfx	r6, fp, #0, #10
 800df08:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800df0c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800df10:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800df14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800df18:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 800df1c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800df20:	ea4f 249b 	mov.w	r4, fp, lsr #10
 800df24:	4d36      	ldr	r5, [pc, #216]	; (800e000 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800df26:	9f01      	ldr	r7, [sp, #4]
 800df28:	fb23 7505 	smlad	r5, r3, r5, r7
 800df2c:	4f35      	ldr	r7, [pc, #212]	; (800e004 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800df2e:	fb29 5507 	smlad	r5, r9, r7, r5
 800df32:	4f35      	ldr	r7, [pc, #212]	; (800e008 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800df34:	fb28 5507 	smlad	r5, r8, r7, r5
 800df38:	4f34      	ldr	r7, [pc, #208]	; (800e00c <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800df3a:	fb22 5507 	smlad	r5, r2, r7, r5
 800df3e:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800df42:	fb26 5b0a 	smlad	fp, r6, sl, r5
 800df46:	4d32      	ldr	r5, [pc, #200]	; (800e010 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800df48:	fb23 cc05 	smlad	ip, r3, r5, ip
 800df4c:	4d31      	ldr	r5, [pc, #196]	; (800e014 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800df4e:	fb29 cc05 	smlad	ip, r9, r5, ip
 800df52:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800df56:	fb28 c505 	smlad	r5, r8, r5, ip
 800df5a:	4f2f      	ldr	r7, [pc, #188]	; (800e018 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800df5c:	fb22 5507 	smlad	r5, r2, r7, r5
 800df60:	4f2e      	ldr	r7, [pc, #184]	; (800e01c <D80_1CH_HTONS_VOL_HP+0x200>)
 800df62:	fb26 5507 	smlad	r5, r6, r7, r5
 800df66:	f04f 0a01 	mov.w	sl, #1
 800df6a:	9501      	str	r5, [sp, #4]
 800df6c:	fb23 fa0a 	smuad	sl, r3, sl
 800df70:	4b2b      	ldr	r3, [pc, #172]	; (800e020 <D80_1CH_HTONS_VOL_HP+0x204>)
 800df72:	fb29 a903 	smlad	r9, r9, r3, sl
 800df76:	4d2b      	ldr	r5, [pc, #172]	; (800e024 <D80_1CH_HTONS_VOL_HP+0x208>)
 800df78:	fb28 9805 	smlad	r8, r8, r5, r9
 800df7c:	4d2a      	ldr	r5, [pc, #168]	; (800e028 <D80_1CH_HTONS_VOL_HP+0x20c>)
 800df7e:	fb22 8205 	smlad	r2, r2, r5, r8
 800df82:	4b2a      	ldr	r3, [pc, #168]	; (800e02c <D80_1CH_HTONS_VOL_HP+0x210>)
 800df84:	fb26 2c03 	smlad	ip, r6, r3, r2
 800df88:	9b00      	ldr	r3, [sp, #0]
 800df8a:	9d04      	ldr	r5, [sp, #16]
 800df8c:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 800df90:	4453      	add	r3, sl
 800df92:	461a      	mov	r2, r3
 800df94:	9b02      	ldr	r3, [sp, #8]
 800df96:	f8cd a008 	str.w	sl, [sp, #8]
 800df9a:	1ad2      	subs	r2, r2, r3
 800df9c:	17d7      	asrs	r7, r2, #31
 800df9e:	fba2 2305 	umull	r2, r3, r2, r5
 800dfa2:	fb05 3307 	mla	r3, r5, r7, r3
 800dfa6:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800dfaa:	f143 0300 	adc.w	r3, r3, #0
 800dfae:	9d03      	ldr	r5, [sp, #12]
 800dfb0:	029a      	lsls	r2, r3, #10
 800dfb2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800dfb6:	2700      	movs	r7, #0
 800dfb8:	005b      	lsls	r3, r3, #1
 800dfba:	fbc5 6702 	smlal	r6, r7, r5, r2
 800dfbe:	10ba      	asrs	r2, r7, #2
 800dfc0:	9300      	str	r3, [sp, #0]
 800dfc2:	f302 020f 	ssat	r2, #16, r2
 800dfc6:	9b05      	ldr	r3, [sp, #20]
 800dfc8:	f821 2b02 	strh.w	r2, [r1], #2
 800dfcc:	4299      	cmp	r1, r3
 800dfce:	f47f af45 	bne.w	800de5c <D80_1CH_HTONS_VOL_HP+0x40>
 800dfd2:	4623      	mov	r3, r4
 800dfd4:	9907      	ldr	r1, [sp, #28]
 800dfd6:	9801      	ldr	r0, [sp, #4]
 800dfd8:	60c8      	str	r0, [r1, #12]
 800dfda:	9a00      	ldr	r2, [sp, #0]
 800dfdc:	f8c1 c008 	str.w	ip, [r1, #8]
 800dfe0:	4608      	mov	r0, r1
 800dfe2:	61cb      	str	r3, [r1, #28]
 800dfe4:	610a      	str	r2, [r1, #16]
 800dfe6:	f8c1 a014 	str.w	sl, [r1, #20]
 800dfea:	9906      	ldr	r1, [sp, #24]
 800dfec:	6181      	str	r1, [r0, #24]
 800dfee:	2000      	movs	r0, #0
 800dff0:	b009      	add	sp, #36	; 0x24
 800dff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dff6:	f8dd a008 	ldr.w	sl, [sp, #8]
 800dffa:	e7eb      	b.n	800dfd4 <D80_1CH_HTONS_VOL_HP+0x1b8>
 800dffc:	20000000 	.word	0x20000000
 800e000:	002d0024 	.word	0x002d0024
 800e004:	001c0015 	.word	0x001c0015
 800e008:	000f000a 	.word	0x000f000a
 800e00c:	00060003 	.word	0x00060003
 800e010:	0037003f 	.word	0x0037003f
 800e014:	00450049 	.word	0x00450049
 800e018:	00490045 	.word	0x00490045
 800e01c:	003f0037 	.word	0x003f0037
 800e020:	00030006 	.word	0x00030006
 800e024:	000a000f 	.word	0x000a000f
 800e028:	0015001c 	.word	0x0015001c
 800e02c:	0024002d 	.word	0x0024002d

0800e030 <D128_1CH_HTONS_VOL_HP>:
 800e030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e034:	b093      	sub	sp, #76	; 0x4c
 800e036:	4614      	mov	r4, r2
 800e038:	9211      	str	r2, [sp, #68]	; 0x44
 800e03a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800e03c:	6912      	ldr	r2, [r2, #16]
 800e03e:	9203      	str	r2, [sp, #12]
 800e040:	4622      	mov	r2, r4
 800e042:	4615      	mov	r5, r2
 800e044:	6964      	ldr	r4, [r4, #20]
 800e046:	9406      	str	r4, [sp, #24]
 800e048:	4614      	mov	r4, r2
 800e04a:	6992      	ldr	r2, [r2, #24]
 800e04c:	9210      	str	r2, [sp, #64]	; 0x40
 800e04e:	68ea      	ldr	r2, [r5, #12]
 800e050:	9204      	str	r2, [sp, #16]
 800e052:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800e054:	69e6      	ldr	r6, [r4, #28]
 800e056:	920d      	str	r2, [sp, #52]	; 0x34
 800e058:	68a4      	ldr	r4, [r4, #8]
 800e05a:	6a2a      	ldr	r2, [r5, #32]
 800e05c:	9405      	str	r4, [sp, #20]
 800e05e:	920e      	str	r2, [sp, #56]	; 0x38
 800e060:	2b00      	cmp	r3, #0
 800e062:	f000 8145 	beq.w	800e2f0 <D128_1CH_HTONS_VOL_HP+0x2c0>
 800e066:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800e06a:	930f      	str	r3, [sp, #60]	; 0x3c
 800e06c:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 800e34c <D128_1CH_HTONS_VOL_HP+0x31c>
 800e070:	9107      	str	r1, [sp, #28]
 800e072:	f100 0310 	add.w	r3, r0, #16
 800e076:	4699      	mov	r9, r3
 800e078:	f1a9 0110 	sub.w	r1, r9, #16
 800e07c:	c90e      	ldmia	r1, {r1, r2, r3}
 800e07e:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800e082:	ba49      	rev16	r1, r1
 800e084:	ba52      	rev16	r2, r2
 800e086:	ba5b      	rev16	r3, r3
 800e088:	fa90 fa90 	rev16.w	sl, r0
 800e08c:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800e090:	b2cc      	uxtb	r4, r1
 800e092:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800e096:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800e09a:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800e09e:	0e09      	lsrs	r1, r1, #24
 800e0a0:	4426      	add	r6, r4
 800e0a2:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800e0a6:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800e0aa:	b2d0      	uxtb	r0, r2
 800e0ac:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800e0b0:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 800e0b4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800e0b8:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800e0bc:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800e0c0:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800e0c4:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800e0c8:	0e12      	lsrs	r2, r2, #24
 800e0ca:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800e0ce:	9701      	str	r7, [sp, #4]
 800e0d0:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800e0d4:	4627      	mov	r7, r4
 800e0d6:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800e0da:	9702      	str	r7, [sp, #8]
 800e0dc:	b2da      	uxtb	r2, r3
 800e0de:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800e0e2:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800e0e6:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800e0ea:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800e0ee:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800e0f2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e0f6:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800e0fa:	0e1b      	lsrs	r3, r3, #24
 800e0fc:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800e100:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800e104:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800e108:	fa5f f38a 	uxtb.w	r3, sl
 800e10c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800e110:	960a      	str	r6, [sp, #40]	; 0x28
 800e112:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800e116:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800e11a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e11e:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800e122:	950b      	str	r5, [sp, #44]	; 0x2c
 800e124:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800e128:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800e12c:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800e130:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800e134:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800e138:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800e13c:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800e140:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800e144:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800e148:	9308      	str	r3, [sp, #32]
 800e14a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800e14e:	9b01      	ldr	r3, [sp, #4]
 800e150:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800e154:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e158:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800e15c:	9b02      	ldr	r3, [sp, #8]
 800e15e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e162:	9302      	str	r3, [sp, #8]
 800e164:	9b08      	ldr	r3, [sp, #32]
 800e166:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e16a:	9308      	str	r3, [sp, #32]
 800e16c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e16e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e172:	950c      	str	r5, [sp, #48]	; 0x30
 800e174:	461d      	mov	r5, r3
 800e176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e178:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800e17c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e180:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800e184:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800e188:	9301      	str	r3, [sp, #4]
 800e18a:	9b02      	ldr	r3, [sp, #8]
 800e18c:	9202      	str	r2, [sp, #8]
 800e18e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e190:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e192:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800e196:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800e19a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800e19e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800e1a2:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800e1a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800e1aa:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800e1ae:	9b08      	ldr	r3, [sp, #32]
 800e1b0:	9f01      	ldr	r7, [sp, #4]
 800e1b2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800e1b6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800e1ba:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800e1be:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800e1c2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800e1c6:	46be      	mov	lr, r7
 800e1c8:	0a96      	lsrs	r6, r2, #10
 800e1ca:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800e1ce:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800e1d2:	4f49      	ldr	r7, [pc, #292]	; (800e2f8 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800e1d4:	9a04      	ldr	r2, [sp, #16]
 800e1d6:	fb2e 2e07 	smlad	lr, lr, r7, r2
 800e1da:	4a48      	ldr	r2, [pc, #288]	; (800e2fc <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800e1dc:	fb2a ee02 	smlad	lr, sl, r2, lr
 800e1e0:	4a47      	ldr	r2, [pc, #284]	; (800e300 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800e1e2:	fb21 ee02 	smlad	lr, r1, r2, lr
 800e1e6:	4a47      	ldr	r2, [pc, #284]	; (800e304 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800e1e8:	fb24 ee02 	smlad	lr, r4, r2, lr
 800e1ec:	4a46      	ldr	r2, [pc, #280]	; (800e308 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800e1ee:	9f02      	ldr	r7, [sp, #8]
 800e1f0:	fb27 ee02 	smlad	lr, r7, r2, lr
 800e1f4:	4a45      	ldr	r2, [pc, #276]	; (800e30c <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800e1f6:	fb20 ee02 	smlad	lr, r0, r2, lr
 800e1fa:	4a45      	ldr	r2, [pc, #276]	; (800e310 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800e1fc:	fb23 e702 	smlad	r7, r3, r2, lr
 800e200:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800e204:	fb25 7e0e 	smlad	lr, r5, lr, r7
 800e208:	9f01      	ldr	r7, [sp, #4]
 800e20a:	4a42      	ldr	r2, [pc, #264]	; (800e314 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 800e20c:	46bc      	mov	ip, r7
 800e20e:	9f05      	ldr	r7, [sp, #20]
 800e210:	fb2c 7c02 	smlad	ip, ip, r2, r7
 800e214:	4a40      	ldr	r2, [pc, #256]	; (800e318 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800e216:	fb2a cc02 	smlad	ip, sl, r2, ip
 800e21a:	4f40      	ldr	r7, [pc, #256]	; (800e31c <D128_1CH_HTONS_VOL_HP+0x2ec>)
 800e21c:	fb21 cc07 	smlad	ip, r1, r7, ip
 800e220:	4f3f      	ldr	r7, [pc, #252]	; (800e320 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800e222:	fb24 cc07 	smlad	ip, r4, r7, ip
 800e226:	4f3f      	ldr	r7, [pc, #252]	; (800e324 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800e228:	9a02      	ldr	r2, [sp, #8]
 800e22a:	fb22 cc07 	smlad	ip, r2, r7, ip
 800e22e:	4f3e      	ldr	r7, [pc, #248]	; (800e328 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800e230:	fb20 cc07 	smlad	ip, r0, r7, ip
 800e234:	4f3d      	ldr	r7, [pc, #244]	; (800e32c <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800e236:	fb23 c707 	smlad	r7, r3, r7, ip
 800e23a:	f8df c114 	ldr.w	ip, [pc, #276]	; 800e350 <D128_1CH_HTONS_VOL_HP+0x320>
 800e23e:	fb25 720c 	smlad	r2, r5, ip, r7
 800e242:	f04f 0b01 	mov.w	fp, #1
 800e246:	9204      	str	r2, [sp, #16]
 800e248:	9f01      	ldr	r7, [sp, #4]
 800e24a:	fb27 fb0b 	smuad	fp, r7, fp
 800e24e:	4f38      	ldr	r7, [pc, #224]	; (800e330 <D128_1CH_HTONS_VOL_HP+0x300>)
 800e250:	fb2a ba07 	smlad	sl, sl, r7, fp
 800e254:	4f37      	ldr	r7, [pc, #220]	; (800e334 <D128_1CH_HTONS_VOL_HP+0x304>)
 800e256:	fb21 aa07 	smlad	sl, r1, r7, sl
 800e25a:	4f37      	ldr	r7, [pc, #220]	; (800e338 <D128_1CH_HTONS_VOL_HP+0x308>)
 800e25c:	fb24 aa07 	smlad	sl, r4, r7, sl
 800e260:	4f36      	ldr	r7, [pc, #216]	; (800e33c <D128_1CH_HTONS_VOL_HP+0x30c>)
 800e262:	9a02      	ldr	r2, [sp, #8]
 800e264:	fb22 a707 	smlad	r7, r2, r7, sl
 800e268:	4a35      	ldr	r2, [pc, #212]	; (800e340 <D128_1CH_HTONS_VOL_HP+0x310>)
 800e26a:	fb20 7702 	smlad	r7, r0, r2, r7
 800e26e:	4a35      	ldr	r2, [pc, #212]	; (800e344 <D128_1CH_HTONS_VOL_HP+0x314>)
 800e270:	fb23 7702 	smlad	r7, r3, r2, r7
 800e274:	4b34      	ldr	r3, [pc, #208]	; (800e348 <D128_1CH_HTONS_VOL_HP+0x318>)
 800e276:	fb25 7303 	smlad	r3, r5, r3, r7
 800e27a:	9305      	str	r3, [sp, #20]
 800e27c:	9b03      	ldr	r3, [sp, #12]
 800e27e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800e280:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800e284:	4473      	add	r3, lr
 800e286:	461a      	mov	r2, r3
 800e288:	9b06      	ldr	r3, [sp, #24]
 800e28a:	f8cd e018 	str.w	lr, [sp, #24]
 800e28e:	1ad2      	subs	r2, r2, r3
 800e290:	17d1      	asrs	r1, r2, #31
 800e292:	fba2 2304 	umull	r2, r3, r2, r4
 800e296:	fb04 3301 	mla	r3, r4, r1, r3
 800e29a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800e29e:	f143 0300 	adc.w	r3, r3, #0
 800e2a2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e2a4:	021a      	lsls	r2, r3, #8
 800e2a6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800e2aa:	2100      	movs	r1, #0
 800e2ac:	fbc4 0102 	smlal	r0, r1, r4, r2
 800e2b0:	108a      	asrs	r2, r1, #2
 800e2b2:	9907      	ldr	r1, [sp, #28]
 800e2b4:	f302 020f 	ssat	r2, #16, r2
 800e2b8:	005b      	lsls	r3, r3, #1
 800e2ba:	f821 2b02 	strh.w	r2, [r1], #2
 800e2be:	9303      	str	r3, [sp, #12]
 800e2c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e2c2:	9107      	str	r1, [sp, #28]
 800e2c4:	4299      	cmp	r1, r3
 800e2c6:	f109 0910 	add.w	r9, r9, #16
 800e2ca:	f47f aed5 	bne.w	800e078 <D128_1CH_HTONS_VOL_HP+0x48>
 800e2ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e2d0:	9905      	ldr	r1, [sp, #20]
 800e2d2:	6091      	str	r1, [r2, #8]
 800e2d4:	9904      	ldr	r1, [sp, #16]
 800e2d6:	60d1      	str	r1, [r2, #12]
 800e2d8:	4613      	mov	r3, r2
 800e2da:	61d6      	str	r6, [r2, #28]
 800e2dc:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e2de:	9a03      	ldr	r2, [sp, #12]
 800e2e0:	611a      	str	r2, [r3, #16]
 800e2e2:	2000      	movs	r0, #0
 800e2e4:	f8c3 e014 	str.w	lr, [r3, #20]
 800e2e8:	6199      	str	r1, [r3, #24]
 800e2ea:	b013      	add	sp, #76	; 0x4c
 800e2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2f0:	f8dd e018 	ldr.w	lr, [sp, #24]
 800e2f4:	e7eb      	b.n	800e2ce <D128_1CH_HTONS_VOL_HP+0x29e>
 800e2f6:	bf00      	nop
 800e2f8:	00780069 	.word	0x00780069
 800e2fc:	005b004e 	.word	0x005b004e
 800e300:	00420037 	.word	0x00420037
 800e304:	002d0024 	.word	0x002d0024
 800e308:	001c0015 	.word	0x001c0015
 800e30c:	000f000a 	.word	0x000f000a
 800e310:	00060003 	.word	0x00060003
 800e314:	00880096 	.word	0x00880096
 800e318:	00a200ac 	.word	0x00a200ac
 800e31c:	00b400ba 	.word	0x00b400ba
 800e320:	00be00c0 	.word	0x00be00c0
 800e324:	00c000be 	.word	0x00c000be
 800e328:	00ba00b4 	.word	0x00ba00b4
 800e32c:	00ac00a2 	.word	0x00ac00a2
 800e330:	00030006 	.word	0x00030006
 800e334:	000a000f 	.word	0x000a000f
 800e338:	0015001c 	.word	0x0015001c
 800e33c:	0024002d 	.word	0x0024002d
 800e340:	00370042 	.word	0x00370042
 800e344:	004e005b 	.word	0x004e005b
 800e348:	00690078 	.word	0x00690078
 800e34c:	20000000 	.word	0x20000000
 800e350:	00960088 	.word	0x00960088

0800e354 <PDM_Filter_Init>:
 800e354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e356:	2240      	movs	r2, #64	; 0x40
 800e358:	4604      	mov	r4, r0
 800e35a:	2100      	movs	r1, #0
 800e35c:	300c      	adds	r0, #12
 800e35e:	f001 f9db 	bl	800f718 <memset>
 800e362:	493b      	ldr	r1, [pc, #236]	; (800e450 <PDM_Filter_Init+0xfc>)
 800e364:	483b      	ldr	r0, [pc, #236]	; (800e454 <PDM_Filter_Init+0x100>)
 800e366:	f000 f98d 	bl	800e684 <CRC_Lock>
 800e36a:	8822      	ldrh	r2, [r4, #0]
 800e36c:	8963      	ldrh	r3, [r4, #10]
 800e36e:	4938      	ldr	r1, [pc, #224]	; (800e450 <PDM_Filter_Init+0xfc>)
 800e370:	8925      	ldrh	r5, [r4, #8]
 800e372:	86a3      	strh	r3, [r4, #52]	; 0x34
 800e374:	2801      	cmp	r0, #1
 800e376:	f04f 0300 	mov.w	r3, #0
 800e37a:	bf18      	it	ne
 800e37c:	2100      	movne	r1, #0
 800e37e:	2a01      	cmp	r2, #1
 800e380:	6461      	str	r1, [r4, #68]	; 0x44
 800e382:	86e5      	strh	r5, [r4, #54]	; 0x36
 800e384:	61a3      	str	r3, [r4, #24]
 800e386:	6123      	str	r3, [r4, #16]
 800e388:	6163      	str	r3, [r4, #20]
 800e38a:	60e3      	str	r3, [r4, #12]
 800e38c:	6263      	str	r3, [r4, #36]	; 0x24
 800e38e:	61e3      	str	r3, [r4, #28]
 800e390:	6223      	str	r3, [r4, #32]
 800e392:	6423      	str	r3, [r4, #64]	; 0x40
 800e394:	d918      	bls.n	800e3c8 <PDM_Filter_Init+0x74>
 800e396:	2003      	movs	r0, #3
 800e398:	2302      	movs	r3, #2
 800e39a:	8862      	ldrh	r2, [r4, #2]
 800e39c:	2a01      	cmp	r2, #1
 800e39e:	d91d      	bls.n	800e3dc <PDM_Filter_Init+0x88>
 800e3a0:	2140      	movs	r1, #64	; 0x40
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e3a6:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800e3aa:	6862      	ldr	r2, [r4, #4]
 800e3ac:	bf04      	itt	eq
 800e3ae:	6421      	streq	r1, [r4, #64]	; 0x40
 800e3b0:	460b      	moveq	r3, r1
 800e3b2:	b11a      	cbz	r2, 800e3bc <PDM_Filter_Init+0x68>
 800e3b4:	f043 0310 	orr.w	r3, r3, #16
 800e3b8:	6423      	str	r3, [r4, #64]	; 0x40
 800e3ba:	62e2      	str	r2, [r4, #44]	; 0x2c
 800e3bc:	2200      	movs	r2, #0
 800e3be:	8722      	strh	r2, [r4, #56]	; 0x38
 800e3c0:	b908      	cbnz	r0, 800e3c6 <PDM_Filter_Init+0x72>
 800e3c2:	3380      	adds	r3, #128	; 0x80
 800e3c4:	6423      	str	r3, [r4, #64]	; 0x40
 800e3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3c8:	4d23      	ldr	r5, [pc, #140]	; (800e458 <PDM_Filter_Init+0x104>)
 800e3ca:	d010      	beq.n	800e3ee <PDM_Filter_Init+0x9a>
 800e3cc:	782a      	ldrb	r2, [r5, #0]
 800e3ce:	2a01      	cmp	r2, #1
 800e3d0:	d027      	beq.n	800e422 <PDM_Filter_Init+0xce>
 800e3d2:	8862      	ldrh	r2, [r4, #2]
 800e3d4:	2a01      	cmp	r2, #1
 800e3d6:	f04f 0001 	mov.w	r0, #1
 800e3da:	d8e1      	bhi.n	800e3a0 <PDM_Filter_Init+0x4c>
 800e3dc:	d001      	beq.n	800e3e2 <PDM_Filter_Init+0x8e>
 800e3de:	4618      	mov	r0, r3
 800e3e0:	e7de      	b.n	800e3a0 <PDM_Filter_Init+0x4c>
 800e3e2:	2220      	movs	r2, #32
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	6422      	str	r2, [r4, #64]	; 0x40
 800e3e8:	4613      	mov	r3, r2
 800e3ea:	2160      	movs	r1, #96	; 0x60
 800e3ec:	e7da      	b.n	800e3a4 <PDM_Filter_Init+0x50>
 800e3ee:	7829      	ldrb	r1, [r5, #0]
 800e3f0:	2900      	cmp	r1, #0
 800e3f2:	d1ee      	bne.n	800e3d2 <PDM_Filter_Init+0x7e>
 800e3f4:	4919      	ldr	r1, [pc, #100]	; (800e45c <PDM_Filter_Init+0x108>)
 800e3f6:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800e464 <PDM_Filter_Init+0x110>
 800e3fa:	4f19      	ldr	r7, [pc, #100]	; (800e460 <PDM_Filter_Init+0x10c>)
 800e3fc:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800e400:	684a      	ldr	r2, [r1, #4]
 800e402:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800e406:	ea02 0007 	and.w	r0, r2, r7
 800e40a:	4303      	orrs	r3, r0
 800e40c:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800e410:	4413      	add	r3, r2
 800e412:	f841 3f04 	str.w	r3, [r1, #4]!
 800e416:	428e      	cmp	r6, r1
 800e418:	d1f2      	bne.n	800e400 <PDM_Filter_Init+0xac>
 800e41a:	2001      	movs	r0, #1
 800e41c:	7028      	strb	r0, [r5, #0]
 800e41e:	2300      	movs	r3, #0
 800e420:	e7bb      	b.n	800e39a <PDM_Filter_Init+0x46>
 800e422:	490e      	ldr	r1, [pc, #56]	; (800e45c <PDM_Filter_Init+0x108>)
 800e424:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800e464 <PDM_Filter_Init+0x110>
 800e428:	4f0d      	ldr	r7, [pc, #52]	; (800e460 <PDM_Filter_Init+0x10c>)
 800e42a:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800e42e:	684a      	ldr	r2, [r1, #4]
 800e430:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800e434:	ea02 0007 	and.w	r0, r2, r7
 800e438:	4303      	orrs	r3, r0
 800e43a:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800e43e:	4413      	add	r3, r2
 800e440:	f841 3f04 	str.w	r3, [r1, #4]!
 800e444:	428e      	cmp	r6, r1
 800e446:	d1f2      	bne.n	800e42e <PDM_Filter_Init+0xda>
 800e448:	2300      	movs	r3, #0
 800e44a:	702b      	strb	r3, [r5, #0]
 800e44c:	e7c1      	b.n	800e3d2 <PDM_Filter_Init+0x7e>
 800e44e:	bf00      	nop
 800e450:	b5e8b5cd 	.word	0xb5e8b5cd
 800e454:	f407a5c2 	.word	0xf407a5c2
 800e458:	200004d4 	.word	0x200004d4
 800e45c:	1ffffffc 	.word	0x1ffffffc
 800e460:	000ffc00 	.word	0x000ffc00
 800e464:	3ff00000 	.word	0x3ff00000

0800e468 <PDM_Filter_setConfig>:
 800e468:	4b66      	ldr	r3, [pc, #408]	; (800e604 <PDM_Filter_setConfig+0x19c>)
 800e46a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d001      	beq.n	800e474 <PDM_Filter_setConfig+0xc>
 800e470:	2004      	movs	r0, #4
 800e472:	4770      	bx	lr
 800e474:	b530      	push	{r4, r5, lr}
 800e476:	880a      	ldrh	r2, [r1, #0]
 800e478:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e47a:	ed2d 8b04 	vpush	{d8-d9}
 800e47e:	4604      	mov	r4, r0
 800e480:	460d      	mov	r5, r1
 800e482:	1e51      	subs	r1, r2, #1
 800e484:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 800e488:	2906      	cmp	r1, #6
 800e48a:	b083      	sub	sp, #12
 800e48c:	6420      	str	r0, [r4, #64]	; 0x40
 800e48e:	d91a      	bls.n	800e4c6 <PDM_Filter_setConfig+0x5e>
 800e490:	2008      	movs	r0, #8
 800e492:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800e496:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800e49a:	4299      	cmp	r1, r3
 800e49c:	d07e      	beq.n	800e59c <PDM_Filter_setConfig+0x134>
 800e49e:	f113 0f0c 	cmn.w	r3, #12
 800e4a2:	da2a      	bge.n	800e4fa <PDM_Filter_setConfig+0x92>
 800e4a4:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800e4a8:	3040      	adds	r0, #64	; 0x40
 800e4aa:	80ab      	strh	r3, [r5, #4]
 800e4ac:	8622      	strh	r2, [r4, #48]	; 0x30
 800e4ae:	886b      	ldrh	r3, [r5, #2]
 800e4b0:	8663      	strh	r3, [r4, #50]	; 0x32
 800e4b2:	b920      	cbnz	r0, 800e4be <PDM_Filter_setConfig+0x56>
 800e4b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e4b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e4ba:	6423      	str	r3, [r4, #64]	; 0x40
 800e4bc:	2000      	movs	r0, #0
 800e4be:	b003      	add	sp, #12
 800e4c0:	ecbd 8b04 	vpop	{d8-d9}
 800e4c4:	bd30      	pop	{r4, r5, pc}
 800e4c6:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800e4c8:	4291      	cmp	r1, r2
 800e4ca:	d06c      	beq.n	800e5a6 <PDM_Filter_setConfig+0x13e>
 800e4cc:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800e4d0:	f023 0301 	bic.w	r3, r3, #1
 800e4d4:	4313      	orrs	r3, r2
 800e4d6:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800e4da:	6423      	str	r3, [r4, #64]	; 0x40
 800e4dc:	2970      	cmp	r1, #112	; 0x70
 800e4de:	f003 030f 	and.w	r3, r3, #15
 800e4e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e4e6:	d066      	beq.n	800e5b6 <PDM_Filter_setConfig+0x14e>
 800e4e8:	2b06      	cmp	r3, #6
 800e4ea:	f200 8089 	bhi.w	800e600 <PDM_Filter_setConfig+0x198>
 800e4ee:	e8df f003 	tbb	[pc, r3]
 800e4f2:	4f52      	.short	0x4f52
 800e4f4:	3d43494c 	.word	0x3d43494c
 800e4f8:	46          	.byte	0x46
 800e4f9:	00          	.byte	0x00
 800e4fa:	2b33      	cmp	r3, #51	; 0x33
 800e4fc:	dc32      	bgt.n	800e564 <PDM_Filter_setConfig+0xfc>
 800e4fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e500:	f002 020f 	and.w	r2, r2, #15
 800e504:	3a01      	subs	r2, #1
 800e506:	2a06      	cmp	r2, #6
 800e508:	d872      	bhi.n	800e5f0 <PDM_Filter_setConfig+0x188>
 800e50a:	493f      	ldr	r1, [pc, #252]	; (800e608 <PDM_Filter_setConfig+0x1a0>)
 800e50c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800e510:	ed92 9a00 	vldr	s18, [r2]
 800e514:	ed92 8a07 	vldr	s16, [r2, #28]
 800e518:	9001      	str	r0, [sp, #4]
 800e51a:	ee07 3a90 	vmov	s15, r3
 800e51e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e522:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800e526:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800e52a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800e52e:	f002 fa73 	bl	8010a18 <powf>
 800e532:	eddf 0a36 	vldr	s1, [pc, #216]	; 800e60c <PDM_Filter_setConfig+0x1a4>
 800e536:	eef0 8a40 	vmov.f32	s17, s0
 800e53a:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800e53e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800e542:	f002 fa69 	bl	8010a18 <powf>
 800e546:	ee28 8a28 	vmul.f32	s16, s16, s17
 800e54a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e54e:	f002 fa11 	bl	8010974 <roundf>
 800e552:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800e556:	88ab      	ldrh	r3, [r5, #4]
 800e558:	882a      	ldrh	r2, [r5, #0]
 800e55a:	9801      	ldr	r0, [sp, #4]
 800e55c:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800e560:	8723      	strh	r3, [r4, #56]	; 0x38
 800e562:	e7a3      	b.n	800e4ac <PDM_Filter_setConfig+0x44>
 800e564:	2333      	movs	r3, #51	; 0x33
 800e566:	3040      	adds	r0, #64	; 0x40
 800e568:	80ab      	strh	r3, [r5, #4]
 800e56a:	e79f      	b.n	800e4ac <PDM_Filter_setConfig+0x44>
 800e56c:	4b28      	ldr	r3, [pc, #160]	; (800e610 <PDM_Filter_setConfig+0x1a8>)
 800e56e:	64a3      	str	r3, [r4, #72]	; 0x48
 800e570:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800e574:	2000      	movs	r0, #0
 800e576:	e792      	b.n	800e49e <PDM_Filter_setConfig+0x36>
 800e578:	4b26      	ldr	r3, [pc, #152]	; (800e614 <PDM_Filter_setConfig+0x1ac>)
 800e57a:	64a3      	str	r3, [r4, #72]	; 0x48
 800e57c:	e7f8      	b.n	800e570 <PDM_Filter_setConfig+0x108>
 800e57e:	4b26      	ldr	r3, [pc, #152]	; (800e618 <PDM_Filter_setConfig+0x1b0>)
 800e580:	64a3      	str	r3, [r4, #72]	; 0x48
 800e582:	e7f5      	b.n	800e570 <PDM_Filter_setConfig+0x108>
 800e584:	4b25      	ldr	r3, [pc, #148]	; (800e61c <PDM_Filter_setConfig+0x1b4>)
 800e586:	64a3      	str	r3, [r4, #72]	; 0x48
 800e588:	e7f2      	b.n	800e570 <PDM_Filter_setConfig+0x108>
 800e58a:	4b25      	ldr	r3, [pc, #148]	; (800e620 <PDM_Filter_setConfig+0x1b8>)
 800e58c:	64a3      	str	r3, [r4, #72]	; 0x48
 800e58e:	e7ef      	b.n	800e570 <PDM_Filter_setConfig+0x108>
 800e590:	4b24      	ldr	r3, [pc, #144]	; (800e624 <PDM_Filter_setConfig+0x1bc>)
 800e592:	64a3      	str	r3, [r4, #72]	; 0x48
 800e594:	e7ec      	b.n	800e570 <PDM_Filter_setConfig+0x108>
 800e596:	4b24      	ldr	r3, [pc, #144]	; (800e628 <PDM_Filter_setConfig+0x1c0>)
 800e598:	64a3      	str	r3, [r4, #72]	; 0x48
 800e59a:	e7e9      	b.n	800e570 <PDM_Filter_setConfig+0x108>
 800e59c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800e59e:	4291      	cmp	r1, r2
 800e5a0:	f47f af7d 	bne.w	800e49e <PDM_Filter_setConfig+0x36>
 800e5a4:	e783      	b.n	800e4ae <PDM_Filter_setConfig+0x46>
 800e5a6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800e5aa:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800e5ae:	4299      	cmp	r1, r3
 800e5b0:	d023      	beq.n	800e5fa <PDM_Filter_setConfig+0x192>
 800e5b2:	2000      	movs	r0, #0
 800e5b4:	e773      	b.n	800e49e <PDM_Filter_setConfig+0x36>
 800e5b6:	2b06      	cmp	r3, #6
 800e5b8:	d822      	bhi.n	800e600 <PDM_Filter_setConfig+0x198>
 800e5ba:	e8df f003 	tbb	[pc, r3]
 800e5be:	1316      	.short	0x1316
 800e5c0:	070a0d10 	.word	0x070a0d10
 800e5c4:	04          	.byte	0x04
 800e5c5:	00          	.byte	0x00
 800e5c6:	4b19      	ldr	r3, [pc, #100]	; (800e62c <PDM_Filter_setConfig+0x1c4>)
 800e5c8:	64a3      	str	r3, [r4, #72]	; 0x48
 800e5ca:	e7d1      	b.n	800e570 <PDM_Filter_setConfig+0x108>
 800e5cc:	4b18      	ldr	r3, [pc, #96]	; (800e630 <PDM_Filter_setConfig+0x1c8>)
 800e5ce:	64a3      	str	r3, [r4, #72]	; 0x48
 800e5d0:	e7ce      	b.n	800e570 <PDM_Filter_setConfig+0x108>
 800e5d2:	4b18      	ldr	r3, [pc, #96]	; (800e634 <PDM_Filter_setConfig+0x1cc>)
 800e5d4:	64a3      	str	r3, [r4, #72]	; 0x48
 800e5d6:	e7cb      	b.n	800e570 <PDM_Filter_setConfig+0x108>
 800e5d8:	4b17      	ldr	r3, [pc, #92]	; (800e638 <PDM_Filter_setConfig+0x1d0>)
 800e5da:	64a3      	str	r3, [r4, #72]	; 0x48
 800e5dc:	e7c8      	b.n	800e570 <PDM_Filter_setConfig+0x108>
 800e5de:	4b17      	ldr	r3, [pc, #92]	; (800e63c <PDM_Filter_setConfig+0x1d4>)
 800e5e0:	64a3      	str	r3, [r4, #72]	; 0x48
 800e5e2:	e7c5      	b.n	800e570 <PDM_Filter_setConfig+0x108>
 800e5e4:	4b16      	ldr	r3, [pc, #88]	; (800e640 <PDM_Filter_setConfig+0x1d8>)
 800e5e6:	64a3      	str	r3, [r4, #72]	; 0x48
 800e5e8:	e7c2      	b.n	800e570 <PDM_Filter_setConfig+0x108>
 800e5ea:	4b16      	ldr	r3, [pc, #88]	; (800e644 <PDM_Filter_setConfig+0x1dc>)
 800e5ec:	64a3      	str	r3, [r4, #72]	; 0x48
 800e5ee:	e7bf      	b.n	800e570 <PDM_Filter_setConfig+0x108>
 800e5f0:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800e648 <PDM_Filter_setConfig+0x1e0>
 800e5f4:	eeb0 9a48 	vmov.f32	s18, s16
 800e5f8:	e78e      	b.n	800e518 <PDM_Filter_setConfig+0xb0>
 800e5fa:	886b      	ldrh	r3, [r5, #2]
 800e5fc:	8663      	strh	r3, [r4, #50]	; 0x32
 800e5fe:	e759      	b.n	800e4b4 <PDM_Filter_setConfig+0x4c>
 800e600:	2000      	movs	r0, #0
 800e602:	e746      	b.n	800e492 <PDM_Filter_setConfig+0x2a>
 800e604:	b5e8b5cd 	.word	0xb5e8b5cd
 800e608:	08011678 	.word	0x08011678
 800e60c:	42000000 	.word	0x42000000
 800e610:	0800c9d5 	.word	0x0800c9d5
 800e614:	0800c8b5 	.word	0x0800c8b5
 800e618:	0800cb65 	.word	0x0800cb65
 800e61c:	0800d3a9 	.word	0x0800d3a9
 800e620:	0800d109 	.word	0x0800d109
 800e624:	0800cee9 	.word	0x0800cee9
 800e628:	0800ccfd 	.word	0x0800ccfd
 800e62c:	0800d9b5 	.word	0x0800d9b5
 800e630:	0800d87d 	.word	0x0800d87d
 800e634:	0800d799 	.word	0x0800d799
 800e638:	0800e031 	.word	0x0800e031
 800e63c:	0800de1d 	.word	0x0800de1d
 800e640:	0800dc65 	.word	0x0800dc65
 800e644:	0800daf9 	.word	0x0800daf9
 800e648:	00000000 	.word	0x00000000

0800e64c <PDM_Filter>:
 800e64c:	b410      	push	{r4}
 800e64e:	4b0c      	ldr	r3, [pc, #48]	; (800e680 <PDM_Filter+0x34>)
 800e650:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800e652:	429c      	cmp	r4, r3
 800e654:	d003      	beq.n	800e65e <PDM_Filter+0x12>
 800e656:	2004      	movs	r0, #4
 800e658:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e65c:	4770      	bx	lr
 800e65e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e660:	05dc      	lsls	r4, r3, #23
 800e662:	d407      	bmi.n	800e674 <PDM_Filter+0x28>
 800e664:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e668:	bf14      	ite	ne
 800e66a:	2020      	movne	r0, #32
 800e66c:	2030      	moveq	r0, #48	; 0x30
 800e66e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e672:	4770      	bx	lr
 800e674:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800e676:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e67a:	320c      	adds	r2, #12
 800e67c:	4718      	bx	r3
 800e67e:	bf00      	nop
 800e680:	b5e8b5cd 	.word	0xb5e8b5cd

0800e684 <CRC_Lock>:
 800e684:	4a17      	ldr	r2, [pc, #92]	; (800e6e4 <CRC_Lock+0x60>)
 800e686:	6813      	ldr	r3, [r2, #0]
 800e688:	b410      	push	{r4}
 800e68a:	f023 0301 	bic.w	r3, r3, #1
 800e68e:	4c16      	ldr	r4, [pc, #88]	; (800e6e8 <CRC_Lock+0x64>)
 800e690:	6013      	str	r3, [r2, #0]
 800e692:	6823      	ldr	r3, [r4, #0]
 800e694:	b933      	cbnz	r3, 800e6a4 <CRC_Lock+0x20>
 800e696:	4b15      	ldr	r3, [pc, #84]	; (800e6ec <CRC_Lock+0x68>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e69e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e6a2:	d00f      	beq.n	800e6c4 <CRC_Lock+0x40>
 800e6a4:	4a12      	ldr	r2, [pc, #72]	; (800e6f0 <CRC_Lock+0x6c>)
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	6013      	str	r3, [r2, #0]
 800e6aa:	6813      	ldr	r3, [r2, #0]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d1fc      	bne.n	800e6aa <CRC_Lock+0x26>
 800e6b0:	4b10      	ldr	r3, [pc, #64]	; (800e6f4 <CRC_Lock+0x70>)
 800e6b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6b6:	6018      	str	r0, [r3, #0]
 800e6b8:	6818      	ldr	r0, [r3, #0]
 800e6ba:	1a08      	subs	r0, r1, r0
 800e6bc:	fab0 f080 	clz	r0, r0
 800e6c0:	0940      	lsrs	r0, r0, #5
 800e6c2:	4770      	bx	lr
 800e6c4:	4a0c      	ldr	r2, [pc, #48]	; (800e6f8 <CRC_Lock+0x74>)
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	6013      	str	r3, [r2, #0]
 800e6ca:	6813      	ldr	r3, [r2, #0]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d1fc      	bne.n	800e6ca <CRC_Lock+0x46>
 800e6d0:	4b0a      	ldr	r3, [pc, #40]	; (800e6fc <CRC_Lock+0x78>)
 800e6d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6d6:	6018      	str	r0, [r3, #0]
 800e6d8:	6818      	ldr	r0, [r3, #0]
 800e6da:	1a40      	subs	r0, r0, r1
 800e6dc:	fab0 f080 	clz	r0, r0
 800e6e0:	0940      	lsrs	r0, r0, #5
 800e6e2:	4770      	bx	lr
 800e6e4:	e0002000 	.word	0xe0002000
 800e6e8:	e0042000 	.word	0xe0042000
 800e6ec:	5c001000 	.word	0x5c001000
 800e6f0:	40023008 	.word	0x40023008
 800e6f4:	40023000 	.word	0x40023000
 800e6f8:	58024c08 	.word	0x58024c08
 800e6fc:	58024c00 	.word	0x58024c00

0800e700 <arm_rfft_fast_init_f32>:
 800e700:	084b      	lsrs	r3, r1, #1
 800e702:	2b80      	cmp	r3, #128	; 0x80
 800e704:	b410      	push	{r4}
 800e706:	8201      	strh	r1, [r0, #16]
 800e708:	8003      	strh	r3, [r0, #0]
 800e70a:	d047      	beq.n	800e79c <arm_rfft_fast_init_f32+0x9c>
 800e70c:	d917      	bls.n	800e73e <arm_rfft_fast_init_f32+0x3e>
 800e70e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e712:	d03d      	beq.n	800e790 <arm_rfft_fast_init_f32+0x90>
 800e714:	d929      	bls.n	800e76a <arm_rfft_fast_init_f32+0x6a>
 800e716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e71a:	d020      	beq.n	800e75e <arm_rfft_fast_init_f32+0x5e>
 800e71c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e720:	d113      	bne.n	800e74a <arm_rfft_fast_init_f32+0x4a>
 800e722:	4921      	ldr	r1, [pc, #132]	; (800e7a8 <arm_rfft_fast_init_f32+0xa8>)
 800e724:	4a21      	ldr	r2, [pc, #132]	; (800e7ac <arm_rfft_fast_init_f32+0xac>)
 800e726:	4b22      	ldr	r3, [pc, #136]	; (800e7b0 <arm_rfft_fast_init_f32+0xb0>)
 800e728:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800e72c:	8184      	strh	r4, [r0, #12]
 800e72e:	6081      	str	r1, [r0, #8]
 800e730:	6042      	str	r2, [r0, #4]
 800e732:	6143      	str	r3, [r0, #20]
 800e734:	2000      	movs	r0, #0
 800e736:	b240      	sxtb	r0, r0
 800e738:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e73c:	4770      	bx	lr
 800e73e:	2b20      	cmp	r3, #32
 800e740:	d01c      	beq.n	800e77c <arm_rfft_fast_init_f32+0x7c>
 800e742:	2b40      	cmp	r3, #64	; 0x40
 800e744:	d006      	beq.n	800e754 <arm_rfft_fast_init_f32+0x54>
 800e746:	2b10      	cmp	r3, #16
 800e748:	d01d      	beq.n	800e786 <arm_rfft_fast_init_f32+0x86>
 800e74a:	20ff      	movs	r0, #255	; 0xff
 800e74c:	b240      	sxtb	r0, r0
 800e74e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e752:	4770      	bx	lr
 800e754:	2438      	movs	r4, #56	; 0x38
 800e756:	4917      	ldr	r1, [pc, #92]	; (800e7b4 <arm_rfft_fast_init_f32+0xb4>)
 800e758:	4a17      	ldr	r2, [pc, #92]	; (800e7b8 <arm_rfft_fast_init_f32+0xb8>)
 800e75a:	4b18      	ldr	r3, [pc, #96]	; (800e7bc <arm_rfft_fast_init_f32+0xbc>)
 800e75c:	e7e6      	b.n	800e72c <arm_rfft_fast_init_f32+0x2c>
 800e75e:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800e762:	4917      	ldr	r1, [pc, #92]	; (800e7c0 <arm_rfft_fast_init_f32+0xc0>)
 800e764:	4a17      	ldr	r2, [pc, #92]	; (800e7c4 <arm_rfft_fast_init_f32+0xc4>)
 800e766:	4b18      	ldr	r3, [pc, #96]	; (800e7c8 <arm_rfft_fast_init_f32+0xc8>)
 800e768:	e7e0      	b.n	800e72c <arm_rfft_fast_init_f32+0x2c>
 800e76a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e76e:	d1ec      	bne.n	800e74a <arm_rfft_fast_init_f32+0x4a>
 800e770:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800e774:	4915      	ldr	r1, [pc, #84]	; (800e7cc <arm_rfft_fast_init_f32+0xcc>)
 800e776:	4a16      	ldr	r2, [pc, #88]	; (800e7d0 <arm_rfft_fast_init_f32+0xd0>)
 800e778:	4b16      	ldr	r3, [pc, #88]	; (800e7d4 <arm_rfft_fast_init_f32+0xd4>)
 800e77a:	e7d7      	b.n	800e72c <arm_rfft_fast_init_f32+0x2c>
 800e77c:	2430      	movs	r4, #48	; 0x30
 800e77e:	4916      	ldr	r1, [pc, #88]	; (800e7d8 <arm_rfft_fast_init_f32+0xd8>)
 800e780:	4a16      	ldr	r2, [pc, #88]	; (800e7dc <arm_rfft_fast_init_f32+0xdc>)
 800e782:	4b17      	ldr	r3, [pc, #92]	; (800e7e0 <arm_rfft_fast_init_f32+0xe0>)
 800e784:	e7d2      	b.n	800e72c <arm_rfft_fast_init_f32+0x2c>
 800e786:	2414      	movs	r4, #20
 800e788:	4916      	ldr	r1, [pc, #88]	; (800e7e4 <arm_rfft_fast_init_f32+0xe4>)
 800e78a:	4a17      	ldr	r2, [pc, #92]	; (800e7e8 <arm_rfft_fast_init_f32+0xe8>)
 800e78c:	4b17      	ldr	r3, [pc, #92]	; (800e7ec <arm_rfft_fast_init_f32+0xec>)
 800e78e:	e7cd      	b.n	800e72c <arm_rfft_fast_init_f32+0x2c>
 800e790:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800e794:	4916      	ldr	r1, [pc, #88]	; (800e7f0 <arm_rfft_fast_init_f32+0xf0>)
 800e796:	4a17      	ldr	r2, [pc, #92]	; (800e7f4 <arm_rfft_fast_init_f32+0xf4>)
 800e798:	4b17      	ldr	r3, [pc, #92]	; (800e7f8 <arm_rfft_fast_init_f32+0xf8>)
 800e79a:	e7c7      	b.n	800e72c <arm_rfft_fast_init_f32+0x2c>
 800e79c:	24d0      	movs	r4, #208	; 0xd0
 800e79e:	4917      	ldr	r1, [pc, #92]	; (800e7fc <arm_rfft_fast_init_f32+0xfc>)
 800e7a0:	4a17      	ldr	r2, [pc, #92]	; (800e800 <arm_rfft_fast_init_f32+0x100>)
 800e7a2:	4b18      	ldr	r3, [pc, #96]	; (800e804 <arm_rfft_fast_init_f32+0x104>)
 800e7a4:	e7c2      	b.n	800e72c <arm_rfft_fast_init_f32+0x2c>
 800e7a6:	bf00      	nop
 800e7a8:	08020580 	.word	0x08020580
 800e7ac:	08011778 	.word	0x08011778
 800e7b0:	080178e8 	.word	0x080178e8
 800e7b4:	08015878 	.word	0x08015878
 800e7b8:	08022340 	.word	0x08022340
 800e7bc:	08024830 	.word	0x08024830
 800e7c0:	0801e268 	.word	0x0801e268
 800e7c4:	0801c168 	.word	0x0801c168
 800e7c8:	080158e8 	.word	0x080158e8
 800e7cc:	080244c0 	.word	0x080244c0
 800e7d0:	0801b8e8 	.word	0x0801b8e8
 800e7d4:	08022540 	.word	0x08022540
 800e7d8:	0801f120 	.word	0x0801f120
 800e7dc:	0801e168 	.word	0x0801e168
 800e7e0:	08015778 	.word	0x08015778
 800e7e4:	0801f078 	.word	0x0801f078
 800e7e8:	0801c0e8 	.word	0x0801c0e8
 800e7ec:	0801f0a0 	.word	0x0801f0a0
 800e7f0:	08022d40 	.word	0x08022d40
 800e7f4:	0801f580 	.word	0x0801f580
 800e7f8:	080230c0 	.word	0x080230c0
 800e7fc:	08024a30 	.word	0x08024a30
 800e800:	0801f180 	.word	0x0801f180
 800e804:	080240c0 	.word	0x080240c0

0800e808 <arm_rfft_fast_f32>:
 800e808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e80c:	8a06      	ldrh	r6, [r0, #16]
 800e80e:	0876      	lsrs	r6, r6, #1
 800e810:	4607      	mov	r7, r0
 800e812:	4615      	mov	r5, r2
 800e814:	8006      	strh	r6, [r0, #0]
 800e816:	460c      	mov	r4, r1
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d15c      	bne.n	800e8d6 <arm_rfft_fast_f32+0xce>
 800e81c:	461a      	mov	r2, r3
 800e81e:	2301      	movs	r3, #1
 800e820:	f000 fbe6 	bl	800eff0 <arm_cfft_f32>
 800e824:	edd4 7a00 	vldr	s15, [r4]
 800e828:	ed94 7a01 	vldr	s14, [r4, #4]
 800e82c:	883e      	ldrh	r6, [r7, #0]
 800e82e:	6978      	ldr	r0, [r7, #20]
 800e830:	ee37 7a07 	vadd.f32	s14, s14, s14
 800e834:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e838:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800e83c:	ee77 6a87 	vadd.f32	s13, s15, s14
 800e840:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e844:	3e01      	subs	r6, #1
 800e846:	ee26 7aa3 	vmul.f32	s14, s13, s7
 800e84a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800e84e:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800e852:	ed85 7a00 	vstr	s14, [r5]
 800e856:	edc5 7a01 	vstr	s15, [r5, #4]
 800e85a:	3010      	adds	r0, #16
 800e85c:	f105 0210 	add.w	r2, r5, #16
 800e860:	3b08      	subs	r3, #8
 800e862:	f104 0110 	add.w	r1, r4, #16
 800e866:	ed51 4a02 	vldr	s9, [r1, #-8]
 800e86a:	ed93 5a02 	vldr	s10, [r3, #8]
 800e86e:	ed11 7a01 	vldr	s14, [r1, #-4]
 800e872:	ed10 6a02 	vldr	s12, [r0, #-8]
 800e876:	edd3 5a03 	vldr	s11, [r3, #12]
 800e87a:	ed50 6a01 	vldr	s13, [r0, #-4]
 800e87e:	ee75 7a64 	vsub.f32	s15, s10, s9
 800e882:	ee35 4a87 	vadd.f32	s8, s11, s14
 800e886:	ee35 5a24 	vadd.f32	s10, s10, s9
 800e88a:	ee77 5a65 	vsub.f32	s11, s14, s11
 800e88e:	ee66 4a27 	vmul.f32	s9, s12, s15
 800e892:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800e896:	ee34 5a85 	vadd.f32	s10, s9, s10
 800e89a:	ee26 6a04 	vmul.f32	s12, s12, s8
 800e89e:	ee66 6a84 	vmul.f32	s13, s13, s8
 800e8a2:	ee77 7a25 	vadd.f32	s15, s14, s11
 800e8a6:	ee76 6a85 	vadd.f32	s13, s13, s10
 800e8aa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e8ae:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800e8b2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800e8b6:	3e01      	subs	r6, #1
 800e8b8:	ed42 6a02 	vstr	s13, [r2, #-8]
 800e8bc:	ed42 7a01 	vstr	s15, [r2, #-4]
 800e8c0:	f1a3 0308 	sub.w	r3, r3, #8
 800e8c4:	f101 0108 	add.w	r1, r1, #8
 800e8c8:	f100 0008 	add.w	r0, r0, #8
 800e8cc:	f102 0208 	add.w	r2, r2, #8
 800e8d0:	d1c9      	bne.n	800e866 <arm_rfft_fast_f32+0x5e>
 800e8d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8d6:	edd1 7a00 	vldr	s15, [r1]
 800e8da:	edd1 6a01 	vldr	s13, [r1, #4]
 800e8de:	6941      	ldr	r1, [r0, #20]
 800e8e0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e8e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e8e8:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800e8ec:	ee27 7a23 	vmul.f32	s14, s14, s7
 800e8f0:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800e8f4:	3e01      	subs	r6, #1
 800e8f6:	ed82 7a00 	vstr	s14, [r2]
 800e8fa:	edc2 7a01 	vstr	s15, [r2, #4]
 800e8fe:	00f0      	lsls	r0, r6, #3
 800e900:	b3ee      	cbz	r6, 800e97e <arm_rfft_fast_f32+0x176>
 800e902:	3808      	subs	r0, #8
 800e904:	f101 0e10 	add.w	lr, r1, #16
 800e908:	4420      	add	r0, r4
 800e90a:	f104 0110 	add.w	r1, r4, #16
 800e90e:	f102 0c10 	add.w	ip, r2, #16
 800e912:	ed90 7a02 	vldr	s14, [r0, #8]
 800e916:	ed51 6a02 	vldr	s13, [r1, #-8]
 800e91a:	ed1e 6a02 	vldr	s12, [lr, #-8]
 800e91e:	ed90 4a03 	vldr	s8, [r0, #12]
 800e922:	ed11 5a01 	vldr	s10, [r1, #-4]
 800e926:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800e92a:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800e92e:	ee74 4a05 	vadd.f32	s9, s8, s10
 800e932:	ee26 3a27 	vmul.f32	s6, s12, s15
 800e936:	ee77 6a26 	vadd.f32	s13, s14, s13
 800e93a:	ee35 5a44 	vsub.f32	s10, s10, s8
 800e93e:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800e942:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800e946:	ee77 7a05 	vadd.f32	s15, s14, s10
 800e94a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800e94e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800e952:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e956:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800e95a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800e95e:	ee27 7a23 	vmul.f32	s14, s14, s7
 800e962:	3e01      	subs	r6, #1
 800e964:	ed0c 7a02 	vstr	s14, [ip, #-8]
 800e968:	ed4c 7a01 	vstr	s15, [ip, #-4]
 800e96c:	f1a0 0008 	sub.w	r0, r0, #8
 800e970:	f101 0108 	add.w	r1, r1, #8
 800e974:	f10e 0e08 	add.w	lr, lr, #8
 800e978:	f10c 0c08 	add.w	ip, ip, #8
 800e97c:	d1c9      	bne.n	800e912 <arm_rfft_fast_f32+0x10a>
 800e97e:	4638      	mov	r0, r7
 800e980:	4629      	mov	r1, r5
 800e982:	461a      	mov	r2, r3
 800e984:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e988:	2301      	movs	r3, #1
 800e98a:	f000 bb31 	b.w	800eff0 <arm_cfft_f32>
 800e98e:	bf00      	nop

0800e990 <arm_cfft_radix8by2_f32>:
 800e990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e994:	ed2d 8b08 	vpush	{d8-d11}
 800e998:	f8b0 e000 	ldrh.w	lr, [r0]
 800e99c:	6842      	ldr	r2, [r0, #4]
 800e99e:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 800e9a2:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 800e9a6:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800e9aa:	4607      	mov	r7, r0
 800e9ac:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800e9b0:	f000 80af 	beq.w	800eb12 <arm_cfft_radix8by2_f32+0x182>
 800e9b4:	3310      	adds	r3, #16
 800e9b6:	18ce      	adds	r6, r1, r3
 800e9b8:	3210      	adds	r2, #16
 800e9ba:	4443      	add	r3, r8
 800e9bc:	f101 0510 	add.w	r5, r1, #16
 800e9c0:	f108 0410 	add.w	r4, r8, #16
 800e9c4:	ed54 1a04 	vldr	s3, [r4, #-16]
 800e9c8:	ed13 4a04 	vldr	s8, [r3, #-16]
 800e9cc:	ed53 3a03 	vldr	s7, [r3, #-12]
 800e9d0:	ed53 5a02 	vldr	s11, [r3, #-8]
 800e9d4:	ed13 5a01 	vldr	s10, [r3, #-4]
 800e9d8:	ed54 6a03 	vldr	s13, [r4, #-12]
 800e9dc:	ed14 0a02 	vldr	s0, [r4, #-8]
 800e9e0:	ed16 2a04 	vldr	s4, [r6, #-16]
 800e9e4:	ed56 2a03 	vldr	s5, [r6, #-12]
 800e9e8:	ed15 6a03 	vldr	s12, [r5, #-12]
 800e9ec:	ed15 7a01 	vldr	s14, [r5, #-4]
 800e9f0:	ed15 3a04 	vldr	s6, [r5, #-16]
 800e9f4:	ed54 7a01 	vldr	s15, [r4, #-4]
 800e9f8:	ed56 0a02 	vldr	s1, [r6, #-8]
 800e9fc:	ed16 1a01 	vldr	s2, [r6, #-4]
 800ea00:	ed55 4a02 	vldr	s9, [r5, #-8]
 800ea04:	ee73 ba21 	vadd.f32	s23, s6, s3
 800ea08:	ee36 ba26 	vadd.f32	s22, s12, s13
 800ea0c:	ee37 aa27 	vadd.f32	s20, s14, s15
 800ea10:	ee72 9a04 	vadd.f32	s19, s4, s8
 800ea14:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800ea18:	ee31 8a05 	vadd.f32	s16, s2, s10
 800ea1c:	ee74 aa80 	vadd.f32	s21, s9, s0
 800ea20:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800ea24:	ed45 ba04 	vstr	s23, [r5, #-16]
 800ea28:	ed05 ba03 	vstr	s22, [r5, #-12]
 800ea2c:	ed45 aa02 	vstr	s21, [r5, #-8]
 800ea30:	ed05 aa01 	vstr	s20, [r5, #-4]
 800ea34:	ed06 8a01 	vstr	s16, [r6, #-4]
 800ea38:	ed46 9a04 	vstr	s19, [r6, #-16]
 800ea3c:	ed06 9a03 	vstr	s18, [r6, #-12]
 800ea40:	ed46 8a02 	vstr	s17, [r6, #-8]
 800ea44:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ea48:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800ea4c:	ed12 6a03 	vldr	s12, [r2, #-12]
 800ea50:	ed52 2a04 	vldr	s5, [r2, #-16]
 800ea54:	ee33 3a61 	vsub.f32	s6, s6, s3
 800ea58:	ee34 4a42 	vsub.f32	s8, s8, s4
 800ea5c:	ee26 8a86 	vmul.f32	s16, s13, s12
 800ea60:	ee24 2a06 	vmul.f32	s4, s8, s12
 800ea64:	ee63 1a22 	vmul.f32	s3, s6, s5
 800ea68:	ee24 4a22 	vmul.f32	s8, s8, s5
 800ea6c:	ee23 3a06 	vmul.f32	s6, s6, s12
 800ea70:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800ea74:	ee23 6a86 	vmul.f32	s12, s7, s12
 800ea78:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800ea7c:	ee36 6a04 	vadd.f32	s12, s12, s8
 800ea80:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800ea84:	ee72 3a63 	vsub.f32	s7, s4, s7
 800ea88:	ee71 2a88 	vadd.f32	s5, s3, s16
 800ea8c:	ed44 6a03 	vstr	s13, [r4, #-12]
 800ea90:	ed44 2a04 	vstr	s5, [r4, #-16]
 800ea94:	ed43 3a04 	vstr	s7, [r3, #-16]
 800ea98:	ed03 6a03 	vstr	s12, [r3, #-12]
 800ea9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eaa0:	ee75 6ae0 	vsub.f32	s13, s11, s1
 800eaa4:	ed12 7a01 	vldr	s14, [r2, #-4]
 800eaa8:	ed52 5a02 	vldr	s11, [r2, #-8]
 800eaac:	ee35 6a41 	vsub.f32	s12, s10, s2
 800eab0:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800eab4:	ee67 3a87 	vmul.f32	s7, s15, s14
 800eab8:	ee26 5a87 	vmul.f32	s10, s13, s14
 800eabc:	ee24 4aa5 	vmul.f32	s8, s9, s11
 800eac0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800eac4:	ee64 4a87 	vmul.f32	s9, s9, s14
 800eac8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800eacc:	ee26 7a07 	vmul.f32	s14, s12, s14
 800ead0:	ee26 6a25 	vmul.f32	s12, s12, s11
 800ead4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ead8:	ee74 5a23 	vadd.f32	s11, s8, s7
 800eadc:	ee35 6a46 	vsub.f32	s12, s10, s12
 800eae0:	ee37 7a26 	vadd.f32	s14, s14, s13
 800eae4:	f1be 0e01 	subs.w	lr, lr, #1
 800eae8:	ed44 5a02 	vstr	s11, [r4, #-8]
 800eaec:	f105 0510 	add.w	r5, r5, #16
 800eaf0:	ed44 7a01 	vstr	s15, [r4, #-4]
 800eaf4:	f106 0610 	add.w	r6, r6, #16
 800eaf8:	ed03 6a02 	vstr	s12, [r3, #-8]
 800eafc:	ed03 7a01 	vstr	s14, [r3, #-4]
 800eb00:	f102 0210 	add.w	r2, r2, #16
 800eb04:	f104 0410 	add.w	r4, r4, #16
 800eb08:	f103 0310 	add.w	r3, r3, #16
 800eb0c:	f47f af5a 	bne.w	800e9c4 <arm_cfft_radix8by2_f32+0x34>
 800eb10:	687a      	ldr	r2, [r7, #4]
 800eb12:	fa1f f48c 	uxth.w	r4, ip
 800eb16:	4608      	mov	r0, r1
 800eb18:	2302      	movs	r3, #2
 800eb1a:	4621      	mov	r1, r4
 800eb1c:	f000 fae2 	bl	800f0e4 <arm_radix8_butterfly_f32>
 800eb20:	ecbd 8b08 	vpop	{d8-d11}
 800eb24:	4640      	mov	r0, r8
 800eb26:	4621      	mov	r1, r4
 800eb28:	687a      	ldr	r2, [r7, #4]
 800eb2a:	2302      	movs	r3, #2
 800eb2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb30:	f000 bad8 	b.w	800f0e4 <arm_radix8_butterfly_f32>

0800eb34 <arm_cfft_radix8by4_f32>:
 800eb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb38:	ed2d 8b0a 	vpush	{d8-d12}
 800eb3c:	8802      	ldrh	r2, [r0, #0]
 800eb3e:	ed91 6a00 	vldr	s12, [r1]
 800eb42:	b08f      	sub	sp, #60	; 0x3c
 800eb44:	460f      	mov	r7, r1
 800eb46:	0852      	lsrs	r2, r2, #1
 800eb48:	0093      	lsls	r3, r2, #2
 800eb4a:	900c      	str	r0, [sp, #48]	; 0x30
 800eb4c:	9103      	str	r1, [sp, #12]
 800eb4e:	6841      	ldr	r1, [r0, #4]
 800eb50:	ed97 7a01 	vldr	s14, [r7, #4]
 800eb54:	4638      	mov	r0, r7
 800eb56:	4418      	add	r0, r3
 800eb58:	4606      	mov	r6, r0
 800eb5a:	9009      	str	r0, [sp, #36]	; 0x24
 800eb5c:	4418      	add	r0, r3
 800eb5e:	edd0 6a00 	vldr	s13, [r0]
 800eb62:	edd6 3a00 	vldr	s7, [r6]
 800eb66:	edd6 2a01 	vldr	s5, [r6, #4]
 800eb6a:	edd0 7a01 	vldr	s15, [r0, #4]
 800eb6e:	900a      	str	r0, [sp, #40]	; 0x28
 800eb70:	ee76 5a26 	vadd.f32	s11, s12, s13
 800eb74:	4604      	mov	r4, r0
 800eb76:	4625      	mov	r5, r4
 800eb78:	441c      	add	r4, r3
 800eb7a:	ed94 4a00 	vldr	s8, [r4]
 800eb7e:	ed94 5a01 	vldr	s10, [r4, #4]
 800eb82:	9401      	str	r4, [sp, #4]
 800eb84:	ee75 4aa3 	vadd.f32	s9, s11, s7
 800eb88:	4630      	mov	r0, r6
 800eb8a:	ee74 4a24 	vadd.f32	s9, s8, s9
 800eb8e:	463e      	mov	r6, r7
 800eb90:	ee14 ea90 	vmov	lr, s9
 800eb94:	ee76 6a66 	vsub.f32	s13, s12, s13
 800eb98:	f846 eb08 	str.w	lr, [r6], #8
 800eb9c:	ee37 6a27 	vadd.f32	s12, s14, s15
 800eba0:	edd0 4a01 	vldr	s9, [r0, #4]
 800eba4:	9604      	str	r6, [sp, #16]
 800eba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ebaa:	9e01      	ldr	r6, [sp, #4]
 800ebac:	ee32 3aa6 	vadd.f32	s6, s5, s13
 800ebb0:	ed96 2a01 	vldr	s4, [r6, #4]
 800ebb4:	ee36 7a24 	vadd.f32	s14, s12, s9
 800ebb8:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800ebbc:	ee77 4ae3 	vsub.f32	s9, s15, s7
 800ebc0:	ee36 6a62 	vsub.f32	s12, s12, s5
 800ebc4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800ebc8:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800ebcc:	ee73 3a45 	vsub.f32	s7, s6, s10
 800ebd0:	4604      	mov	r4, r0
 800ebd2:	ee36 6a45 	vsub.f32	s12, s12, s10
 800ebd6:	ee75 6a26 	vadd.f32	s13, s10, s13
 800ebda:	46a3      	mov	fp, r4
 800ebdc:	ee37 7a02 	vadd.f32	s14, s14, s4
 800ebe0:	ee34 5a84 	vadd.f32	s10, s9, s8
 800ebe4:	ee13 8a90 	vmov	r8, s7
 800ebe8:	46a4      	mov	ip, r4
 800ebea:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800ebee:	ed87 7a01 	vstr	s14, [r7, #4]
 800ebf2:	f84b 8b08 	str.w	r8, [fp], #8
 800ebf6:	f1ac 0704 	sub.w	r7, ip, #4
 800ebfa:	ed8c 5a01 	vstr	s10, [ip, #4]
 800ebfe:	f101 0c08 	add.w	ip, r1, #8
 800ec02:	462c      	mov	r4, r5
 800ec04:	f8cd c014 	str.w	ip, [sp, #20]
 800ec08:	ee15 ca90 	vmov	ip, s11
 800ec0c:	f844 cb08 	str.w	ip, [r4], #8
 800ec10:	9407      	str	r4, [sp, #28]
 800ec12:	f101 0410 	add.w	r4, r1, #16
 800ec16:	ed85 6a01 	vstr	s12, [r5, #4]
 800ec1a:	0852      	lsrs	r2, r2, #1
 800ec1c:	9402      	str	r4, [sp, #8]
 800ec1e:	462c      	mov	r4, r5
 800ec20:	f101 0518 	add.w	r5, r1, #24
 800ec24:	920b      	str	r2, [sp, #44]	; 0x2c
 800ec26:	46b2      	mov	sl, r6
 800ec28:	9506      	str	r5, [sp, #24]
 800ec2a:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800ec2e:	3a02      	subs	r2, #2
 800ec30:	ee16 5a90 	vmov	r5, s13
 800ec34:	46b6      	mov	lr, r6
 800ec36:	4630      	mov	r0, r6
 800ec38:	0852      	lsrs	r2, r2, #1
 800ec3a:	f84a 5b08 	str.w	r5, [sl], #8
 800ec3e:	f1a0 0604 	sub.w	r6, r0, #4
 800ec42:	edce 7a01 	vstr	s15, [lr, #4]
 800ec46:	9208      	str	r2, [sp, #32]
 800ec48:	f000 8130 	beq.w	800eeac <arm_cfft_radix8by4_f32+0x378>
 800ec4c:	4691      	mov	r9, r2
 800ec4e:	9a03      	ldr	r2, [sp, #12]
 800ec50:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ec54:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ec58:	3b08      	subs	r3, #8
 800ec5a:	f102 0510 	add.w	r5, r2, #16
 800ec5e:	f101 0c20 	add.w	ip, r1, #32
 800ec62:	f1a4 020c 	sub.w	r2, r4, #12
 800ec66:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800ec6a:	4433      	add	r3, r6
 800ec6c:	3410      	adds	r4, #16
 800ec6e:	4650      	mov	r0, sl
 800ec70:	4659      	mov	r1, fp
 800ec72:	ed55 3a02 	vldr	s7, [r5, #-8]
 800ec76:	ed14 5a02 	vldr	s10, [r4, #-8]
 800ec7a:	ed91 7a00 	vldr	s14, [r1]
 800ec7e:	edd0 7a00 	vldr	s15, [r0]
 800ec82:	ed15 4a01 	vldr	s8, [r5, #-4]
 800ec86:	ed54 5a01 	vldr	s11, [r4, #-4]
 800ec8a:	edd0 6a01 	vldr	s13, [r0, #4]
 800ec8e:	ed91 6a01 	vldr	s12, [r1, #4]
 800ec92:	ee33 8a85 	vadd.f32	s16, s7, s10
 800ec96:	ee34 0a25 	vadd.f32	s0, s8, s11
 800ec9a:	ee78 4a07 	vadd.f32	s9, s16, s14
 800ec9e:	ee74 5a65 	vsub.f32	s11, s8, s11
 800eca2:	ee77 4aa4 	vadd.f32	s9, s15, s9
 800eca6:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800ecaa:	ed45 4a02 	vstr	s9, [r5, #-8]
 800ecae:	edd1 4a01 	vldr	s9, [r1, #4]
 800ecb2:	ed90 4a01 	vldr	s8, [r0, #4]
 800ecb6:	ee70 4a24 	vadd.f32	s9, s0, s9
 800ecba:	ee76 aa05 	vadd.f32	s21, s12, s10
 800ecbe:	ee74 4a84 	vadd.f32	s9, s9, s8
 800ecc2:	ee35 aac7 	vsub.f32	s20, s11, s14
 800ecc6:	ed45 4a01 	vstr	s9, [r5, #-4]
 800ecca:	edd6 1a00 	vldr	s3, [r6]
 800ecce:	edd7 0a00 	vldr	s1, [r7]
 800ecd2:	ed92 4a02 	vldr	s8, [r2, #8]
 800ecd6:	edd3 3a02 	vldr	s7, [r3, #8]
 800ecda:	ed93 2a01 	vldr	s4, [r3, #4]
 800ecde:	ed16 1a01 	vldr	s2, [r6, #-4]
 800ece2:	edd2 2a01 	vldr	s5, [r2, #4]
 800ece6:	ed57 9a01 	vldr	s19, [r7, #-4]
 800ecea:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800ecee:	ee39 3a81 	vadd.f32	s6, s19, s2
 800ecf2:	ee74 8a84 	vadd.f32	s17, s9, s8
 800ecf6:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800ecfa:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800ecfe:	ee7a aae6 	vsub.f32	s21, s21, s13
 800ed02:	ee18 aa90 	vmov	sl, s17
 800ed06:	f847 a908 	str.w	sl, [r7], #-8
 800ed0a:	edd2 8a01 	vldr	s17, [r2, #4]
 800ed0e:	ed93 9a01 	vldr	s18, [r3, #4]
 800ed12:	ee73 8a28 	vadd.f32	s17, s6, s17
 800ed16:	ee3a aa27 	vadd.f32	s20, s20, s15
 800ed1a:	ee78 8a89 	vadd.f32	s17, s17, s18
 800ed1e:	ee74 0a63 	vsub.f32	s1, s8, s7
 800ed22:	edc7 8a01 	vstr	s17, [r7, #4]
 800ed26:	ed18 ba02 	vldr	s22, [r8, #-8]
 800ed2a:	ed58 8a01 	vldr	s17, [r8, #-4]
 800ed2e:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800ed32:	ee6a ba28 	vmul.f32	s23, s20, s17
 800ed36:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800ed3a:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800ed3e:	ee30 9a81 	vadd.f32	s18, s1, s2
 800ed42:	ee79 9a82 	vadd.f32	s19, s19, s4
 800ed46:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800ed4a:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800ed4e:	ee69 baa8 	vmul.f32	s23, s19, s17
 800ed52:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800ed56:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800ed5a:	ee69 8a28 	vmul.f32	s17, s18, s17
 800ed5e:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800ed62:	ee1c aa10 	vmov	sl, s24
 800ed66:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800ed6a:	f841 ab08 	str.w	sl, [r1], #8
 800ed6e:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800ed72:	ee3b bacb 	vsub.f32	s22, s23, s22
 800ed76:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800ed7a:	ee33 3a62 	vsub.f32	s6, s6, s5
 800ed7e:	ed01 aa01 	vstr	s20, [r1, #-4]
 800ed82:	edc2 8a01 	vstr	s17, [r2, #4]
 800ed86:	ed82 ba02 	vstr	s22, [r2, #8]
 800ed8a:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800ed8e:	ee74 3a63 	vsub.f32	s7, s8, s7
 800ed92:	ee38 8a47 	vsub.f32	s16, s16, s14
 800ed96:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800ed9a:	ee30 0a46 	vsub.f32	s0, s0, s12
 800ed9e:	ee33 3a42 	vsub.f32	s6, s6, s4
 800eda2:	ee38 8a67 	vsub.f32	s16, s16, s15
 800eda6:	ee30 0a66 	vsub.f32	s0, s0, s13
 800edaa:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800edae:	ee63 8a04 	vmul.f32	s17, s6, s8
 800edb2:	ee28 aa24 	vmul.f32	s20, s16, s9
 800edb6:	ee60 9a04 	vmul.f32	s19, s0, s8
 800edba:	ee28 8a04 	vmul.f32	s16, s16, s8
 800edbe:	ee20 0a24 	vmul.f32	s0, s0, s9
 800edc2:	ee63 3a84 	vmul.f32	s7, s7, s8
 800edc6:	ee39 4a68 	vsub.f32	s8, s18, s17
 800edca:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800edce:	ee14 aa10 	vmov	sl, s8
 800edd2:	ee30 0a48 	vsub.f32	s0, s0, s16
 800edd6:	ee63 4a24 	vmul.f32	s9, s6, s9
 800edda:	ed44 9a02 	vstr	s19, [r4, #-8]
 800edde:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800ede2:	ed04 0a01 	vstr	s0, [r4, #-4]
 800ede6:	f846 a908 	str.w	sl, [r6], #-8
 800edea:	ee35 6a46 	vsub.f32	s12, s10, s12
 800edee:	ee35 7a87 	vadd.f32	s14, s11, s14
 800edf2:	edc6 3a01 	vstr	s7, [r6, #4]
 800edf6:	ee76 6a86 	vadd.f32	s13, s13, s12
 800edfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800edfe:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 800ee02:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800ee06:	ee67 5a86 	vmul.f32	s11, s15, s12
 800ee0a:	ee26 5a87 	vmul.f32	s10, s13, s14
 800ee0e:	ee72 2a62 	vsub.f32	s5, s4, s5
 800ee12:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800ee16:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800ee1a:	ee75 5a25 	vadd.f32	s11, s10, s11
 800ee1e:	ee62 0a86 	vmul.f32	s1, s5, s12
 800ee22:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ee26:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ee2a:	ee21 6a06 	vmul.f32	s12, s2, s12
 800ee2e:	ee62 2a87 	vmul.f32	s5, s5, s14
 800ee32:	ee21 1a07 	vmul.f32	s2, s2, s14
 800ee36:	ee15 aa90 	vmov	sl, s11
 800ee3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ee3e:	f840 ab08 	str.w	sl, [r0], #8
 800ee42:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800ee46:	ee76 2a22 	vadd.f32	s5, s12, s5
 800ee4a:	f1b9 0901 	subs.w	r9, r9, #1
 800ee4e:	ed40 7a01 	vstr	s15, [r0, #-4]
 800ee52:	f105 0508 	add.w	r5, r5, #8
 800ee56:	ed83 1a02 	vstr	s2, [r3, #8]
 800ee5a:	edc3 2a01 	vstr	s5, [r3, #4]
 800ee5e:	f108 0808 	add.w	r8, r8, #8
 800ee62:	f1a2 0208 	sub.w	r2, r2, #8
 800ee66:	f10c 0c10 	add.w	ip, ip, #16
 800ee6a:	f104 0408 	add.w	r4, r4, #8
 800ee6e:	f10e 0e18 	add.w	lr, lr, #24
 800ee72:	f1a3 0308 	sub.w	r3, r3, #8
 800ee76:	f47f aefc 	bne.w	800ec72 <arm_cfft_radix8by4_f32+0x13e>
 800ee7a:	9908      	ldr	r1, [sp, #32]
 800ee7c:	9802      	ldr	r0, [sp, #8]
 800ee7e:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800ee82:	00cb      	lsls	r3, r1, #3
 800ee84:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800ee88:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800ee8c:	9102      	str	r1, [sp, #8]
 800ee8e:	9904      	ldr	r1, [sp, #16]
 800ee90:	4419      	add	r1, r3
 800ee92:	9104      	str	r1, [sp, #16]
 800ee94:	9905      	ldr	r1, [sp, #20]
 800ee96:	4419      	add	r1, r3
 800ee98:	9105      	str	r1, [sp, #20]
 800ee9a:	9907      	ldr	r1, [sp, #28]
 800ee9c:	449b      	add	fp, r3
 800ee9e:	4419      	add	r1, r3
 800eea0:	449a      	add	sl, r3
 800eea2:	9b06      	ldr	r3, [sp, #24]
 800eea4:	9107      	str	r1, [sp, #28]
 800eea6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eeaa:	9306      	str	r3, [sp, #24]
 800eeac:	9a04      	ldr	r2, [sp, #16]
 800eeae:	9807      	ldr	r0, [sp, #28]
 800eeb0:	edd2 3a00 	vldr	s7, [r2]
 800eeb4:	ed90 4a00 	vldr	s8, [r0]
 800eeb8:	eddb 7a00 	vldr	s15, [fp]
 800eebc:	ed9a 3a00 	vldr	s6, [sl]
 800eec0:	edd2 4a01 	vldr	s9, [r2, #4]
 800eec4:	ed90 7a01 	vldr	s14, [r0, #4]
 800eec8:	ed9b 2a01 	vldr	s4, [fp, #4]
 800eecc:	edda 5a01 	vldr	s11, [sl, #4]
 800eed0:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800eed4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800eed6:	ee73 6a84 	vadd.f32	s13, s7, s8
 800eeda:	ee34 6a87 	vadd.f32	s12, s9, s14
 800eede:	ee36 5aa7 	vadd.f32	s10, s13, s15
 800eee2:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800eee6:	ee33 5a05 	vadd.f32	s10, s6, s10
 800eeea:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800eeee:	ed82 5a00 	vstr	s10, [r2]
 800eef2:	ed9b 5a01 	vldr	s10, [fp, #4]
 800eef6:	edda 4a01 	vldr	s9, [sl, #4]
 800eefa:	ee36 5a05 	vadd.f32	s10, s12, s10
 800eefe:	ee72 3a04 	vadd.f32	s7, s4, s8
 800ef02:	ee35 5a24 	vadd.f32	s10, s10, s9
 800ef06:	ee77 4a67 	vsub.f32	s9, s14, s15
 800ef0a:	ed82 5a01 	vstr	s10, [r2, #4]
 800ef0e:	9a05      	ldr	r2, [sp, #20]
 800ef10:	ee34 5a83 	vadd.f32	s10, s9, s6
 800ef14:	edd2 1a00 	vldr	s3, [r2]
 800ef18:	edd2 2a01 	vldr	s5, [r2, #4]
 800ef1c:	9a02      	ldr	r2, [sp, #8]
 800ef1e:	ee73 3ae5 	vsub.f32	s7, s7, s11
 800ef22:	ee36 6a42 	vsub.f32	s12, s12, s4
 800ef26:	ee63 4aa1 	vmul.f32	s9, s7, s3
 800ef2a:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800ef2e:	ee65 2a22 	vmul.f32	s5, s10, s5
 800ef32:	ee25 5a21 	vmul.f32	s10, s10, s3
 800ef36:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800ef3a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800ef3e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ef42:	edcb 2a00 	vstr	s5, [fp]
 800ef46:	ed8b 5a01 	vstr	s10, [fp, #4]
 800ef4a:	edd2 3a01 	vldr	s7, [r2, #4]
 800ef4e:	ed92 5a00 	vldr	s10, [r2]
 800ef52:	9a06      	ldr	r2, [sp, #24]
 800ef54:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800ef58:	ee36 6a65 	vsub.f32	s12, s12, s11
 800ef5c:	ee66 4a85 	vmul.f32	s9, s13, s10
 800ef60:	ee26 5a05 	vmul.f32	s10, s12, s10
 800ef64:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800ef68:	ee26 6a23 	vmul.f32	s12, s12, s7
 800ef6c:	ee75 6a66 	vsub.f32	s13, s10, s13
 800ef70:	ee34 6a86 	vadd.f32	s12, s9, s12
 800ef74:	ee34 4a42 	vsub.f32	s8, s8, s4
 800ef78:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ef7c:	edc0 6a01 	vstr	s13, [r0, #4]
 800ef80:	ed80 6a00 	vstr	s12, [r0]
 800ef84:	ed92 6a01 	vldr	s12, [r2, #4]
 800ef88:	9803      	ldr	r0, [sp, #12]
 800ef8a:	ee77 7a43 	vsub.f32	s15, s14, s6
 800ef8e:	ee75 5a84 	vadd.f32	s11, s11, s8
 800ef92:	ed92 7a00 	vldr	s14, [r2]
 800ef96:	ee65 6a87 	vmul.f32	s13, s11, s14
 800ef9a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ef9e:	ee65 5a86 	vmul.f32	s11, s11, s12
 800efa2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800efa6:	ee77 5a65 	vsub.f32	s11, s14, s11
 800efaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800efae:	edca 5a01 	vstr	s11, [sl, #4]
 800efb2:	edca 7a00 	vstr	s15, [sl]
 800efb6:	6872      	ldr	r2, [r6, #4]
 800efb8:	4621      	mov	r1, r4
 800efba:	2304      	movs	r3, #4
 800efbc:	f000 f892 	bl	800f0e4 <arm_radix8_butterfly_f32>
 800efc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800efc2:	6872      	ldr	r2, [r6, #4]
 800efc4:	4621      	mov	r1, r4
 800efc6:	2304      	movs	r3, #4
 800efc8:	f000 f88c 	bl	800f0e4 <arm_radix8_butterfly_f32>
 800efcc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800efce:	6872      	ldr	r2, [r6, #4]
 800efd0:	4621      	mov	r1, r4
 800efd2:	2304      	movs	r3, #4
 800efd4:	f000 f886 	bl	800f0e4 <arm_radix8_butterfly_f32>
 800efd8:	9801      	ldr	r0, [sp, #4]
 800efda:	6872      	ldr	r2, [r6, #4]
 800efdc:	4621      	mov	r1, r4
 800efde:	2304      	movs	r3, #4
 800efe0:	b00f      	add	sp, #60	; 0x3c
 800efe2:	ecbd 8b0a 	vpop	{d8-d12}
 800efe6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efea:	f000 b87b 	b.w	800f0e4 <arm_radix8_butterfly_f32>
 800efee:	bf00      	nop

0800eff0 <arm_cfft_f32>:
 800eff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eff4:	2a01      	cmp	r2, #1
 800eff6:	4606      	mov	r6, r0
 800eff8:	4617      	mov	r7, r2
 800effa:	460c      	mov	r4, r1
 800effc:	4698      	mov	r8, r3
 800effe:	8805      	ldrh	r5, [r0, #0]
 800f000:	d054      	beq.n	800f0ac <arm_cfft_f32+0xbc>
 800f002:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800f006:	d04c      	beq.n	800f0a2 <arm_cfft_f32+0xb2>
 800f008:	d916      	bls.n	800f038 <arm_cfft_f32+0x48>
 800f00a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800f00e:	d01a      	beq.n	800f046 <arm_cfft_f32+0x56>
 800f010:	d95c      	bls.n	800f0cc <arm_cfft_f32+0xdc>
 800f012:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800f016:	d044      	beq.n	800f0a2 <arm_cfft_f32+0xb2>
 800f018:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800f01c:	d105      	bne.n	800f02a <arm_cfft_f32+0x3a>
 800f01e:	4620      	mov	r0, r4
 800f020:	4629      	mov	r1, r5
 800f022:	6872      	ldr	r2, [r6, #4]
 800f024:	2301      	movs	r3, #1
 800f026:	f000 f85d 	bl	800f0e4 <arm_radix8_butterfly_f32>
 800f02a:	f1b8 0f00 	cmp.w	r8, #0
 800f02e:	d111      	bne.n	800f054 <arm_cfft_f32+0x64>
 800f030:	2f01      	cmp	r7, #1
 800f032:	d016      	beq.n	800f062 <arm_cfft_f32+0x72>
 800f034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f038:	2d20      	cmp	r5, #32
 800f03a:	d032      	beq.n	800f0a2 <arm_cfft_f32+0xb2>
 800f03c:	d94a      	bls.n	800f0d4 <arm_cfft_f32+0xe4>
 800f03e:	2d40      	cmp	r5, #64	; 0x40
 800f040:	d0ed      	beq.n	800f01e <arm_cfft_f32+0x2e>
 800f042:	2d80      	cmp	r5, #128	; 0x80
 800f044:	d1f1      	bne.n	800f02a <arm_cfft_f32+0x3a>
 800f046:	4630      	mov	r0, r6
 800f048:	4621      	mov	r1, r4
 800f04a:	f7ff fca1 	bl	800e990 <arm_cfft_radix8by2_f32>
 800f04e:	f1b8 0f00 	cmp.w	r8, #0
 800f052:	d0ed      	beq.n	800f030 <arm_cfft_f32+0x40>
 800f054:	4620      	mov	r0, r4
 800f056:	89b1      	ldrh	r1, [r6, #12]
 800f058:	68b2      	ldr	r2, [r6, #8]
 800f05a:	f7f1 f8c1 	bl	80001e0 <arm_bitreversal_32>
 800f05e:	2f01      	cmp	r7, #1
 800f060:	d1e8      	bne.n	800f034 <arm_cfft_f32+0x44>
 800f062:	ee07 5a90 	vmov	s15, r5
 800f066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f06a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f06e:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800f072:	2d00      	cmp	r5, #0
 800f074:	d0de      	beq.n	800f034 <arm_cfft_f32+0x44>
 800f076:	f104 0108 	add.w	r1, r4, #8
 800f07a:	2300      	movs	r3, #0
 800f07c:	3301      	adds	r3, #1
 800f07e:	429d      	cmp	r5, r3
 800f080:	f101 0108 	add.w	r1, r1, #8
 800f084:	ed11 7a04 	vldr	s14, [r1, #-16]
 800f088:	ed51 7a03 	vldr	s15, [r1, #-12]
 800f08c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f090:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f094:	ed01 7a04 	vstr	s14, [r1, #-16]
 800f098:	ed41 7a03 	vstr	s15, [r1, #-12]
 800f09c:	d1ee      	bne.n	800f07c <arm_cfft_f32+0x8c>
 800f09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0a2:	4630      	mov	r0, r6
 800f0a4:	4621      	mov	r1, r4
 800f0a6:	f7ff fd45 	bl	800eb34 <arm_cfft_radix8by4_f32>
 800f0aa:	e7be      	b.n	800f02a <arm_cfft_f32+0x3a>
 800f0ac:	b1ad      	cbz	r5, 800f0da <arm_cfft_f32+0xea>
 800f0ae:	f101 030c 	add.w	r3, r1, #12
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	ed53 7a02 	vldr	s15, [r3, #-8]
 800f0b8:	3201      	adds	r2, #1
 800f0ba:	eef1 7a67 	vneg.f32	s15, s15
 800f0be:	4295      	cmp	r5, r2
 800f0c0:	ed43 7a02 	vstr	s15, [r3, #-8]
 800f0c4:	f103 0308 	add.w	r3, r3, #8
 800f0c8:	d1f4      	bne.n	800f0b4 <arm_cfft_f32+0xc4>
 800f0ca:	e79a      	b.n	800f002 <arm_cfft_f32+0x12>
 800f0cc:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800f0d0:	d0a5      	beq.n	800f01e <arm_cfft_f32+0x2e>
 800f0d2:	e7aa      	b.n	800f02a <arm_cfft_f32+0x3a>
 800f0d4:	2d10      	cmp	r5, #16
 800f0d6:	d0b6      	beq.n	800f046 <arm_cfft_f32+0x56>
 800f0d8:	e7a7      	b.n	800f02a <arm_cfft_f32+0x3a>
 800f0da:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800f0de:	d894      	bhi.n	800f00a <arm_cfft_f32+0x1a>
 800f0e0:	e7aa      	b.n	800f038 <arm_cfft_f32+0x48>
 800f0e2:	bf00      	nop

0800f0e4 <arm_radix8_butterfly_f32>:
 800f0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0e8:	ed2d 8b10 	vpush	{d8-d15}
 800f0ec:	b09d      	sub	sp, #116	; 0x74
 800f0ee:	461c      	mov	r4, r3
 800f0f0:	ed9f bac8 	vldr	s22, [pc, #800]	; 800f414 <arm_radix8_butterfly_f32+0x330>
 800f0f4:	921a      	str	r2, [sp, #104]	; 0x68
 800f0f6:	1d03      	adds	r3, r0, #4
 800f0f8:	4682      	mov	sl, r0
 800f0fa:	4689      	mov	r9, r1
 800f0fc:	468b      	mov	fp, r1
 800f0fe:	931b      	str	r3, [sp, #108]	; 0x6c
 800f100:	9400      	str	r4, [sp, #0]
 800f102:	469e      	mov	lr, r3
 800f104:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800f108:	005a      	lsls	r2, r3, #1
 800f10a:	18d6      	adds	r6, r2, r3
 800f10c:	18f5      	adds	r5, r6, r3
 800f10e:	9203      	str	r2, [sp, #12]
 800f110:	195a      	adds	r2, r3, r5
 800f112:	18d0      	adds	r0, r2, r3
 800f114:	00df      	lsls	r7, r3, #3
 800f116:	1819      	adds	r1, r3, r0
 800f118:	463c      	mov	r4, r7
 800f11a:	9701      	str	r7, [sp, #4]
 800f11c:	4457      	add	r7, sl
 800f11e:	930c      	str	r3, [sp, #48]	; 0x30
 800f120:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 800f124:	011b      	lsls	r3, r3, #4
 800f126:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 800f12a:	eb07 0c04 	add.w	ip, r7, r4
 800f12e:	9c00      	ldr	r4, [sp, #0]
 800f130:	9302      	str	r3, [sp, #8]
 800f132:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 800f136:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 800f13a:	3204      	adds	r2, #4
 800f13c:	3104      	adds	r1, #4
 800f13e:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 800f142:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f146:	f04f 0800 	mov.w	r8, #0
 800f14a:	eddc 7a00 	vldr	s15, [ip]
 800f14e:	edd7 6a00 	vldr	s13, [r7]
 800f152:	edd6 3a00 	vldr	s7, [r6]
 800f156:	ed5e aa01 	vldr	s21, [lr, #-4]
 800f15a:	edd5 4a00 	vldr	s9, [r5]
 800f15e:	ed90 2a00 	vldr	s4, [r0]
 800f162:	ed12 7a01 	vldr	s14, [r2, #-4]
 800f166:	ed51 0a01 	vldr	s1, [r1, #-4]
 800f16a:	ee77 8a82 	vadd.f32	s17, s15, s4
 800f16e:	ee33 4aa0 	vadd.f32	s8, s7, s1
 800f172:	ee76 1a87 	vadd.f32	s3, s13, s14
 800f176:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 800f17a:	ee31 6a84 	vadd.f32	s12, s3, s8
 800f17e:	ee33 5a28 	vadd.f32	s10, s6, s17
 800f182:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f186:	ee75 6a06 	vadd.f32	s13, s10, s12
 800f18a:	ee35 5a46 	vsub.f32	s10, s10, s12
 800f18e:	ed4e 6a01 	vstr	s13, [lr, #-4]
 800f192:	ed85 5a00 	vstr	s10, [r5]
 800f196:	ed96 1a01 	vldr	s2, [r6, #4]
 800f19a:	edd7 5a01 	vldr	s11, [r7, #4]
 800f19e:	ed92 aa00 	vldr	s20, [r2]
 800f1a2:	ed91 6a00 	vldr	s12, [r1]
 800f1a6:	ed9e 9a00 	vldr	s18, [lr]
 800f1aa:	ed95 5a01 	vldr	s10, [r5, #4]
 800f1ae:	eddc 6a01 	vldr	s13, [ip, #4]
 800f1b2:	edd0 9a01 	vldr	s19, [r0, #4]
 800f1b6:	ee73 0ae0 	vsub.f32	s1, s7, s1
 800f1ba:	ee71 2a46 	vsub.f32	s5, s2, s12
 800f1be:	ee75 3aca 	vsub.f32	s7, s11, s20
 800f1c2:	ee37 0a60 	vsub.f32	s0, s14, s1
 800f1c6:	ee33 8aa2 	vadd.f32	s16, s7, s5
 800f1ca:	ee37 7a20 	vadd.f32	s14, s14, s1
 800f1ce:	ee73 2ae2 	vsub.f32	s5, s7, s5
 800f1d2:	ee37 2ac2 	vsub.f32	s4, s15, s4
 800f1d6:	ee79 3a05 	vadd.f32	s7, s18, s10
 800f1da:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800f1de:	ee39 5a45 	vsub.f32	s10, s18, s10
 800f1e2:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 800f1e6:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800f1ea:	ee75 5a8a 	vadd.f32	s11, s11, s20
 800f1ee:	ee31 6a06 	vadd.f32	s12, s2, s12
 800f1f2:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800f1f6:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800f1fa:	ee62 2a8b 	vmul.f32	s5, s5, s22
 800f1fe:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800f202:	ee33 3a68 	vsub.f32	s6, s6, s17
 800f206:	ee36 0a88 	vadd.f32	s0, s13, s16
 800f20a:	ee75 8a86 	vadd.f32	s17, s11, s12
 800f20e:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800f212:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800f216:	ee75 6a62 	vsub.f32	s13, s10, s5
 800f21a:	ee33 4ac9 	vsub.f32	s8, s7, s18
 800f21e:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800f222:	ee33 1a89 	vadd.f32	s2, s7, s18
 800f226:	ee74 5ae0 	vsub.f32	s11, s9, s1
 800f22a:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800f22e:	ee75 4a22 	vadd.f32	s9, s10, s5
 800f232:	ee32 5a27 	vadd.f32	s10, s4, s15
 800f236:	ee72 7a67 	vsub.f32	s15, s4, s15
 800f23a:	ee33 8a06 	vadd.f32	s16, s6, s12
 800f23e:	ee75 2a87 	vadd.f32	s5, s11, s14
 800f242:	ee31 9a28 	vadd.f32	s18, s2, s17
 800f246:	ee33 6a46 	vsub.f32	s12, s6, s12
 800f24a:	ee74 0a61 	vsub.f32	s1, s8, s3
 800f24e:	ee33 2a80 	vadd.f32	s4, s7, s0
 800f252:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800f256:	ee34 3ac5 	vsub.f32	s6, s9, s10
 800f25a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f25e:	ee31 1a68 	vsub.f32	s2, s2, s17
 800f262:	ee34 4a21 	vadd.f32	s8, s8, s3
 800f266:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800f26a:	ee74 4a85 	vadd.f32	s9, s9, s10
 800f26e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f272:	44d8      	add	r8, fp
 800f274:	45c1      	cmp	r9, r8
 800f276:	ed8e 9a00 	vstr	s18, [lr]
 800f27a:	ed85 1a01 	vstr	s2, [r5, #4]
 800f27e:	449e      	add	lr, r3
 800f280:	ed8c 8a00 	vstr	s16, [ip]
 800f284:	441d      	add	r5, r3
 800f286:	ed80 6a00 	vstr	s12, [r0]
 800f28a:	edcc 0a01 	vstr	s1, [ip, #4]
 800f28e:	ed80 4a01 	vstr	s8, [r0, #4]
 800f292:	449c      	add	ip, r3
 800f294:	ed87 2a00 	vstr	s4, [r7]
 800f298:	4418      	add	r0, r3
 800f29a:	ed41 3a01 	vstr	s7, [r1, #-4]
 800f29e:	ed42 2a01 	vstr	s5, [r2, #-4]
 800f2a2:	ed86 7a00 	vstr	s14, [r6]
 800f2a6:	ed87 3a01 	vstr	s6, [r7, #4]
 800f2aa:	edc1 4a00 	vstr	s9, [r1]
 800f2ae:	441f      	add	r7, r3
 800f2b0:	edc2 5a00 	vstr	s11, [r2]
 800f2b4:	4419      	add	r1, r3
 800f2b6:	edc6 6a01 	vstr	s13, [r6, #4]
 800f2ba:	441a      	add	r2, r3
 800f2bc:	441e      	add	r6, r3
 800f2be:	f63f af44 	bhi.w	800f14a <arm_radix8_butterfly_f32+0x66>
 800f2c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f2c4:	2907      	cmp	r1, #7
 800f2c6:	4620      	mov	r0, r4
 800f2c8:	f240 81e9 	bls.w	800f69e <arm_radix8_butterfly_f32+0x5ba>
 800f2cc:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800f2d0:	193e      	adds	r6, r7, r4
 800f2d2:	1935      	adds	r5, r6, r4
 800f2d4:	9c03      	ldr	r4, [sp, #12]
 800f2d6:	9000      	str	r0, [sp, #0]
 800f2d8:	4622      	mov	r2, r4
 800f2da:	3201      	adds	r2, #1
 800f2dc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f2e0:	9900      	ldr	r1, [sp, #0]
 800f2e2:	1828      	adds	r0, r5, r0
 800f2e4:	eb00 0e01 	add.w	lr, r0, r1
 800f2e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f2ea:	440a      	add	r2, r1
 800f2ec:	eb04 0c01 	add.w	ip, r4, r1
 800f2f0:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800f2f4:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 800f2f8:	9a00      	ldr	r2, [sp, #0]
 800f2fa:	940f      	str	r4, [sp, #60]	; 0x3c
 800f2fc:	00ed      	lsls	r5, r5, #3
 800f2fe:	9511      	str	r5, [sp, #68]	; 0x44
 800f300:	00d5      	lsls	r5, r2, #3
 800f302:	950d      	str	r5, [sp, #52]	; 0x34
 800f304:	9d01      	ldr	r5, [sp, #4]
 800f306:	3508      	adds	r5, #8
 800f308:	9516      	str	r5, [sp, #88]	; 0x58
 800f30a:	9d02      	ldr	r5, [sp, #8]
 800f30c:	3508      	adds	r5, #8
 800f30e:	0114      	lsls	r4, r2, #4
 800f310:	9517      	str	r5, [sp, #92]	; 0x5c
 800f312:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f314:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800f316:	940e      	str	r4, [sp, #56]	; 0x38
 800f318:	00c0      	lsls	r0, r0, #3
 800f31a:	9010      	str	r0, [sp, #64]	; 0x40
 800f31c:	18aa      	adds	r2, r5, r2
 800f31e:	9207      	str	r2, [sp, #28]
 800f320:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f322:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800f324:	18aa      	adds	r2, r5, r2
 800f326:	9208      	str	r2, [sp, #32]
 800f328:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f32a:	18aa      	adds	r2, r5, r2
 800f32c:	9209      	str	r2, [sp, #36]	; 0x24
 800f32e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800f332:	f10e 0204 	add.w	r2, lr, #4
 800f336:	920a      	str	r2, [sp, #40]	; 0x28
 800f338:	00c9      	lsls	r1, r1, #3
 800f33a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f33c:	310c      	adds	r1, #12
 800f33e:	00f6      	lsls	r6, r6, #3
 800f340:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 800f344:	9114      	str	r1, [sp, #80]	; 0x50
 800f346:	18a9      	adds	r1, r5, r2
 800f348:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f34a:	9612      	str	r6, [sp, #72]	; 0x48
 800f34c:	00ff      	lsls	r7, r7, #3
 800f34e:	19ae      	adds	r6, r5, r6
 800f350:	3008      	adds	r0, #8
 800f352:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800f356:	9606      	str	r6, [sp, #24]
 800f358:	9019      	str	r0, [sp, #100]	; 0x64
 800f35a:	18aa      	adds	r2, r5, r2
 800f35c:	0164      	lsls	r4, r4, #5
 800f35e:	19ee      	adds	r6, r5, r7
 800f360:	f10c 000c 	add.w	r0, ip, #12
 800f364:	9713      	str	r7, [sp, #76]	; 0x4c
 800f366:	9604      	str	r6, [sp, #16]
 800f368:	9015      	str	r0, [sp, #84]	; 0x54
 800f36a:	9103      	str	r1, [sp, #12]
 800f36c:	9205      	str	r2, [sp, #20]
 800f36e:	f104 0208 	add.w	r2, r4, #8
 800f372:	9218      	str	r2, [sp, #96]	; 0x60
 800f374:	f04f 0801 	mov.w	r8, #1
 800f378:	2200      	movs	r2, #0
 800f37a:	f102 0108 	add.w	r1, r2, #8
 800f37e:	460f      	mov	r7, r1
 800f380:	910b      	str	r1, [sp, #44]	; 0x2c
 800f382:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f384:	188e      	adds	r6, r1, r2
 800f386:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f388:	188d      	adds	r5, r1, r2
 800f38a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800f38c:	188c      	adds	r4, r1, r2
 800f38e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800f390:	1888      	adds	r0, r1, r2
 800f392:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f394:	eb01 0c02 	add.w	ip, r1, r2
 800f398:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f39a:	440a      	add	r2, r1
 800f39c:	9903      	ldr	r1, [sp, #12]
 800f39e:	edd1 fa00 	vldr	s31, [r1]
 800f3a2:	9905      	ldr	r1, [sp, #20]
 800f3a4:	ed91 fa00 	vldr	s30, [r1]
 800f3a8:	9904      	ldr	r1, [sp, #16]
 800f3aa:	edd1 ea00 	vldr	s29, [r1]
 800f3ae:	9906      	ldr	r1, [sp, #24]
 800f3b0:	ed91 ea00 	vldr	s28, [r1]
 800f3b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f3b6:	edd1 da00 	vldr	s27, [r1]
 800f3ba:	9908      	ldr	r1, [sp, #32]
 800f3bc:	ed91 da00 	vldr	s26, [r1]
 800f3c0:	9907      	ldr	r1, [sp, #28]
 800f3c2:	edd1 ca00 	vldr	s25, [r1]
 800f3c6:	9903      	ldr	r1, [sp, #12]
 800f3c8:	ed91 ca01 	vldr	s24, [r1, #4]
 800f3cc:	9905      	ldr	r1, [sp, #20]
 800f3ce:	edd1 ba01 	vldr	s23, [r1, #4]
 800f3d2:	9904      	ldr	r1, [sp, #16]
 800f3d4:	edd1 aa01 	vldr	s21, [r1, #4]
 800f3d8:	9906      	ldr	r1, [sp, #24]
 800f3da:	ed91 aa01 	vldr	s20, [r1, #4]
 800f3de:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f3e0:	edd1 7a01 	vldr	s15, [r1, #4]
 800f3e4:	9908      	ldr	r1, [sp, #32]
 800f3e6:	edcd 7a00 	vstr	s15, [sp]
 800f3ea:	edd1 7a01 	vldr	s15, [r1, #4]
 800f3ee:	9907      	ldr	r1, [sp, #28]
 800f3f0:	edcd 7a01 	vstr	s15, [sp, #4]
 800f3f4:	edd1 7a01 	vldr	s15, [r1, #4]
 800f3f8:	eb0a 0e07 	add.w	lr, sl, r7
 800f3fc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800f3fe:	edcd 7a02 	vstr	s15, [sp, #8]
 800f402:	eb0c 010a 	add.w	r1, ip, sl
 800f406:	4456      	add	r6, sl
 800f408:	4455      	add	r5, sl
 800f40a:	4454      	add	r4, sl
 800f40c:	4450      	add	r0, sl
 800f40e:	4452      	add	r2, sl
 800f410:	46c4      	mov	ip, r8
 800f412:	e001      	b.n	800f418 <arm_radix8_butterfly_f32+0x334>
 800f414:	3f3504f3 	.word	0x3f3504f3
 800f418:	ed96 5a00 	vldr	s10, [r6]
 800f41c:	ed52 9a01 	vldr	s19, [r2, #-4]
 800f420:	ed11 6a01 	vldr	s12, [r1, #-4]
 800f424:	edd0 7a00 	vldr	s15, [r0]
 800f428:	ed17 7a01 	vldr	s14, [r7, #-4]
 800f42c:	edde 3a00 	vldr	s7, [lr]
 800f430:	ed94 3a00 	vldr	s6, [r4]
 800f434:	ed95 2a00 	vldr	s4, [r5]
 800f438:	ed9e 0a01 	vldr	s0, [lr, #4]
 800f43c:	ee33 8a85 	vadd.f32	s16, s7, s10
 800f440:	ee32 1a06 	vadd.f32	s2, s4, s12
 800f444:	ee33 4a29 	vadd.f32	s8, s6, s19
 800f448:	ee77 4a87 	vadd.f32	s9, s15, s14
 800f44c:	ee78 1a04 	vadd.f32	s3, s16, s8
 800f450:	ee71 6a24 	vadd.f32	s13, s2, s9
 800f454:	ee32 2a46 	vsub.f32	s4, s4, s12
 800f458:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800f45c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f460:	ed8e 6a00 	vstr	s12, [lr]
 800f464:	edd0 8a01 	vldr	s17, [r0, #4]
 800f468:	ed95 9a01 	vldr	s18, [r5, #4]
 800f46c:	edd1 2a00 	vldr	s5, [r1]
 800f470:	ed97 7a00 	vldr	s14, [r7]
 800f474:	edd4 0a01 	vldr	s1, [r4, #4]
 800f478:	ed96 6a01 	vldr	s12, [r6, #4]
 800f47c:	edd2 5a00 	vldr	s11, [r2]
 800f480:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800f484:	ee33 3a69 	vsub.f32	s6, s6, s19
 800f488:	ee39 5a62 	vsub.f32	s10, s18, s5
 800f48c:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800f490:	ee38 4a44 	vsub.f32	s8, s16, s8
 800f494:	ee38 7a87 	vadd.f32	s14, s17, s14
 800f498:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800f49c:	ee79 2a22 	vadd.f32	s5, s18, s5
 800f4a0:	ee75 8a69 	vsub.f32	s17, s10, s19
 800f4a4:	ee32 9a27 	vadd.f32	s18, s4, s15
 800f4a8:	ee35 5a29 	vadd.f32	s10, s10, s19
 800f4ac:	ee72 7a67 	vsub.f32	s15, s4, s15
 800f4b0:	ee30 2a06 	vadd.f32	s4, s0, s12
 800f4b4:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800f4b8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800f4bc:	ee32 9a08 	vadd.f32	s18, s4, s16
 800f4c0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800f4c4:	ee32 2a48 	vsub.f32	s4, s4, s16
 800f4c8:	ee71 4a64 	vsub.f32	s9, s2, s9
 800f4cc:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800f4d0:	ee32 1a87 	vadd.f32	s2, s5, s14
 800f4d4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800f4d8:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800f4dc:	ee30 6a46 	vsub.f32	s12, s0, s12
 800f4e0:	ee73 0a29 	vadd.f32	s1, s6, s19
 800f4e4:	ee36 0a28 	vadd.f32	s0, s12, s17
 800f4e8:	ee33 3a69 	vsub.f32	s6, s6, s19
 800f4ec:	ee32 7a64 	vsub.f32	s14, s4, s9
 800f4f0:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800f4f4:	ee36 6a68 	vsub.f32	s12, s12, s17
 800f4f8:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800f4fc:	ee75 8a85 	vadd.f32	s17, s11, s10
 800f500:	ee74 3a22 	vadd.f32	s7, s8, s5
 800f504:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800f508:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800f50c:	ee79 1a41 	vsub.f32	s3, s18, s2
 800f510:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800f514:	ee76 5a43 	vsub.f32	s11, s12, s6
 800f518:	ee74 2a62 	vsub.f32	s5, s8, s5
 800f51c:	ee72 4a24 	vadd.f32	s9, s4, s9
 800f520:	ee30 4a60 	vsub.f32	s8, s0, s1
 800f524:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800f528:	ee30 0a20 	vadd.f32	s0, s0, s1
 800f52c:	ee77 9a85 	vadd.f32	s19, s15, s10
 800f530:	ee36 6a03 	vadd.f32	s12, s12, s6
 800f534:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800f538:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800f53c:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800f540:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800f544:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800f548:	ee39 1a01 	vadd.f32	s2, s18, s2
 800f54c:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800f550:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800f554:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800f558:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800f55c:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800f560:	ee35 3a03 	vadd.f32	s6, s10, s6
 800f564:	ee72 6a66 	vsub.f32	s13, s4, s13
 800f568:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800f56c:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800f570:	ed9d 4a02 	vldr	s8, [sp, #8]
 800f574:	ed8e 1a01 	vstr	s2, [lr, #4]
 800f578:	ee77 3a63 	vsub.f32	s7, s14, s7
 800f57c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800f580:	ed9d 7a01 	vldr	s14, [sp, #4]
 800f584:	ed86 3a00 	vstr	s6, [r6]
 800f588:	ee30 9a89 	vadd.f32	s18, s1, s18
 800f58c:	ee32 2a05 	vadd.f32	s4, s4, s10
 800f590:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800f594:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800f598:	ee67 2a22 	vmul.f32	s5, s14, s5
 800f59c:	ee64 1a00 	vmul.f32	s3, s8, s0
 800f5a0:	ee27 7a24 	vmul.f32	s14, s14, s9
 800f5a4:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800f5a8:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800f5ac:	ee64 8a28 	vmul.f32	s17, s8, s17
 800f5b0:	ed9d 4a00 	vldr	s8, [sp]
 800f5b4:	edc6 6a01 	vstr	s13, [r6, #4]
 800f5b8:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800f5bc:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800f5c0:	ee64 9a29 	vmul.f32	s19, s8, s19
 800f5c4:	ee24 4a25 	vmul.f32	s8, s8, s11
 800f5c8:	ee30 7a87 	vadd.f32	s14, s1, s14
 800f5cc:	ee74 4a84 	vadd.f32	s9, s9, s8
 800f5d0:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800f5d4:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800f5d8:	ee2c 0a80 	vmul.f32	s0, s25, s0
 800f5dc:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800f5e0:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800f5e4:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800f5e8:	ee75 1a21 	vadd.f32	s3, s10, s3
 800f5ec:	ee30 0a68 	vsub.f32	s0, s0, s17
 800f5f0:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800f5f4:	ee70 0a84 	vadd.f32	s1, s1, s8
 800f5f8:	ee36 6a67 	vsub.f32	s12, s12, s15
 800f5fc:	44dc      	add	ip, fp
 800f5fe:	45e1      	cmp	r9, ip
 800f600:	ed84 9a00 	vstr	s18, [r4]
 800f604:	edc4 3a01 	vstr	s7, [r4, #4]
 800f608:	449e      	add	lr, r3
 800f60a:	ed02 7a01 	vstr	s14, [r2, #-4]
 800f60e:	edc2 2a00 	vstr	s5, [r2]
 800f612:	441e      	add	r6, r3
 800f614:	ed85 2a00 	vstr	s4, [r5]
 800f618:	ed85 8a01 	vstr	s16, [r5, #4]
 800f61c:	441c      	add	r4, r3
 800f61e:	ed47 1a01 	vstr	s3, [r7, #-4]
 800f622:	ed87 0a00 	vstr	s0, [r7]
 800f626:	441a      	add	r2, r3
 800f628:	ed41 4a01 	vstr	s9, [r1, #-4]
 800f62c:	edc1 9a00 	vstr	s19, [r1]
 800f630:	441d      	add	r5, r3
 800f632:	edc0 0a00 	vstr	s1, [r0]
 800f636:	441f      	add	r7, r3
 800f638:	ed80 6a01 	vstr	s12, [r0, #4]
 800f63c:	4419      	add	r1, r3
 800f63e:	4418      	add	r0, r3
 800f640:	f63f aeea 	bhi.w	800f418 <arm_radix8_butterfly_f32+0x334>
 800f644:	9a03      	ldr	r2, [sp, #12]
 800f646:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f648:	440a      	add	r2, r1
 800f64a:	9203      	str	r2, [sp, #12]
 800f64c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f64e:	9a05      	ldr	r2, [sp, #20]
 800f650:	440a      	add	r2, r1
 800f652:	9205      	str	r2, [sp, #20]
 800f654:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f656:	9a04      	ldr	r2, [sp, #16]
 800f658:	440a      	add	r2, r1
 800f65a:	9204      	str	r2, [sp, #16]
 800f65c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f65e:	9a06      	ldr	r2, [sp, #24]
 800f660:	440a      	add	r2, r1
 800f662:	9206      	str	r2, [sp, #24]
 800f664:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f666:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f668:	440a      	add	r2, r1
 800f66a:	9209      	str	r2, [sp, #36]	; 0x24
 800f66c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f66e:	9a08      	ldr	r2, [sp, #32]
 800f670:	440a      	add	r2, r1
 800f672:	9208      	str	r2, [sp, #32]
 800f674:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f676:	9a07      	ldr	r2, [sp, #28]
 800f678:	440a      	add	r2, r1
 800f67a:	9207      	str	r2, [sp, #28]
 800f67c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f67e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f680:	f108 0801 	add.w	r8, r8, #1
 800f684:	3208      	adds	r2, #8
 800f686:	4588      	cmp	r8, r1
 800f688:	920a      	str	r2, [sp, #40]	; 0x28
 800f68a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f68c:	f47f ae75 	bne.w	800f37a <arm_radix8_butterfly_f32+0x296>
 800f690:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800f694:	9300      	str	r3, [sp, #0]
 800f696:	46c3      	mov	fp, r8
 800f698:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 800f69c:	e532      	b.n	800f104 <arm_radix8_butterfly_f32+0x20>
 800f69e:	b01d      	add	sp, #116	; 0x74
 800f6a0:	ecbd 8b10 	vpop	{d8-d15}
 800f6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f6a8 <__errno>:
 800f6a8:	4b01      	ldr	r3, [pc, #4]	; (800f6b0 <__errno+0x8>)
 800f6aa:	6818      	ldr	r0, [r3, #0]
 800f6ac:	4770      	bx	lr
 800f6ae:	bf00      	nop
 800f6b0:	20000454 	.word	0x20000454

0800f6b4 <__libc_init_array>:
 800f6b4:	b570      	push	{r4, r5, r6, lr}
 800f6b6:	4d0d      	ldr	r5, [pc, #52]	; (800f6ec <__libc_init_array+0x38>)
 800f6b8:	4c0d      	ldr	r4, [pc, #52]	; (800f6f0 <__libc_init_array+0x3c>)
 800f6ba:	1b64      	subs	r4, r4, r5
 800f6bc:	10a4      	asrs	r4, r4, #2
 800f6be:	2600      	movs	r6, #0
 800f6c0:	42a6      	cmp	r6, r4
 800f6c2:	d109      	bne.n	800f6d8 <__libc_init_array+0x24>
 800f6c4:	4d0b      	ldr	r5, [pc, #44]	; (800f6f4 <__libc_init_array+0x40>)
 800f6c6:	4c0c      	ldr	r4, [pc, #48]	; (800f6f8 <__libc_init_array+0x44>)
 800f6c8:	f001 fee4 	bl	8011494 <_init>
 800f6cc:	1b64      	subs	r4, r4, r5
 800f6ce:	10a4      	asrs	r4, r4, #2
 800f6d0:	2600      	movs	r6, #0
 800f6d2:	42a6      	cmp	r6, r4
 800f6d4:	d105      	bne.n	800f6e2 <__libc_init_array+0x2e>
 800f6d6:	bd70      	pop	{r4, r5, r6, pc}
 800f6d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6dc:	4798      	blx	r3
 800f6de:	3601      	adds	r6, #1
 800f6e0:	e7ee      	b.n	800f6c0 <__libc_init_array+0xc>
 800f6e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6e6:	4798      	blx	r3
 800f6e8:	3601      	adds	r6, #1
 800f6ea:	e7f2      	b.n	800f6d2 <__libc_init_array+0x1e>
 800f6ec:	08024d8c 	.word	0x08024d8c
 800f6f0:	08024d8c 	.word	0x08024d8c
 800f6f4:	08024d8c 	.word	0x08024d8c
 800f6f8:	08024d90 	.word	0x08024d90

0800f6fc <memcpy>:
 800f6fc:	440a      	add	r2, r1
 800f6fe:	4291      	cmp	r1, r2
 800f700:	f100 33ff 	add.w	r3, r0, #4294967295
 800f704:	d100      	bne.n	800f708 <memcpy+0xc>
 800f706:	4770      	bx	lr
 800f708:	b510      	push	{r4, lr}
 800f70a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f70e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f712:	4291      	cmp	r1, r2
 800f714:	d1f9      	bne.n	800f70a <memcpy+0xe>
 800f716:	bd10      	pop	{r4, pc}

0800f718 <memset>:
 800f718:	4402      	add	r2, r0
 800f71a:	4603      	mov	r3, r0
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d100      	bne.n	800f722 <memset+0xa>
 800f720:	4770      	bx	lr
 800f722:	f803 1b01 	strb.w	r1, [r3], #1
 800f726:	e7f9      	b.n	800f71c <memset+0x4>

0800f728 <iprintf>:
 800f728:	b40f      	push	{r0, r1, r2, r3}
 800f72a:	4b0a      	ldr	r3, [pc, #40]	; (800f754 <iprintf+0x2c>)
 800f72c:	b513      	push	{r0, r1, r4, lr}
 800f72e:	681c      	ldr	r4, [r3, #0]
 800f730:	b124      	cbz	r4, 800f73c <iprintf+0x14>
 800f732:	69a3      	ldr	r3, [r4, #24]
 800f734:	b913      	cbnz	r3, 800f73c <iprintf+0x14>
 800f736:	4620      	mov	r0, r4
 800f738:	f000 fb38 	bl	800fdac <__sinit>
 800f73c:	ab05      	add	r3, sp, #20
 800f73e:	9a04      	ldr	r2, [sp, #16]
 800f740:	68a1      	ldr	r1, [r4, #8]
 800f742:	9301      	str	r3, [sp, #4]
 800f744:	4620      	mov	r0, r4
 800f746:	f000 fd41 	bl	80101cc <_vfiprintf_r>
 800f74a:	b002      	add	sp, #8
 800f74c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f750:	b004      	add	sp, #16
 800f752:	4770      	bx	lr
 800f754:	20000454 	.word	0x20000454

0800f758 <putchar>:
 800f758:	4b09      	ldr	r3, [pc, #36]	; (800f780 <putchar+0x28>)
 800f75a:	b513      	push	{r0, r1, r4, lr}
 800f75c:	681c      	ldr	r4, [r3, #0]
 800f75e:	4601      	mov	r1, r0
 800f760:	b134      	cbz	r4, 800f770 <putchar+0x18>
 800f762:	69a3      	ldr	r3, [r4, #24]
 800f764:	b923      	cbnz	r3, 800f770 <putchar+0x18>
 800f766:	9001      	str	r0, [sp, #4]
 800f768:	4620      	mov	r0, r4
 800f76a:	f000 fb1f 	bl	800fdac <__sinit>
 800f76e:	9901      	ldr	r1, [sp, #4]
 800f770:	68a2      	ldr	r2, [r4, #8]
 800f772:	4620      	mov	r0, r4
 800f774:	b002      	add	sp, #8
 800f776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f77a:	f000 bfeb 	b.w	8010754 <_putc_r>
 800f77e:	bf00      	nop
 800f780:	20000454 	.word	0x20000454

0800f784 <_puts_r>:
 800f784:	b570      	push	{r4, r5, r6, lr}
 800f786:	460e      	mov	r6, r1
 800f788:	4605      	mov	r5, r0
 800f78a:	b118      	cbz	r0, 800f794 <_puts_r+0x10>
 800f78c:	6983      	ldr	r3, [r0, #24]
 800f78e:	b90b      	cbnz	r3, 800f794 <_puts_r+0x10>
 800f790:	f000 fb0c 	bl	800fdac <__sinit>
 800f794:	69ab      	ldr	r3, [r5, #24]
 800f796:	68ac      	ldr	r4, [r5, #8]
 800f798:	b913      	cbnz	r3, 800f7a0 <_puts_r+0x1c>
 800f79a:	4628      	mov	r0, r5
 800f79c:	f000 fb06 	bl	800fdac <__sinit>
 800f7a0:	4b2c      	ldr	r3, [pc, #176]	; (800f854 <_puts_r+0xd0>)
 800f7a2:	429c      	cmp	r4, r3
 800f7a4:	d120      	bne.n	800f7e8 <_puts_r+0x64>
 800f7a6:	686c      	ldr	r4, [r5, #4]
 800f7a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f7aa:	07db      	lsls	r3, r3, #31
 800f7ac:	d405      	bmi.n	800f7ba <_puts_r+0x36>
 800f7ae:	89a3      	ldrh	r3, [r4, #12]
 800f7b0:	0598      	lsls	r0, r3, #22
 800f7b2:	d402      	bmi.n	800f7ba <_puts_r+0x36>
 800f7b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7b6:	f000 fb97 	bl	800fee8 <__retarget_lock_acquire_recursive>
 800f7ba:	89a3      	ldrh	r3, [r4, #12]
 800f7bc:	0719      	lsls	r1, r3, #28
 800f7be:	d51d      	bpl.n	800f7fc <_puts_r+0x78>
 800f7c0:	6923      	ldr	r3, [r4, #16]
 800f7c2:	b1db      	cbz	r3, 800f7fc <_puts_r+0x78>
 800f7c4:	3e01      	subs	r6, #1
 800f7c6:	68a3      	ldr	r3, [r4, #8]
 800f7c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f7cc:	3b01      	subs	r3, #1
 800f7ce:	60a3      	str	r3, [r4, #8]
 800f7d0:	bb39      	cbnz	r1, 800f822 <_puts_r+0x9e>
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	da38      	bge.n	800f848 <_puts_r+0xc4>
 800f7d6:	4622      	mov	r2, r4
 800f7d8:	210a      	movs	r1, #10
 800f7da:	4628      	mov	r0, r5
 800f7dc:	f000 f90c 	bl	800f9f8 <__swbuf_r>
 800f7e0:	3001      	adds	r0, #1
 800f7e2:	d011      	beq.n	800f808 <_puts_r+0x84>
 800f7e4:	250a      	movs	r5, #10
 800f7e6:	e011      	b.n	800f80c <_puts_r+0x88>
 800f7e8:	4b1b      	ldr	r3, [pc, #108]	; (800f858 <_puts_r+0xd4>)
 800f7ea:	429c      	cmp	r4, r3
 800f7ec:	d101      	bne.n	800f7f2 <_puts_r+0x6e>
 800f7ee:	68ac      	ldr	r4, [r5, #8]
 800f7f0:	e7da      	b.n	800f7a8 <_puts_r+0x24>
 800f7f2:	4b1a      	ldr	r3, [pc, #104]	; (800f85c <_puts_r+0xd8>)
 800f7f4:	429c      	cmp	r4, r3
 800f7f6:	bf08      	it	eq
 800f7f8:	68ec      	ldreq	r4, [r5, #12]
 800f7fa:	e7d5      	b.n	800f7a8 <_puts_r+0x24>
 800f7fc:	4621      	mov	r1, r4
 800f7fe:	4628      	mov	r0, r5
 800f800:	f000 f94c 	bl	800fa9c <__swsetup_r>
 800f804:	2800      	cmp	r0, #0
 800f806:	d0dd      	beq.n	800f7c4 <_puts_r+0x40>
 800f808:	f04f 35ff 	mov.w	r5, #4294967295
 800f80c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f80e:	07da      	lsls	r2, r3, #31
 800f810:	d405      	bmi.n	800f81e <_puts_r+0x9a>
 800f812:	89a3      	ldrh	r3, [r4, #12]
 800f814:	059b      	lsls	r3, r3, #22
 800f816:	d402      	bmi.n	800f81e <_puts_r+0x9a>
 800f818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f81a:	f000 fb66 	bl	800feea <__retarget_lock_release_recursive>
 800f81e:	4628      	mov	r0, r5
 800f820:	bd70      	pop	{r4, r5, r6, pc}
 800f822:	2b00      	cmp	r3, #0
 800f824:	da04      	bge.n	800f830 <_puts_r+0xac>
 800f826:	69a2      	ldr	r2, [r4, #24]
 800f828:	429a      	cmp	r2, r3
 800f82a:	dc06      	bgt.n	800f83a <_puts_r+0xb6>
 800f82c:	290a      	cmp	r1, #10
 800f82e:	d004      	beq.n	800f83a <_puts_r+0xb6>
 800f830:	6823      	ldr	r3, [r4, #0]
 800f832:	1c5a      	adds	r2, r3, #1
 800f834:	6022      	str	r2, [r4, #0]
 800f836:	7019      	strb	r1, [r3, #0]
 800f838:	e7c5      	b.n	800f7c6 <_puts_r+0x42>
 800f83a:	4622      	mov	r2, r4
 800f83c:	4628      	mov	r0, r5
 800f83e:	f000 f8db 	bl	800f9f8 <__swbuf_r>
 800f842:	3001      	adds	r0, #1
 800f844:	d1bf      	bne.n	800f7c6 <_puts_r+0x42>
 800f846:	e7df      	b.n	800f808 <_puts_r+0x84>
 800f848:	6823      	ldr	r3, [r4, #0]
 800f84a:	250a      	movs	r5, #10
 800f84c:	1c5a      	adds	r2, r3, #1
 800f84e:	6022      	str	r2, [r4, #0]
 800f850:	701d      	strb	r5, [r3, #0]
 800f852:	e7db      	b.n	800f80c <_puts_r+0x88>
 800f854:	08024cf8 	.word	0x08024cf8
 800f858:	08024d18 	.word	0x08024d18
 800f85c:	08024cd8 	.word	0x08024cd8

0800f860 <puts>:
 800f860:	4b02      	ldr	r3, [pc, #8]	; (800f86c <puts+0xc>)
 800f862:	4601      	mov	r1, r0
 800f864:	6818      	ldr	r0, [r3, #0]
 800f866:	f7ff bf8d 	b.w	800f784 <_puts_r>
 800f86a:	bf00      	nop
 800f86c:	20000454 	.word	0x20000454

0800f870 <strchr>:
 800f870:	b2c9      	uxtb	r1, r1
 800f872:	4603      	mov	r3, r0
 800f874:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f878:	b11a      	cbz	r2, 800f882 <strchr+0x12>
 800f87a:	428a      	cmp	r2, r1
 800f87c:	d1f9      	bne.n	800f872 <strchr+0x2>
 800f87e:	4618      	mov	r0, r3
 800f880:	4770      	bx	lr
 800f882:	2900      	cmp	r1, #0
 800f884:	bf18      	it	ne
 800f886:	2300      	movne	r3, #0
 800f888:	e7f9      	b.n	800f87e <strchr+0xe>

0800f88a <strncmp>:
 800f88a:	b510      	push	{r4, lr}
 800f88c:	b17a      	cbz	r2, 800f8ae <strncmp+0x24>
 800f88e:	4603      	mov	r3, r0
 800f890:	3901      	subs	r1, #1
 800f892:	1884      	adds	r4, r0, r2
 800f894:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f898:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f89c:	4290      	cmp	r0, r2
 800f89e:	d101      	bne.n	800f8a4 <strncmp+0x1a>
 800f8a0:	42a3      	cmp	r3, r4
 800f8a2:	d101      	bne.n	800f8a8 <strncmp+0x1e>
 800f8a4:	1a80      	subs	r0, r0, r2
 800f8a6:	bd10      	pop	{r4, pc}
 800f8a8:	2800      	cmp	r0, #0
 800f8aa:	d1f3      	bne.n	800f894 <strncmp+0xa>
 800f8ac:	e7fa      	b.n	800f8a4 <strncmp+0x1a>
 800f8ae:	4610      	mov	r0, r2
 800f8b0:	e7f9      	b.n	800f8a6 <strncmp+0x1c>

0800f8b2 <strstr>:
 800f8b2:	780a      	ldrb	r2, [r1, #0]
 800f8b4:	b570      	push	{r4, r5, r6, lr}
 800f8b6:	b96a      	cbnz	r2, 800f8d4 <strstr+0x22>
 800f8b8:	bd70      	pop	{r4, r5, r6, pc}
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	d109      	bne.n	800f8d2 <strstr+0x20>
 800f8be:	460c      	mov	r4, r1
 800f8c0:	4605      	mov	r5, r0
 800f8c2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d0f6      	beq.n	800f8b8 <strstr+0x6>
 800f8ca:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f8ce:	429e      	cmp	r6, r3
 800f8d0:	d0f7      	beq.n	800f8c2 <strstr+0x10>
 800f8d2:	3001      	adds	r0, #1
 800f8d4:	7803      	ldrb	r3, [r0, #0]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d1ef      	bne.n	800f8ba <strstr+0x8>
 800f8da:	4618      	mov	r0, r3
 800f8dc:	e7ec      	b.n	800f8b8 <strstr+0x6>
	...

0800f8e0 <_strtol_l.constprop.0>:
 800f8e0:	2b01      	cmp	r3, #1
 800f8e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8e6:	d001      	beq.n	800f8ec <_strtol_l.constprop.0+0xc>
 800f8e8:	2b24      	cmp	r3, #36	; 0x24
 800f8ea:	d906      	bls.n	800f8fa <_strtol_l.constprop.0+0x1a>
 800f8ec:	f7ff fedc 	bl	800f6a8 <__errno>
 800f8f0:	2316      	movs	r3, #22
 800f8f2:	6003      	str	r3, [r0, #0]
 800f8f4:	2000      	movs	r0, #0
 800f8f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f9e0 <_strtol_l.constprop.0+0x100>
 800f8fe:	460d      	mov	r5, r1
 800f900:	462e      	mov	r6, r5
 800f902:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f906:	f814 700c 	ldrb.w	r7, [r4, ip]
 800f90a:	f017 0708 	ands.w	r7, r7, #8
 800f90e:	d1f7      	bne.n	800f900 <_strtol_l.constprop.0+0x20>
 800f910:	2c2d      	cmp	r4, #45	; 0x2d
 800f912:	d132      	bne.n	800f97a <_strtol_l.constprop.0+0x9a>
 800f914:	782c      	ldrb	r4, [r5, #0]
 800f916:	2701      	movs	r7, #1
 800f918:	1cb5      	adds	r5, r6, #2
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d05b      	beq.n	800f9d6 <_strtol_l.constprop.0+0xf6>
 800f91e:	2b10      	cmp	r3, #16
 800f920:	d109      	bne.n	800f936 <_strtol_l.constprop.0+0x56>
 800f922:	2c30      	cmp	r4, #48	; 0x30
 800f924:	d107      	bne.n	800f936 <_strtol_l.constprop.0+0x56>
 800f926:	782c      	ldrb	r4, [r5, #0]
 800f928:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f92c:	2c58      	cmp	r4, #88	; 0x58
 800f92e:	d14d      	bne.n	800f9cc <_strtol_l.constprop.0+0xec>
 800f930:	786c      	ldrb	r4, [r5, #1]
 800f932:	2310      	movs	r3, #16
 800f934:	3502      	adds	r5, #2
 800f936:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f93a:	f108 38ff 	add.w	r8, r8, #4294967295
 800f93e:	f04f 0c00 	mov.w	ip, #0
 800f942:	fbb8 f9f3 	udiv	r9, r8, r3
 800f946:	4666      	mov	r6, ip
 800f948:	fb03 8a19 	mls	sl, r3, r9, r8
 800f94c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800f950:	f1be 0f09 	cmp.w	lr, #9
 800f954:	d816      	bhi.n	800f984 <_strtol_l.constprop.0+0xa4>
 800f956:	4674      	mov	r4, lr
 800f958:	42a3      	cmp	r3, r4
 800f95a:	dd24      	ble.n	800f9a6 <_strtol_l.constprop.0+0xc6>
 800f95c:	f1bc 0f00 	cmp.w	ip, #0
 800f960:	db1e      	blt.n	800f9a0 <_strtol_l.constprop.0+0xc0>
 800f962:	45b1      	cmp	r9, r6
 800f964:	d31c      	bcc.n	800f9a0 <_strtol_l.constprop.0+0xc0>
 800f966:	d101      	bne.n	800f96c <_strtol_l.constprop.0+0x8c>
 800f968:	45a2      	cmp	sl, r4
 800f96a:	db19      	blt.n	800f9a0 <_strtol_l.constprop.0+0xc0>
 800f96c:	fb06 4603 	mla	r6, r6, r3, r4
 800f970:	f04f 0c01 	mov.w	ip, #1
 800f974:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f978:	e7e8      	b.n	800f94c <_strtol_l.constprop.0+0x6c>
 800f97a:	2c2b      	cmp	r4, #43	; 0x2b
 800f97c:	bf04      	itt	eq
 800f97e:	782c      	ldrbeq	r4, [r5, #0]
 800f980:	1cb5      	addeq	r5, r6, #2
 800f982:	e7ca      	b.n	800f91a <_strtol_l.constprop.0+0x3a>
 800f984:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800f988:	f1be 0f19 	cmp.w	lr, #25
 800f98c:	d801      	bhi.n	800f992 <_strtol_l.constprop.0+0xb2>
 800f98e:	3c37      	subs	r4, #55	; 0x37
 800f990:	e7e2      	b.n	800f958 <_strtol_l.constprop.0+0x78>
 800f992:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800f996:	f1be 0f19 	cmp.w	lr, #25
 800f99a:	d804      	bhi.n	800f9a6 <_strtol_l.constprop.0+0xc6>
 800f99c:	3c57      	subs	r4, #87	; 0x57
 800f99e:	e7db      	b.n	800f958 <_strtol_l.constprop.0+0x78>
 800f9a0:	f04f 3cff 	mov.w	ip, #4294967295
 800f9a4:	e7e6      	b.n	800f974 <_strtol_l.constprop.0+0x94>
 800f9a6:	f1bc 0f00 	cmp.w	ip, #0
 800f9aa:	da05      	bge.n	800f9b8 <_strtol_l.constprop.0+0xd8>
 800f9ac:	2322      	movs	r3, #34	; 0x22
 800f9ae:	6003      	str	r3, [r0, #0]
 800f9b0:	4646      	mov	r6, r8
 800f9b2:	b942      	cbnz	r2, 800f9c6 <_strtol_l.constprop.0+0xe6>
 800f9b4:	4630      	mov	r0, r6
 800f9b6:	e79e      	b.n	800f8f6 <_strtol_l.constprop.0+0x16>
 800f9b8:	b107      	cbz	r7, 800f9bc <_strtol_l.constprop.0+0xdc>
 800f9ba:	4276      	negs	r6, r6
 800f9bc:	2a00      	cmp	r2, #0
 800f9be:	d0f9      	beq.n	800f9b4 <_strtol_l.constprop.0+0xd4>
 800f9c0:	f1bc 0f00 	cmp.w	ip, #0
 800f9c4:	d000      	beq.n	800f9c8 <_strtol_l.constprop.0+0xe8>
 800f9c6:	1e69      	subs	r1, r5, #1
 800f9c8:	6011      	str	r1, [r2, #0]
 800f9ca:	e7f3      	b.n	800f9b4 <_strtol_l.constprop.0+0xd4>
 800f9cc:	2430      	movs	r4, #48	; 0x30
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d1b1      	bne.n	800f936 <_strtol_l.constprop.0+0x56>
 800f9d2:	2308      	movs	r3, #8
 800f9d4:	e7af      	b.n	800f936 <_strtol_l.constprop.0+0x56>
 800f9d6:	2c30      	cmp	r4, #48	; 0x30
 800f9d8:	d0a5      	beq.n	800f926 <_strtol_l.constprop.0+0x46>
 800f9da:	230a      	movs	r3, #10
 800f9dc:	e7ab      	b.n	800f936 <_strtol_l.constprop.0+0x56>
 800f9de:	bf00      	nop
 800f9e0:	08024bd5 	.word	0x08024bd5

0800f9e4 <strtol>:
 800f9e4:	4613      	mov	r3, r2
 800f9e6:	460a      	mov	r2, r1
 800f9e8:	4601      	mov	r1, r0
 800f9ea:	4802      	ldr	r0, [pc, #8]	; (800f9f4 <strtol+0x10>)
 800f9ec:	6800      	ldr	r0, [r0, #0]
 800f9ee:	f7ff bf77 	b.w	800f8e0 <_strtol_l.constprop.0>
 800f9f2:	bf00      	nop
 800f9f4:	20000454 	.word	0x20000454

0800f9f8 <__swbuf_r>:
 800f9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9fa:	460e      	mov	r6, r1
 800f9fc:	4614      	mov	r4, r2
 800f9fe:	4605      	mov	r5, r0
 800fa00:	b118      	cbz	r0, 800fa0a <__swbuf_r+0x12>
 800fa02:	6983      	ldr	r3, [r0, #24]
 800fa04:	b90b      	cbnz	r3, 800fa0a <__swbuf_r+0x12>
 800fa06:	f000 f9d1 	bl	800fdac <__sinit>
 800fa0a:	4b21      	ldr	r3, [pc, #132]	; (800fa90 <__swbuf_r+0x98>)
 800fa0c:	429c      	cmp	r4, r3
 800fa0e:	d12b      	bne.n	800fa68 <__swbuf_r+0x70>
 800fa10:	686c      	ldr	r4, [r5, #4]
 800fa12:	69a3      	ldr	r3, [r4, #24]
 800fa14:	60a3      	str	r3, [r4, #8]
 800fa16:	89a3      	ldrh	r3, [r4, #12]
 800fa18:	071a      	lsls	r2, r3, #28
 800fa1a:	d52f      	bpl.n	800fa7c <__swbuf_r+0x84>
 800fa1c:	6923      	ldr	r3, [r4, #16]
 800fa1e:	b36b      	cbz	r3, 800fa7c <__swbuf_r+0x84>
 800fa20:	6923      	ldr	r3, [r4, #16]
 800fa22:	6820      	ldr	r0, [r4, #0]
 800fa24:	1ac0      	subs	r0, r0, r3
 800fa26:	6963      	ldr	r3, [r4, #20]
 800fa28:	b2f6      	uxtb	r6, r6
 800fa2a:	4283      	cmp	r3, r0
 800fa2c:	4637      	mov	r7, r6
 800fa2e:	dc04      	bgt.n	800fa3a <__swbuf_r+0x42>
 800fa30:	4621      	mov	r1, r4
 800fa32:	4628      	mov	r0, r5
 800fa34:	f000 f926 	bl	800fc84 <_fflush_r>
 800fa38:	bb30      	cbnz	r0, 800fa88 <__swbuf_r+0x90>
 800fa3a:	68a3      	ldr	r3, [r4, #8]
 800fa3c:	3b01      	subs	r3, #1
 800fa3e:	60a3      	str	r3, [r4, #8]
 800fa40:	6823      	ldr	r3, [r4, #0]
 800fa42:	1c5a      	adds	r2, r3, #1
 800fa44:	6022      	str	r2, [r4, #0]
 800fa46:	701e      	strb	r6, [r3, #0]
 800fa48:	6963      	ldr	r3, [r4, #20]
 800fa4a:	3001      	adds	r0, #1
 800fa4c:	4283      	cmp	r3, r0
 800fa4e:	d004      	beq.n	800fa5a <__swbuf_r+0x62>
 800fa50:	89a3      	ldrh	r3, [r4, #12]
 800fa52:	07db      	lsls	r3, r3, #31
 800fa54:	d506      	bpl.n	800fa64 <__swbuf_r+0x6c>
 800fa56:	2e0a      	cmp	r6, #10
 800fa58:	d104      	bne.n	800fa64 <__swbuf_r+0x6c>
 800fa5a:	4621      	mov	r1, r4
 800fa5c:	4628      	mov	r0, r5
 800fa5e:	f000 f911 	bl	800fc84 <_fflush_r>
 800fa62:	b988      	cbnz	r0, 800fa88 <__swbuf_r+0x90>
 800fa64:	4638      	mov	r0, r7
 800fa66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa68:	4b0a      	ldr	r3, [pc, #40]	; (800fa94 <__swbuf_r+0x9c>)
 800fa6a:	429c      	cmp	r4, r3
 800fa6c:	d101      	bne.n	800fa72 <__swbuf_r+0x7a>
 800fa6e:	68ac      	ldr	r4, [r5, #8]
 800fa70:	e7cf      	b.n	800fa12 <__swbuf_r+0x1a>
 800fa72:	4b09      	ldr	r3, [pc, #36]	; (800fa98 <__swbuf_r+0xa0>)
 800fa74:	429c      	cmp	r4, r3
 800fa76:	bf08      	it	eq
 800fa78:	68ec      	ldreq	r4, [r5, #12]
 800fa7a:	e7ca      	b.n	800fa12 <__swbuf_r+0x1a>
 800fa7c:	4621      	mov	r1, r4
 800fa7e:	4628      	mov	r0, r5
 800fa80:	f000 f80c 	bl	800fa9c <__swsetup_r>
 800fa84:	2800      	cmp	r0, #0
 800fa86:	d0cb      	beq.n	800fa20 <__swbuf_r+0x28>
 800fa88:	f04f 37ff 	mov.w	r7, #4294967295
 800fa8c:	e7ea      	b.n	800fa64 <__swbuf_r+0x6c>
 800fa8e:	bf00      	nop
 800fa90:	08024cf8 	.word	0x08024cf8
 800fa94:	08024d18 	.word	0x08024d18
 800fa98:	08024cd8 	.word	0x08024cd8

0800fa9c <__swsetup_r>:
 800fa9c:	4b32      	ldr	r3, [pc, #200]	; (800fb68 <__swsetup_r+0xcc>)
 800fa9e:	b570      	push	{r4, r5, r6, lr}
 800faa0:	681d      	ldr	r5, [r3, #0]
 800faa2:	4606      	mov	r6, r0
 800faa4:	460c      	mov	r4, r1
 800faa6:	b125      	cbz	r5, 800fab2 <__swsetup_r+0x16>
 800faa8:	69ab      	ldr	r3, [r5, #24]
 800faaa:	b913      	cbnz	r3, 800fab2 <__swsetup_r+0x16>
 800faac:	4628      	mov	r0, r5
 800faae:	f000 f97d 	bl	800fdac <__sinit>
 800fab2:	4b2e      	ldr	r3, [pc, #184]	; (800fb6c <__swsetup_r+0xd0>)
 800fab4:	429c      	cmp	r4, r3
 800fab6:	d10f      	bne.n	800fad8 <__swsetup_r+0x3c>
 800fab8:	686c      	ldr	r4, [r5, #4]
 800faba:	89a3      	ldrh	r3, [r4, #12]
 800fabc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fac0:	0719      	lsls	r1, r3, #28
 800fac2:	d42c      	bmi.n	800fb1e <__swsetup_r+0x82>
 800fac4:	06dd      	lsls	r5, r3, #27
 800fac6:	d411      	bmi.n	800faec <__swsetup_r+0x50>
 800fac8:	2309      	movs	r3, #9
 800faca:	6033      	str	r3, [r6, #0]
 800facc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fad0:	81a3      	strh	r3, [r4, #12]
 800fad2:	f04f 30ff 	mov.w	r0, #4294967295
 800fad6:	e03e      	b.n	800fb56 <__swsetup_r+0xba>
 800fad8:	4b25      	ldr	r3, [pc, #148]	; (800fb70 <__swsetup_r+0xd4>)
 800fada:	429c      	cmp	r4, r3
 800fadc:	d101      	bne.n	800fae2 <__swsetup_r+0x46>
 800fade:	68ac      	ldr	r4, [r5, #8]
 800fae0:	e7eb      	b.n	800faba <__swsetup_r+0x1e>
 800fae2:	4b24      	ldr	r3, [pc, #144]	; (800fb74 <__swsetup_r+0xd8>)
 800fae4:	429c      	cmp	r4, r3
 800fae6:	bf08      	it	eq
 800fae8:	68ec      	ldreq	r4, [r5, #12]
 800faea:	e7e6      	b.n	800faba <__swsetup_r+0x1e>
 800faec:	0758      	lsls	r0, r3, #29
 800faee:	d512      	bpl.n	800fb16 <__swsetup_r+0x7a>
 800faf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800faf2:	b141      	cbz	r1, 800fb06 <__swsetup_r+0x6a>
 800faf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800faf8:	4299      	cmp	r1, r3
 800fafa:	d002      	beq.n	800fb02 <__swsetup_r+0x66>
 800fafc:	4630      	mov	r0, r6
 800fafe:	f000 fa5b 	bl	800ffb8 <_free_r>
 800fb02:	2300      	movs	r3, #0
 800fb04:	6363      	str	r3, [r4, #52]	; 0x34
 800fb06:	89a3      	ldrh	r3, [r4, #12]
 800fb08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fb0c:	81a3      	strh	r3, [r4, #12]
 800fb0e:	2300      	movs	r3, #0
 800fb10:	6063      	str	r3, [r4, #4]
 800fb12:	6923      	ldr	r3, [r4, #16]
 800fb14:	6023      	str	r3, [r4, #0]
 800fb16:	89a3      	ldrh	r3, [r4, #12]
 800fb18:	f043 0308 	orr.w	r3, r3, #8
 800fb1c:	81a3      	strh	r3, [r4, #12]
 800fb1e:	6923      	ldr	r3, [r4, #16]
 800fb20:	b94b      	cbnz	r3, 800fb36 <__swsetup_r+0x9a>
 800fb22:	89a3      	ldrh	r3, [r4, #12]
 800fb24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fb28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb2c:	d003      	beq.n	800fb36 <__swsetup_r+0x9a>
 800fb2e:	4621      	mov	r1, r4
 800fb30:	4630      	mov	r0, r6
 800fb32:	f000 fa01 	bl	800ff38 <__smakebuf_r>
 800fb36:	89a0      	ldrh	r0, [r4, #12]
 800fb38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fb3c:	f010 0301 	ands.w	r3, r0, #1
 800fb40:	d00a      	beq.n	800fb58 <__swsetup_r+0xbc>
 800fb42:	2300      	movs	r3, #0
 800fb44:	60a3      	str	r3, [r4, #8]
 800fb46:	6963      	ldr	r3, [r4, #20]
 800fb48:	425b      	negs	r3, r3
 800fb4a:	61a3      	str	r3, [r4, #24]
 800fb4c:	6923      	ldr	r3, [r4, #16]
 800fb4e:	b943      	cbnz	r3, 800fb62 <__swsetup_r+0xc6>
 800fb50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fb54:	d1ba      	bne.n	800facc <__swsetup_r+0x30>
 800fb56:	bd70      	pop	{r4, r5, r6, pc}
 800fb58:	0781      	lsls	r1, r0, #30
 800fb5a:	bf58      	it	pl
 800fb5c:	6963      	ldrpl	r3, [r4, #20]
 800fb5e:	60a3      	str	r3, [r4, #8]
 800fb60:	e7f4      	b.n	800fb4c <__swsetup_r+0xb0>
 800fb62:	2000      	movs	r0, #0
 800fb64:	e7f7      	b.n	800fb56 <__swsetup_r+0xba>
 800fb66:	bf00      	nop
 800fb68:	20000454 	.word	0x20000454
 800fb6c:	08024cf8 	.word	0x08024cf8
 800fb70:	08024d18 	.word	0x08024d18
 800fb74:	08024cd8 	.word	0x08024cd8

0800fb78 <__sflush_r>:
 800fb78:	898a      	ldrh	r2, [r1, #12]
 800fb7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb7e:	4605      	mov	r5, r0
 800fb80:	0710      	lsls	r0, r2, #28
 800fb82:	460c      	mov	r4, r1
 800fb84:	d458      	bmi.n	800fc38 <__sflush_r+0xc0>
 800fb86:	684b      	ldr	r3, [r1, #4]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	dc05      	bgt.n	800fb98 <__sflush_r+0x20>
 800fb8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	dc02      	bgt.n	800fb98 <__sflush_r+0x20>
 800fb92:	2000      	movs	r0, #0
 800fb94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb9a:	2e00      	cmp	r6, #0
 800fb9c:	d0f9      	beq.n	800fb92 <__sflush_r+0x1a>
 800fb9e:	2300      	movs	r3, #0
 800fba0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fba4:	682f      	ldr	r7, [r5, #0]
 800fba6:	602b      	str	r3, [r5, #0]
 800fba8:	d032      	beq.n	800fc10 <__sflush_r+0x98>
 800fbaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fbac:	89a3      	ldrh	r3, [r4, #12]
 800fbae:	075a      	lsls	r2, r3, #29
 800fbb0:	d505      	bpl.n	800fbbe <__sflush_r+0x46>
 800fbb2:	6863      	ldr	r3, [r4, #4]
 800fbb4:	1ac0      	subs	r0, r0, r3
 800fbb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fbb8:	b10b      	cbz	r3, 800fbbe <__sflush_r+0x46>
 800fbba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fbbc:	1ac0      	subs	r0, r0, r3
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	4602      	mov	r2, r0
 800fbc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fbc4:	6a21      	ldr	r1, [r4, #32]
 800fbc6:	4628      	mov	r0, r5
 800fbc8:	47b0      	blx	r6
 800fbca:	1c43      	adds	r3, r0, #1
 800fbcc:	89a3      	ldrh	r3, [r4, #12]
 800fbce:	d106      	bne.n	800fbde <__sflush_r+0x66>
 800fbd0:	6829      	ldr	r1, [r5, #0]
 800fbd2:	291d      	cmp	r1, #29
 800fbd4:	d82c      	bhi.n	800fc30 <__sflush_r+0xb8>
 800fbd6:	4a2a      	ldr	r2, [pc, #168]	; (800fc80 <__sflush_r+0x108>)
 800fbd8:	40ca      	lsrs	r2, r1
 800fbda:	07d6      	lsls	r6, r2, #31
 800fbdc:	d528      	bpl.n	800fc30 <__sflush_r+0xb8>
 800fbde:	2200      	movs	r2, #0
 800fbe0:	6062      	str	r2, [r4, #4]
 800fbe2:	04d9      	lsls	r1, r3, #19
 800fbe4:	6922      	ldr	r2, [r4, #16]
 800fbe6:	6022      	str	r2, [r4, #0]
 800fbe8:	d504      	bpl.n	800fbf4 <__sflush_r+0x7c>
 800fbea:	1c42      	adds	r2, r0, #1
 800fbec:	d101      	bne.n	800fbf2 <__sflush_r+0x7a>
 800fbee:	682b      	ldr	r3, [r5, #0]
 800fbf0:	b903      	cbnz	r3, 800fbf4 <__sflush_r+0x7c>
 800fbf2:	6560      	str	r0, [r4, #84]	; 0x54
 800fbf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fbf6:	602f      	str	r7, [r5, #0]
 800fbf8:	2900      	cmp	r1, #0
 800fbfa:	d0ca      	beq.n	800fb92 <__sflush_r+0x1a>
 800fbfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc00:	4299      	cmp	r1, r3
 800fc02:	d002      	beq.n	800fc0a <__sflush_r+0x92>
 800fc04:	4628      	mov	r0, r5
 800fc06:	f000 f9d7 	bl	800ffb8 <_free_r>
 800fc0a:	2000      	movs	r0, #0
 800fc0c:	6360      	str	r0, [r4, #52]	; 0x34
 800fc0e:	e7c1      	b.n	800fb94 <__sflush_r+0x1c>
 800fc10:	6a21      	ldr	r1, [r4, #32]
 800fc12:	2301      	movs	r3, #1
 800fc14:	4628      	mov	r0, r5
 800fc16:	47b0      	blx	r6
 800fc18:	1c41      	adds	r1, r0, #1
 800fc1a:	d1c7      	bne.n	800fbac <__sflush_r+0x34>
 800fc1c:	682b      	ldr	r3, [r5, #0]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d0c4      	beq.n	800fbac <__sflush_r+0x34>
 800fc22:	2b1d      	cmp	r3, #29
 800fc24:	d001      	beq.n	800fc2a <__sflush_r+0xb2>
 800fc26:	2b16      	cmp	r3, #22
 800fc28:	d101      	bne.n	800fc2e <__sflush_r+0xb6>
 800fc2a:	602f      	str	r7, [r5, #0]
 800fc2c:	e7b1      	b.n	800fb92 <__sflush_r+0x1a>
 800fc2e:	89a3      	ldrh	r3, [r4, #12]
 800fc30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc34:	81a3      	strh	r3, [r4, #12]
 800fc36:	e7ad      	b.n	800fb94 <__sflush_r+0x1c>
 800fc38:	690f      	ldr	r7, [r1, #16]
 800fc3a:	2f00      	cmp	r7, #0
 800fc3c:	d0a9      	beq.n	800fb92 <__sflush_r+0x1a>
 800fc3e:	0793      	lsls	r3, r2, #30
 800fc40:	680e      	ldr	r6, [r1, #0]
 800fc42:	bf08      	it	eq
 800fc44:	694b      	ldreq	r3, [r1, #20]
 800fc46:	600f      	str	r7, [r1, #0]
 800fc48:	bf18      	it	ne
 800fc4a:	2300      	movne	r3, #0
 800fc4c:	eba6 0807 	sub.w	r8, r6, r7
 800fc50:	608b      	str	r3, [r1, #8]
 800fc52:	f1b8 0f00 	cmp.w	r8, #0
 800fc56:	dd9c      	ble.n	800fb92 <__sflush_r+0x1a>
 800fc58:	6a21      	ldr	r1, [r4, #32]
 800fc5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fc5c:	4643      	mov	r3, r8
 800fc5e:	463a      	mov	r2, r7
 800fc60:	4628      	mov	r0, r5
 800fc62:	47b0      	blx	r6
 800fc64:	2800      	cmp	r0, #0
 800fc66:	dc06      	bgt.n	800fc76 <__sflush_r+0xfe>
 800fc68:	89a3      	ldrh	r3, [r4, #12]
 800fc6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc6e:	81a3      	strh	r3, [r4, #12]
 800fc70:	f04f 30ff 	mov.w	r0, #4294967295
 800fc74:	e78e      	b.n	800fb94 <__sflush_r+0x1c>
 800fc76:	4407      	add	r7, r0
 800fc78:	eba8 0800 	sub.w	r8, r8, r0
 800fc7c:	e7e9      	b.n	800fc52 <__sflush_r+0xda>
 800fc7e:	bf00      	nop
 800fc80:	20400001 	.word	0x20400001

0800fc84 <_fflush_r>:
 800fc84:	b538      	push	{r3, r4, r5, lr}
 800fc86:	690b      	ldr	r3, [r1, #16]
 800fc88:	4605      	mov	r5, r0
 800fc8a:	460c      	mov	r4, r1
 800fc8c:	b913      	cbnz	r3, 800fc94 <_fflush_r+0x10>
 800fc8e:	2500      	movs	r5, #0
 800fc90:	4628      	mov	r0, r5
 800fc92:	bd38      	pop	{r3, r4, r5, pc}
 800fc94:	b118      	cbz	r0, 800fc9e <_fflush_r+0x1a>
 800fc96:	6983      	ldr	r3, [r0, #24]
 800fc98:	b90b      	cbnz	r3, 800fc9e <_fflush_r+0x1a>
 800fc9a:	f000 f887 	bl	800fdac <__sinit>
 800fc9e:	4b14      	ldr	r3, [pc, #80]	; (800fcf0 <_fflush_r+0x6c>)
 800fca0:	429c      	cmp	r4, r3
 800fca2:	d11b      	bne.n	800fcdc <_fflush_r+0x58>
 800fca4:	686c      	ldr	r4, [r5, #4]
 800fca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d0ef      	beq.n	800fc8e <_fflush_r+0xa>
 800fcae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fcb0:	07d0      	lsls	r0, r2, #31
 800fcb2:	d404      	bmi.n	800fcbe <_fflush_r+0x3a>
 800fcb4:	0599      	lsls	r1, r3, #22
 800fcb6:	d402      	bmi.n	800fcbe <_fflush_r+0x3a>
 800fcb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcba:	f000 f915 	bl	800fee8 <__retarget_lock_acquire_recursive>
 800fcbe:	4628      	mov	r0, r5
 800fcc0:	4621      	mov	r1, r4
 800fcc2:	f7ff ff59 	bl	800fb78 <__sflush_r>
 800fcc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fcc8:	07da      	lsls	r2, r3, #31
 800fcca:	4605      	mov	r5, r0
 800fccc:	d4e0      	bmi.n	800fc90 <_fflush_r+0xc>
 800fcce:	89a3      	ldrh	r3, [r4, #12]
 800fcd0:	059b      	lsls	r3, r3, #22
 800fcd2:	d4dd      	bmi.n	800fc90 <_fflush_r+0xc>
 800fcd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcd6:	f000 f908 	bl	800feea <__retarget_lock_release_recursive>
 800fcda:	e7d9      	b.n	800fc90 <_fflush_r+0xc>
 800fcdc:	4b05      	ldr	r3, [pc, #20]	; (800fcf4 <_fflush_r+0x70>)
 800fcde:	429c      	cmp	r4, r3
 800fce0:	d101      	bne.n	800fce6 <_fflush_r+0x62>
 800fce2:	68ac      	ldr	r4, [r5, #8]
 800fce4:	e7df      	b.n	800fca6 <_fflush_r+0x22>
 800fce6:	4b04      	ldr	r3, [pc, #16]	; (800fcf8 <_fflush_r+0x74>)
 800fce8:	429c      	cmp	r4, r3
 800fcea:	bf08      	it	eq
 800fcec:	68ec      	ldreq	r4, [r5, #12]
 800fcee:	e7da      	b.n	800fca6 <_fflush_r+0x22>
 800fcf0:	08024cf8 	.word	0x08024cf8
 800fcf4:	08024d18 	.word	0x08024d18
 800fcf8:	08024cd8 	.word	0x08024cd8

0800fcfc <std>:
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	b510      	push	{r4, lr}
 800fd00:	4604      	mov	r4, r0
 800fd02:	e9c0 3300 	strd	r3, r3, [r0]
 800fd06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fd0a:	6083      	str	r3, [r0, #8]
 800fd0c:	8181      	strh	r1, [r0, #12]
 800fd0e:	6643      	str	r3, [r0, #100]	; 0x64
 800fd10:	81c2      	strh	r2, [r0, #14]
 800fd12:	6183      	str	r3, [r0, #24]
 800fd14:	4619      	mov	r1, r3
 800fd16:	2208      	movs	r2, #8
 800fd18:	305c      	adds	r0, #92	; 0x5c
 800fd1a:	f7ff fcfd 	bl	800f718 <memset>
 800fd1e:	4b05      	ldr	r3, [pc, #20]	; (800fd34 <std+0x38>)
 800fd20:	6263      	str	r3, [r4, #36]	; 0x24
 800fd22:	4b05      	ldr	r3, [pc, #20]	; (800fd38 <std+0x3c>)
 800fd24:	62a3      	str	r3, [r4, #40]	; 0x28
 800fd26:	4b05      	ldr	r3, [pc, #20]	; (800fd3c <std+0x40>)
 800fd28:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fd2a:	4b05      	ldr	r3, [pc, #20]	; (800fd40 <std+0x44>)
 800fd2c:	6224      	str	r4, [r4, #32]
 800fd2e:	6323      	str	r3, [r4, #48]	; 0x30
 800fd30:	bd10      	pop	{r4, pc}
 800fd32:	bf00      	nop
 800fd34:	08010805 	.word	0x08010805
 800fd38:	08010827 	.word	0x08010827
 800fd3c:	0801085f 	.word	0x0801085f
 800fd40:	08010883 	.word	0x08010883

0800fd44 <_cleanup_r>:
 800fd44:	4901      	ldr	r1, [pc, #4]	; (800fd4c <_cleanup_r+0x8>)
 800fd46:	f000 b8af 	b.w	800fea8 <_fwalk_reent>
 800fd4a:	bf00      	nop
 800fd4c:	0800fc85 	.word	0x0800fc85

0800fd50 <__sfmoreglue>:
 800fd50:	b570      	push	{r4, r5, r6, lr}
 800fd52:	2268      	movs	r2, #104	; 0x68
 800fd54:	1e4d      	subs	r5, r1, #1
 800fd56:	4355      	muls	r5, r2
 800fd58:	460e      	mov	r6, r1
 800fd5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fd5e:	f000 f997 	bl	8010090 <_malloc_r>
 800fd62:	4604      	mov	r4, r0
 800fd64:	b140      	cbz	r0, 800fd78 <__sfmoreglue+0x28>
 800fd66:	2100      	movs	r1, #0
 800fd68:	e9c0 1600 	strd	r1, r6, [r0]
 800fd6c:	300c      	adds	r0, #12
 800fd6e:	60a0      	str	r0, [r4, #8]
 800fd70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fd74:	f7ff fcd0 	bl	800f718 <memset>
 800fd78:	4620      	mov	r0, r4
 800fd7a:	bd70      	pop	{r4, r5, r6, pc}

0800fd7c <__sfp_lock_acquire>:
 800fd7c:	4801      	ldr	r0, [pc, #4]	; (800fd84 <__sfp_lock_acquire+0x8>)
 800fd7e:	f000 b8b3 	b.w	800fee8 <__retarget_lock_acquire_recursive>
 800fd82:	bf00      	nop
 800fd84:	20007073 	.word	0x20007073

0800fd88 <__sfp_lock_release>:
 800fd88:	4801      	ldr	r0, [pc, #4]	; (800fd90 <__sfp_lock_release+0x8>)
 800fd8a:	f000 b8ae 	b.w	800feea <__retarget_lock_release_recursive>
 800fd8e:	bf00      	nop
 800fd90:	20007073 	.word	0x20007073

0800fd94 <__sinit_lock_acquire>:
 800fd94:	4801      	ldr	r0, [pc, #4]	; (800fd9c <__sinit_lock_acquire+0x8>)
 800fd96:	f000 b8a7 	b.w	800fee8 <__retarget_lock_acquire_recursive>
 800fd9a:	bf00      	nop
 800fd9c:	20007074 	.word	0x20007074

0800fda0 <__sinit_lock_release>:
 800fda0:	4801      	ldr	r0, [pc, #4]	; (800fda8 <__sinit_lock_release+0x8>)
 800fda2:	f000 b8a2 	b.w	800feea <__retarget_lock_release_recursive>
 800fda6:	bf00      	nop
 800fda8:	20007074 	.word	0x20007074

0800fdac <__sinit>:
 800fdac:	b510      	push	{r4, lr}
 800fdae:	4604      	mov	r4, r0
 800fdb0:	f7ff fff0 	bl	800fd94 <__sinit_lock_acquire>
 800fdb4:	69a3      	ldr	r3, [r4, #24]
 800fdb6:	b11b      	cbz	r3, 800fdc0 <__sinit+0x14>
 800fdb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdbc:	f7ff bff0 	b.w	800fda0 <__sinit_lock_release>
 800fdc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fdc4:	6523      	str	r3, [r4, #80]	; 0x50
 800fdc6:	4b13      	ldr	r3, [pc, #76]	; (800fe14 <__sinit+0x68>)
 800fdc8:	4a13      	ldr	r2, [pc, #76]	; (800fe18 <__sinit+0x6c>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	62a2      	str	r2, [r4, #40]	; 0x28
 800fdce:	42a3      	cmp	r3, r4
 800fdd0:	bf04      	itt	eq
 800fdd2:	2301      	moveq	r3, #1
 800fdd4:	61a3      	streq	r3, [r4, #24]
 800fdd6:	4620      	mov	r0, r4
 800fdd8:	f000 f820 	bl	800fe1c <__sfp>
 800fddc:	6060      	str	r0, [r4, #4]
 800fdde:	4620      	mov	r0, r4
 800fde0:	f000 f81c 	bl	800fe1c <__sfp>
 800fde4:	60a0      	str	r0, [r4, #8]
 800fde6:	4620      	mov	r0, r4
 800fde8:	f000 f818 	bl	800fe1c <__sfp>
 800fdec:	2200      	movs	r2, #0
 800fdee:	60e0      	str	r0, [r4, #12]
 800fdf0:	2104      	movs	r1, #4
 800fdf2:	6860      	ldr	r0, [r4, #4]
 800fdf4:	f7ff ff82 	bl	800fcfc <std>
 800fdf8:	68a0      	ldr	r0, [r4, #8]
 800fdfa:	2201      	movs	r2, #1
 800fdfc:	2109      	movs	r1, #9
 800fdfe:	f7ff ff7d 	bl	800fcfc <std>
 800fe02:	68e0      	ldr	r0, [r4, #12]
 800fe04:	2202      	movs	r2, #2
 800fe06:	2112      	movs	r1, #18
 800fe08:	f7ff ff78 	bl	800fcfc <std>
 800fe0c:	2301      	movs	r3, #1
 800fe0e:	61a3      	str	r3, [r4, #24]
 800fe10:	e7d2      	b.n	800fdb8 <__sinit+0xc>
 800fe12:	bf00      	nop
 800fe14:	08024bd0 	.word	0x08024bd0
 800fe18:	0800fd45 	.word	0x0800fd45

0800fe1c <__sfp>:
 800fe1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe1e:	4607      	mov	r7, r0
 800fe20:	f7ff ffac 	bl	800fd7c <__sfp_lock_acquire>
 800fe24:	4b1e      	ldr	r3, [pc, #120]	; (800fea0 <__sfp+0x84>)
 800fe26:	681e      	ldr	r6, [r3, #0]
 800fe28:	69b3      	ldr	r3, [r6, #24]
 800fe2a:	b913      	cbnz	r3, 800fe32 <__sfp+0x16>
 800fe2c:	4630      	mov	r0, r6
 800fe2e:	f7ff ffbd 	bl	800fdac <__sinit>
 800fe32:	3648      	adds	r6, #72	; 0x48
 800fe34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fe38:	3b01      	subs	r3, #1
 800fe3a:	d503      	bpl.n	800fe44 <__sfp+0x28>
 800fe3c:	6833      	ldr	r3, [r6, #0]
 800fe3e:	b30b      	cbz	r3, 800fe84 <__sfp+0x68>
 800fe40:	6836      	ldr	r6, [r6, #0]
 800fe42:	e7f7      	b.n	800fe34 <__sfp+0x18>
 800fe44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fe48:	b9d5      	cbnz	r5, 800fe80 <__sfp+0x64>
 800fe4a:	4b16      	ldr	r3, [pc, #88]	; (800fea4 <__sfp+0x88>)
 800fe4c:	60e3      	str	r3, [r4, #12]
 800fe4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fe52:	6665      	str	r5, [r4, #100]	; 0x64
 800fe54:	f000 f847 	bl	800fee6 <__retarget_lock_init_recursive>
 800fe58:	f7ff ff96 	bl	800fd88 <__sfp_lock_release>
 800fe5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fe60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fe64:	6025      	str	r5, [r4, #0]
 800fe66:	61a5      	str	r5, [r4, #24]
 800fe68:	2208      	movs	r2, #8
 800fe6a:	4629      	mov	r1, r5
 800fe6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fe70:	f7ff fc52 	bl	800f718 <memset>
 800fe74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fe78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fe7c:	4620      	mov	r0, r4
 800fe7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe80:	3468      	adds	r4, #104	; 0x68
 800fe82:	e7d9      	b.n	800fe38 <__sfp+0x1c>
 800fe84:	2104      	movs	r1, #4
 800fe86:	4638      	mov	r0, r7
 800fe88:	f7ff ff62 	bl	800fd50 <__sfmoreglue>
 800fe8c:	4604      	mov	r4, r0
 800fe8e:	6030      	str	r0, [r6, #0]
 800fe90:	2800      	cmp	r0, #0
 800fe92:	d1d5      	bne.n	800fe40 <__sfp+0x24>
 800fe94:	f7ff ff78 	bl	800fd88 <__sfp_lock_release>
 800fe98:	230c      	movs	r3, #12
 800fe9a:	603b      	str	r3, [r7, #0]
 800fe9c:	e7ee      	b.n	800fe7c <__sfp+0x60>
 800fe9e:	bf00      	nop
 800fea0:	08024bd0 	.word	0x08024bd0
 800fea4:	ffff0001 	.word	0xffff0001

0800fea8 <_fwalk_reent>:
 800fea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800feac:	4606      	mov	r6, r0
 800feae:	4688      	mov	r8, r1
 800feb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800feb4:	2700      	movs	r7, #0
 800feb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800feba:	f1b9 0901 	subs.w	r9, r9, #1
 800febe:	d505      	bpl.n	800fecc <_fwalk_reent+0x24>
 800fec0:	6824      	ldr	r4, [r4, #0]
 800fec2:	2c00      	cmp	r4, #0
 800fec4:	d1f7      	bne.n	800feb6 <_fwalk_reent+0xe>
 800fec6:	4638      	mov	r0, r7
 800fec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fecc:	89ab      	ldrh	r3, [r5, #12]
 800fece:	2b01      	cmp	r3, #1
 800fed0:	d907      	bls.n	800fee2 <_fwalk_reent+0x3a>
 800fed2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fed6:	3301      	adds	r3, #1
 800fed8:	d003      	beq.n	800fee2 <_fwalk_reent+0x3a>
 800feda:	4629      	mov	r1, r5
 800fedc:	4630      	mov	r0, r6
 800fede:	47c0      	blx	r8
 800fee0:	4307      	orrs	r7, r0
 800fee2:	3568      	adds	r5, #104	; 0x68
 800fee4:	e7e9      	b.n	800feba <_fwalk_reent+0x12>

0800fee6 <__retarget_lock_init_recursive>:
 800fee6:	4770      	bx	lr

0800fee8 <__retarget_lock_acquire_recursive>:
 800fee8:	4770      	bx	lr

0800feea <__retarget_lock_release_recursive>:
 800feea:	4770      	bx	lr

0800feec <__swhatbuf_r>:
 800feec:	b570      	push	{r4, r5, r6, lr}
 800feee:	460e      	mov	r6, r1
 800fef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fef4:	2900      	cmp	r1, #0
 800fef6:	b096      	sub	sp, #88	; 0x58
 800fef8:	4614      	mov	r4, r2
 800fefa:	461d      	mov	r5, r3
 800fefc:	da08      	bge.n	800ff10 <__swhatbuf_r+0x24>
 800fefe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ff02:	2200      	movs	r2, #0
 800ff04:	602a      	str	r2, [r5, #0]
 800ff06:	061a      	lsls	r2, r3, #24
 800ff08:	d410      	bmi.n	800ff2c <__swhatbuf_r+0x40>
 800ff0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff0e:	e00e      	b.n	800ff2e <__swhatbuf_r+0x42>
 800ff10:	466a      	mov	r2, sp
 800ff12:	f000 fcdd 	bl	80108d0 <_fstat_r>
 800ff16:	2800      	cmp	r0, #0
 800ff18:	dbf1      	blt.n	800fefe <__swhatbuf_r+0x12>
 800ff1a:	9a01      	ldr	r2, [sp, #4]
 800ff1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ff20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ff24:	425a      	negs	r2, r3
 800ff26:	415a      	adcs	r2, r3
 800ff28:	602a      	str	r2, [r5, #0]
 800ff2a:	e7ee      	b.n	800ff0a <__swhatbuf_r+0x1e>
 800ff2c:	2340      	movs	r3, #64	; 0x40
 800ff2e:	2000      	movs	r0, #0
 800ff30:	6023      	str	r3, [r4, #0]
 800ff32:	b016      	add	sp, #88	; 0x58
 800ff34:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ff38 <__smakebuf_r>:
 800ff38:	898b      	ldrh	r3, [r1, #12]
 800ff3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ff3c:	079d      	lsls	r5, r3, #30
 800ff3e:	4606      	mov	r6, r0
 800ff40:	460c      	mov	r4, r1
 800ff42:	d507      	bpl.n	800ff54 <__smakebuf_r+0x1c>
 800ff44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ff48:	6023      	str	r3, [r4, #0]
 800ff4a:	6123      	str	r3, [r4, #16]
 800ff4c:	2301      	movs	r3, #1
 800ff4e:	6163      	str	r3, [r4, #20]
 800ff50:	b002      	add	sp, #8
 800ff52:	bd70      	pop	{r4, r5, r6, pc}
 800ff54:	ab01      	add	r3, sp, #4
 800ff56:	466a      	mov	r2, sp
 800ff58:	f7ff ffc8 	bl	800feec <__swhatbuf_r>
 800ff5c:	9900      	ldr	r1, [sp, #0]
 800ff5e:	4605      	mov	r5, r0
 800ff60:	4630      	mov	r0, r6
 800ff62:	f000 f895 	bl	8010090 <_malloc_r>
 800ff66:	b948      	cbnz	r0, 800ff7c <__smakebuf_r+0x44>
 800ff68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff6c:	059a      	lsls	r2, r3, #22
 800ff6e:	d4ef      	bmi.n	800ff50 <__smakebuf_r+0x18>
 800ff70:	f023 0303 	bic.w	r3, r3, #3
 800ff74:	f043 0302 	orr.w	r3, r3, #2
 800ff78:	81a3      	strh	r3, [r4, #12]
 800ff7a:	e7e3      	b.n	800ff44 <__smakebuf_r+0xc>
 800ff7c:	4b0d      	ldr	r3, [pc, #52]	; (800ffb4 <__smakebuf_r+0x7c>)
 800ff7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ff80:	89a3      	ldrh	r3, [r4, #12]
 800ff82:	6020      	str	r0, [r4, #0]
 800ff84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff88:	81a3      	strh	r3, [r4, #12]
 800ff8a:	9b00      	ldr	r3, [sp, #0]
 800ff8c:	6163      	str	r3, [r4, #20]
 800ff8e:	9b01      	ldr	r3, [sp, #4]
 800ff90:	6120      	str	r0, [r4, #16]
 800ff92:	b15b      	cbz	r3, 800ffac <__smakebuf_r+0x74>
 800ff94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff98:	4630      	mov	r0, r6
 800ff9a:	f000 fcab 	bl	80108f4 <_isatty_r>
 800ff9e:	b128      	cbz	r0, 800ffac <__smakebuf_r+0x74>
 800ffa0:	89a3      	ldrh	r3, [r4, #12]
 800ffa2:	f023 0303 	bic.w	r3, r3, #3
 800ffa6:	f043 0301 	orr.w	r3, r3, #1
 800ffaa:	81a3      	strh	r3, [r4, #12]
 800ffac:	89a0      	ldrh	r0, [r4, #12]
 800ffae:	4305      	orrs	r5, r0
 800ffb0:	81a5      	strh	r5, [r4, #12]
 800ffb2:	e7cd      	b.n	800ff50 <__smakebuf_r+0x18>
 800ffb4:	0800fd45 	.word	0x0800fd45

0800ffb8 <_free_r>:
 800ffb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ffba:	2900      	cmp	r1, #0
 800ffbc:	d044      	beq.n	8010048 <_free_r+0x90>
 800ffbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ffc2:	9001      	str	r0, [sp, #4]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	f1a1 0404 	sub.w	r4, r1, #4
 800ffca:	bfb8      	it	lt
 800ffcc:	18e4      	addlt	r4, r4, r3
 800ffce:	f000 fcb3 	bl	8010938 <__malloc_lock>
 800ffd2:	4a1e      	ldr	r2, [pc, #120]	; (801004c <_free_r+0x94>)
 800ffd4:	9801      	ldr	r0, [sp, #4]
 800ffd6:	6813      	ldr	r3, [r2, #0]
 800ffd8:	b933      	cbnz	r3, 800ffe8 <_free_r+0x30>
 800ffda:	6063      	str	r3, [r4, #4]
 800ffdc:	6014      	str	r4, [r2, #0]
 800ffde:	b003      	add	sp, #12
 800ffe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ffe4:	f000 bcae 	b.w	8010944 <__malloc_unlock>
 800ffe8:	42a3      	cmp	r3, r4
 800ffea:	d908      	bls.n	800fffe <_free_r+0x46>
 800ffec:	6825      	ldr	r5, [r4, #0]
 800ffee:	1961      	adds	r1, r4, r5
 800fff0:	428b      	cmp	r3, r1
 800fff2:	bf01      	itttt	eq
 800fff4:	6819      	ldreq	r1, [r3, #0]
 800fff6:	685b      	ldreq	r3, [r3, #4]
 800fff8:	1949      	addeq	r1, r1, r5
 800fffa:	6021      	streq	r1, [r4, #0]
 800fffc:	e7ed      	b.n	800ffda <_free_r+0x22>
 800fffe:	461a      	mov	r2, r3
 8010000:	685b      	ldr	r3, [r3, #4]
 8010002:	b10b      	cbz	r3, 8010008 <_free_r+0x50>
 8010004:	42a3      	cmp	r3, r4
 8010006:	d9fa      	bls.n	800fffe <_free_r+0x46>
 8010008:	6811      	ldr	r1, [r2, #0]
 801000a:	1855      	adds	r5, r2, r1
 801000c:	42a5      	cmp	r5, r4
 801000e:	d10b      	bne.n	8010028 <_free_r+0x70>
 8010010:	6824      	ldr	r4, [r4, #0]
 8010012:	4421      	add	r1, r4
 8010014:	1854      	adds	r4, r2, r1
 8010016:	42a3      	cmp	r3, r4
 8010018:	6011      	str	r1, [r2, #0]
 801001a:	d1e0      	bne.n	800ffde <_free_r+0x26>
 801001c:	681c      	ldr	r4, [r3, #0]
 801001e:	685b      	ldr	r3, [r3, #4]
 8010020:	6053      	str	r3, [r2, #4]
 8010022:	4421      	add	r1, r4
 8010024:	6011      	str	r1, [r2, #0]
 8010026:	e7da      	b.n	800ffde <_free_r+0x26>
 8010028:	d902      	bls.n	8010030 <_free_r+0x78>
 801002a:	230c      	movs	r3, #12
 801002c:	6003      	str	r3, [r0, #0]
 801002e:	e7d6      	b.n	800ffde <_free_r+0x26>
 8010030:	6825      	ldr	r5, [r4, #0]
 8010032:	1961      	adds	r1, r4, r5
 8010034:	428b      	cmp	r3, r1
 8010036:	bf04      	itt	eq
 8010038:	6819      	ldreq	r1, [r3, #0]
 801003a:	685b      	ldreq	r3, [r3, #4]
 801003c:	6063      	str	r3, [r4, #4]
 801003e:	bf04      	itt	eq
 8010040:	1949      	addeq	r1, r1, r5
 8010042:	6021      	streq	r1, [r4, #0]
 8010044:	6054      	str	r4, [r2, #4]
 8010046:	e7ca      	b.n	800ffde <_free_r+0x26>
 8010048:	b003      	add	sp, #12
 801004a:	bd30      	pop	{r4, r5, pc}
 801004c:	20007078 	.word	0x20007078

08010050 <sbrk_aligned>:
 8010050:	b570      	push	{r4, r5, r6, lr}
 8010052:	4e0e      	ldr	r6, [pc, #56]	; (801008c <sbrk_aligned+0x3c>)
 8010054:	460c      	mov	r4, r1
 8010056:	6831      	ldr	r1, [r6, #0]
 8010058:	4605      	mov	r5, r0
 801005a:	b911      	cbnz	r1, 8010062 <sbrk_aligned+0x12>
 801005c:	f000 fbc2 	bl	80107e4 <_sbrk_r>
 8010060:	6030      	str	r0, [r6, #0]
 8010062:	4621      	mov	r1, r4
 8010064:	4628      	mov	r0, r5
 8010066:	f000 fbbd 	bl	80107e4 <_sbrk_r>
 801006a:	1c43      	adds	r3, r0, #1
 801006c:	d00a      	beq.n	8010084 <sbrk_aligned+0x34>
 801006e:	1cc4      	adds	r4, r0, #3
 8010070:	f024 0403 	bic.w	r4, r4, #3
 8010074:	42a0      	cmp	r0, r4
 8010076:	d007      	beq.n	8010088 <sbrk_aligned+0x38>
 8010078:	1a21      	subs	r1, r4, r0
 801007a:	4628      	mov	r0, r5
 801007c:	f000 fbb2 	bl	80107e4 <_sbrk_r>
 8010080:	3001      	adds	r0, #1
 8010082:	d101      	bne.n	8010088 <sbrk_aligned+0x38>
 8010084:	f04f 34ff 	mov.w	r4, #4294967295
 8010088:	4620      	mov	r0, r4
 801008a:	bd70      	pop	{r4, r5, r6, pc}
 801008c:	2000707c 	.word	0x2000707c

08010090 <_malloc_r>:
 8010090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010094:	1ccd      	adds	r5, r1, #3
 8010096:	f025 0503 	bic.w	r5, r5, #3
 801009a:	3508      	adds	r5, #8
 801009c:	2d0c      	cmp	r5, #12
 801009e:	bf38      	it	cc
 80100a0:	250c      	movcc	r5, #12
 80100a2:	2d00      	cmp	r5, #0
 80100a4:	4607      	mov	r7, r0
 80100a6:	db01      	blt.n	80100ac <_malloc_r+0x1c>
 80100a8:	42a9      	cmp	r1, r5
 80100aa:	d905      	bls.n	80100b8 <_malloc_r+0x28>
 80100ac:	230c      	movs	r3, #12
 80100ae:	603b      	str	r3, [r7, #0]
 80100b0:	2600      	movs	r6, #0
 80100b2:	4630      	mov	r0, r6
 80100b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100b8:	4e2e      	ldr	r6, [pc, #184]	; (8010174 <_malloc_r+0xe4>)
 80100ba:	f000 fc3d 	bl	8010938 <__malloc_lock>
 80100be:	6833      	ldr	r3, [r6, #0]
 80100c0:	461c      	mov	r4, r3
 80100c2:	bb34      	cbnz	r4, 8010112 <_malloc_r+0x82>
 80100c4:	4629      	mov	r1, r5
 80100c6:	4638      	mov	r0, r7
 80100c8:	f7ff ffc2 	bl	8010050 <sbrk_aligned>
 80100cc:	1c43      	adds	r3, r0, #1
 80100ce:	4604      	mov	r4, r0
 80100d0:	d14d      	bne.n	801016e <_malloc_r+0xde>
 80100d2:	6834      	ldr	r4, [r6, #0]
 80100d4:	4626      	mov	r6, r4
 80100d6:	2e00      	cmp	r6, #0
 80100d8:	d140      	bne.n	801015c <_malloc_r+0xcc>
 80100da:	6823      	ldr	r3, [r4, #0]
 80100dc:	4631      	mov	r1, r6
 80100de:	4638      	mov	r0, r7
 80100e0:	eb04 0803 	add.w	r8, r4, r3
 80100e4:	f000 fb7e 	bl	80107e4 <_sbrk_r>
 80100e8:	4580      	cmp	r8, r0
 80100ea:	d13a      	bne.n	8010162 <_malloc_r+0xd2>
 80100ec:	6821      	ldr	r1, [r4, #0]
 80100ee:	3503      	adds	r5, #3
 80100f0:	1a6d      	subs	r5, r5, r1
 80100f2:	f025 0503 	bic.w	r5, r5, #3
 80100f6:	3508      	adds	r5, #8
 80100f8:	2d0c      	cmp	r5, #12
 80100fa:	bf38      	it	cc
 80100fc:	250c      	movcc	r5, #12
 80100fe:	4629      	mov	r1, r5
 8010100:	4638      	mov	r0, r7
 8010102:	f7ff ffa5 	bl	8010050 <sbrk_aligned>
 8010106:	3001      	adds	r0, #1
 8010108:	d02b      	beq.n	8010162 <_malloc_r+0xd2>
 801010a:	6823      	ldr	r3, [r4, #0]
 801010c:	442b      	add	r3, r5
 801010e:	6023      	str	r3, [r4, #0]
 8010110:	e00e      	b.n	8010130 <_malloc_r+0xa0>
 8010112:	6822      	ldr	r2, [r4, #0]
 8010114:	1b52      	subs	r2, r2, r5
 8010116:	d41e      	bmi.n	8010156 <_malloc_r+0xc6>
 8010118:	2a0b      	cmp	r2, #11
 801011a:	d916      	bls.n	801014a <_malloc_r+0xba>
 801011c:	1961      	adds	r1, r4, r5
 801011e:	42a3      	cmp	r3, r4
 8010120:	6025      	str	r5, [r4, #0]
 8010122:	bf18      	it	ne
 8010124:	6059      	strne	r1, [r3, #4]
 8010126:	6863      	ldr	r3, [r4, #4]
 8010128:	bf08      	it	eq
 801012a:	6031      	streq	r1, [r6, #0]
 801012c:	5162      	str	r2, [r4, r5]
 801012e:	604b      	str	r3, [r1, #4]
 8010130:	4638      	mov	r0, r7
 8010132:	f104 060b 	add.w	r6, r4, #11
 8010136:	f000 fc05 	bl	8010944 <__malloc_unlock>
 801013a:	f026 0607 	bic.w	r6, r6, #7
 801013e:	1d23      	adds	r3, r4, #4
 8010140:	1af2      	subs	r2, r6, r3
 8010142:	d0b6      	beq.n	80100b2 <_malloc_r+0x22>
 8010144:	1b9b      	subs	r3, r3, r6
 8010146:	50a3      	str	r3, [r4, r2]
 8010148:	e7b3      	b.n	80100b2 <_malloc_r+0x22>
 801014a:	6862      	ldr	r2, [r4, #4]
 801014c:	42a3      	cmp	r3, r4
 801014e:	bf0c      	ite	eq
 8010150:	6032      	streq	r2, [r6, #0]
 8010152:	605a      	strne	r2, [r3, #4]
 8010154:	e7ec      	b.n	8010130 <_malloc_r+0xa0>
 8010156:	4623      	mov	r3, r4
 8010158:	6864      	ldr	r4, [r4, #4]
 801015a:	e7b2      	b.n	80100c2 <_malloc_r+0x32>
 801015c:	4634      	mov	r4, r6
 801015e:	6876      	ldr	r6, [r6, #4]
 8010160:	e7b9      	b.n	80100d6 <_malloc_r+0x46>
 8010162:	230c      	movs	r3, #12
 8010164:	603b      	str	r3, [r7, #0]
 8010166:	4638      	mov	r0, r7
 8010168:	f000 fbec 	bl	8010944 <__malloc_unlock>
 801016c:	e7a1      	b.n	80100b2 <_malloc_r+0x22>
 801016e:	6025      	str	r5, [r4, #0]
 8010170:	e7de      	b.n	8010130 <_malloc_r+0xa0>
 8010172:	bf00      	nop
 8010174:	20007078 	.word	0x20007078

08010178 <__sfputc_r>:
 8010178:	6893      	ldr	r3, [r2, #8]
 801017a:	3b01      	subs	r3, #1
 801017c:	2b00      	cmp	r3, #0
 801017e:	b410      	push	{r4}
 8010180:	6093      	str	r3, [r2, #8]
 8010182:	da08      	bge.n	8010196 <__sfputc_r+0x1e>
 8010184:	6994      	ldr	r4, [r2, #24]
 8010186:	42a3      	cmp	r3, r4
 8010188:	db01      	blt.n	801018e <__sfputc_r+0x16>
 801018a:	290a      	cmp	r1, #10
 801018c:	d103      	bne.n	8010196 <__sfputc_r+0x1e>
 801018e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010192:	f7ff bc31 	b.w	800f9f8 <__swbuf_r>
 8010196:	6813      	ldr	r3, [r2, #0]
 8010198:	1c58      	adds	r0, r3, #1
 801019a:	6010      	str	r0, [r2, #0]
 801019c:	7019      	strb	r1, [r3, #0]
 801019e:	4608      	mov	r0, r1
 80101a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101a4:	4770      	bx	lr

080101a6 <__sfputs_r>:
 80101a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101a8:	4606      	mov	r6, r0
 80101aa:	460f      	mov	r7, r1
 80101ac:	4614      	mov	r4, r2
 80101ae:	18d5      	adds	r5, r2, r3
 80101b0:	42ac      	cmp	r4, r5
 80101b2:	d101      	bne.n	80101b8 <__sfputs_r+0x12>
 80101b4:	2000      	movs	r0, #0
 80101b6:	e007      	b.n	80101c8 <__sfputs_r+0x22>
 80101b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101bc:	463a      	mov	r2, r7
 80101be:	4630      	mov	r0, r6
 80101c0:	f7ff ffda 	bl	8010178 <__sfputc_r>
 80101c4:	1c43      	adds	r3, r0, #1
 80101c6:	d1f3      	bne.n	80101b0 <__sfputs_r+0xa>
 80101c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080101cc <_vfiprintf_r>:
 80101cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101d0:	460d      	mov	r5, r1
 80101d2:	b09d      	sub	sp, #116	; 0x74
 80101d4:	4614      	mov	r4, r2
 80101d6:	4698      	mov	r8, r3
 80101d8:	4606      	mov	r6, r0
 80101da:	b118      	cbz	r0, 80101e4 <_vfiprintf_r+0x18>
 80101dc:	6983      	ldr	r3, [r0, #24]
 80101de:	b90b      	cbnz	r3, 80101e4 <_vfiprintf_r+0x18>
 80101e0:	f7ff fde4 	bl	800fdac <__sinit>
 80101e4:	4b89      	ldr	r3, [pc, #548]	; (801040c <_vfiprintf_r+0x240>)
 80101e6:	429d      	cmp	r5, r3
 80101e8:	d11b      	bne.n	8010222 <_vfiprintf_r+0x56>
 80101ea:	6875      	ldr	r5, [r6, #4]
 80101ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80101ee:	07d9      	lsls	r1, r3, #31
 80101f0:	d405      	bmi.n	80101fe <_vfiprintf_r+0x32>
 80101f2:	89ab      	ldrh	r3, [r5, #12]
 80101f4:	059a      	lsls	r2, r3, #22
 80101f6:	d402      	bmi.n	80101fe <_vfiprintf_r+0x32>
 80101f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80101fa:	f7ff fe75 	bl	800fee8 <__retarget_lock_acquire_recursive>
 80101fe:	89ab      	ldrh	r3, [r5, #12]
 8010200:	071b      	lsls	r3, r3, #28
 8010202:	d501      	bpl.n	8010208 <_vfiprintf_r+0x3c>
 8010204:	692b      	ldr	r3, [r5, #16]
 8010206:	b9eb      	cbnz	r3, 8010244 <_vfiprintf_r+0x78>
 8010208:	4629      	mov	r1, r5
 801020a:	4630      	mov	r0, r6
 801020c:	f7ff fc46 	bl	800fa9c <__swsetup_r>
 8010210:	b1c0      	cbz	r0, 8010244 <_vfiprintf_r+0x78>
 8010212:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010214:	07dc      	lsls	r4, r3, #31
 8010216:	d50e      	bpl.n	8010236 <_vfiprintf_r+0x6a>
 8010218:	f04f 30ff 	mov.w	r0, #4294967295
 801021c:	b01d      	add	sp, #116	; 0x74
 801021e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010222:	4b7b      	ldr	r3, [pc, #492]	; (8010410 <_vfiprintf_r+0x244>)
 8010224:	429d      	cmp	r5, r3
 8010226:	d101      	bne.n	801022c <_vfiprintf_r+0x60>
 8010228:	68b5      	ldr	r5, [r6, #8]
 801022a:	e7df      	b.n	80101ec <_vfiprintf_r+0x20>
 801022c:	4b79      	ldr	r3, [pc, #484]	; (8010414 <_vfiprintf_r+0x248>)
 801022e:	429d      	cmp	r5, r3
 8010230:	bf08      	it	eq
 8010232:	68f5      	ldreq	r5, [r6, #12]
 8010234:	e7da      	b.n	80101ec <_vfiprintf_r+0x20>
 8010236:	89ab      	ldrh	r3, [r5, #12]
 8010238:	0598      	lsls	r0, r3, #22
 801023a:	d4ed      	bmi.n	8010218 <_vfiprintf_r+0x4c>
 801023c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801023e:	f7ff fe54 	bl	800feea <__retarget_lock_release_recursive>
 8010242:	e7e9      	b.n	8010218 <_vfiprintf_r+0x4c>
 8010244:	2300      	movs	r3, #0
 8010246:	9309      	str	r3, [sp, #36]	; 0x24
 8010248:	2320      	movs	r3, #32
 801024a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801024e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010252:	2330      	movs	r3, #48	; 0x30
 8010254:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010418 <_vfiprintf_r+0x24c>
 8010258:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801025c:	f04f 0901 	mov.w	r9, #1
 8010260:	4623      	mov	r3, r4
 8010262:	469a      	mov	sl, r3
 8010264:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010268:	b10a      	cbz	r2, 801026e <_vfiprintf_r+0xa2>
 801026a:	2a25      	cmp	r2, #37	; 0x25
 801026c:	d1f9      	bne.n	8010262 <_vfiprintf_r+0x96>
 801026e:	ebba 0b04 	subs.w	fp, sl, r4
 8010272:	d00b      	beq.n	801028c <_vfiprintf_r+0xc0>
 8010274:	465b      	mov	r3, fp
 8010276:	4622      	mov	r2, r4
 8010278:	4629      	mov	r1, r5
 801027a:	4630      	mov	r0, r6
 801027c:	f7ff ff93 	bl	80101a6 <__sfputs_r>
 8010280:	3001      	adds	r0, #1
 8010282:	f000 80aa 	beq.w	80103da <_vfiprintf_r+0x20e>
 8010286:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010288:	445a      	add	r2, fp
 801028a:	9209      	str	r2, [sp, #36]	; 0x24
 801028c:	f89a 3000 	ldrb.w	r3, [sl]
 8010290:	2b00      	cmp	r3, #0
 8010292:	f000 80a2 	beq.w	80103da <_vfiprintf_r+0x20e>
 8010296:	2300      	movs	r3, #0
 8010298:	f04f 32ff 	mov.w	r2, #4294967295
 801029c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80102a0:	f10a 0a01 	add.w	sl, sl, #1
 80102a4:	9304      	str	r3, [sp, #16]
 80102a6:	9307      	str	r3, [sp, #28]
 80102a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80102ac:	931a      	str	r3, [sp, #104]	; 0x68
 80102ae:	4654      	mov	r4, sl
 80102b0:	2205      	movs	r2, #5
 80102b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102b6:	4858      	ldr	r0, [pc, #352]	; (8010418 <_vfiprintf_r+0x24c>)
 80102b8:	f7ef fffa 	bl	80002b0 <memchr>
 80102bc:	9a04      	ldr	r2, [sp, #16]
 80102be:	b9d8      	cbnz	r0, 80102f8 <_vfiprintf_r+0x12c>
 80102c0:	06d1      	lsls	r1, r2, #27
 80102c2:	bf44      	itt	mi
 80102c4:	2320      	movmi	r3, #32
 80102c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80102ca:	0713      	lsls	r3, r2, #28
 80102cc:	bf44      	itt	mi
 80102ce:	232b      	movmi	r3, #43	; 0x2b
 80102d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80102d4:	f89a 3000 	ldrb.w	r3, [sl]
 80102d8:	2b2a      	cmp	r3, #42	; 0x2a
 80102da:	d015      	beq.n	8010308 <_vfiprintf_r+0x13c>
 80102dc:	9a07      	ldr	r2, [sp, #28]
 80102de:	4654      	mov	r4, sl
 80102e0:	2000      	movs	r0, #0
 80102e2:	f04f 0c0a 	mov.w	ip, #10
 80102e6:	4621      	mov	r1, r4
 80102e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102ec:	3b30      	subs	r3, #48	; 0x30
 80102ee:	2b09      	cmp	r3, #9
 80102f0:	d94e      	bls.n	8010390 <_vfiprintf_r+0x1c4>
 80102f2:	b1b0      	cbz	r0, 8010322 <_vfiprintf_r+0x156>
 80102f4:	9207      	str	r2, [sp, #28]
 80102f6:	e014      	b.n	8010322 <_vfiprintf_r+0x156>
 80102f8:	eba0 0308 	sub.w	r3, r0, r8
 80102fc:	fa09 f303 	lsl.w	r3, r9, r3
 8010300:	4313      	orrs	r3, r2
 8010302:	9304      	str	r3, [sp, #16]
 8010304:	46a2      	mov	sl, r4
 8010306:	e7d2      	b.n	80102ae <_vfiprintf_r+0xe2>
 8010308:	9b03      	ldr	r3, [sp, #12]
 801030a:	1d19      	adds	r1, r3, #4
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	9103      	str	r1, [sp, #12]
 8010310:	2b00      	cmp	r3, #0
 8010312:	bfbb      	ittet	lt
 8010314:	425b      	neglt	r3, r3
 8010316:	f042 0202 	orrlt.w	r2, r2, #2
 801031a:	9307      	strge	r3, [sp, #28]
 801031c:	9307      	strlt	r3, [sp, #28]
 801031e:	bfb8      	it	lt
 8010320:	9204      	strlt	r2, [sp, #16]
 8010322:	7823      	ldrb	r3, [r4, #0]
 8010324:	2b2e      	cmp	r3, #46	; 0x2e
 8010326:	d10c      	bne.n	8010342 <_vfiprintf_r+0x176>
 8010328:	7863      	ldrb	r3, [r4, #1]
 801032a:	2b2a      	cmp	r3, #42	; 0x2a
 801032c:	d135      	bne.n	801039a <_vfiprintf_r+0x1ce>
 801032e:	9b03      	ldr	r3, [sp, #12]
 8010330:	1d1a      	adds	r2, r3, #4
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	9203      	str	r2, [sp, #12]
 8010336:	2b00      	cmp	r3, #0
 8010338:	bfb8      	it	lt
 801033a:	f04f 33ff 	movlt.w	r3, #4294967295
 801033e:	3402      	adds	r4, #2
 8010340:	9305      	str	r3, [sp, #20]
 8010342:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010428 <_vfiprintf_r+0x25c>
 8010346:	7821      	ldrb	r1, [r4, #0]
 8010348:	2203      	movs	r2, #3
 801034a:	4650      	mov	r0, sl
 801034c:	f7ef ffb0 	bl	80002b0 <memchr>
 8010350:	b140      	cbz	r0, 8010364 <_vfiprintf_r+0x198>
 8010352:	2340      	movs	r3, #64	; 0x40
 8010354:	eba0 000a 	sub.w	r0, r0, sl
 8010358:	fa03 f000 	lsl.w	r0, r3, r0
 801035c:	9b04      	ldr	r3, [sp, #16]
 801035e:	4303      	orrs	r3, r0
 8010360:	3401      	adds	r4, #1
 8010362:	9304      	str	r3, [sp, #16]
 8010364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010368:	482c      	ldr	r0, [pc, #176]	; (801041c <_vfiprintf_r+0x250>)
 801036a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801036e:	2206      	movs	r2, #6
 8010370:	f7ef ff9e 	bl	80002b0 <memchr>
 8010374:	2800      	cmp	r0, #0
 8010376:	d03f      	beq.n	80103f8 <_vfiprintf_r+0x22c>
 8010378:	4b29      	ldr	r3, [pc, #164]	; (8010420 <_vfiprintf_r+0x254>)
 801037a:	bb1b      	cbnz	r3, 80103c4 <_vfiprintf_r+0x1f8>
 801037c:	9b03      	ldr	r3, [sp, #12]
 801037e:	3307      	adds	r3, #7
 8010380:	f023 0307 	bic.w	r3, r3, #7
 8010384:	3308      	adds	r3, #8
 8010386:	9303      	str	r3, [sp, #12]
 8010388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801038a:	443b      	add	r3, r7
 801038c:	9309      	str	r3, [sp, #36]	; 0x24
 801038e:	e767      	b.n	8010260 <_vfiprintf_r+0x94>
 8010390:	fb0c 3202 	mla	r2, ip, r2, r3
 8010394:	460c      	mov	r4, r1
 8010396:	2001      	movs	r0, #1
 8010398:	e7a5      	b.n	80102e6 <_vfiprintf_r+0x11a>
 801039a:	2300      	movs	r3, #0
 801039c:	3401      	adds	r4, #1
 801039e:	9305      	str	r3, [sp, #20]
 80103a0:	4619      	mov	r1, r3
 80103a2:	f04f 0c0a 	mov.w	ip, #10
 80103a6:	4620      	mov	r0, r4
 80103a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80103ac:	3a30      	subs	r2, #48	; 0x30
 80103ae:	2a09      	cmp	r2, #9
 80103b0:	d903      	bls.n	80103ba <_vfiprintf_r+0x1ee>
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d0c5      	beq.n	8010342 <_vfiprintf_r+0x176>
 80103b6:	9105      	str	r1, [sp, #20]
 80103b8:	e7c3      	b.n	8010342 <_vfiprintf_r+0x176>
 80103ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80103be:	4604      	mov	r4, r0
 80103c0:	2301      	movs	r3, #1
 80103c2:	e7f0      	b.n	80103a6 <_vfiprintf_r+0x1da>
 80103c4:	ab03      	add	r3, sp, #12
 80103c6:	9300      	str	r3, [sp, #0]
 80103c8:	462a      	mov	r2, r5
 80103ca:	4b16      	ldr	r3, [pc, #88]	; (8010424 <_vfiprintf_r+0x258>)
 80103cc:	a904      	add	r1, sp, #16
 80103ce:	4630      	mov	r0, r6
 80103d0:	f3af 8000 	nop.w
 80103d4:	4607      	mov	r7, r0
 80103d6:	1c78      	adds	r0, r7, #1
 80103d8:	d1d6      	bne.n	8010388 <_vfiprintf_r+0x1bc>
 80103da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103dc:	07d9      	lsls	r1, r3, #31
 80103de:	d405      	bmi.n	80103ec <_vfiprintf_r+0x220>
 80103e0:	89ab      	ldrh	r3, [r5, #12]
 80103e2:	059a      	lsls	r2, r3, #22
 80103e4:	d402      	bmi.n	80103ec <_vfiprintf_r+0x220>
 80103e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103e8:	f7ff fd7f 	bl	800feea <__retarget_lock_release_recursive>
 80103ec:	89ab      	ldrh	r3, [r5, #12]
 80103ee:	065b      	lsls	r3, r3, #25
 80103f0:	f53f af12 	bmi.w	8010218 <_vfiprintf_r+0x4c>
 80103f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80103f6:	e711      	b.n	801021c <_vfiprintf_r+0x50>
 80103f8:	ab03      	add	r3, sp, #12
 80103fa:	9300      	str	r3, [sp, #0]
 80103fc:	462a      	mov	r2, r5
 80103fe:	4b09      	ldr	r3, [pc, #36]	; (8010424 <_vfiprintf_r+0x258>)
 8010400:	a904      	add	r1, sp, #16
 8010402:	4630      	mov	r0, r6
 8010404:	f000 f880 	bl	8010508 <_printf_i>
 8010408:	e7e4      	b.n	80103d4 <_vfiprintf_r+0x208>
 801040a:	bf00      	nop
 801040c:	08024cf8 	.word	0x08024cf8
 8010410:	08024d18 	.word	0x08024d18
 8010414:	08024cd8 	.word	0x08024cd8
 8010418:	08024d38 	.word	0x08024d38
 801041c:	08024d42 	.word	0x08024d42
 8010420:	00000000 	.word	0x00000000
 8010424:	080101a7 	.word	0x080101a7
 8010428:	08024d3e 	.word	0x08024d3e

0801042c <_printf_common>:
 801042c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010430:	4616      	mov	r6, r2
 8010432:	4699      	mov	r9, r3
 8010434:	688a      	ldr	r2, [r1, #8]
 8010436:	690b      	ldr	r3, [r1, #16]
 8010438:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801043c:	4293      	cmp	r3, r2
 801043e:	bfb8      	it	lt
 8010440:	4613      	movlt	r3, r2
 8010442:	6033      	str	r3, [r6, #0]
 8010444:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010448:	4607      	mov	r7, r0
 801044a:	460c      	mov	r4, r1
 801044c:	b10a      	cbz	r2, 8010452 <_printf_common+0x26>
 801044e:	3301      	adds	r3, #1
 8010450:	6033      	str	r3, [r6, #0]
 8010452:	6823      	ldr	r3, [r4, #0]
 8010454:	0699      	lsls	r1, r3, #26
 8010456:	bf42      	ittt	mi
 8010458:	6833      	ldrmi	r3, [r6, #0]
 801045a:	3302      	addmi	r3, #2
 801045c:	6033      	strmi	r3, [r6, #0]
 801045e:	6825      	ldr	r5, [r4, #0]
 8010460:	f015 0506 	ands.w	r5, r5, #6
 8010464:	d106      	bne.n	8010474 <_printf_common+0x48>
 8010466:	f104 0a19 	add.w	sl, r4, #25
 801046a:	68e3      	ldr	r3, [r4, #12]
 801046c:	6832      	ldr	r2, [r6, #0]
 801046e:	1a9b      	subs	r3, r3, r2
 8010470:	42ab      	cmp	r3, r5
 8010472:	dc26      	bgt.n	80104c2 <_printf_common+0x96>
 8010474:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010478:	1e13      	subs	r3, r2, #0
 801047a:	6822      	ldr	r2, [r4, #0]
 801047c:	bf18      	it	ne
 801047e:	2301      	movne	r3, #1
 8010480:	0692      	lsls	r2, r2, #26
 8010482:	d42b      	bmi.n	80104dc <_printf_common+0xb0>
 8010484:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010488:	4649      	mov	r1, r9
 801048a:	4638      	mov	r0, r7
 801048c:	47c0      	blx	r8
 801048e:	3001      	adds	r0, #1
 8010490:	d01e      	beq.n	80104d0 <_printf_common+0xa4>
 8010492:	6823      	ldr	r3, [r4, #0]
 8010494:	68e5      	ldr	r5, [r4, #12]
 8010496:	6832      	ldr	r2, [r6, #0]
 8010498:	f003 0306 	and.w	r3, r3, #6
 801049c:	2b04      	cmp	r3, #4
 801049e:	bf08      	it	eq
 80104a0:	1aad      	subeq	r5, r5, r2
 80104a2:	68a3      	ldr	r3, [r4, #8]
 80104a4:	6922      	ldr	r2, [r4, #16]
 80104a6:	bf0c      	ite	eq
 80104a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80104ac:	2500      	movne	r5, #0
 80104ae:	4293      	cmp	r3, r2
 80104b0:	bfc4      	itt	gt
 80104b2:	1a9b      	subgt	r3, r3, r2
 80104b4:	18ed      	addgt	r5, r5, r3
 80104b6:	2600      	movs	r6, #0
 80104b8:	341a      	adds	r4, #26
 80104ba:	42b5      	cmp	r5, r6
 80104bc:	d11a      	bne.n	80104f4 <_printf_common+0xc8>
 80104be:	2000      	movs	r0, #0
 80104c0:	e008      	b.n	80104d4 <_printf_common+0xa8>
 80104c2:	2301      	movs	r3, #1
 80104c4:	4652      	mov	r2, sl
 80104c6:	4649      	mov	r1, r9
 80104c8:	4638      	mov	r0, r7
 80104ca:	47c0      	blx	r8
 80104cc:	3001      	adds	r0, #1
 80104ce:	d103      	bne.n	80104d8 <_printf_common+0xac>
 80104d0:	f04f 30ff 	mov.w	r0, #4294967295
 80104d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104d8:	3501      	adds	r5, #1
 80104da:	e7c6      	b.n	801046a <_printf_common+0x3e>
 80104dc:	18e1      	adds	r1, r4, r3
 80104de:	1c5a      	adds	r2, r3, #1
 80104e0:	2030      	movs	r0, #48	; 0x30
 80104e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80104e6:	4422      	add	r2, r4
 80104e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80104ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80104f0:	3302      	adds	r3, #2
 80104f2:	e7c7      	b.n	8010484 <_printf_common+0x58>
 80104f4:	2301      	movs	r3, #1
 80104f6:	4622      	mov	r2, r4
 80104f8:	4649      	mov	r1, r9
 80104fa:	4638      	mov	r0, r7
 80104fc:	47c0      	blx	r8
 80104fe:	3001      	adds	r0, #1
 8010500:	d0e6      	beq.n	80104d0 <_printf_common+0xa4>
 8010502:	3601      	adds	r6, #1
 8010504:	e7d9      	b.n	80104ba <_printf_common+0x8e>
	...

08010508 <_printf_i>:
 8010508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801050c:	7e0f      	ldrb	r7, [r1, #24]
 801050e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010510:	2f78      	cmp	r7, #120	; 0x78
 8010512:	4691      	mov	r9, r2
 8010514:	4680      	mov	r8, r0
 8010516:	460c      	mov	r4, r1
 8010518:	469a      	mov	sl, r3
 801051a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801051e:	d807      	bhi.n	8010530 <_printf_i+0x28>
 8010520:	2f62      	cmp	r7, #98	; 0x62
 8010522:	d80a      	bhi.n	801053a <_printf_i+0x32>
 8010524:	2f00      	cmp	r7, #0
 8010526:	f000 80d8 	beq.w	80106da <_printf_i+0x1d2>
 801052a:	2f58      	cmp	r7, #88	; 0x58
 801052c:	f000 80a3 	beq.w	8010676 <_printf_i+0x16e>
 8010530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010534:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010538:	e03a      	b.n	80105b0 <_printf_i+0xa8>
 801053a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801053e:	2b15      	cmp	r3, #21
 8010540:	d8f6      	bhi.n	8010530 <_printf_i+0x28>
 8010542:	a101      	add	r1, pc, #4	; (adr r1, 8010548 <_printf_i+0x40>)
 8010544:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010548:	080105a1 	.word	0x080105a1
 801054c:	080105b5 	.word	0x080105b5
 8010550:	08010531 	.word	0x08010531
 8010554:	08010531 	.word	0x08010531
 8010558:	08010531 	.word	0x08010531
 801055c:	08010531 	.word	0x08010531
 8010560:	080105b5 	.word	0x080105b5
 8010564:	08010531 	.word	0x08010531
 8010568:	08010531 	.word	0x08010531
 801056c:	08010531 	.word	0x08010531
 8010570:	08010531 	.word	0x08010531
 8010574:	080106c1 	.word	0x080106c1
 8010578:	080105e5 	.word	0x080105e5
 801057c:	080106a3 	.word	0x080106a3
 8010580:	08010531 	.word	0x08010531
 8010584:	08010531 	.word	0x08010531
 8010588:	080106e3 	.word	0x080106e3
 801058c:	08010531 	.word	0x08010531
 8010590:	080105e5 	.word	0x080105e5
 8010594:	08010531 	.word	0x08010531
 8010598:	08010531 	.word	0x08010531
 801059c:	080106ab 	.word	0x080106ab
 80105a0:	682b      	ldr	r3, [r5, #0]
 80105a2:	1d1a      	adds	r2, r3, #4
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	602a      	str	r2, [r5, #0]
 80105a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80105ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80105b0:	2301      	movs	r3, #1
 80105b2:	e0a3      	b.n	80106fc <_printf_i+0x1f4>
 80105b4:	6820      	ldr	r0, [r4, #0]
 80105b6:	6829      	ldr	r1, [r5, #0]
 80105b8:	0606      	lsls	r6, r0, #24
 80105ba:	f101 0304 	add.w	r3, r1, #4
 80105be:	d50a      	bpl.n	80105d6 <_printf_i+0xce>
 80105c0:	680e      	ldr	r6, [r1, #0]
 80105c2:	602b      	str	r3, [r5, #0]
 80105c4:	2e00      	cmp	r6, #0
 80105c6:	da03      	bge.n	80105d0 <_printf_i+0xc8>
 80105c8:	232d      	movs	r3, #45	; 0x2d
 80105ca:	4276      	negs	r6, r6
 80105cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105d0:	485e      	ldr	r0, [pc, #376]	; (801074c <_printf_i+0x244>)
 80105d2:	230a      	movs	r3, #10
 80105d4:	e019      	b.n	801060a <_printf_i+0x102>
 80105d6:	680e      	ldr	r6, [r1, #0]
 80105d8:	602b      	str	r3, [r5, #0]
 80105da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80105de:	bf18      	it	ne
 80105e0:	b236      	sxthne	r6, r6
 80105e2:	e7ef      	b.n	80105c4 <_printf_i+0xbc>
 80105e4:	682b      	ldr	r3, [r5, #0]
 80105e6:	6820      	ldr	r0, [r4, #0]
 80105e8:	1d19      	adds	r1, r3, #4
 80105ea:	6029      	str	r1, [r5, #0]
 80105ec:	0601      	lsls	r1, r0, #24
 80105ee:	d501      	bpl.n	80105f4 <_printf_i+0xec>
 80105f0:	681e      	ldr	r6, [r3, #0]
 80105f2:	e002      	b.n	80105fa <_printf_i+0xf2>
 80105f4:	0646      	lsls	r6, r0, #25
 80105f6:	d5fb      	bpl.n	80105f0 <_printf_i+0xe8>
 80105f8:	881e      	ldrh	r6, [r3, #0]
 80105fa:	4854      	ldr	r0, [pc, #336]	; (801074c <_printf_i+0x244>)
 80105fc:	2f6f      	cmp	r7, #111	; 0x6f
 80105fe:	bf0c      	ite	eq
 8010600:	2308      	moveq	r3, #8
 8010602:	230a      	movne	r3, #10
 8010604:	2100      	movs	r1, #0
 8010606:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801060a:	6865      	ldr	r5, [r4, #4]
 801060c:	60a5      	str	r5, [r4, #8]
 801060e:	2d00      	cmp	r5, #0
 8010610:	bfa2      	ittt	ge
 8010612:	6821      	ldrge	r1, [r4, #0]
 8010614:	f021 0104 	bicge.w	r1, r1, #4
 8010618:	6021      	strge	r1, [r4, #0]
 801061a:	b90e      	cbnz	r6, 8010620 <_printf_i+0x118>
 801061c:	2d00      	cmp	r5, #0
 801061e:	d04d      	beq.n	80106bc <_printf_i+0x1b4>
 8010620:	4615      	mov	r5, r2
 8010622:	fbb6 f1f3 	udiv	r1, r6, r3
 8010626:	fb03 6711 	mls	r7, r3, r1, r6
 801062a:	5dc7      	ldrb	r7, [r0, r7]
 801062c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010630:	4637      	mov	r7, r6
 8010632:	42bb      	cmp	r3, r7
 8010634:	460e      	mov	r6, r1
 8010636:	d9f4      	bls.n	8010622 <_printf_i+0x11a>
 8010638:	2b08      	cmp	r3, #8
 801063a:	d10b      	bne.n	8010654 <_printf_i+0x14c>
 801063c:	6823      	ldr	r3, [r4, #0]
 801063e:	07de      	lsls	r6, r3, #31
 8010640:	d508      	bpl.n	8010654 <_printf_i+0x14c>
 8010642:	6923      	ldr	r3, [r4, #16]
 8010644:	6861      	ldr	r1, [r4, #4]
 8010646:	4299      	cmp	r1, r3
 8010648:	bfde      	ittt	le
 801064a:	2330      	movle	r3, #48	; 0x30
 801064c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010650:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010654:	1b52      	subs	r2, r2, r5
 8010656:	6122      	str	r2, [r4, #16]
 8010658:	f8cd a000 	str.w	sl, [sp]
 801065c:	464b      	mov	r3, r9
 801065e:	aa03      	add	r2, sp, #12
 8010660:	4621      	mov	r1, r4
 8010662:	4640      	mov	r0, r8
 8010664:	f7ff fee2 	bl	801042c <_printf_common>
 8010668:	3001      	adds	r0, #1
 801066a:	d14c      	bne.n	8010706 <_printf_i+0x1fe>
 801066c:	f04f 30ff 	mov.w	r0, #4294967295
 8010670:	b004      	add	sp, #16
 8010672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010676:	4835      	ldr	r0, [pc, #212]	; (801074c <_printf_i+0x244>)
 8010678:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801067c:	6829      	ldr	r1, [r5, #0]
 801067e:	6823      	ldr	r3, [r4, #0]
 8010680:	f851 6b04 	ldr.w	r6, [r1], #4
 8010684:	6029      	str	r1, [r5, #0]
 8010686:	061d      	lsls	r5, r3, #24
 8010688:	d514      	bpl.n	80106b4 <_printf_i+0x1ac>
 801068a:	07df      	lsls	r7, r3, #31
 801068c:	bf44      	itt	mi
 801068e:	f043 0320 	orrmi.w	r3, r3, #32
 8010692:	6023      	strmi	r3, [r4, #0]
 8010694:	b91e      	cbnz	r6, 801069e <_printf_i+0x196>
 8010696:	6823      	ldr	r3, [r4, #0]
 8010698:	f023 0320 	bic.w	r3, r3, #32
 801069c:	6023      	str	r3, [r4, #0]
 801069e:	2310      	movs	r3, #16
 80106a0:	e7b0      	b.n	8010604 <_printf_i+0xfc>
 80106a2:	6823      	ldr	r3, [r4, #0]
 80106a4:	f043 0320 	orr.w	r3, r3, #32
 80106a8:	6023      	str	r3, [r4, #0]
 80106aa:	2378      	movs	r3, #120	; 0x78
 80106ac:	4828      	ldr	r0, [pc, #160]	; (8010750 <_printf_i+0x248>)
 80106ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80106b2:	e7e3      	b.n	801067c <_printf_i+0x174>
 80106b4:	0659      	lsls	r1, r3, #25
 80106b6:	bf48      	it	mi
 80106b8:	b2b6      	uxthmi	r6, r6
 80106ba:	e7e6      	b.n	801068a <_printf_i+0x182>
 80106bc:	4615      	mov	r5, r2
 80106be:	e7bb      	b.n	8010638 <_printf_i+0x130>
 80106c0:	682b      	ldr	r3, [r5, #0]
 80106c2:	6826      	ldr	r6, [r4, #0]
 80106c4:	6961      	ldr	r1, [r4, #20]
 80106c6:	1d18      	adds	r0, r3, #4
 80106c8:	6028      	str	r0, [r5, #0]
 80106ca:	0635      	lsls	r5, r6, #24
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	d501      	bpl.n	80106d4 <_printf_i+0x1cc>
 80106d0:	6019      	str	r1, [r3, #0]
 80106d2:	e002      	b.n	80106da <_printf_i+0x1d2>
 80106d4:	0670      	lsls	r0, r6, #25
 80106d6:	d5fb      	bpl.n	80106d0 <_printf_i+0x1c8>
 80106d8:	8019      	strh	r1, [r3, #0]
 80106da:	2300      	movs	r3, #0
 80106dc:	6123      	str	r3, [r4, #16]
 80106de:	4615      	mov	r5, r2
 80106e0:	e7ba      	b.n	8010658 <_printf_i+0x150>
 80106e2:	682b      	ldr	r3, [r5, #0]
 80106e4:	1d1a      	adds	r2, r3, #4
 80106e6:	602a      	str	r2, [r5, #0]
 80106e8:	681d      	ldr	r5, [r3, #0]
 80106ea:	6862      	ldr	r2, [r4, #4]
 80106ec:	2100      	movs	r1, #0
 80106ee:	4628      	mov	r0, r5
 80106f0:	f7ef fdde 	bl	80002b0 <memchr>
 80106f4:	b108      	cbz	r0, 80106fa <_printf_i+0x1f2>
 80106f6:	1b40      	subs	r0, r0, r5
 80106f8:	6060      	str	r0, [r4, #4]
 80106fa:	6863      	ldr	r3, [r4, #4]
 80106fc:	6123      	str	r3, [r4, #16]
 80106fe:	2300      	movs	r3, #0
 8010700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010704:	e7a8      	b.n	8010658 <_printf_i+0x150>
 8010706:	6923      	ldr	r3, [r4, #16]
 8010708:	462a      	mov	r2, r5
 801070a:	4649      	mov	r1, r9
 801070c:	4640      	mov	r0, r8
 801070e:	47d0      	blx	sl
 8010710:	3001      	adds	r0, #1
 8010712:	d0ab      	beq.n	801066c <_printf_i+0x164>
 8010714:	6823      	ldr	r3, [r4, #0]
 8010716:	079b      	lsls	r3, r3, #30
 8010718:	d413      	bmi.n	8010742 <_printf_i+0x23a>
 801071a:	68e0      	ldr	r0, [r4, #12]
 801071c:	9b03      	ldr	r3, [sp, #12]
 801071e:	4298      	cmp	r0, r3
 8010720:	bfb8      	it	lt
 8010722:	4618      	movlt	r0, r3
 8010724:	e7a4      	b.n	8010670 <_printf_i+0x168>
 8010726:	2301      	movs	r3, #1
 8010728:	4632      	mov	r2, r6
 801072a:	4649      	mov	r1, r9
 801072c:	4640      	mov	r0, r8
 801072e:	47d0      	blx	sl
 8010730:	3001      	adds	r0, #1
 8010732:	d09b      	beq.n	801066c <_printf_i+0x164>
 8010734:	3501      	adds	r5, #1
 8010736:	68e3      	ldr	r3, [r4, #12]
 8010738:	9903      	ldr	r1, [sp, #12]
 801073a:	1a5b      	subs	r3, r3, r1
 801073c:	42ab      	cmp	r3, r5
 801073e:	dcf2      	bgt.n	8010726 <_printf_i+0x21e>
 8010740:	e7eb      	b.n	801071a <_printf_i+0x212>
 8010742:	2500      	movs	r5, #0
 8010744:	f104 0619 	add.w	r6, r4, #25
 8010748:	e7f5      	b.n	8010736 <_printf_i+0x22e>
 801074a:	bf00      	nop
 801074c:	08024d49 	.word	0x08024d49
 8010750:	08024d5a 	.word	0x08024d5a

08010754 <_putc_r>:
 8010754:	b570      	push	{r4, r5, r6, lr}
 8010756:	460d      	mov	r5, r1
 8010758:	4614      	mov	r4, r2
 801075a:	4606      	mov	r6, r0
 801075c:	b118      	cbz	r0, 8010766 <_putc_r+0x12>
 801075e:	6983      	ldr	r3, [r0, #24]
 8010760:	b90b      	cbnz	r3, 8010766 <_putc_r+0x12>
 8010762:	f7ff fb23 	bl	800fdac <__sinit>
 8010766:	4b1c      	ldr	r3, [pc, #112]	; (80107d8 <_putc_r+0x84>)
 8010768:	429c      	cmp	r4, r3
 801076a:	d124      	bne.n	80107b6 <_putc_r+0x62>
 801076c:	6874      	ldr	r4, [r6, #4]
 801076e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010770:	07d8      	lsls	r0, r3, #31
 8010772:	d405      	bmi.n	8010780 <_putc_r+0x2c>
 8010774:	89a3      	ldrh	r3, [r4, #12]
 8010776:	0599      	lsls	r1, r3, #22
 8010778:	d402      	bmi.n	8010780 <_putc_r+0x2c>
 801077a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801077c:	f7ff fbb4 	bl	800fee8 <__retarget_lock_acquire_recursive>
 8010780:	68a3      	ldr	r3, [r4, #8]
 8010782:	3b01      	subs	r3, #1
 8010784:	2b00      	cmp	r3, #0
 8010786:	60a3      	str	r3, [r4, #8]
 8010788:	da05      	bge.n	8010796 <_putc_r+0x42>
 801078a:	69a2      	ldr	r2, [r4, #24]
 801078c:	4293      	cmp	r3, r2
 801078e:	db1c      	blt.n	80107ca <_putc_r+0x76>
 8010790:	b2eb      	uxtb	r3, r5
 8010792:	2b0a      	cmp	r3, #10
 8010794:	d019      	beq.n	80107ca <_putc_r+0x76>
 8010796:	6823      	ldr	r3, [r4, #0]
 8010798:	1c5a      	adds	r2, r3, #1
 801079a:	6022      	str	r2, [r4, #0]
 801079c:	701d      	strb	r5, [r3, #0]
 801079e:	b2ed      	uxtb	r5, r5
 80107a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80107a2:	07da      	lsls	r2, r3, #31
 80107a4:	d405      	bmi.n	80107b2 <_putc_r+0x5e>
 80107a6:	89a3      	ldrh	r3, [r4, #12]
 80107a8:	059b      	lsls	r3, r3, #22
 80107aa:	d402      	bmi.n	80107b2 <_putc_r+0x5e>
 80107ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80107ae:	f7ff fb9c 	bl	800feea <__retarget_lock_release_recursive>
 80107b2:	4628      	mov	r0, r5
 80107b4:	bd70      	pop	{r4, r5, r6, pc}
 80107b6:	4b09      	ldr	r3, [pc, #36]	; (80107dc <_putc_r+0x88>)
 80107b8:	429c      	cmp	r4, r3
 80107ba:	d101      	bne.n	80107c0 <_putc_r+0x6c>
 80107bc:	68b4      	ldr	r4, [r6, #8]
 80107be:	e7d6      	b.n	801076e <_putc_r+0x1a>
 80107c0:	4b07      	ldr	r3, [pc, #28]	; (80107e0 <_putc_r+0x8c>)
 80107c2:	429c      	cmp	r4, r3
 80107c4:	bf08      	it	eq
 80107c6:	68f4      	ldreq	r4, [r6, #12]
 80107c8:	e7d1      	b.n	801076e <_putc_r+0x1a>
 80107ca:	4629      	mov	r1, r5
 80107cc:	4622      	mov	r2, r4
 80107ce:	4630      	mov	r0, r6
 80107d0:	f7ff f912 	bl	800f9f8 <__swbuf_r>
 80107d4:	4605      	mov	r5, r0
 80107d6:	e7e3      	b.n	80107a0 <_putc_r+0x4c>
 80107d8:	08024cf8 	.word	0x08024cf8
 80107dc:	08024d18 	.word	0x08024d18
 80107e0:	08024cd8 	.word	0x08024cd8

080107e4 <_sbrk_r>:
 80107e4:	b538      	push	{r3, r4, r5, lr}
 80107e6:	4d06      	ldr	r5, [pc, #24]	; (8010800 <_sbrk_r+0x1c>)
 80107e8:	2300      	movs	r3, #0
 80107ea:	4604      	mov	r4, r0
 80107ec:	4608      	mov	r0, r1
 80107ee:	602b      	str	r3, [r5, #0]
 80107f0:	f7f2 fde6 	bl	80033c0 <_sbrk>
 80107f4:	1c43      	adds	r3, r0, #1
 80107f6:	d102      	bne.n	80107fe <_sbrk_r+0x1a>
 80107f8:	682b      	ldr	r3, [r5, #0]
 80107fa:	b103      	cbz	r3, 80107fe <_sbrk_r+0x1a>
 80107fc:	6023      	str	r3, [r4, #0]
 80107fe:	bd38      	pop	{r3, r4, r5, pc}
 8010800:	20007080 	.word	0x20007080

08010804 <__sread>:
 8010804:	b510      	push	{r4, lr}
 8010806:	460c      	mov	r4, r1
 8010808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801080c:	f000 f8a0 	bl	8010950 <_read_r>
 8010810:	2800      	cmp	r0, #0
 8010812:	bfab      	itete	ge
 8010814:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010816:	89a3      	ldrhlt	r3, [r4, #12]
 8010818:	181b      	addge	r3, r3, r0
 801081a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801081e:	bfac      	ite	ge
 8010820:	6563      	strge	r3, [r4, #84]	; 0x54
 8010822:	81a3      	strhlt	r3, [r4, #12]
 8010824:	bd10      	pop	{r4, pc}

08010826 <__swrite>:
 8010826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801082a:	461f      	mov	r7, r3
 801082c:	898b      	ldrh	r3, [r1, #12]
 801082e:	05db      	lsls	r3, r3, #23
 8010830:	4605      	mov	r5, r0
 8010832:	460c      	mov	r4, r1
 8010834:	4616      	mov	r6, r2
 8010836:	d505      	bpl.n	8010844 <__swrite+0x1e>
 8010838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801083c:	2302      	movs	r3, #2
 801083e:	2200      	movs	r2, #0
 8010840:	f000 f868 	bl	8010914 <_lseek_r>
 8010844:	89a3      	ldrh	r3, [r4, #12]
 8010846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801084a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801084e:	81a3      	strh	r3, [r4, #12]
 8010850:	4632      	mov	r2, r6
 8010852:	463b      	mov	r3, r7
 8010854:	4628      	mov	r0, r5
 8010856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801085a:	f000 b817 	b.w	801088c <_write_r>

0801085e <__sseek>:
 801085e:	b510      	push	{r4, lr}
 8010860:	460c      	mov	r4, r1
 8010862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010866:	f000 f855 	bl	8010914 <_lseek_r>
 801086a:	1c43      	adds	r3, r0, #1
 801086c:	89a3      	ldrh	r3, [r4, #12]
 801086e:	bf15      	itete	ne
 8010870:	6560      	strne	r0, [r4, #84]	; 0x54
 8010872:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010876:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801087a:	81a3      	strheq	r3, [r4, #12]
 801087c:	bf18      	it	ne
 801087e:	81a3      	strhne	r3, [r4, #12]
 8010880:	bd10      	pop	{r4, pc}

08010882 <__sclose>:
 8010882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010886:	f000 b813 	b.w	80108b0 <_close_r>
	...

0801088c <_write_r>:
 801088c:	b538      	push	{r3, r4, r5, lr}
 801088e:	4d07      	ldr	r5, [pc, #28]	; (80108ac <_write_r+0x20>)
 8010890:	4604      	mov	r4, r0
 8010892:	4608      	mov	r0, r1
 8010894:	4611      	mov	r1, r2
 8010896:	2200      	movs	r2, #0
 8010898:	602a      	str	r2, [r5, #0]
 801089a:	461a      	mov	r2, r3
 801089c:	f7f2 fd40 	bl	8003320 <_write>
 80108a0:	1c43      	adds	r3, r0, #1
 80108a2:	d102      	bne.n	80108aa <_write_r+0x1e>
 80108a4:	682b      	ldr	r3, [r5, #0]
 80108a6:	b103      	cbz	r3, 80108aa <_write_r+0x1e>
 80108a8:	6023      	str	r3, [r4, #0]
 80108aa:	bd38      	pop	{r3, r4, r5, pc}
 80108ac:	20007080 	.word	0x20007080

080108b0 <_close_r>:
 80108b0:	b538      	push	{r3, r4, r5, lr}
 80108b2:	4d06      	ldr	r5, [pc, #24]	; (80108cc <_close_r+0x1c>)
 80108b4:	2300      	movs	r3, #0
 80108b6:	4604      	mov	r4, r0
 80108b8:	4608      	mov	r0, r1
 80108ba:	602b      	str	r3, [r5, #0]
 80108bc:	f7f2 fd4c 	bl	8003358 <_close>
 80108c0:	1c43      	adds	r3, r0, #1
 80108c2:	d102      	bne.n	80108ca <_close_r+0x1a>
 80108c4:	682b      	ldr	r3, [r5, #0]
 80108c6:	b103      	cbz	r3, 80108ca <_close_r+0x1a>
 80108c8:	6023      	str	r3, [r4, #0]
 80108ca:	bd38      	pop	{r3, r4, r5, pc}
 80108cc:	20007080 	.word	0x20007080

080108d0 <_fstat_r>:
 80108d0:	b538      	push	{r3, r4, r5, lr}
 80108d2:	4d07      	ldr	r5, [pc, #28]	; (80108f0 <_fstat_r+0x20>)
 80108d4:	2300      	movs	r3, #0
 80108d6:	4604      	mov	r4, r0
 80108d8:	4608      	mov	r0, r1
 80108da:	4611      	mov	r1, r2
 80108dc:	602b      	str	r3, [r5, #0]
 80108de:	f7f2 fd47 	bl	8003370 <_fstat>
 80108e2:	1c43      	adds	r3, r0, #1
 80108e4:	d102      	bne.n	80108ec <_fstat_r+0x1c>
 80108e6:	682b      	ldr	r3, [r5, #0]
 80108e8:	b103      	cbz	r3, 80108ec <_fstat_r+0x1c>
 80108ea:	6023      	str	r3, [r4, #0]
 80108ec:	bd38      	pop	{r3, r4, r5, pc}
 80108ee:	bf00      	nop
 80108f0:	20007080 	.word	0x20007080

080108f4 <_isatty_r>:
 80108f4:	b538      	push	{r3, r4, r5, lr}
 80108f6:	4d06      	ldr	r5, [pc, #24]	; (8010910 <_isatty_r+0x1c>)
 80108f8:	2300      	movs	r3, #0
 80108fa:	4604      	mov	r4, r0
 80108fc:	4608      	mov	r0, r1
 80108fe:	602b      	str	r3, [r5, #0]
 8010900:	f7f2 fd46 	bl	8003390 <_isatty>
 8010904:	1c43      	adds	r3, r0, #1
 8010906:	d102      	bne.n	801090e <_isatty_r+0x1a>
 8010908:	682b      	ldr	r3, [r5, #0]
 801090a:	b103      	cbz	r3, 801090e <_isatty_r+0x1a>
 801090c:	6023      	str	r3, [r4, #0]
 801090e:	bd38      	pop	{r3, r4, r5, pc}
 8010910:	20007080 	.word	0x20007080

08010914 <_lseek_r>:
 8010914:	b538      	push	{r3, r4, r5, lr}
 8010916:	4d07      	ldr	r5, [pc, #28]	; (8010934 <_lseek_r+0x20>)
 8010918:	4604      	mov	r4, r0
 801091a:	4608      	mov	r0, r1
 801091c:	4611      	mov	r1, r2
 801091e:	2200      	movs	r2, #0
 8010920:	602a      	str	r2, [r5, #0]
 8010922:	461a      	mov	r2, r3
 8010924:	f7f2 fd3f 	bl	80033a6 <_lseek>
 8010928:	1c43      	adds	r3, r0, #1
 801092a:	d102      	bne.n	8010932 <_lseek_r+0x1e>
 801092c:	682b      	ldr	r3, [r5, #0]
 801092e:	b103      	cbz	r3, 8010932 <_lseek_r+0x1e>
 8010930:	6023      	str	r3, [r4, #0]
 8010932:	bd38      	pop	{r3, r4, r5, pc}
 8010934:	20007080 	.word	0x20007080

08010938 <__malloc_lock>:
 8010938:	4801      	ldr	r0, [pc, #4]	; (8010940 <__malloc_lock+0x8>)
 801093a:	f7ff bad5 	b.w	800fee8 <__retarget_lock_acquire_recursive>
 801093e:	bf00      	nop
 8010940:	20007072 	.word	0x20007072

08010944 <__malloc_unlock>:
 8010944:	4801      	ldr	r0, [pc, #4]	; (801094c <__malloc_unlock+0x8>)
 8010946:	f7ff bad0 	b.w	800feea <__retarget_lock_release_recursive>
 801094a:	bf00      	nop
 801094c:	20007072 	.word	0x20007072

08010950 <_read_r>:
 8010950:	b538      	push	{r3, r4, r5, lr}
 8010952:	4d07      	ldr	r5, [pc, #28]	; (8010970 <_read_r+0x20>)
 8010954:	4604      	mov	r4, r0
 8010956:	4608      	mov	r0, r1
 8010958:	4611      	mov	r1, r2
 801095a:	2200      	movs	r2, #0
 801095c:	602a      	str	r2, [r5, #0]
 801095e:	461a      	mov	r2, r3
 8010960:	f7f2 fcc1 	bl	80032e6 <_read>
 8010964:	1c43      	adds	r3, r0, #1
 8010966:	d102      	bne.n	801096e <_read_r+0x1e>
 8010968:	682b      	ldr	r3, [r5, #0]
 801096a:	b103      	cbz	r3, 801096e <_read_r+0x1e>
 801096c:	6023      	str	r3, [r4, #0]
 801096e:	bd38      	pop	{r3, r4, r5, pc}
 8010970:	20007080 	.word	0x20007080

08010974 <roundf>:
 8010974:	ee10 0a10 	vmov	r0, s0
 8010978:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801097c:	3a7f      	subs	r2, #127	; 0x7f
 801097e:	2a16      	cmp	r2, #22
 8010980:	dc15      	bgt.n	80109ae <roundf+0x3a>
 8010982:	2a00      	cmp	r2, #0
 8010984:	da08      	bge.n	8010998 <roundf+0x24>
 8010986:	3201      	adds	r2, #1
 8010988:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801098c:	d101      	bne.n	8010992 <roundf+0x1e>
 801098e:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8010992:	ee00 3a10 	vmov	s0, r3
 8010996:	4770      	bx	lr
 8010998:	4907      	ldr	r1, [pc, #28]	; (80109b8 <roundf+0x44>)
 801099a:	4111      	asrs	r1, r2
 801099c:	4208      	tst	r0, r1
 801099e:	d0fa      	beq.n	8010996 <roundf+0x22>
 80109a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80109a4:	4113      	asrs	r3, r2
 80109a6:	4403      	add	r3, r0
 80109a8:	ea23 0301 	bic.w	r3, r3, r1
 80109ac:	e7f1      	b.n	8010992 <roundf+0x1e>
 80109ae:	2a80      	cmp	r2, #128	; 0x80
 80109b0:	d1f1      	bne.n	8010996 <roundf+0x22>
 80109b2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80109b6:	4770      	bx	lr
 80109b8:	007fffff 	.word	0x007fffff

080109bc <log10f>:
 80109bc:	b508      	push	{r3, lr}
 80109be:	ed2d 8b02 	vpush	{d8}
 80109c2:	eeb0 8a40 	vmov.f32	s16, s0
 80109c6:	f000 f89d 	bl	8010b04 <__ieee754_log10f>
 80109ca:	eeb4 8a48 	vcmp.f32	s16, s16
 80109ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109d2:	d60f      	bvs.n	80109f4 <log10f+0x38>
 80109d4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80109d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109dc:	d80a      	bhi.n	80109f4 <log10f+0x38>
 80109de:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80109e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109e6:	d108      	bne.n	80109fa <log10f+0x3e>
 80109e8:	f7fe fe5e 	bl	800f6a8 <__errno>
 80109ec:	2322      	movs	r3, #34	; 0x22
 80109ee:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8010a10 <log10f+0x54>
 80109f2:	6003      	str	r3, [r0, #0]
 80109f4:	ecbd 8b02 	vpop	{d8}
 80109f8:	bd08      	pop	{r3, pc}
 80109fa:	f7fe fe55 	bl	800f6a8 <__errno>
 80109fe:	ecbd 8b02 	vpop	{d8}
 8010a02:	2321      	movs	r3, #33	; 0x21
 8010a04:	6003      	str	r3, [r0, #0]
 8010a06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010a0a:	4802      	ldr	r0, [pc, #8]	; (8010a14 <log10f+0x58>)
 8010a0c:	f000 bbda 	b.w	80111c4 <nanf>
 8010a10:	ff800000 	.word	0xff800000
 8010a14:	08024d3d 	.word	0x08024d3d

08010a18 <powf>:
 8010a18:	b508      	push	{r3, lr}
 8010a1a:	ed2d 8b04 	vpush	{d8-d9}
 8010a1e:	eeb0 8a60 	vmov.f32	s16, s1
 8010a22:	eeb0 9a40 	vmov.f32	s18, s0
 8010a26:	f000 f8c5 	bl	8010bb4 <__ieee754_powf>
 8010a2a:	eeb4 8a48 	vcmp.f32	s16, s16
 8010a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a32:	eef0 8a40 	vmov.f32	s17, s0
 8010a36:	d63e      	bvs.n	8010ab6 <powf+0x9e>
 8010a38:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8010a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a40:	d112      	bne.n	8010a68 <powf+0x50>
 8010a42:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a4a:	d039      	beq.n	8010ac0 <powf+0xa8>
 8010a4c:	eeb0 0a48 	vmov.f32	s0, s16
 8010a50:	f000 fbab 	bl	80111aa <finitef>
 8010a54:	b378      	cbz	r0, 8010ab6 <powf+0x9e>
 8010a56:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a5e:	d52a      	bpl.n	8010ab6 <powf+0x9e>
 8010a60:	f7fe fe22 	bl	800f6a8 <__errno>
 8010a64:	2322      	movs	r3, #34	; 0x22
 8010a66:	e014      	b.n	8010a92 <powf+0x7a>
 8010a68:	f000 fb9f 	bl	80111aa <finitef>
 8010a6c:	b998      	cbnz	r0, 8010a96 <powf+0x7e>
 8010a6e:	eeb0 0a49 	vmov.f32	s0, s18
 8010a72:	f000 fb9a 	bl	80111aa <finitef>
 8010a76:	b170      	cbz	r0, 8010a96 <powf+0x7e>
 8010a78:	eeb0 0a48 	vmov.f32	s0, s16
 8010a7c:	f000 fb95 	bl	80111aa <finitef>
 8010a80:	b148      	cbz	r0, 8010a96 <powf+0x7e>
 8010a82:	eef4 8a68 	vcmp.f32	s17, s17
 8010a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a8a:	d7e9      	bvc.n	8010a60 <powf+0x48>
 8010a8c:	f7fe fe0c 	bl	800f6a8 <__errno>
 8010a90:	2321      	movs	r3, #33	; 0x21
 8010a92:	6003      	str	r3, [r0, #0]
 8010a94:	e00f      	b.n	8010ab6 <powf+0x9e>
 8010a96:	eef5 8a40 	vcmp.f32	s17, #0.0
 8010a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a9e:	d10a      	bne.n	8010ab6 <powf+0x9e>
 8010aa0:	eeb0 0a49 	vmov.f32	s0, s18
 8010aa4:	f000 fb81 	bl	80111aa <finitef>
 8010aa8:	b128      	cbz	r0, 8010ab6 <powf+0x9e>
 8010aaa:	eeb0 0a48 	vmov.f32	s0, s16
 8010aae:	f000 fb7c 	bl	80111aa <finitef>
 8010ab2:	2800      	cmp	r0, #0
 8010ab4:	d1d4      	bne.n	8010a60 <powf+0x48>
 8010ab6:	eeb0 0a68 	vmov.f32	s0, s17
 8010aba:	ecbd 8b04 	vpop	{d8-d9}
 8010abe:	bd08      	pop	{r3, pc}
 8010ac0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8010ac4:	e7f7      	b.n	8010ab6 <powf+0x9e>
	...

08010ac8 <sqrtf>:
 8010ac8:	b508      	push	{r3, lr}
 8010aca:	ed2d 8b02 	vpush	{d8}
 8010ace:	eeb0 8a40 	vmov.f32	s16, s0
 8010ad2:	f000 fb3d 	bl	8011150 <__ieee754_sqrtf>
 8010ad6:	eeb4 8a48 	vcmp.f32	s16, s16
 8010ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ade:	d60c      	bvs.n	8010afa <sqrtf+0x32>
 8010ae0:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010b00 <sqrtf+0x38>
 8010ae4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aec:	d505      	bpl.n	8010afa <sqrtf+0x32>
 8010aee:	f7fe fddb 	bl	800f6a8 <__errno>
 8010af2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010af6:	2321      	movs	r3, #33	; 0x21
 8010af8:	6003      	str	r3, [r0, #0]
 8010afa:	ecbd 8b02 	vpop	{d8}
 8010afe:	bd08      	pop	{r3, pc}
 8010b00:	00000000 	.word	0x00000000

08010b04 <__ieee754_log10f>:
 8010b04:	b508      	push	{r3, lr}
 8010b06:	ee10 2a10 	vmov	r2, s0
 8010b0a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8010b0e:	ed2d 8b02 	vpush	{d8}
 8010b12:	d108      	bne.n	8010b26 <__ieee754_log10f+0x22>
 8010b14:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8010b9c <__ieee754_log10f+0x98>
 8010b18:	eddf 7a21 	vldr	s15, [pc, #132]	; 8010ba0 <__ieee754_log10f+0x9c>
 8010b1c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8010b20:	ecbd 8b02 	vpop	{d8}
 8010b24:	bd08      	pop	{r3, pc}
 8010b26:	2a00      	cmp	r2, #0
 8010b28:	da02      	bge.n	8010b30 <__ieee754_log10f+0x2c>
 8010b2a:	ee30 7a40 	vsub.f32	s14, s0, s0
 8010b2e:	e7f3      	b.n	8010b18 <__ieee754_log10f+0x14>
 8010b30:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8010b34:	db02      	blt.n	8010b3c <__ieee754_log10f+0x38>
 8010b36:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010b3a:	e7f1      	b.n	8010b20 <__ieee754_log10f+0x1c>
 8010b3c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8010b40:	bfbf      	itttt	lt
 8010b42:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8010ba4 <__ieee754_log10f+0xa0>
 8010b46:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8010b4a:	f06f 0118 	mvnlt.w	r1, #24
 8010b4e:	ee17 2a90 	vmovlt	r2, s15
 8010b52:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8010b56:	bfa8      	it	ge
 8010b58:	2100      	movge	r1, #0
 8010b5a:	3b7f      	subs	r3, #127	; 0x7f
 8010b5c:	440b      	add	r3, r1
 8010b5e:	0fd9      	lsrs	r1, r3, #31
 8010b60:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8010b64:	ee07 3a90 	vmov	s15, r3
 8010b68:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8010b6c:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8010b70:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8010b74:	ee00 3a10 	vmov	s0, r3
 8010b78:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8010b7c:	f000 fb9a 	bl	80112b4 <__ieee754_logf>
 8010b80:	eddf 7a09 	vldr	s15, [pc, #36]	; 8010ba8 <__ieee754_log10f+0xa4>
 8010b84:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010b88:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010bac <__ieee754_log10f+0xa8>
 8010b8c:	eea8 0a27 	vfma.f32	s0, s16, s15
 8010b90:	eddf 7a07 	vldr	s15, [pc, #28]	; 8010bb0 <__ieee754_log10f+0xac>
 8010b94:	eea8 0a27 	vfma.f32	s0, s16, s15
 8010b98:	e7c2      	b.n	8010b20 <__ieee754_log10f+0x1c>
 8010b9a:	bf00      	nop
 8010b9c:	cc000000 	.word	0xcc000000
 8010ba0:	00000000 	.word	0x00000000
 8010ba4:	4c000000 	.word	0x4c000000
 8010ba8:	3ede5bd9 	.word	0x3ede5bd9
 8010bac:	355427db 	.word	0x355427db
 8010bb0:	3e9a2080 	.word	0x3e9a2080

08010bb4 <__ieee754_powf>:
 8010bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bb8:	ee10 4a90 	vmov	r4, s1
 8010bbc:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8010bc0:	ed2d 8b02 	vpush	{d8}
 8010bc4:	ee10 6a10 	vmov	r6, s0
 8010bc8:	eeb0 8a40 	vmov.f32	s16, s0
 8010bcc:	eef0 8a60 	vmov.f32	s17, s1
 8010bd0:	d10c      	bne.n	8010bec <__ieee754_powf+0x38>
 8010bd2:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8010bd6:	0076      	lsls	r6, r6, #1
 8010bd8:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8010bdc:	f240 8296 	bls.w	801110c <__ieee754_powf+0x558>
 8010be0:	ee38 0a28 	vadd.f32	s0, s16, s17
 8010be4:	ecbd 8b02 	vpop	{d8}
 8010be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bec:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8010bf0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8010bf4:	dcf4      	bgt.n	8010be0 <__ieee754_powf+0x2c>
 8010bf6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8010bfa:	dd08      	ble.n	8010c0e <__ieee754_powf+0x5a>
 8010bfc:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8010c00:	d1ee      	bne.n	8010be0 <__ieee754_powf+0x2c>
 8010c02:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8010c06:	0064      	lsls	r4, r4, #1
 8010c08:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8010c0c:	e7e6      	b.n	8010bdc <__ieee754_powf+0x28>
 8010c0e:	2e00      	cmp	r6, #0
 8010c10:	da20      	bge.n	8010c54 <__ieee754_powf+0xa0>
 8010c12:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8010c16:	da2d      	bge.n	8010c74 <__ieee754_powf+0xc0>
 8010c18:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8010c1c:	f2c0 827f 	blt.w	801111e <__ieee754_powf+0x56a>
 8010c20:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8010c24:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8010c28:	fa48 f703 	asr.w	r7, r8, r3
 8010c2c:	fa07 f303 	lsl.w	r3, r7, r3
 8010c30:	4543      	cmp	r3, r8
 8010c32:	f040 8274 	bne.w	801111e <__ieee754_powf+0x56a>
 8010c36:	f007 0701 	and.w	r7, r7, #1
 8010c3a:	f1c7 0702 	rsb	r7, r7, #2
 8010c3e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8010c42:	d11f      	bne.n	8010c84 <__ieee754_powf+0xd0>
 8010c44:	2c00      	cmp	r4, #0
 8010c46:	f280 8267 	bge.w	8011118 <__ieee754_powf+0x564>
 8010c4a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010c4e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8010c52:	e7c7      	b.n	8010be4 <__ieee754_powf+0x30>
 8010c54:	2700      	movs	r7, #0
 8010c56:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8010c5a:	d1f0      	bne.n	8010c3e <__ieee754_powf+0x8a>
 8010c5c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8010c60:	f000 8254 	beq.w	801110c <__ieee754_powf+0x558>
 8010c64:	dd08      	ble.n	8010c78 <__ieee754_powf+0xc4>
 8010c66:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8010f70 <__ieee754_powf+0x3bc>
 8010c6a:	2c00      	cmp	r4, #0
 8010c6c:	bfa8      	it	ge
 8010c6e:	eeb0 0a68 	vmovge.f32	s0, s17
 8010c72:	e7b7      	b.n	8010be4 <__ieee754_powf+0x30>
 8010c74:	2702      	movs	r7, #2
 8010c76:	e7ee      	b.n	8010c56 <__ieee754_powf+0xa2>
 8010c78:	2c00      	cmp	r4, #0
 8010c7a:	f280 824a 	bge.w	8011112 <__ieee754_powf+0x55e>
 8010c7e:	eeb1 0a68 	vneg.f32	s0, s17
 8010c82:	e7af      	b.n	8010be4 <__ieee754_powf+0x30>
 8010c84:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8010c88:	d102      	bne.n	8010c90 <__ieee754_powf+0xdc>
 8010c8a:	ee28 0a08 	vmul.f32	s0, s16, s16
 8010c8e:	e7a9      	b.n	8010be4 <__ieee754_powf+0x30>
 8010c90:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8010c94:	eeb0 0a48 	vmov.f32	s0, s16
 8010c98:	d107      	bne.n	8010caa <__ieee754_powf+0xf6>
 8010c9a:	2e00      	cmp	r6, #0
 8010c9c:	db05      	blt.n	8010caa <__ieee754_powf+0xf6>
 8010c9e:	ecbd 8b02 	vpop	{d8}
 8010ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ca6:	f000 ba53 	b.w	8011150 <__ieee754_sqrtf>
 8010caa:	f000 fa77 	bl	801119c <fabsf>
 8010cae:	b125      	cbz	r5, 8010cba <__ieee754_powf+0x106>
 8010cb0:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8010cb4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8010cb8:	d116      	bne.n	8010ce8 <__ieee754_powf+0x134>
 8010cba:	2c00      	cmp	r4, #0
 8010cbc:	bfbc      	itt	lt
 8010cbe:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8010cc2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8010cc6:	2e00      	cmp	r6, #0
 8010cc8:	da8c      	bge.n	8010be4 <__ieee754_powf+0x30>
 8010cca:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8010cce:	ea55 0307 	orrs.w	r3, r5, r7
 8010cd2:	d104      	bne.n	8010cde <__ieee754_powf+0x12a>
 8010cd4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010cd8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010cdc:	e782      	b.n	8010be4 <__ieee754_powf+0x30>
 8010cde:	2f01      	cmp	r7, #1
 8010ce0:	d180      	bne.n	8010be4 <__ieee754_powf+0x30>
 8010ce2:	eeb1 0a40 	vneg.f32	s0, s0
 8010ce6:	e77d      	b.n	8010be4 <__ieee754_powf+0x30>
 8010ce8:	0ff0      	lsrs	r0, r6, #31
 8010cea:	3801      	subs	r0, #1
 8010cec:	ea57 0300 	orrs.w	r3, r7, r0
 8010cf0:	d104      	bne.n	8010cfc <__ieee754_powf+0x148>
 8010cf2:	ee38 8a48 	vsub.f32	s16, s16, s16
 8010cf6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010cfa:	e773      	b.n	8010be4 <__ieee754_powf+0x30>
 8010cfc:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8010d00:	dd74      	ble.n	8010dec <__ieee754_powf+0x238>
 8010d02:	4b9c      	ldr	r3, [pc, #624]	; (8010f74 <__ieee754_powf+0x3c0>)
 8010d04:	429d      	cmp	r5, r3
 8010d06:	dc08      	bgt.n	8010d1a <__ieee754_powf+0x166>
 8010d08:	2c00      	cmp	r4, #0
 8010d0a:	da0b      	bge.n	8010d24 <__ieee754_powf+0x170>
 8010d0c:	2000      	movs	r0, #0
 8010d0e:	ecbd 8b02 	vpop	{d8}
 8010d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d16:	f000 ba3b 	b.w	8011190 <__math_oflowf>
 8010d1a:	4b97      	ldr	r3, [pc, #604]	; (8010f78 <__ieee754_powf+0x3c4>)
 8010d1c:	429d      	cmp	r5, r3
 8010d1e:	dd08      	ble.n	8010d32 <__ieee754_powf+0x17e>
 8010d20:	2c00      	cmp	r4, #0
 8010d22:	dcf3      	bgt.n	8010d0c <__ieee754_powf+0x158>
 8010d24:	2000      	movs	r0, #0
 8010d26:	ecbd 8b02 	vpop	{d8}
 8010d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d2e:	f000 ba29 	b.w	8011184 <__math_uflowf>
 8010d32:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010d36:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010d3a:	eddf 6a90 	vldr	s13, [pc, #576]	; 8010f7c <__ieee754_powf+0x3c8>
 8010d3e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8010d42:	eee0 6a67 	vfms.f32	s13, s0, s15
 8010d46:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010d4a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8010d4e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d56:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8010f80 <__ieee754_powf+0x3cc>
 8010d5a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8010d5e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8010f84 <__ieee754_powf+0x3d0>
 8010d62:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010d66:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8010f88 <__ieee754_powf+0x3d4>
 8010d6a:	eef0 6a67 	vmov.f32	s13, s15
 8010d6e:	eee0 6a07 	vfma.f32	s13, s0, s14
 8010d72:	ee16 3a90 	vmov	r3, s13
 8010d76:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010d7a:	f023 030f 	bic.w	r3, r3, #15
 8010d7e:	ee00 3a90 	vmov	s1, r3
 8010d82:	eee0 0a47 	vfms.f32	s1, s0, s14
 8010d86:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8010d8a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8010d8e:	f024 040f 	bic.w	r4, r4, #15
 8010d92:	ee07 4a10 	vmov	s14, r4
 8010d96:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8010d9a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8010d9e:	ee07 3a90 	vmov	s15, r3
 8010da2:	eee7 0a27 	vfma.f32	s1, s14, s15
 8010da6:	3f01      	subs	r7, #1
 8010da8:	ea57 0200 	orrs.w	r2, r7, r0
 8010dac:	ee07 4a10 	vmov	s14, r4
 8010db0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010db4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8010db8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8010dbc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8010dc0:	ee17 4a10 	vmov	r4, s14
 8010dc4:	bf08      	it	eq
 8010dc6:	eeb0 8a40 	vmoveq.f32	s16, s0
 8010dca:	2c00      	cmp	r4, #0
 8010dcc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010dd0:	f340 817e 	ble.w	80110d0 <__ieee754_powf+0x51c>
 8010dd4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8010dd8:	f340 80f8 	ble.w	8010fcc <__ieee754_powf+0x418>
 8010ddc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010de4:	bf4c      	ite	mi
 8010de6:	2001      	movmi	r0, #1
 8010de8:	2000      	movpl	r0, #0
 8010dea:	e790      	b.n	8010d0e <__ieee754_powf+0x15a>
 8010dec:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8010df0:	bf01      	itttt	eq
 8010df2:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8010f8c <__ieee754_powf+0x3d8>
 8010df6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8010dfa:	f06f 0217 	mvneq.w	r2, #23
 8010dfe:	ee17 5a90 	vmoveq	r5, s15
 8010e02:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8010e06:	bf18      	it	ne
 8010e08:	2200      	movne	r2, #0
 8010e0a:	3b7f      	subs	r3, #127	; 0x7f
 8010e0c:	4413      	add	r3, r2
 8010e0e:	4a60      	ldr	r2, [pc, #384]	; (8010f90 <__ieee754_powf+0x3dc>)
 8010e10:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8010e14:	4295      	cmp	r5, r2
 8010e16:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8010e1a:	dd06      	ble.n	8010e2a <__ieee754_powf+0x276>
 8010e1c:	4a5d      	ldr	r2, [pc, #372]	; (8010f94 <__ieee754_powf+0x3e0>)
 8010e1e:	4295      	cmp	r5, r2
 8010e20:	f340 80a4 	ble.w	8010f6c <__ieee754_powf+0x3b8>
 8010e24:	3301      	adds	r3, #1
 8010e26:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8010e2a:	2500      	movs	r5, #0
 8010e2c:	4a5a      	ldr	r2, [pc, #360]	; (8010f98 <__ieee754_powf+0x3e4>)
 8010e2e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8010e32:	ee07 1a90 	vmov	s15, r1
 8010e36:	ed92 7a00 	vldr	s14, [r2]
 8010e3a:	4a58      	ldr	r2, [pc, #352]	; (8010f9c <__ieee754_powf+0x3e8>)
 8010e3c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8010e40:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8010e44:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8010e48:	1049      	asrs	r1, r1, #1
 8010e4a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8010e4e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8010e52:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8010e56:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8010e5a:	ee06 1a10 	vmov	s12, r1
 8010e5e:	ee65 4a26 	vmul.f32	s9, s10, s13
 8010e62:	ee36 7a47 	vsub.f32	s14, s12, s14
 8010e66:	ee14 6a90 	vmov	r6, s9
 8010e6a:	4016      	ands	r6, r2
 8010e6c:	ee05 6a90 	vmov	s11, r6
 8010e70:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8010e74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010e78:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8010fa0 <__ieee754_powf+0x3ec>
 8010e7c:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8010e80:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8010e84:	ee25 6a26 	vmul.f32	s12, s10, s13
 8010e88:	eddf 6a46 	vldr	s13, [pc, #280]	; 8010fa4 <__ieee754_powf+0x3f0>
 8010e8c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010e90:	eddf 6a45 	vldr	s13, [pc, #276]	; 8010fa8 <__ieee754_powf+0x3f4>
 8010e94:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010e98:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8010f7c <__ieee754_powf+0x3c8>
 8010e9c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010ea0:	eddf 6a42 	vldr	s13, [pc, #264]	; 8010fac <__ieee754_powf+0x3f8>
 8010ea4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010ea8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8010fb0 <__ieee754_powf+0x3fc>
 8010eac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010eb0:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8010eb4:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8010eb8:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010ebc:	eee5 6a07 	vfma.f32	s13, s10, s14
 8010ec0:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8010ec4:	eef0 7a45 	vmov.f32	s15, s10
 8010ec8:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8010ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010ed0:	ee17 1a90 	vmov	r1, s15
 8010ed4:	4011      	ands	r1, r2
 8010ed6:	ee07 1a90 	vmov	s15, r1
 8010eda:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8010ede:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8010ee2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8010ee6:	ee27 7a24 	vmul.f32	s14, s14, s9
 8010eea:	eea6 7a27 	vfma.f32	s14, s12, s15
 8010eee:	eeb0 6a47 	vmov.f32	s12, s14
 8010ef2:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8010ef6:	ee16 1a10 	vmov	r1, s12
 8010efa:	4011      	ands	r1, r2
 8010efc:	ee06 1a90 	vmov	s13, r1
 8010f00:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8010f04:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8010fb4 <__ieee754_powf+0x400>
 8010f08:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8010fb8 <__ieee754_powf+0x404>
 8010f0c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010f10:	ee06 1a10 	vmov	s12, r1
 8010f14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010f18:	eddf 7a28 	vldr	s15, [pc, #160]	; 8010fbc <__ieee754_powf+0x408>
 8010f1c:	4928      	ldr	r1, [pc, #160]	; (8010fc0 <__ieee754_powf+0x40c>)
 8010f1e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8010f22:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8010f26:	edd1 7a00 	vldr	s15, [r1]
 8010f2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010f2e:	ee07 3a90 	vmov	s15, r3
 8010f32:	4b24      	ldr	r3, [pc, #144]	; (8010fc4 <__ieee754_powf+0x410>)
 8010f34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8010f38:	eef0 7a47 	vmov.f32	s15, s14
 8010f3c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010f40:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8010f44:	edd5 0a00 	vldr	s1, [r5]
 8010f48:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8010f4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f50:	ee17 3a90 	vmov	r3, s15
 8010f54:	4013      	ands	r3, r2
 8010f56:	ee07 3a90 	vmov	s15, r3
 8010f5a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010f5e:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8010f62:	eee6 6a65 	vfms.f32	s13, s12, s11
 8010f66:	ee77 7a66 	vsub.f32	s15, s14, s13
 8010f6a:	e70e      	b.n	8010d8a <__ieee754_powf+0x1d6>
 8010f6c:	2501      	movs	r5, #1
 8010f6e:	e75d      	b.n	8010e2c <__ieee754_powf+0x278>
 8010f70:	00000000 	.word	0x00000000
 8010f74:	3f7ffff3 	.word	0x3f7ffff3
 8010f78:	3f800007 	.word	0x3f800007
 8010f7c:	3eaaaaab 	.word	0x3eaaaaab
 8010f80:	3fb8aa3b 	.word	0x3fb8aa3b
 8010f84:	36eca570 	.word	0x36eca570
 8010f88:	3fb8aa00 	.word	0x3fb8aa00
 8010f8c:	4b800000 	.word	0x4b800000
 8010f90:	001cc471 	.word	0x001cc471
 8010f94:	005db3d6 	.word	0x005db3d6
 8010f98:	08024d6c 	.word	0x08024d6c
 8010f9c:	fffff000 	.word	0xfffff000
 8010fa0:	3e6c3255 	.word	0x3e6c3255
 8010fa4:	3e53f142 	.word	0x3e53f142
 8010fa8:	3e8ba305 	.word	0x3e8ba305
 8010fac:	3edb6db7 	.word	0x3edb6db7
 8010fb0:	3f19999a 	.word	0x3f19999a
 8010fb4:	3f76384f 	.word	0x3f76384f
 8010fb8:	3f763800 	.word	0x3f763800
 8010fbc:	369dc3a0 	.word	0x369dc3a0
 8010fc0:	08024d7c 	.word	0x08024d7c
 8010fc4:	08024d74 	.word	0x08024d74
 8010fc8:	3338aa3c 	.word	0x3338aa3c
 8010fcc:	f040 8095 	bne.w	80110fa <__ieee754_powf+0x546>
 8010fd0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8010fc8 <__ieee754_powf+0x414>
 8010fd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010fd8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8010fdc:	eef4 6ac7 	vcmpe.f32	s13, s14
 8010fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fe4:	f73f aefa 	bgt.w	8010ddc <__ieee754_powf+0x228>
 8010fe8:	15db      	asrs	r3, r3, #23
 8010fea:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8010fee:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010ff2:	4103      	asrs	r3, r0
 8010ff4:	4423      	add	r3, r4
 8010ff6:	494b      	ldr	r1, [pc, #300]	; (8011124 <__ieee754_powf+0x570>)
 8010ff8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010ffc:	3a7f      	subs	r2, #127	; 0x7f
 8010ffe:	4111      	asrs	r1, r2
 8011000:	ea23 0101 	bic.w	r1, r3, r1
 8011004:	ee07 1a10 	vmov	s14, r1
 8011008:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801100c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8011010:	f1c2 0217 	rsb	r2, r2, #23
 8011014:	4110      	asrs	r0, r2
 8011016:	2c00      	cmp	r4, #0
 8011018:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801101c:	bfb8      	it	lt
 801101e:	4240      	neglt	r0, r0
 8011020:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8011024:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8011128 <__ieee754_powf+0x574>
 8011028:	eddf 6a40 	vldr	s13, [pc, #256]	; 801112c <__ieee754_powf+0x578>
 801102c:	ee17 3a10 	vmov	r3, s14
 8011030:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8011034:	f023 030f 	bic.w	r3, r3, #15
 8011038:	ee07 3a10 	vmov	s14, r3
 801103c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011040:	ee27 0a00 	vmul.f32	s0, s14, s0
 8011044:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8011048:	eddf 7a39 	vldr	s15, [pc, #228]	; 8011130 <__ieee754_powf+0x57c>
 801104c:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8011050:	eef0 7a40 	vmov.f32	s15, s0
 8011054:	eee7 7a26 	vfma.f32	s15, s14, s13
 8011058:	eeb0 6a67 	vmov.f32	s12, s15
 801105c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8011060:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8011064:	ee30 0a46 	vsub.f32	s0, s0, s12
 8011068:	eddf 6a32 	vldr	s13, [pc, #200]	; 8011134 <__ieee754_powf+0x580>
 801106c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8011138 <__ieee754_powf+0x584>
 8011070:	eee7 6a06 	vfma.f32	s13, s14, s12
 8011074:	ed9f 6a31 	vldr	s12, [pc, #196]	; 801113c <__ieee754_powf+0x588>
 8011078:	eea6 6a87 	vfma.f32	s12, s13, s14
 801107c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8011140 <__ieee754_powf+0x58c>
 8011080:	eee6 6a07 	vfma.f32	s13, s12, s14
 8011084:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8011144 <__ieee754_powf+0x590>
 8011088:	eea6 6a87 	vfma.f32	s12, s13, s14
 801108c:	eef0 6a67 	vmov.f32	s13, s15
 8011090:	eee6 6a47 	vfms.f32	s13, s12, s14
 8011094:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011098:	ee27 6aa6 	vmul.f32	s12, s15, s13
 801109c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80110a0:	eea7 0a80 	vfma.f32	s0, s15, s0
 80110a4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80110a8:	ee37 0a40 	vsub.f32	s0, s14, s0
 80110ac:	ee70 7a67 	vsub.f32	s15, s0, s15
 80110b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80110b4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80110b8:	ee10 3a10 	vmov	r3, s0
 80110bc:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80110c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80110c4:	da1f      	bge.n	8011106 <__ieee754_powf+0x552>
 80110c6:	f000 f883 	bl	80111d0 <scalbnf>
 80110ca:	ee20 0a08 	vmul.f32	s0, s0, s16
 80110ce:	e589      	b.n	8010be4 <__ieee754_powf+0x30>
 80110d0:	4a1d      	ldr	r2, [pc, #116]	; (8011148 <__ieee754_powf+0x594>)
 80110d2:	4293      	cmp	r3, r2
 80110d4:	dd07      	ble.n	80110e6 <__ieee754_powf+0x532>
 80110d6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80110da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110de:	bf4c      	ite	mi
 80110e0:	2001      	movmi	r0, #1
 80110e2:	2000      	movpl	r0, #0
 80110e4:	e61f      	b.n	8010d26 <__ieee754_powf+0x172>
 80110e6:	d108      	bne.n	80110fa <__ieee754_powf+0x546>
 80110e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80110ec:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80110f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110f4:	f6ff af78 	blt.w	8010fe8 <__ieee754_powf+0x434>
 80110f8:	e7ed      	b.n	80110d6 <__ieee754_powf+0x522>
 80110fa:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80110fe:	f73f af73 	bgt.w	8010fe8 <__ieee754_powf+0x434>
 8011102:	2000      	movs	r0, #0
 8011104:	e78c      	b.n	8011020 <__ieee754_powf+0x46c>
 8011106:	ee00 3a10 	vmov	s0, r3
 801110a:	e7de      	b.n	80110ca <__ieee754_powf+0x516>
 801110c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011110:	e568      	b.n	8010be4 <__ieee754_powf+0x30>
 8011112:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801114c <__ieee754_powf+0x598>
 8011116:	e565      	b.n	8010be4 <__ieee754_powf+0x30>
 8011118:	eeb0 0a48 	vmov.f32	s0, s16
 801111c:	e562      	b.n	8010be4 <__ieee754_powf+0x30>
 801111e:	2700      	movs	r7, #0
 8011120:	e58d      	b.n	8010c3e <__ieee754_powf+0x8a>
 8011122:	bf00      	nop
 8011124:	007fffff 	.word	0x007fffff
 8011128:	35bfbe8c 	.word	0x35bfbe8c
 801112c:	3f317200 	.word	0x3f317200
 8011130:	3f317218 	.word	0x3f317218
 8011134:	b5ddea0e 	.word	0xb5ddea0e
 8011138:	3331bb4c 	.word	0x3331bb4c
 801113c:	388ab355 	.word	0x388ab355
 8011140:	bb360b61 	.word	0xbb360b61
 8011144:	3e2aaaab 	.word	0x3e2aaaab
 8011148:	43160000 	.word	0x43160000
 801114c:	00000000 	.word	0x00000000

08011150 <__ieee754_sqrtf>:
 8011150:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011154:	4770      	bx	lr

08011156 <with_errnof>:
 8011156:	b513      	push	{r0, r1, r4, lr}
 8011158:	4604      	mov	r4, r0
 801115a:	ed8d 0a01 	vstr	s0, [sp, #4]
 801115e:	f7fe faa3 	bl	800f6a8 <__errno>
 8011162:	ed9d 0a01 	vldr	s0, [sp, #4]
 8011166:	6004      	str	r4, [r0, #0]
 8011168:	b002      	add	sp, #8
 801116a:	bd10      	pop	{r4, pc}

0801116c <xflowf>:
 801116c:	b130      	cbz	r0, 801117c <xflowf+0x10>
 801116e:	eef1 7a40 	vneg.f32	s15, s0
 8011172:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011176:	2022      	movs	r0, #34	; 0x22
 8011178:	f7ff bfed 	b.w	8011156 <with_errnof>
 801117c:	eef0 7a40 	vmov.f32	s15, s0
 8011180:	e7f7      	b.n	8011172 <xflowf+0x6>
	...

08011184 <__math_uflowf>:
 8011184:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801118c <__math_uflowf+0x8>
 8011188:	f7ff bff0 	b.w	801116c <xflowf>
 801118c:	10000000 	.word	0x10000000

08011190 <__math_oflowf>:
 8011190:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011198 <__math_oflowf+0x8>
 8011194:	f7ff bfea 	b.w	801116c <xflowf>
 8011198:	70000000 	.word	0x70000000

0801119c <fabsf>:
 801119c:	ee10 3a10 	vmov	r3, s0
 80111a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80111a4:	ee00 3a10 	vmov	s0, r3
 80111a8:	4770      	bx	lr

080111aa <finitef>:
 80111aa:	b082      	sub	sp, #8
 80111ac:	ed8d 0a01 	vstr	s0, [sp, #4]
 80111b0:	9801      	ldr	r0, [sp, #4]
 80111b2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80111b6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80111ba:	bfac      	ite	ge
 80111bc:	2000      	movge	r0, #0
 80111be:	2001      	movlt	r0, #1
 80111c0:	b002      	add	sp, #8
 80111c2:	4770      	bx	lr

080111c4 <nanf>:
 80111c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80111cc <nanf+0x8>
 80111c8:	4770      	bx	lr
 80111ca:	bf00      	nop
 80111cc:	7fc00000 	.word	0x7fc00000

080111d0 <scalbnf>:
 80111d0:	ee10 3a10 	vmov	r3, s0
 80111d4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80111d8:	d025      	beq.n	8011226 <scalbnf+0x56>
 80111da:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80111de:	d302      	bcc.n	80111e6 <scalbnf+0x16>
 80111e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80111e4:	4770      	bx	lr
 80111e6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80111ea:	d122      	bne.n	8011232 <scalbnf+0x62>
 80111ec:	4b2a      	ldr	r3, [pc, #168]	; (8011298 <scalbnf+0xc8>)
 80111ee:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801129c <scalbnf+0xcc>
 80111f2:	4298      	cmp	r0, r3
 80111f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80111f8:	db16      	blt.n	8011228 <scalbnf+0x58>
 80111fa:	ee10 3a10 	vmov	r3, s0
 80111fe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011202:	3a19      	subs	r2, #25
 8011204:	4402      	add	r2, r0
 8011206:	2afe      	cmp	r2, #254	; 0xfe
 8011208:	dd15      	ble.n	8011236 <scalbnf+0x66>
 801120a:	ee10 3a10 	vmov	r3, s0
 801120e:	eddf 7a24 	vldr	s15, [pc, #144]	; 80112a0 <scalbnf+0xd0>
 8011212:	eddf 6a24 	vldr	s13, [pc, #144]	; 80112a4 <scalbnf+0xd4>
 8011216:	2b00      	cmp	r3, #0
 8011218:	eeb0 7a67 	vmov.f32	s14, s15
 801121c:	bfb8      	it	lt
 801121e:	eef0 7a66 	vmovlt.f32	s15, s13
 8011222:	ee27 0a27 	vmul.f32	s0, s14, s15
 8011226:	4770      	bx	lr
 8011228:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80112a8 <scalbnf+0xd8>
 801122c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011230:	4770      	bx	lr
 8011232:	0dd2      	lsrs	r2, r2, #23
 8011234:	e7e6      	b.n	8011204 <scalbnf+0x34>
 8011236:	2a00      	cmp	r2, #0
 8011238:	dd06      	ble.n	8011248 <scalbnf+0x78>
 801123a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801123e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8011242:	ee00 3a10 	vmov	s0, r3
 8011246:	4770      	bx	lr
 8011248:	f112 0f16 	cmn.w	r2, #22
 801124c:	da1a      	bge.n	8011284 <scalbnf+0xb4>
 801124e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011252:	4298      	cmp	r0, r3
 8011254:	ee10 3a10 	vmov	r3, s0
 8011258:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801125c:	dd0a      	ble.n	8011274 <scalbnf+0xa4>
 801125e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80112a0 <scalbnf+0xd0>
 8011262:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80112a4 <scalbnf+0xd4>
 8011266:	eef0 7a40 	vmov.f32	s15, s0
 801126a:	2b00      	cmp	r3, #0
 801126c:	bf18      	it	ne
 801126e:	eeb0 0a47 	vmovne.f32	s0, s14
 8011272:	e7db      	b.n	801122c <scalbnf+0x5c>
 8011274:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80112a8 <scalbnf+0xd8>
 8011278:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80112ac <scalbnf+0xdc>
 801127c:	eef0 7a40 	vmov.f32	s15, s0
 8011280:	2b00      	cmp	r3, #0
 8011282:	e7f3      	b.n	801126c <scalbnf+0x9c>
 8011284:	3219      	adds	r2, #25
 8011286:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801128a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801128e:	eddf 7a08 	vldr	s15, [pc, #32]	; 80112b0 <scalbnf+0xe0>
 8011292:	ee07 3a10 	vmov	s14, r3
 8011296:	e7c4      	b.n	8011222 <scalbnf+0x52>
 8011298:	ffff3cb0 	.word	0xffff3cb0
 801129c:	4c000000 	.word	0x4c000000
 80112a0:	7149f2ca 	.word	0x7149f2ca
 80112a4:	f149f2ca 	.word	0xf149f2ca
 80112a8:	0da24260 	.word	0x0da24260
 80112ac:	8da24260 	.word	0x8da24260
 80112b0:	33000000 	.word	0x33000000

080112b4 <__ieee754_logf>:
 80112b4:	ee10 3a10 	vmov	r3, s0
 80112b8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80112bc:	d106      	bne.n	80112cc <__ieee754_logf+0x18>
 80112be:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8011454 <__ieee754_logf+0x1a0>
 80112c2:	eddf 7a65 	vldr	s15, [pc, #404]	; 8011458 <__ieee754_logf+0x1a4>
 80112c6:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80112ca:	4770      	bx	lr
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	da02      	bge.n	80112d6 <__ieee754_logf+0x22>
 80112d0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80112d4:	e7f5      	b.n	80112c2 <__ieee754_logf+0xe>
 80112d6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80112da:	db02      	blt.n	80112e2 <__ieee754_logf+0x2e>
 80112dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80112e0:	4770      	bx	lr
 80112e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80112e6:	bfb8      	it	lt
 80112e8:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 801145c <__ieee754_logf+0x1a8>
 80112ec:	485c      	ldr	r0, [pc, #368]	; (8011460 <__ieee754_logf+0x1ac>)
 80112ee:	bfbe      	ittt	lt
 80112f0:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80112f4:	f06f 0118 	mvnlt.w	r1, #24
 80112f8:	ee17 3a90 	vmovlt	r3, s15
 80112fc:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8011300:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011304:	4418      	add	r0, r3
 8011306:	bfa8      	it	ge
 8011308:	2100      	movge	r1, #0
 801130a:	3a7f      	subs	r2, #127	; 0x7f
 801130c:	440a      	add	r2, r1
 801130e:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8011312:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8011316:	4319      	orrs	r1, r3
 8011318:	ee00 1a10 	vmov	s0, r1
 801131c:	4951      	ldr	r1, [pc, #324]	; (8011464 <__ieee754_logf+0x1b0>)
 801131e:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8011322:	f103 000f 	add.w	r0, r3, #15
 8011326:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801132a:	4001      	ands	r1, r0
 801132c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011330:	bb89      	cbnz	r1, 8011396 <__ieee754_logf+0xe2>
 8011332:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801133a:	d10f      	bne.n	801135c <__ieee754_logf+0xa8>
 801133c:	2a00      	cmp	r2, #0
 801133e:	f000 8085 	beq.w	801144c <__ieee754_logf+0x198>
 8011342:	ee07 2a90 	vmov	s15, r2
 8011346:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8011468 <__ieee754_logf+0x1b4>
 801134a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801146c <__ieee754_logf+0x1b8>
 801134e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011352:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011356:	eea7 0a87 	vfma.f32	s0, s15, s14
 801135a:	4770      	bx	lr
 801135c:	eddf 6a44 	vldr	s13, [pc, #272]	; 8011470 <__ieee754_logf+0x1bc>
 8011360:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011364:	eee0 7a66 	vfms.f32	s15, s0, s13
 8011368:	ee20 7a00 	vmul.f32	s14, s0, s0
 801136c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011370:	b912      	cbnz	r2, 8011378 <__ieee754_logf+0xc4>
 8011372:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011376:	4770      	bx	lr
 8011378:	ee07 2a90 	vmov	s15, r2
 801137c:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8011468 <__ieee754_logf+0x1b4>
 8011380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011384:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8011388:	ee37 0a40 	vsub.f32	s0, s14, s0
 801138c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 801146c <__ieee754_logf+0x1b8>
 8011390:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8011394:	4770      	bx	lr
 8011396:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801139a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801139e:	eddf 5a35 	vldr	s11, [pc, #212]	; 8011474 <__ieee754_logf+0x1c0>
 80113a2:	eddf 4a35 	vldr	s9, [pc, #212]	; 8011478 <__ieee754_logf+0x1c4>
 80113a6:	4935      	ldr	r1, [pc, #212]	; (801147c <__ieee754_logf+0x1c8>)
 80113a8:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80113ac:	4419      	add	r1, r3
 80113ae:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 80113b2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80113b6:	430b      	orrs	r3, r1
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	ee07 2a90 	vmov	s15, r2
 80113be:	ee26 5a06 	vmul.f32	s10, s12, s12
 80113c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80113c6:	ee25 7a05 	vmul.f32	s14, s10, s10
 80113ca:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8011480 <__ieee754_logf+0x1cc>
 80113ce:	eee7 7a25 	vfma.f32	s15, s14, s11
 80113d2:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8011484 <__ieee754_logf+0x1d0>
 80113d6:	eee7 5a87 	vfma.f32	s11, s15, s14
 80113da:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8011488 <__ieee754_logf+0x1d4>
 80113de:	eee7 7a24 	vfma.f32	s15, s14, s9
 80113e2:	eddf 4a2a 	vldr	s9, [pc, #168]	; 801148c <__ieee754_logf+0x1d8>
 80113e6:	eee7 4a87 	vfma.f32	s9, s15, s14
 80113ea:	eddf 7a29 	vldr	s15, [pc, #164]	; 8011490 <__ieee754_logf+0x1dc>
 80113ee:	eee4 7a87 	vfma.f32	s15, s9, s14
 80113f2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80113f6:	eee5 7a87 	vfma.f32	s15, s11, s14
 80113fa:	dd1c      	ble.n	8011436 <__ieee754_logf+0x182>
 80113fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011400:	ee20 7a07 	vmul.f32	s14, s0, s14
 8011404:	ee27 7a00 	vmul.f32	s14, s14, s0
 8011408:	ee77 7a87 	vadd.f32	s15, s15, s14
 801140c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011410:	b922      	cbnz	r2, 801141c <__ieee754_logf+0x168>
 8011412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011416:	ee30 0a67 	vsub.f32	s0, s0, s15
 801141a:	4770      	bx	lr
 801141c:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8011468 <__ieee754_logf+0x1b4>
 8011420:	eee6 7a86 	vfma.f32	s15, s13, s12
 8011424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011428:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801142c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801146c <__ieee754_logf+0x1b8>
 8011430:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8011434:	4770      	bx	lr
 8011436:	ee70 7a67 	vsub.f32	s15, s0, s15
 801143a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801143e:	2a00      	cmp	r2, #0
 8011440:	d0e9      	beq.n	8011416 <__ieee754_logf+0x162>
 8011442:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8011468 <__ieee754_logf+0x1b4>
 8011446:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801144a:	e7ed      	b.n	8011428 <__ieee754_logf+0x174>
 801144c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8011458 <__ieee754_logf+0x1a4>
 8011450:	4770      	bx	lr
 8011452:	bf00      	nop
 8011454:	cc000000 	.word	0xcc000000
 8011458:	00000000 	.word	0x00000000
 801145c:	4c000000 	.word	0x4c000000
 8011460:	004afb20 	.word	0x004afb20
 8011464:	007ffff0 	.word	0x007ffff0
 8011468:	3717f7d1 	.word	0x3717f7d1
 801146c:	3f317180 	.word	0x3f317180
 8011470:	3eaaaaab 	.word	0x3eaaaaab
 8011474:	3e1cd04f 	.word	0x3e1cd04f
 8011478:	3e178897 	.word	0x3e178897
 801147c:	ffcf5c30 	.word	0xffcf5c30
 8011480:	3e638e29 	.word	0x3e638e29
 8011484:	3ecccccd 	.word	0x3ecccccd
 8011488:	3e3a3325 	.word	0x3e3a3325
 801148c:	3e924925 	.word	0x3e924925
 8011490:	3f2aaaab 	.word	0x3f2aaaab

08011494 <_init>:
 8011494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011496:	bf00      	nop
 8011498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801149a:	bc08      	pop	{r3}
 801149c:	469e      	mov	lr, r3
 801149e:	4770      	bx	lr

080114a0 <_fini>:
 80114a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114a2:	bf00      	nop
 80114a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80114a6:	bc08      	pop	{r3}
 80114a8:	469e      	mov	lr, r3
 80114aa:	4770      	bx	lr
