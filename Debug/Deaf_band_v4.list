
Deaf_band_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db84  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  0800dd1c  0800dd1c  0001dd1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dff4  0800dff4  000224b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800dff4  0800dff4  0001dff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dffc  0800dffc  000224b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dffc  0800dffc  0001dffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e000  0800e000  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000024b8  20000000  0800e004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d08  200024b8  080104bc  000224b8  2**2
                  ALLOC
 10 ._user_heap_stack 00001800  200031c0  080104bc  000231c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000224b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d8ad  00000000  00000000  000224e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053ab  00000000  00000000  0003fd95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  00045140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001690  00000000  00000000  00046928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c90d  00000000  00000000  00047fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f4a0  00000000  00000000  000648c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1ba2  00000000  00000000  00083d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cf  00000000  00000000  00125907  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ac0  00000000  00000000  001259d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200024b8 	.word	0x200024b8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800dd04 	.word	0x0800dd04

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200024bc 	.word	0x200024bc
 80001d4:	0800dd04 	.word	0x0800dd04

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <MX_CRC_Init+0x20>)
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <MX_CRC_Init+0x24>)
 80004f4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004f6:	4805      	ldr	r0, [pc, #20]	; (800050c <MX_CRC_Init+0x20>)
 80004f8:	f007 fabd 	bl	8007a76 <HAL_CRC_Init>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000502:	f000 fb5b 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	200024d8 	.word	0x200024d8
 8000510:	40023000 	.word	0x40023000

08000514 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <HAL_CRC_MspInit+0x3c>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d10d      	bne.n	8000542 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <HAL_CRC_MspInit+0x40>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a09      	ldr	r2, [pc, #36]	; (8000554 <HAL_CRC_MspInit+0x40>)
 8000530:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b07      	ldr	r3, [pc, #28]	; (8000554 <HAL_CRC_MspInit+0x40>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40023000 	.word	0x40023000
 8000554:	40023800 	.word	0x40023800

08000558 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <MX_DMA_Init+0x3c>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a0b      	ldr	r2, [pc, #44]	; (8000594 <MX_DMA_Init+0x3c>)
 8000568:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <MX_DMA_Init+0x3c>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	2100      	movs	r1, #0
 800057e:	200e      	movs	r0, #14
 8000580:	f007 fa43 	bl	8007a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000584:	200e      	movs	r0, #14
 8000586:	f007 fa5c 	bl	8007a42 <HAL_NVIC_EnableIRQ>

}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40023800 	.word	0x40023800

08000598 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	4b31      	ldr	r3, [pc, #196]	; (8000678 <MX_GPIO_Init+0xe0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a30      	ldr	r2, [pc, #192]	; (8000678 <MX_GPIO_Init+0xe0>)
 80005b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b2e      	ldr	r3, [pc, #184]	; (8000678 <MX_GPIO_Init+0xe0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	4b2a      	ldr	r3, [pc, #168]	; (8000678 <MX_GPIO_Init+0xe0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a29      	ldr	r2, [pc, #164]	; (8000678 <MX_GPIO_Init+0xe0>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b27      	ldr	r3, [pc, #156]	; (8000678 <MX_GPIO_Init+0xe0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	4b23      	ldr	r3, [pc, #140]	; (8000678 <MX_GPIO_Init+0xe0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a22      	ldr	r2, [pc, #136]	; (8000678 <MX_GPIO_Init+0xe0>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b20      	ldr	r3, [pc, #128]	; (8000678 <MX_GPIO_Init+0xe0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED2_Pin|LED1_Pin|STBY_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000608:	481c      	ldr	r0, [pc, #112]	; (800067c <MX_GPIO_Init+0xe4>)
 800060a:	f007 febf 	bl	800838c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CONV_STD_GPIO_Port, CONV_STD_Pin, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000614:	481a      	ldr	r0, [pc, #104]	; (8000680 <MX_GPIO_Init+0xe8>)
 8000616:	f007 feb9 	bl	800838c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin|STBY_Pin;
 800061a:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800061e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	4619      	mov	r1, r3
 8000632:	4812      	ldr	r0, [pc, #72]	; (800067c <MX_GPIO_Init+0xe4>)
 8000634:	f007 fd26 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONV_STD_Pin;
 8000638:	f44f 7380 	mov.w	r3, #256	; 0x100
 800063c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063e:	2301      	movs	r3, #1
 8000640:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	2300      	movs	r3, #0
 8000648:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CONV_STD_GPIO_Port, &GPIO_InitStruct);
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	4619      	mov	r1, r3
 8000650:	480b      	ldr	r0, [pc, #44]	; (8000680 <MX_GPIO_Init+0xe8>)
 8000652:	f007 fd17 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000656:	f44f 7300 	mov.w	r3, #512	; 0x200
 800065a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	4619      	mov	r1, r3
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_GPIO_Init+0xe8>)
 800066c:	f007 fd0a 	bl	8008084 <HAL_GPIO_Init>

}
 8000670:	bf00      	nop
 8000672:	3720      	adds	r7, #32
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	40020000 	.word	0x40020000
 8000680:	40020400 	.word	0x40020400

08000684 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_I2S2_Init+0x54>)
 800068a:	4a14      	ldr	r2, [pc, #80]	; (80006dc <MX_I2S2_Init+0x58>)
 800068c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2S2_Init+0x54>)
 8000690:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000694:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_I2S2_Init+0x54>)
 8000698:	2210      	movs	r2, #16
 800069a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_I2S2_Init+0x54>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <MX_I2S2_Init+0x54>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80006a8:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_I2S2_Init+0x54>)
 80006aa:	f64a 4244 	movw	r2, #44100	; 0xac44
 80006ae:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_I2S2_Init+0x54>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_I2S2_Init+0x54>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_I2S2_Init+0x54>)
 80006be:	2200      	movs	r2, #0
 80006c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_I2S2_Init+0x54>)
 80006c4:	f007 fe7c 	bl	80083c0 <HAL_I2S_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80006ce:	f000 fa75 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200024e0 	.word	0x200024e0
 80006dc:	40003800 	.word	0x40003800

080006e0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b090      	sub	sp, #64	; 0x40
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
 8000708:	615a      	str	r2, [r3, #20]
  if(i2sHandle->Instance==SPI2)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a3f      	ldr	r2, [pc, #252]	; (800080c <HAL_I2S_MspInit+0x12c>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d177      	bne.n	8000804 <HAL_I2S_MspInit+0x124>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000714:	2301      	movs	r3, #1
 8000716:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 302;
 8000718:	f44f 7397 	mov.w	r3, #302	; 0x12e
 800071c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 800071e:	2310      	movs	r3, #16
 8000720:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000722:	2302      	movs	r3, #2
 8000724:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4618      	mov	r0, r3
 800072c:	f009 f874 	bl	8009818 <HAL_RCCEx_PeriphCLKConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8000736:	f000 fa41 	bl	8000bbc <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b34      	ldr	r3, [pc, #208]	; (8000810 <HAL_I2S_MspInit+0x130>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	4a33      	ldr	r2, [pc, #204]	; (8000810 <HAL_I2S_MspInit+0x130>)
 8000744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000748:	6413      	str	r3, [r2, #64]	; 0x40
 800074a:	4b31      	ldr	r3, [pc, #196]	; (8000810 <HAL_I2S_MspInit+0x130>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <HAL_I2S_MspInit+0x130>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a2c      	ldr	r2, [pc, #176]	; (8000810 <HAL_I2S_MspInit+0x130>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <HAL_I2S_MspInit+0x130>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 8000772:	f44f 4314 	mov.w	r3, #37888	; 0x9400
 8000776:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000784:	2305      	movs	r3, #5
 8000786:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800078c:	4619      	mov	r1, r3
 800078e:	4821      	ldr	r0, [pc, #132]	; (8000814 <HAL_I2S_MspInit+0x134>)
 8000790:	f007 fc78 	bl	8008084 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000794:	4b20      	ldr	r3, [pc, #128]	; (8000818 <HAL_I2S_MspInit+0x138>)
 8000796:	4a21      	ldr	r2, [pc, #132]	; (800081c <HAL_I2S_MspInit+0x13c>)
 8000798:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <HAL_I2S_MspInit+0x138>)
 800079c:	2200      	movs	r2, #0
 800079e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <HAL_I2S_MspInit+0x138>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <HAL_I2S_MspInit+0x138>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <HAL_I2S_MspInit+0x138>)
 80007ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007b2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <HAL_I2S_MspInit+0x138>)
 80007b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007ba:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <HAL_I2S_MspInit+0x138>)
 80007be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007c2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <HAL_I2S_MspInit+0x138>)
 80007c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007ca:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <HAL_I2S_MspInit+0x138>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <HAL_I2S_MspInit+0x138>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80007d8:	480f      	ldr	r0, [pc, #60]	; (8000818 <HAL_I2S_MspInit+0x138>)
 80007da:	f007 f969 	bl	8007ab0 <HAL_DMA_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <HAL_I2S_MspInit+0x108>
    {
      Error_Handler();
 80007e4:	f000 f9ea 	bl	8000bbc <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <HAL_I2S_MspInit+0x138>)
 80007ec:	63da      	str	r2, [r3, #60]	; 0x3c
 80007ee:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <HAL_I2S_MspInit+0x138>)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	2024      	movs	r0, #36	; 0x24
 80007fa:	f007 f906 	bl	8007a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80007fe:	2024      	movs	r0, #36	; 0x24
 8000800:	f007 f91f 	bl	8007a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000804:	bf00      	nop
 8000806:	3740      	adds	r7, #64	; 0x40
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40003800 	.word	0x40003800
 8000810:	40023800 	.word	0x40023800
 8000814:	40020400 	.word	0x40020400
 8000818:	20002528 	.word	0x20002528
 800081c:	40026058 	.word	0x40026058

08000820 <tud_cdc_available>:
{
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  return tud_cdc_n_available(0);
 8000824:	2000      	movs	r0, #0
 8000826:	f000 ffcf 	bl	80017c8 <tud_cdc_n_available>
 800082a:	4603      	mov	r3, r0
}
 800082c:	4618      	mov	r0, r3
 800082e:	bd80      	pop	{r7, pc}

08000830 <tud_cdc_read>:
{
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_read(0, buffer, bufsize);
 800083a:	683a      	ldr	r2, [r7, #0]
 800083c:	6879      	ldr	r1, [r7, #4]
 800083e:	2000      	movs	r0, #0
 8000840:	f000 ffda 	bl	80017f8 <tud_cdc_n_read>
 8000844:	4603      	mov	r3, r0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <tud_cdc_write>:
{
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
 8000856:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_write(0, buffer, bufsize);
 8000858:	683a      	ldr	r2, [r7, #0]
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	2000      	movs	r0, #0
 800085e:	f000 ffef 	bl	8001840 <tud_cdc_n_write>
 8000862:	4603      	mov	r3, r0
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <tud_cdc_write_flush>:
{
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
 8000870:	2000      	movs	r0, #0
 8000872:	f001 f811 	bl	8001898 <tud_cdc_n_write_flush>
 8000876:	4603      	mov	r3, r0
}
 8000878:	4618      	mov	r0, r3
 800087a:	bd80      	pop	{r7, pc}

0800087c <cdc_task>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void cdc_task(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b092      	sub	sp, #72	; 0x48
 8000880:	af00      	add	r7, sp, #0
     // connected and there are data available
     if ( tud_cdc_available() )
 8000882:	f7ff ffcd 	bl	8000820 <tud_cdc_available>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d00c      	beq.n	80008a6 <cdc_task+0x2a>
     {
       // read datas
       char buf[64];
       uint32_t count = tud_cdc_read(buf, sizeof(buf));
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2140      	movs	r1, #64	; 0x40
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ffcd 	bl	8000830 <tud_cdc_read>
 8000896:	6478      	str	r0, [r7, #68]	; 0x44
       (void) count;
       tud_cdc_write(buf, count);
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ffd6 	bl	800084e <tud_cdc_write>
       tud_cdc_write_flush();
 80008a2:	f7ff ffe3 	bl	800086c <tud_cdc_write_flush>
     }
}
 80008a6:	bf00      	nop
 80008a8:	3748      	adds	r7, #72	; 0x48
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b2:	f006 ff39 	bl	8007728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b6:	f000 f81f 	bl	80008f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ba:	f7ff fe6d 	bl	8000598 <MX_GPIO_Init>
  MX_DMA_Init();
 80008be:	f7ff fe4b 	bl	8000558 <MX_DMA_Init>
  MX_I2S2_Init();
 80008c2:	f7ff fedf 	bl	8000684 <MX_I2S2_Init>
  MX_CRC_Init();
 80008c6:	f7ff fe11 	bl	80004ec <MX_CRC_Init>
  MX_PDM2PCM_Init();
 80008ca:	f00a f93b 	bl	800ab44 <MX_PDM2PCM_Init>
  MX_TIM2_Init();
 80008ce:	f000 fbb3 	bl	8001038 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008d2:	f000 fc31 	bl	8001138 <MX_TIM3_Init>
  MX_TIM4_Init();
 80008d6:	f000 fcaf 	bl	8001238 <MX_TIM4_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008da:	f000 fe87 	bl	80015ec <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  tusb_init();
 80008de:	f006 fdd5 	bl	800748c <tusb_init>

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void)
{
  tud_task_ext(UINT32_MAX, false);
 80008e2:	2100      	movs	r1, #0
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295
 80008e8:	f003 fe98 	bl	800461c <tud_task_ext>
}
 80008ec:	bf00      	nop
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	  }
*/

	  tud_task();
	  cdc_task();
 80008ee:	f7ff ffc5 	bl	800087c <cdc_task>
	  led_blinking_task();
 80008f2:	f000 f933 	bl	8000b5c <led_blinking_task>
	  tud_task();
 80008f6:	e7f4      	b.n	80008e2 <main+0x34>

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b094      	sub	sp, #80	; 0x50
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 0320 	add.w	r3, r7, #32
 8000902:	2230      	movs	r2, #48	; 0x30
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f00c f8a2 	bl	800ca50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <SystemClock_Config+0xc8>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	4a26      	ldr	r2, [pc, #152]	; (80009c0 <SystemClock_Config+0xc8>)
 8000926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092a:	6413      	str	r3, [r2, #64]	; 0x40
 800092c:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <SystemClock_Config+0xc8>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <SystemClock_Config+0xcc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a20      	ldr	r2, [pc, #128]	; (80009c4 <SystemClock_Config+0xcc>)
 8000942:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000946:	6013      	str	r3, [r2, #0]
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <SystemClock_Config+0xcc>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000954:	2301      	movs	r3, #1
 8000956:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000958:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095e:	2302      	movs	r3, #2
 8000960:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000962:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000968:	2308      	movs	r3, #8
 800096a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800096c:	2360      	movs	r3, #96	; 0x60
 800096e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000970:	2302      	movs	r3, #2
 8000972:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000974:	2304      	movs	r3, #4
 8000976:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000978:	f107 0320 	add.w	r3, r7, #32
 800097c:	4618      	mov	r0, r3
 800097e:	f008 fae9 	bl	8008f54 <HAL_RCC_OscConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000988:	f000 f918 	bl	8000bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098c:	230f      	movs	r3, #15
 800098e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000990:	2302      	movs	r3, #2
 8000992:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	2101      	movs	r1, #1
 80009a8:	4618      	mov	r0, r3
 80009aa:	f008 fd4b 	bl	8009444 <HAL_RCC_ClockConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009b4:	f000 f902 	bl	8000bbc <Error_Handler>
  }
}
 80009b8:	bf00      	nop
 80009ba:	3750      	adds	r7, #80	; 0x50
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40007000 	.word	0x40007000

080009c8 <tud_mount_cb>:

/* USER CODE BEGIN 4 */
// Invoked when device is mounted
void tud_mount_cb(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  blink_interval_ms = BLINK_MOUNTED;
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <tud_mount_cb+0x18>)
 80009ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009d2:	601a      	str	r2, [r3, #0]
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000408 	.word	0x20000408

080009e4 <tud_umount_cb>:

// Invoked when device is unmounted
void tud_umount_cb(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  blink_interval_ms = BLINK_NOT_MOUNTED;
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <tud_umount_cb+0x14>)
 80009ea:	22fa      	movs	r2, #250	; 0xfa
 80009ec:	601a      	str	r2, [r3, #0]
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	20000408 	.word	0x20000408

080009fc <tud_suspend_cb>:

// Invoked when usb bus is suspended
// remote_wakeup_en : if host allow us  to perform remote wakeup
// Within 7ms, device must draw an average of current less than 2.5 mA from bus
void tud_suspend_cb(bool remote_wakeup_en)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
  blink_interval_ms = BLINK_SUSPENDED;
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <tud_suspend_cb+0x20>)
 8000a08:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000a0c:	601a      	str	r2, [r3, #0]
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	20000408 	.word	0x20000408

08000a20 <tud_resume_cb>:

// Invoked when usb bus is resumed
void tud_resume_cb(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  blink_interval_ms = BLINK_MOUNTED;
 8000a24:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <tud_resume_cb+0x18>)
 8000a26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a2a:	601a      	str	r2, [r3, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000408 	.word	0x20000408

08000a3c <tud_dfu_get_timeout_cb>:

// Invoked right before tud_dfu_download_cb() (state=DFU_DNBUSY) or tud_dfu_manifest_cb() (state=DFU_MANIFEST)
// Application return timeout in milliseconds (bwPollTimeout) for the next download/manifest operation.
// During this period, USB host won't try to communicate with us.
uint32_t tud_dfu_get_timeout_cb(uint8_t alt, uint8_t state)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	460a      	mov	r2, r1
 8000a46:	71fb      	strb	r3, [r7, #7]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	71bb      	strb	r3, [r7, #6]
  if ( state == DFU_DNBUSY )
 8000a4c:	79bb      	ldrb	r3, [r7, #6]
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	d106      	bne.n	8000a60 <tud_dfu_get_timeout_cb+0x24>
  {
    // For this example
    // - Atl0 Flash is fast : 1   ms
    // - Alt1 EEPROM is slow: 100 ms
    return (alt == 0) ? 1 : 100;
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d101      	bne.n	8000a5c <tud_dfu_get_timeout_cb+0x20>
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e007      	b.n	8000a6c <tud_dfu_get_timeout_cb+0x30>
 8000a5c:	2364      	movs	r3, #100	; 0x64
 8000a5e:	e005      	b.n	8000a6c <tud_dfu_get_timeout_cb+0x30>
  }
  else if (state == DFU_MANIFEST)
 8000a60:	79bb      	ldrb	r3, [r7, #6]
 8000a62:	2b07      	cmp	r3, #7
 8000a64:	d101      	bne.n	8000a6a <tud_dfu_get_timeout_cb+0x2e>
  {
    // since we don't buffer entire image and do any flashing in manifest stage
    return 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	e000      	b.n	8000a6c <tud_dfu_get_timeout_cb+0x30>
  }

  return 0;
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <tud_dfu_download_cb>:

// Invoked when received DFU_DNLOAD (wLength>0) following by DFU_GETSTATUS (state=DFU_DNBUSY) requests
// This callback could be returned before flashing op is complete (async).
// Once finished flashing, application must call tud_dfu_finish_flashing()
void tud_dfu_download_cb(uint8_t alt, uint16_t block_num, uint8_t const* data, uint16_t length)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60ba      	str	r2, [r7, #8]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4603      	mov	r3, r0
 8000a84:	73fb      	strb	r3, [r7, #15]
 8000a86:	460b      	mov	r3, r1
 8000a88:	81bb      	strh	r3, [r7, #12]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	80fb      	strh	r3, [r7, #6]
  (void) alt;
  (void) block_num;

  //printf("\r\nReceived Alt %u BlockNum %u of length %u\r\n", alt, wBlockNum, length);

  for(uint16_t i=0; i<length; i++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	82fb      	strh	r3, [r7, #22]
 8000a92:	e009      	b.n	8000aa8 <tud_dfu_download_cb+0x30>
  {
    printf("%c", data[i]);
 8000a94:	8afb      	ldrh	r3, [r7, #22]
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	4413      	add	r3, r2
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f00b ffdf 	bl	800ca60 <putchar>
  for(uint16_t i=0; i<length; i++)
 8000aa2:	8afb      	ldrh	r3, [r7, #22]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	82fb      	strh	r3, [r7, #22]
 8000aa8:	8afa      	ldrh	r2, [r7, #22]
 8000aaa:	88fb      	ldrh	r3, [r7, #6]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d3f1      	bcc.n	8000a94 <tud_dfu_download_cb+0x1c>
  }

  // flashing op for download complete without error
  tud_dfu_finish_flashing(DFU_STATUS_OK);
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f001 fcd3 	bl	800245c <tud_dfu_finish_flashing>
}
 8000ab6:	bf00      	nop
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <tud_dfu_manifest_cb>:

// Invoked when download process is complete, received DFU_DNLOAD (wLength=0) following by DFU_GETSTATUS (state=Manifest)
// Application can do checksum, or actual flashing if buffered entire image previously.
// Once finished flashing, application must call tud_dfu_finish_flashing()
void tud_dfu_manifest_cb(uint8_t alt)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  (void) alt;
  printf("Download completed, enter manifestation\r\n");
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <tud_dfu_manifest_cb+0x20>)
 8000acc:	f00c f84c 	bl	800cb68 <puts>

  // flashing op for manifest is complete without error
  // Application can perform checksum, should it fail, use appropriate status such as errVERIFY.
  tud_dfu_finish_flashing(DFU_STATUS_OK);
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f001 fcc3 	bl	800245c <tud_dfu_finish_flashing>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	0800dd74 	.word	0x0800dd74

08000ae4 <tud_dfu_upload_cb>:

// Invoked when received DFU_UPLOAD request
// Application must populate data with up to length bytes and
// Return the number of written bytes
uint16_t tud_dfu_upload_cb(uint8_t alt, uint16_t block_num, uint8_t* data, uint16_t length)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60ba      	str	r2, [r7, #8]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4603      	mov	r3, r0
 8000af0:	73fb      	strb	r3, [r7, #15]
 8000af2:	460b      	mov	r3, r1
 8000af4:	81bb      	strh	r3, [r7, #12]
 8000af6:	4613      	mov	r3, r2
 8000af8:	80fb      	strh	r3, [r7, #6]
  (void) block_num;
  (void) length;

  uint16_t const xfer_len = (uint16_t) strlen(upload_image[alt]);
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <tud_dfu_upload_cb+0x44>)
 8000afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fb68 	bl	80001d8 <strlen>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	82fb      	strh	r3, [r7, #22]
  memcpy(data, upload_image[alt], xfer_len);
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <tud_dfu_upload_cb+0x44>)
 8000b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b14:	8afa      	ldrh	r2, [r7, #22]
 8000b16:	4619      	mov	r1, r3
 8000b18:	68b8      	ldr	r0, [r7, #8]
 8000b1a:	f00b ff71 	bl	800ca00 <memcpy>

  return xfer_len;
 8000b1e:	8afb      	ldrh	r3, [r7, #22]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000400 	.word	0x20000400

08000b2c <tud_dfu_abort_cb>:

// Invoked when the Host has terminated a download or upload transfer
void tud_dfu_abort_cb(uint8_t alt)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
  (void) alt;
  printf("Host aborted transfer\r\n");
 8000b36:	4803      	ldr	r0, [pc, #12]	; (8000b44 <tud_dfu_abort_cb+0x18>)
 8000b38:	f00c f816 	bl	800cb68 <puts>
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	0800dda0 	.word	0x0800dda0

08000b48 <tud_dfu_detach_cb>:

// Invoked when a DFU_DETACH request is received
void tud_dfu_detach_cb(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  printf("Host detach, we should probably reboot\r\n");
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <tud_dfu_detach_cb+0x10>)
 8000b4e:	f00c f80b 	bl	800cb68 <puts>
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	0800ddb8 	.word	0x0800ddb8

08000b5c <led_blinking_task>:
//--------------------------------------------------------------------+
// BLINKING TASK + Indicator pulse
//--------------------------------------------------------------------+

void led_blinking_task(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  static uint32_t start_ms = 0;
  static bool led_state = false;

  // Blink every interval ms
  if ( HAL_GetTick() - start_ms < blink_interval_ms) return; // not enough time
 8000b60:	f006 fe48 	bl	80077f4 <HAL_GetTick>
 8000b64:	4602      	mov	r2, r0
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <led_blinking_task+0x50>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	1ad2      	subs	r2, r2, r3
 8000b6c:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <led_blinking_task+0x54>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d319      	bcc.n	8000ba8 <led_blinking_task+0x4c>
  start_ms += blink_interval_ms;
 8000b74:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <led_blinking_task+0x50>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <led_blinking_task+0x54>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4a0b      	ldr	r2, [pc, #44]	; (8000bac <led_blinking_task+0x50>)
 8000b80:	6013      	str	r3, [r2, #0]
HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, led_state);
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <led_blinking_task+0x58>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	461a      	mov	r2, r3
 8000b88:	2110      	movs	r1, #16
 8000b8a:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <led_blinking_task+0x5c>)
 8000b8c:	f007 fbfe 	bl	800838c <HAL_GPIO_WritePin>
  //board_led_write(led_state);
  led_state = 1 - led_state; // toggle
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <led_blinking_task+0x58>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	f1c3 0301 	rsb	r3, r3, #1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	bf14      	ite	ne
 8000b9c:	2301      	movne	r3, #1
 8000b9e:	2300      	moveq	r3, #0
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <led_blinking_task+0x58>)
 8000ba4:	701a      	strb	r2, [r3, #0]
 8000ba6:	e000      	b.n	8000baa <led_blinking_task+0x4e>
  if ( HAL_GetTick() - start_ms < blink_interval_ms) return; // not enough time
 8000ba8:	bf00      	nop
}
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20002588 	.word	0x20002588
 8000bb0:	20000408 	.word	0x20000408
 8000bb4:	2000258c 	.word	0x2000258c
 8000bb8:	40020000 	.word	0x40020000

08000bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i
}
 8000bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <Error_Handler+0x8>
	...

08000bc8 <tud_msc_inquiry_cb>:
};

// Invoked when received SCSI_CMD_INQUIRY
// Application fill vendor id, product id and revision with string up to 8, 16, 4 characters respectively
void tud_msc_inquiry_cb(uint8_t lun, uint8_t vendor_id[8], uint8_t product_id[16], uint8_t product_rev[4])
{
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b08d      	sub	sp, #52	; 0x34
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	73fb      	strb	r3, [r7, #15]
  (void) lun;

  const char vid[] = "TinyUSB";
 8000bd8:	4a1b      	ldr	r2, [pc, #108]	; (8000c48 <tud_msc_inquiry_cb+0x80>)
 8000bda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000be2:	e883 0003 	stmia.w	r3, {r0, r1}
  const char pid[] = "Mass Storage";
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <tud_msc_inquiry_cb+0x84>)
 8000be8:	f107 0418 	add.w	r4, r7, #24
 8000bec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bee:	c407      	stmia	r4!, {r0, r1, r2}
 8000bf0:	7023      	strb	r3, [r4, #0]
  const char rev[] = "1.0";
 8000bf2:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <tud_msc_inquiry_cb+0x88>)
 8000bf4:	617b      	str	r3, [r7, #20]

  memcpy(vendor_id  , vid, strlen(vid));
 8000bf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff faec 	bl	80001d8 <strlen>
 8000c00:	4602      	mov	r2, r0
 8000c02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c06:	4619      	mov	r1, r3
 8000c08:	68b8      	ldr	r0, [r7, #8]
 8000c0a:	f00b fef9 	bl	800ca00 <memcpy>
  memcpy(product_id , pid, strlen(pid));
 8000c0e:	f107 0318 	add.w	r3, r7, #24
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fae0 	bl	80001d8 <strlen>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	f107 0318 	add.w	r3, r7, #24
 8000c1e:	4619      	mov	r1, r3
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f00b feed 	bl	800ca00 <memcpy>
  memcpy(product_rev, rev, strlen(rev));
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fad4 	bl	80001d8 <strlen>
 8000c30:	4602      	mov	r2, r0
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	6838      	ldr	r0, [r7, #0]
 8000c3a:	f00b fee1 	bl	800ca00 <memcpy>
}
 8000c3e:	bf00      	nop
 8000c40:	3734      	adds	r7, #52	; 0x34
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd90      	pop	{r4, r7, pc}
 8000c46:	bf00      	nop
 8000c48:	0800dde0 	.word	0x0800dde0
 8000c4c:	0800dde8 	.word	0x0800dde8
 8000c50:	00302e31 	.word	0x00302e31

08000c54 <tud_msc_test_unit_ready_cb>:

// Invoked when received Test Unit Ready command.
// return true allowing host to read/write this LUN e.g SD card inserted
bool tud_msc_test_unit_ready_cb(uint8_t lun)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  (void) lun;

  // RAM disk is ready until ejected
  if (ejected) {
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <tud_msc_test_unit_ready_cb+0x2c>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d007      	beq.n	8000c76 <tud_msc_test_unit_ready_cb+0x22>
    // Additional Sense 3A-00 is NOT_FOUND
    tud_msc_set_sense(lun, SCSI_SENSE_NOT_READY, 0x3a, 0x00);
 8000c66:	79f8      	ldrb	r0, [r7, #7]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	223a      	movs	r2, #58	; 0x3a
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	f001 fe0b 	bl	8002888 <tud_msc_set_sense>
    return false;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e000      	b.n	8000c78 <tud_msc_test_unit_ready_cb+0x24>
  }

  return true;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	2000258d 	.word	0x2000258d

08000c84 <tud_msc_capacity_cb>:

// Invoked when received SCSI_CMD_READ_CAPACITY_10 and SCSI_CMD_READ_FORMAT_CAPACITY to determine the disk size
// Application update block count and block size
void tud_msc_capacity_cb(uint8_t lun, uint32_t* block_count, uint16_t* block_size)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
 8000c90:	73fb      	strb	r3, [r7, #15]
  (void) lun;

  *block_count = DISK_BLOCK_NUM;
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	2210      	movs	r2, #16
 8000c96:	601a      	str	r2, [r3, #0]
  *block_size  = DISK_BLOCK_SIZE;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c9e:	801a      	strh	r2, [r3, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <tud_msc_start_stop_cb>:

// Invoked when received Start Stop Unit command
// - Start = 0 : stopped power mode, if load_eject = 1 : unload disk storage
// - Start = 1 : active mode, if load_eject = 1 : load disk storage
bool tud_msc_start_stop_cb(uint8_t lun, uint8_t power_condition, bool start, bool load_eject)
{
 8000cac:	b490      	push	{r4, r7}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	4608      	mov	r0, r1
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4623      	mov	r3, r4
 8000cbc:	71fb      	strb	r3, [r7, #7]
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71bb      	strb	r3, [r7, #6]
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	717b      	strb	r3, [r7, #5]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	713b      	strb	r3, [r7, #4]
  (void) lun;
  (void) power_condition;

  if ( load_eject )
 8000cca:	793b      	ldrb	r3, [r7, #4]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d005      	beq.n	8000cdc <tud_msc_start_stop_cb+0x30>
  {
    if (start)
 8000cd0:	797b      	ldrb	r3, [r7, #5]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d102      	bne.n	8000cdc <tud_msc_start_stop_cb+0x30>
    {
      // load disk storage
    }else
    {
      // unload disk storage
      ejected = true;
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <tud_msc_start_stop_cb+0x3c>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	701a      	strb	r2, [r3, #0]
    }
  }

  return true;
 8000cdc:	2301      	movs	r3, #1
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc90      	pop	{r4, r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	2000258d 	.word	0x2000258d

08000cec <tud_msc_read10_cb>:

// Callback invoked when received READ10 command.
// Copy disk's data to buffer (up to bufsize) and return number of copied bytes.
int32_t tud_msc_read10_cb(uint8_t lun, uint32_t lba, uint32_t offset, void* buffer, uint32_t bufsize)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	73fb      	strb	r3, [r7, #15]
  (void) lun;

  // out of ramdisk
  if ( lba >= DISK_BLOCK_NUM ) return -1;
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	2b0f      	cmp	r3, #15
 8000d00:	d902      	bls.n	8000d08 <tud_msc_read10_cb+0x1c>
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
 8000d06:	e00c      	b.n	8000d22 <tud_msc_read10_cb+0x36>

  uint8_t const* addr = msc_disk[lba] + offset;
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	025b      	lsls	r3, r3, #9
 8000d0c:	4a07      	ldr	r2, [pc, #28]	; (8000d2c <tud_msc_read10_cb+0x40>)
 8000d0e:	441a      	add	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4413      	add	r3, r2
 8000d14:	617b      	str	r3, [r7, #20]
  memcpy(buffer, addr, bufsize);
 8000d16:	6a3a      	ldr	r2, [r7, #32]
 8000d18:	6979      	ldr	r1, [r7, #20]
 8000d1a:	6838      	ldr	r0, [r7, #0]
 8000d1c:	f00b fe70 	bl	800ca00 <memcpy>

  return (int32_t) bufsize;
 8000d20:	6a3b      	ldr	r3, [r7, #32]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	2000040c 	.word	0x2000040c

08000d30 <tud_msc_is_writable_cb>:

bool tud_msc_is_writable_cb (uint8_t lun)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
  (void) lun;

#ifdef CFG_EXAMPLE_MSC_READONLY
  return false;
#else
  return true;
 8000d3a:	2301      	movs	r3, #1
#endif
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <tud_msc_write10_cb>:

// Callback invoked when received WRITE10 command.
// Process data in buffer to disk's storage and return number of written bytes
int32_t tud_msc_write10_cb(uint8_t lun, uint32_t lba, uint32_t offset, uint8_t* buffer, uint32_t bufsize)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	4603      	mov	r3, r0
 8000d56:	73fb      	strb	r3, [r7, #15]
  (void) lun;

  // out of ramdisk
  if ( lba >= DISK_BLOCK_NUM ) return -1;
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	2b0f      	cmp	r3, #15
 8000d5c:	d902      	bls.n	8000d64 <tud_msc_write10_cb+0x1c>
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	e00c      	b.n	8000d7e <tud_msc_write10_cb+0x36>

#ifndef CFG_EXAMPLE_MSC_READONLY
  uint8_t* addr = msc_disk[lba] + offset;
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	025b      	lsls	r3, r3, #9
 8000d68:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <tud_msc_write10_cb+0x40>)
 8000d6a:	441a      	add	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4413      	add	r3, r2
 8000d70:	617b      	str	r3, [r7, #20]
  memcpy(addr, buffer, bufsize);
 8000d72:	6a3a      	ldr	r2, [r7, #32]
 8000d74:	6839      	ldr	r1, [r7, #0]
 8000d76:	6978      	ldr	r0, [r7, #20]
 8000d78:	f00b fe42 	bl	800ca00 <memcpy>
#else
  (void) lba; (void) offset; (void) buffer;
#endif

  return (int32_t) bufsize;
 8000d7c:	6a3b      	ldr	r3, [r7, #32]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2000040c 	.word	0x2000040c

08000d8c <tud_msc_scsi_cb>:

// Callback invoked when received an SCSI command not in built-in list below
// - READ_CAPACITY10, READ_FORMAT_CAPACITY, INQUIRY, MODE_SENSE6, REQUEST_SENSE
// - READ10 and WRITE10 has their own callbacks
int32_t tud_msc_scsi_cb (uint8_t lun, uint8_t const scsi_cmd[16], void* buffer, uint16_t bufsize)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	461a      	mov	r2, r3
 8000d98:	4603      	mov	r3, r0
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	81bb      	strh	r3, [r7, #12]
  // read10 & write10 has their own callback and MUST not be handled here

  void const* response = NULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61bb      	str	r3, [r7, #24]
  int32_t resplen = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]

  // most scsi handled is input
  bool in_xfer = true;
 8000da8:	2301      	movs	r3, #1
 8000daa:	75fb      	strb	r3, [r7, #23]

  switch (scsi_cmd[0])
  {
    default:
      // Set Sense = Invalid Command Operation
      tud_msc_set_sense(lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 8000dac:	7bf8      	ldrb	r0, [r7, #15]
 8000dae:	2300      	movs	r3, #0
 8000db0:	2220      	movs	r2, #32
 8000db2:	2105      	movs	r1, #5
 8000db4:	f001 fd68 	bl	8002888 <tud_msc_set_sense>

      // negative means error -> tinyusb could stall and/or response with failed status
      resplen = -1;
 8000db8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbc:	61fb      	str	r3, [r7, #28]
    break;
 8000dbe:	bf00      	nop
  }

  // return resplen must not larger than bufsize
  if ( resplen > bufsize ) resplen = bufsize;
 8000dc0:	89bb      	ldrh	r3, [r7, #12]
 8000dc2:	69fa      	ldr	r2, [r7, #28]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	dd01      	ble.n	8000dcc <tud_msc_scsi_cb+0x40>
 8000dc8:	89bb      	ldrh	r3, [r7, #12]
 8000dca:	61fb      	str	r3, [r7, #28]

  if ( response && (resplen > 0) )
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d00b      	beq.n	8000dea <tud_msc_scsi_cb+0x5e>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	dd08      	ble.n	8000dea <tud_msc_scsi_cb+0x5e>
  {
    if(in_xfer)
 8000dd8:	7dfb      	ldrb	r3, [r7, #23]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d005      	beq.n	8000dea <tud_msc_scsi_cb+0x5e>
    {
      memcpy(buffer, response, (size_t) resplen);
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	461a      	mov	r2, r3
 8000de2:	69b9      	ldr	r1, [r7, #24]
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f00b fe0b 	bl	800ca00 <memcpy>
    {
      // SCSI output
    }
  }

  return (int32_t) resplen;
 8000dea:	69fb      	ldr	r3, [r7, #28]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3720      	adds	r7, #32
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800

08000e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <NMI_Handler+0x4>

08000e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <HardFault_Handler+0x4>

08000e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <MemManage_Handler+0x4>

08000e56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <BusFault_Handler+0x4>

08000e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <UsageFault_Handler+0x4>

08000e62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e90:	f006 fc9c 	bl	80077cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000e9c:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <DMA1_Stream3_IRQHandler+0x10>)
 8000e9e:	f006 feb5 	bl	8007c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20002528 	.word	0x20002528

08000eac <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <SPI2_IRQHandler+0x10>)
 8000eb2:	f007 fbc5 	bl	8008640 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200024e0 	.word	0x200024e0

08000ec0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
    tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f006 f993 	bl	80071f0 <dcd_int_handler>
    return;
 8000eca:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	60f8      	str	r0, [r7, #12]
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	e00a      	b.n	8000ef6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ee0:	f3af 8000 	nop.w
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	1c5a      	adds	r2, r3, #1
 8000eea:	60ba      	str	r2, [r7, #8]
 8000eec:	b2ca      	uxtb	r2, r1
 8000eee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	dbf0      	blt.n	8000ee0 <_read+0x12>
	}

return len;
 8000efe:	687b      	ldr	r3, [r7, #4]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	e009      	b.n	8000f2e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1c5a      	adds	r2, r3, #1
 8000f1e:	60ba      	str	r2, [r7, #8]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	dbf1      	blt.n	8000f1a <_write+0x12>
	}
	return len;
 8000f36:	687b      	ldr	r3, [r7, #4]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <_close>:

int _close(int file)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	return -1;
 8000f48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f68:	605a      	str	r2, [r3, #4]
	return 0;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <_isatty>:

int _isatty(int file)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	return 1;
 8000f80:	2301      	movs	r3, #1
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b085      	sub	sp, #20
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	60f8      	str	r0, [r7, #12]
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
	return 0;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb0:	4a14      	ldr	r2, [pc, #80]	; (8001004 <_sbrk+0x5c>)
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <_sbrk+0x60>)
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d102      	bne.n	8000fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <_sbrk+0x64>)
 8000fc6:	4a12      	ldr	r2, [pc, #72]	; (8001010 <_sbrk+0x68>)
 8000fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d207      	bcs.n	8000fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd8:	f00b fce8 	bl	800c9ac <__errno>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	220c      	movs	r2, #12
 8000fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	e009      	b.n	8000ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a05      	ldr	r2, [pc, #20]	; (800100c <_sbrk+0x64>)
 8000ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20020000 	.word	0x20020000
 8001008:	00000400 	.word	0x00000400
 800100c:	20002590 	.word	0x20002590
 8001010:	200031c0 	.word	0x200031c0

08001014 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <SystemInit+0x20>)
 800101a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <SystemInit+0x20>)
 8001020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001024:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08e      	sub	sp, #56	; 0x38
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800103e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800104c:	f107 0320 	add.w	r3, r7, #32
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
 8001064:	615a      	str	r2, [r3, #20]
 8001066:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001068:	4b32      	ldr	r3, [pc, #200]	; (8001134 <MX_TIM2_Init+0xfc>)
 800106a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800106e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 23;
 8001070:	4b30      	ldr	r3, [pc, #192]	; (8001134 <MX_TIM2_Init+0xfc>)
 8001072:	2217      	movs	r2, #23
 8001074:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001076:	4b2f      	ldr	r3, [pc, #188]	; (8001134 <MX_TIM2_Init+0xfc>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800107c:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <MX_TIM2_Init+0xfc>)
 800107e:	2263      	movs	r2, #99	; 0x63
 8001080:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001082:	4b2c      	ldr	r3, [pc, #176]	; (8001134 <MX_TIM2_Init+0xfc>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001088:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <MX_TIM2_Init+0xfc>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800108e:	4829      	ldr	r0, [pc, #164]	; (8001134 <MX_TIM2_Init+0xfc>)
 8001090:	f008 fd10 	bl	8009ab4 <HAL_TIM_Base_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800109a:	f7ff fd8f 	bl	8000bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800109e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010a8:	4619      	mov	r1, r3
 80010aa:	4822      	ldr	r0, [pc, #136]	; (8001134 <MX_TIM2_Init+0xfc>)
 80010ac:	f008 fe6c 	bl	8009d88 <HAL_TIM_ConfigClockSource>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80010b6:	f7ff fd81 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010ba:	481e      	ldr	r0, [pc, #120]	; (8001134 <MX_TIM2_Init+0xfc>)
 80010bc:	f008 fd49 	bl	8009b52 <HAL_TIM_PWM_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80010c6:	f7ff fd79 	bl	8000bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ca:	2300      	movs	r3, #0
 80010cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d2:	f107 0320 	add.w	r3, r7, #32
 80010d6:	4619      	mov	r1, r3
 80010d8:	4816      	ldr	r0, [pc, #88]	; (8001134 <MX_TIM2_Init+0xfc>)
 80010da:	f009 f9c3 	bl	800a464 <HAL_TIMEx_MasterConfigSynchronization>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80010e4:	f7ff fd6a 	bl	8000bbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010e8:	2360      	movs	r3, #96	; 0x60
 80010ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2200      	movs	r2, #0
 80010fc:	4619      	mov	r1, r3
 80010fe:	480d      	ldr	r0, [pc, #52]	; (8001134 <MX_TIM2_Init+0xfc>)
 8001100:	f008 fd80 	bl	8009c04 <HAL_TIM_PWM_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800110a:	f7ff fd57 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	2204      	movs	r2, #4
 8001112:	4619      	mov	r1, r3
 8001114:	4807      	ldr	r0, [pc, #28]	; (8001134 <MX_TIM2_Init+0xfc>)
 8001116:	f008 fd75 	bl	8009c04 <HAL_TIM_PWM_ConfigChannel>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8001120:	f7ff fd4c 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001124:	4803      	ldr	r0, [pc, #12]	; (8001134 <MX_TIM2_Init+0xfc>)
 8001126:	f000 f953 	bl	80013d0 <HAL_TIM_MspPostInit>

}
 800112a:	bf00      	nop
 800112c:	3738      	adds	r7, #56	; 0x38
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20002594 	.word	0x20002594

08001138 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08e      	sub	sp, #56	; 0x38
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114c:	f107 0320 	add.w	r3, r7, #32
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
 8001164:	615a      	str	r2, [r3, #20]
 8001166:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001168:	4b31      	ldr	r3, [pc, #196]	; (8001230 <MX_TIM3_Init+0xf8>)
 800116a:	4a32      	ldr	r2, [pc, #200]	; (8001234 <MX_TIM3_Init+0xfc>)
 800116c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 800116e:	4b30      	ldr	r3, [pc, #192]	; (8001230 <MX_TIM3_Init+0xf8>)
 8001170:	2217      	movs	r2, #23
 8001172:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001174:	4b2e      	ldr	r3, [pc, #184]	; (8001230 <MX_TIM3_Init+0xf8>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800117a:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <MX_TIM3_Init+0xf8>)
 800117c:	2263      	movs	r2, #99	; 0x63
 800117e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001180:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <MX_TIM3_Init+0xf8>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001186:	4b2a      	ldr	r3, [pc, #168]	; (8001230 <MX_TIM3_Init+0xf8>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800118c:	4828      	ldr	r0, [pc, #160]	; (8001230 <MX_TIM3_Init+0xf8>)
 800118e:	f008 fc91 	bl	8009ab4 <HAL_TIM_Base_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001198:	f7ff fd10 	bl	8000bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a6:	4619      	mov	r1, r3
 80011a8:	4821      	ldr	r0, [pc, #132]	; (8001230 <MX_TIM3_Init+0xf8>)
 80011aa:	f008 fded 	bl	8009d88 <HAL_TIM_ConfigClockSource>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80011b4:	f7ff fd02 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011b8:	481d      	ldr	r0, [pc, #116]	; (8001230 <MX_TIM3_Init+0xf8>)
 80011ba:	f008 fcca 	bl	8009b52 <HAL_TIM_PWM_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80011c4:	f7ff fcfa 	bl	8000bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011d0:	f107 0320 	add.w	r3, r7, #32
 80011d4:	4619      	mov	r1, r3
 80011d6:	4816      	ldr	r0, [pc, #88]	; (8001230 <MX_TIM3_Init+0xf8>)
 80011d8:	f009 f944 	bl	800a464 <HAL_TIMEx_MasterConfigSynchronization>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80011e2:	f7ff fceb 	bl	8000bbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e6:	2360      	movs	r3, #96	; 0x60
 80011e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2200      	movs	r2, #0
 80011fa:	4619      	mov	r1, r3
 80011fc:	480c      	ldr	r0, [pc, #48]	; (8001230 <MX_TIM3_Init+0xf8>)
 80011fe:	f008 fd01 	bl	8009c04 <HAL_TIM_PWM_ConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001208:	f7ff fcd8 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2204      	movs	r2, #4
 8001210:	4619      	mov	r1, r3
 8001212:	4807      	ldr	r0, [pc, #28]	; (8001230 <MX_TIM3_Init+0xf8>)
 8001214:	f008 fcf6 	bl	8009c04 <HAL_TIM_PWM_ConfigChannel>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800121e:	f7ff fccd 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001222:	4803      	ldr	r0, [pc, #12]	; (8001230 <MX_TIM3_Init+0xf8>)
 8001224:	f000 f8d4 	bl	80013d0 <HAL_TIM_MspPostInit>

}
 8001228:	bf00      	nop
 800122a:	3738      	adds	r7, #56	; 0x38
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200025dc 	.word	0x200025dc
 8001234:	40000400 	.word	0x40000400

08001238 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08e      	sub	sp, #56	; 0x38
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124c:	f107 0320 	add.w	r3, r7, #32
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
 8001264:	615a      	str	r2, [r3, #20]
 8001266:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001268:	4b31      	ldr	r3, [pc, #196]	; (8001330 <MX_TIM4_Init+0xf8>)
 800126a:	4a32      	ldr	r2, [pc, #200]	; (8001334 <MX_TIM4_Init+0xfc>)
 800126c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 23;
 800126e:	4b30      	ldr	r3, [pc, #192]	; (8001330 <MX_TIM4_Init+0xf8>)
 8001270:	2217      	movs	r2, #23
 8001272:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001274:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <MX_TIM4_Init+0xf8>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800127a:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <MX_TIM4_Init+0xf8>)
 800127c:	2263      	movs	r2, #99	; 0x63
 800127e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001280:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <MX_TIM4_Init+0xf8>)
 8001282:	2200      	movs	r2, #0
 8001284:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001286:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <MX_TIM4_Init+0xf8>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800128c:	4828      	ldr	r0, [pc, #160]	; (8001330 <MX_TIM4_Init+0xf8>)
 800128e:	f008 fc11 	bl	8009ab4 <HAL_TIM_Base_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001298:	f7ff fc90 	bl	8000bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a6:	4619      	mov	r1, r3
 80012a8:	4821      	ldr	r0, [pc, #132]	; (8001330 <MX_TIM4_Init+0xf8>)
 80012aa:	f008 fd6d 	bl	8009d88 <HAL_TIM_ConfigClockSource>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80012b4:	f7ff fc82 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012b8:	481d      	ldr	r0, [pc, #116]	; (8001330 <MX_TIM4_Init+0xf8>)
 80012ba:	f008 fc4a 	bl	8009b52 <HAL_TIM_PWM_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80012c4:	f7ff fc7a 	bl	8000bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012d0:	f107 0320 	add.w	r3, r7, #32
 80012d4:	4619      	mov	r1, r3
 80012d6:	4816      	ldr	r0, [pc, #88]	; (8001330 <MX_TIM4_Init+0xf8>)
 80012d8:	f009 f8c4 	bl	800a464 <HAL_TIMEx_MasterConfigSynchronization>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80012e2:	f7ff fc6b 	bl	8000bbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e6:	2360      	movs	r3, #96	; 0x60
 80012e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2200      	movs	r2, #0
 80012fa:	4619      	mov	r1, r3
 80012fc:	480c      	ldr	r0, [pc, #48]	; (8001330 <MX_TIM4_Init+0xf8>)
 80012fe:	f008 fc81 	bl	8009c04 <HAL_TIM_PWM_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001308:	f7ff fc58 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2204      	movs	r2, #4
 8001310:	4619      	mov	r1, r3
 8001312:	4807      	ldr	r0, [pc, #28]	; (8001330 <MX_TIM4_Init+0xf8>)
 8001314:	f008 fc76 	bl	8009c04 <HAL_TIM_PWM_ConfigChannel>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 800131e:	f7ff fc4d 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001322:	4803      	ldr	r0, [pc, #12]	; (8001330 <MX_TIM4_Init+0xf8>)
 8001324:	f000 f854 	bl	80013d0 <HAL_TIM_MspPostInit>

}
 8001328:	bf00      	nop
 800132a:	3738      	adds	r7, #56	; 0x38
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20002624 	.word	0x20002624
 8001334:	40000800 	.word	0x40000800

08001338 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001338:	b480      	push	{r7}
 800133a:	b087      	sub	sp, #28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001348:	d10e      	bne.n	8001368 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <HAL_TIM_Base_MspInit+0x8c>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	4a1c      	ldr	r2, [pc, #112]	; (80013c4 <HAL_TIM_Base_MspInit+0x8c>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6413      	str	r3, [r2, #64]	; 0x40
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <HAL_TIM_Base_MspInit+0x8c>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001366:	e026      	b.n	80013b6 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a16      	ldr	r2, [pc, #88]	; (80013c8 <HAL_TIM_Base_MspInit+0x90>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d10e      	bne.n	8001390 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <HAL_TIM_Base_MspInit+0x8c>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <HAL_TIM_Base_MspInit+0x8c>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <HAL_TIM_Base_MspInit+0x8c>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
}
 800138e:	e012      	b.n	80013b6 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM4)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <HAL_TIM_Base_MspInit+0x94>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d10d      	bne.n	80013b6 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <HAL_TIM_Base_MspInit+0x8c>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <HAL_TIM_Base_MspInit+0x8c>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	6413      	str	r3, [r2, #64]	; 0x40
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_TIM_Base_MspInit+0x8c>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
}
 80013b6:	bf00      	nop
 80013b8:	371c      	adds	r7, #28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40000400 	.word	0x40000400
 80013cc:	40000800 	.word	0x40000800

080013d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08c      	sub	sp, #48	; 0x30
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013f0:	d13d      	bne.n	800146e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	4b43      	ldr	r3, [pc, #268]	; (8001504 <HAL_TIM_MspPostInit+0x134>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a42      	ldr	r2, [pc, #264]	; (8001504 <HAL_TIM_MspPostInit+0x134>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b40      	ldr	r3, [pc, #256]	; (8001504 <HAL_TIM_MspPostInit+0x134>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	61bb      	str	r3, [r7, #24]
 800140c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	4b3c      	ldr	r3, [pc, #240]	; (8001504 <HAL_TIM_MspPostInit+0x134>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a3b      	ldr	r2, [pc, #236]	; (8001504 <HAL_TIM_MspPostInit+0x134>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b39      	ldr	r3, [pc, #228]	; (8001504 <HAL_TIM_MspPostInit+0x134>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800142a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800142e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800143c:	2301      	movs	r3, #1
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	4619      	mov	r1, r3
 8001446:	4830      	ldr	r0, [pc, #192]	; (8001508 <HAL_TIM_MspPostInit+0x138>)
 8001448:	f006 fe1c 	bl	8008084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800144c:	2308      	movs	r3, #8
 800144e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800145c:	2301      	movs	r3, #1
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	4619      	mov	r1, r3
 8001466:	4829      	ldr	r0, [pc, #164]	; (800150c <HAL_TIM_MspPostInit+0x13c>)
 8001468:	f006 fe0c 	bl	8008084 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800146c:	e046      	b.n	80014fc <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM3)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a27      	ldr	r2, [pc, #156]	; (8001510 <HAL_TIM_MspPostInit+0x140>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d11e      	bne.n	80014b6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001478:	2300      	movs	r3, #0
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	4b21      	ldr	r3, [pc, #132]	; (8001504 <HAL_TIM_MspPostInit+0x134>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	4a20      	ldr	r2, [pc, #128]	; (8001504 <HAL_TIM_MspPostInit+0x134>)
 8001482:	f043 0302 	orr.w	r3, r3, #2
 8001486:	6313      	str	r3, [r2, #48]	; 0x30
 8001488:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <HAL_TIM_MspPostInit+0x134>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001494:	2330      	movs	r3, #48	; 0x30
 8001496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014a4:	2302      	movs	r3, #2
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4619      	mov	r1, r3
 80014ae:	4817      	ldr	r0, [pc, #92]	; (800150c <HAL_TIM_MspPostInit+0x13c>)
 80014b0:	f006 fde8 	bl	8008084 <HAL_GPIO_Init>
}
 80014b4:	e022      	b.n	80014fc <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a16      	ldr	r2, [pc, #88]	; (8001514 <HAL_TIM_MspPostInit+0x144>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d11d      	bne.n	80014fc <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <HAL_TIM_MspPostInit+0x134>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <HAL_TIM_MspPostInit+0x134>)
 80014ca:	f043 0302 	orr.w	r3, r3, #2
 80014ce:	6313      	str	r3, [r2, #48]	; 0x30
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <HAL_TIM_MspPostInit+0x134>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014dc:	23c0      	movs	r3, #192	; 0xc0
 80014de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014ec:	2302      	movs	r3, #2
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	4619      	mov	r1, r3
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <HAL_TIM_MspPostInit+0x13c>)
 80014f8:	f006 fdc4 	bl	8008084 <HAL_GPIO_Init>
}
 80014fc:	bf00      	nop
 80014fe:	3730      	adds	r7, #48	; 0x30
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800
 8001508:	40020000 	.word	0x40020000
 800150c:	40020400 	.word	0x40020400
 8001510:	40000400 	.word	0x40000400
 8001514:	40000800 	.word	0x40000800

08001518 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 800151c:	4b02      	ldr	r3, [pc, #8]	; (8001528 <tud_descriptor_device_cb+0x10>)
}
 800151e:	4618      	mov	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	0800de90 	.word	0x0800de90

0800152c <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]

#if TUD_OPT_HIGH_SPEED
  // Although we are highspeed, host may be fullspeed.
  return (tud_speed_get() == TUSB_SPEED_HIGH) ?  desc_hs_configuration : desc_fs_configuration;
#else
  return desc_fs_configuration;
 8001536:	4b03      	ldr	r3, [pc, #12]	; (8001544 <tud_descriptor_configuration_cb+0x18>)
#endif
}
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	0800dea4 	.word	0x0800dea4

08001548 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	460a      	mov	r2, r1
 8001552:	71fb      	strb	r3, [r7, #7]
 8001554:	4613      	mov	r3, r2
 8001556:	80bb      	strh	r3, [r7, #4]
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d108      	bne.n	8001570 <tud_descriptor_string_cb+0x28>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 800155e:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <tud_descriptor_string_cb+0x9c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	b29a      	uxth	r2, r3
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <tud_descriptor_string_cb+0xa0>)
 8001568:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 800156a:	2301      	movs	r3, #1
 800156c:	73fb      	strb	r3, [r7, #15]
 800156e:	e027      	b.n	80015c0 <tud_descriptor_string_cb+0x78>
  }else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2b07      	cmp	r3, #7
 8001574:	d901      	bls.n	800157a <tud_descriptor_string_cb+0x32>
 8001576:	2300      	movs	r3, #0
 8001578:	e030      	b.n	80015dc <tud_descriptor_string_cb+0x94>

    const char* str = string_desc_arr[index];
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	4a19      	ldr	r2, [pc, #100]	; (80015e4 <tud_descriptor_string_cb+0x9c>)
 800157e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001582:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = (uint8_t) strlen(str);
 8001584:	68b8      	ldr	r0, [r7, #8]
 8001586:	f7fe fe27 	bl	80001d8 <strlen>
 800158a:	4603      	mov	r3, r0
 800158c:	73fb      	strb	r3, [r7, #15]
    if ( chr_count > 31 ) chr_count = 31;
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	2b1f      	cmp	r3, #31
 8001592:	d901      	bls.n	8001598 <tud_descriptor_string_cb+0x50>
 8001594:	231f      	movs	r3, #31
 8001596:	73fb      	strb	r3, [r7, #15]

    // Convert ASCII string into UTF-16
    for(uint8_t i=0; i<chr_count; i++)
 8001598:	2300      	movs	r3, #0
 800159a:	73bb      	strb	r3, [r7, #14]
 800159c:	e00c      	b.n	80015b8 <tud_descriptor_string_cb+0x70>
    {
      _desc_str[1+i] = str[i];
 800159e:	7bbb      	ldrb	r3, [r7, #14]
 80015a0:	68ba      	ldr	r2, [r7, #8]
 80015a2:	4413      	add	r3, r2
 80015a4:	781a      	ldrb	r2, [r3, #0]
 80015a6:	7bbb      	ldrb	r3, [r7, #14]
 80015a8:	3301      	adds	r3, #1
 80015aa:	b291      	uxth	r1, r2
 80015ac:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <tud_descriptor_string_cb+0xa0>)
 80015ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i=0; i<chr_count; i++)
 80015b2:	7bbb      	ldrb	r3, [r7, #14]
 80015b4:	3301      	adds	r3, #1
 80015b6:	73bb      	strb	r3, [r7, #14]
 80015b8:	7bba      	ldrb	r2, [r7, #14]
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d3ee      	bcc.n	800159e <tud_descriptor_string_cb+0x56>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	3301      	adds	r3, #1
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <tud_descriptor_string_cb+0xa0>)
 80015d8:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 80015da:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <tud_descriptor_string_cb+0xa0>)
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20002410 	.word	0x20002410
 80015e8:	2000266c 	.word	0x2000266c

080015ec <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80015f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015fa:	2204      	movs	r2, #4
 80015fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001600:	2202      	movs	r2, #2
 8001602:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800160c:	2202      	movs	r2, #2
 800160e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001624:	2200      	movs	r2, #0
 8001626:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800162a:	2200      	movs	r2, #0
 800162c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001630:	f007 fb72 	bl	8008d18 <HAL_PCD_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800163a:	f7ff fabf 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200026ac 	.word	0x200026ac

08001648 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001668:	d13a      	bne.n	80016e0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <HAL_PCD_MspInit+0xa0>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a1d      	ldr	r2, [pc, #116]	; (80016e8 <HAL_PCD_MspInit+0xa0>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <HAL_PCD_MspInit+0xa0>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001686:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800168a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	2302      	movs	r3, #2
 800168e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001694:	2303      	movs	r3, #3
 8001696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001698:	230a      	movs	r3, #10
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	4812      	ldr	r0, [pc, #72]	; (80016ec <HAL_PCD_MspInit+0xa4>)
 80016a4:	f006 fcee 	bl	8008084 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <HAL_PCD_MspInit+0xa0>)
 80016aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ac:	4a0e      	ldr	r2, [pc, #56]	; (80016e8 <HAL_PCD_MspInit+0xa0>)
 80016ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b2:	6353      	str	r3, [r2, #52]	; 0x34
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_PCD_MspInit+0xa0>)
 80016ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016bc:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <HAL_PCD_MspInit+0xa0>)
 80016be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c2:	6453      	str	r3, [r2, #68]	; 0x44
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_PCD_MspInit+0xa0>)
 80016c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2100      	movs	r1, #0
 80016d4:	2043      	movs	r0, #67	; 0x43
 80016d6:	f006 f998 	bl	8007a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80016da:	2043      	movs	r0, #67	; 0x43
 80016dc:	f006 f9b1 	bl	8007a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80016e0:	bf00      	nop
 80016e2:	3728      	adds	r7, #40	; 0x28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020000 	.word	0x40020000

080016f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001728 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f4:	480d      	ldr	r0, [pc, #52]	; (800172c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016f6:	490e      	ldr	r1, [pc, #56]	; (8001730 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016f8:	4a0e      	ldr	r2, [pc, #56]	; (8001734 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016fc:	e002      	b.n	8001704 <LoopCopyDataInit>

080016fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001702:	3304      	adds	r3, #4

08001704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001708:	d3f9      	bcc.n	80016fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170a:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800170c:	4c0b      	ldr	r4, [pc, #44]	; (800173c <LoopFillZerobss+0x26>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001710:	e001      	b.n	8001716 <LoopFillZerobss>

08001712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001714:	3204      	adds	r2, #4

08001716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001718:	d3fb      	bcc.n	8001712 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800171a:	f7ff fc7b 	bl	8001014 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800171e:	f00b f94b 	bl	800c9b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001722:	f7ff f8c4 	bl	80008ae <main>
  bx  lr    
 8001726:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001728:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800172c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001730:	200024b8 	.word	0x200024b8
  ldr r2, =_sidata
 8001734:	0800e004 	.word	0x0800e004
  ldr r2, =_sbss
 8001738:	200024b8 	.word	0x200024b8
  ldr r4, =_ebss
 800173c:	200031c0 	.word	0x200031c0

08001740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001740:	e7fe      	b.n	8001740 <ADC_IRQHandler>

08001742 <_prep_out_transaction>:
// INTERNAL OBJECT & FUNCTION DECLARATION
//--------------------------------------------------------------------+
CFG_TUSB_MEM_SECTION static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];

static bool _prep_out_transaction (cdcd_interface_t* p_cdc)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b084      	sub	sp, #16
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  uint8_t const rhport = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	73fb      	strb	r3, [r7, #15]
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3310      	adds	r3, #16
 8001752:	4618      	mov	r0, r3
 8001754:	f002 fd40 	bl	80041d8 <tu_fifo_remaining>
 8001758:	4603      	mov	r3, r0
 800175a:	81bb      	strh	r3, [r7, #12]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 800175c:	89bb      	ldrh	r3, [r7, #12]
 800175e:	2b3f      	cmp	r3, #63	; 0x3f
 8001760:	d801      	bhi.n	8001766 <_prep_out_transaction+0x24>
 8001762:	2300      	movs	r3, #0
 8001764:	e02b      	b.n	80017be <_prep_out_transaction+0x7c>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	78da      	ldrb	r2, [r3, #3]
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	4611      	mov	r1, r2
 800176e:	4618      	mov	r0, r3
 8001770:	f003 ffe6 	bl	8005740 <usbd_edpt_claim>
 8001774:	4603      	mov	r3, r0
 8001776:	f083 0301 	eor.w	r3, r3, #1
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <_prep_out_transaction+0x42>
 8001780:	2300      	movs	r3, #0
 8001782:	e01c      	b.n	80017be <_prep_out_transaction+0x7c>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3310      	adds	r3, #16
 8001788:	4618      	mov	r0, r3
 800178a:	f002 fd25 	bl	80041d8 <tu_fifo_remaining>
 800178e:	4603      	mov	r3, r0
 8001790:	81bb      	strh	r3, [r7, #12]

  if ( available >= sizeof(p_cdc->epout_buf) )
 8001792:	89bb      	ldrh	r3, [r7, #12]
 8001794:	2b3f      	cmp	r3, #63	; 0x3f
 8001796:	d90a      	bls.n	80017ae <_prep_out_transaction+0x6c>
  {
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	78d9      	ldrb	r1, [r3, #3]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 80017a2:	7bf8      	ldrb	r0, [r7, #15]
 80017a4:	2340      	movs	r3, #64	; 0x40
 80017a6:	f004 f81f 	bl	80057e8 <usbd_edpt_xfer>
 80017aa:	4603      	mov	r3, r0
 80017ac:	e007      	b.n	80017be <_prep_out_transaction+0x7c>
  }else
  {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	78da      	ldrb	r2, [r3, #3]
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	4611      	mov	r1, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f003 ffec 	bl	8005794 <usbd_edpt_release>

    return false;
 80017bc:	2300      	movs	r3, #0
  }
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <tud_cdc_n_available>:

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	f44f 729c 	mov.w	r2, #312	; 0x138
 80017d8:	fb02 f303 	mul.w	r3, r2, r3
 80017dc:	3310      	adds	r3, #16
 80017de:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <tud_cdc_n_available+0x2c>)
 80017e0:	4413      	add	r3, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f002 fcc7 	bl	8004176 <tu_fifo_count>
 80017e8:	4603      	mov	r3, r0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20002bb8 	.word	0x20002bb8

080017f8 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
 8001804:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	f44f 729c 	mov.w	r2, #312	; 0x138
 800180c:	fb02 f303 	mul.w	r3, r2, r3
 8001810:	4a0a      	ldr	r2, [pc, #40]	; (800183c <tud_cdc_n_read+0x44>)
 8001812:	4413      	add	r3, r2
 8001814:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) bufsize);
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3310      	adds	r3, #16
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	b292      	uxth	r2, r2
 800181e:	68b9      	ldr	r1, [r7, #8]
 8001820:	4618      	mov	r0, r3
 8001822:	f002 fd0f 	bl	8004244 <tu_fifo_read_n>
 8001826:	4603      	mov	r3, r0
 8001828:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(p_cdc);
 800182a:	6978      	ldr	r0, [r7, #20]
 800182c:	f7ff ff89 	bl	8001742 <_prep_out_transaction>
  return num_read;
 8001830:	693b      	ldr	r3, [r7, #16]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20002bb8 	.word	0x20002bb8

08001840 <tud_cdc_n_write>:

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, void const* buffer, uint32_t bufsize)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001854:	fb02 f303 	mul.w	r3, r2, r3
 8001858:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <tud_cdc_n_write+0x54>)
 800185a:	4413      	add	r3, r2
 800185c:	617b      	str	r3, [r7, #20]
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3324      	adds	r3, #36	; 0x24
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	b292      	uxth	r2, r2
 8001866:	68b9      	ldr	r1, [r7, #8]
 8001868:	4618      	mov	r0, r3
 800186a:	f002 fd4a 	bl	8004302 <tu_fifo_write_n>
 800186e:	4603      	mov	r3, r0
 8001870:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  if ( tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE )
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	3324      	adds	r3, #36	; 0x24
 8001876:	4618      	mov	r0, r3
 8001878:	f002 fc7d 	bl	8004176 <tu_fifo_count>
 800187c:	4603      	mov	r3, r0
 800187e:	2b3f      	cmp	r3, #63	; 0x3f
 8001880:	d903      	bls.n	800188a <tud_cdc_n_write+0x4a>
  {
    tud_cdc_n_write_flush(itf);
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	4618      	mov	r0, r3
 8001886:	f000 f807 	bl	8001898 <tud_cdc_n_write_flush>
  }

  return ret;
 800188a:	8a7b      	ldrh	r3, [r7, #18]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20002bb8 	.word	0x20002bb8

08001898 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	f44f 729c 	mov.w	r2, #312	; 0x138
 80018a8:	fb02 f303 	mul.w	r3, r2, r3
 80018ac:	4a36      	ldr	r2, [pc, #216]	; (8001988 <tud_cdc_n_write_flush+0xf0>)
 80018ae:	4413      	add	r3, r2
 80018b0:	617b      	str	r3, [r7, #20]

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
 80018b2:	f002 fdb1 	bl	8004418 <tud_mounted>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d009      	beq.n	80018d0 <tud_cdc_n_write_flush+0x38>
 80018bc:	f002 fdbe 	bl	800443c <tud_suspended>
 80018c0:	4603      	mov	r3, r0
 80018c2:	f083 0301 	eor.w	r3, r3, #1
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <tud_cdc_n_write_flush+0x38>
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <tud_cdc_n_write_flush+0x3a>
 80018d0:	2300      	movs	r3, #0
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
 80018d8:	f083 0301 	eor.w	r3, r3, #1
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <tud_cdc_n_write_flush+0x4e>
 80018e2:	2300      	movs	r3, #0
 80018e4:	e04c      	b.n	8001980 <tud_cdc_n_write_flush+0xe8>

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	3324      	adds	r3, #36	; 0x24
 80018ea:	4618      	mov	r0, r3
 80018ec:	f002 fc43 	bl	8004176 <tu_fifo_count>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <tud_cdc_n_write_flush+0x62>
 80018f6:	2300      	movs	r3, #0
 80018f8:	e042      	b.n	8001980 <tud_cdc_n_write_flush+0xe8>

  uint8_t const rhport = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	74fb      	strb	r3, [r7, #19]

  // Claim the endpoint
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	789a      	ldrb	r2, [r3, #2]
 8001902:	7cfb      	ldrb	r3, [r7, #19]
 8001904:	4611      	mov	r1, r2
 8001906:	4618      	mov	r0, r3
 8001908:	f003 ff1a 	bl	8005740 <usbd_edpt_claim>
 800190c:	4603      	mov	r3, r0
 800190e:	f083 0301 	eor.w	r3, r3, #1
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <tud_cdc_n_write_flush+0x84>
 8001918:	2300      	movs	r3, #0
 800191a:	e031      	b.n	8001980 <tud_cdc_n_write_flush+0xe8>

  // Pull data from FIFO
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	33f8      	adds	r3, #248	; 0xf8
 8001926:	2240      	movs	r2, #64	; 0x40
 8001928:	4619      	mov	r1, r3
 800192a:	f002 fc8b 	bl	8004244 <tu_fifo_read_n>
 800192e:	4603      	mov	r3, r0
 8001930:	823b      	strh	r3, [r7, #16]

  if ( count )
 8001932:	8a3b      	ldrh	r3, [r7, #16]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d01b      	beq.n	8001970 <tud_cdc_n_write_flush+0xd8>
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	7899      	ldrb	r1, [r3, #2]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 8001942:	8a3b      	ldrh	r3, [r7, #16]
 8001944:	7cf8      	ldrb	r0, [r7, #19]
 8001946:	f003 ff4f 	bl	80057e8 <usbd_edpt_xfer>
 800194a:	4603      	mov	r3, r0
 800194c:	f083 0301 	eor.w	r3, r3, #1
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00a      	beq.n	800196c <tud_cdc_n_write_flush+0xd4>
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <tud_cdc_n_write_flush+0xf4>)
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d000      	beq.n	8001968 <tud_cdc_n_write_flush+0xd0>
 8001966:	be00      	bkpt	0x0000
 8001968:	2300      	movs	r3, #0
 800196a:	e009      	b.n	8001980 <tud_cdc_n_write_flush+0xe8>
    return count;
 800196c:	8a3b      	ldrh	r3, [r7, #16]
 800196e:	e007      	b.n	8001980 <tud_cdc_n_write_flush+0xe8>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	789a      	ldrb	r2, [r3, #2]
 8001974:	7cfb      	ldrb	r3, [r7, #19]
 8001976:	4611      	mov	r1, r2
 8001978:	4618      	mov	r0, r3
 800197a:	f003 ff0b 	bl	8005794 <usbd_edpt_release>
    return 0;
 800197e:	2300      	movs	r3, #0
  }
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20002bb8 	.word	0x20002bb8
 800198c:	e000edf0 	.word	0xe000edf0

08001990 <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8001996:	f44f 729c 	mov.w	r2, #312	; 0x138
 800199a:	2100      	movs	r1, #0
 800199c:	4824      	ldr	r0, [pc, #144]	; (8001a30 <cdcd_init+0xa0>)
 800199e:	f00b f857 	bl	800ca50 <memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	71fb      	strb	r3, [r7, #7]
 80019a6:	e03b      	b.n	8001a20 <cdcd_init+0x90>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	f44f 729c 	mov.w	r2, #312	; 0x138
 80019ae:	fb02 f303 	mul.w	r3, r2, r3
 80019b2:	4a1f      	ldr	r2, [pc, #124]	; (8001a30 <cdcd_init+0xa0>)
 80019b4:	4413      	add	r3, r2
 80019b6:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	22ff      	movs	r2, #255	; 0xff
 80019bc:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	2300      	movs	r3, #0
 80019c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80019ca:	f443 4342 	orr.w	r3, r3, #49664	; 0xc200
 80019ce:	80d3      	strh	r3, [r2, #6]
 80019d0:	2300      	movs	r3, #0
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	8113      	strh	r3, [r2, #8]
    p_cdc->line_coding.stop_bits = 0;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	2200      	movs	r2, #0
 80019dc:	729a      	strb	r2, [r3, #10]
    p_cdc->line_coding.parity    = 0;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	2200      	movs	r2, #0
 80019e2:	72da      	strb	r2, [r3, #11]
    p_cdc->line_coding.data_bits = 8;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	2208      	movs	r2, #8
 80019e8:	731a      	strb	r2, [r3, #12]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	f103 0010 	add.w	r0, r3, #16
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80019f6:	2300      	movs	r3, #0
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	2301      	movs	r3, #1
 80019fc:	2240      	movs	r2, #64	; 0x40
 80019fe:	f001 ff49 	bl	8003894 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8001a0e:	2301      	movs	r3, #1
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	2301      	movs	r3, #1
 8001a14:	2240      	movs	r2, #64	; 0x40
 8001a16:	f001 ff3d 	bl	8003894 <tu_fifo_config>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	71fb      	strb	r3, [r7, #7]
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0c0      	beq.n	80019a8 <cdcd_init+0x18>
#if CFG_FIFO_MUTEX
    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
#endif
  }
}
 8001a26:	bf00      	nop
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20002bb8 	.word	0x20002bb8

08001a34 <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	73fb      	strb	r3, [r7, #15]
 8001a42:	e01f      	b.n	8001a84 <cdcd_reset+0x50>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001a4a:	fb02 f303 	mul.w	r3, r2, r3
 8001a4e:	4a11      	ldr	r2, [pc, #68]	; (8001a94 <cdcd_reset+0x60>)
 8001a50:	4413      	add	r3, r2
 8001a52:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8001a54:	2205      	movs	r2, #5
 8001a56:	2100      	movs	r1, #0
 8001a58:	68b8      	ldr	r0, [r7, #8]
 8001a5a:	f00a fff9 	bl	800ca50 <memset>
    tu_fifo_clear(&p_cdc->rx_ff);
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	3310      	adds	r3, #16
 8001a62:	4618      	mov	r0, r3
 8001a64:	f002 fc71 	bl	800434a <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	3324      	adds	r3, #36	; 0x24
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f002 fc6c 	bl	800434a <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	3324      	adds	r3, #36	; 0x24
 8001a76:	2101      	movs	r1, #1
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f002 fc86 	bl	800438a <tu_fifo_set_overwritable>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	3301      	adds	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0dc      	beq.n	8001a44 <cdcd_reset+0x10>
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20002bb8 	.word	0x20002bb8

08001a98 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b09a      	sub	sp, #104	; 0x68
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	6039      	str	r1, [r7, #0]
 8001aa2:	71fb      	strb	r3, [r7, #7]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	795b      	ldrb	r3, [r3, #5]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d103      	bne.n	8001ab8 <cdcd_open+0x20>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	799b      	ldrb	r3, [r3, #6]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d001      	beq.n	8001abc <cdcd_open+0x24>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	e0e1      	b.n	8001c80 <cdcd_open+0x1e8>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t * p_cdc = NULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	65fb      	str	r3, [r7, #92]	; 0x5c
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8001ac6:	e01a      	b.n	8001afe <cdcd_open+0x66>
  {
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
 8001ac8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001acc:	4a6e      	ldr	r2, [pc, #440]	; (8001c88 <cdcd_open+0x1f0>)
 8001ace:	f44f 719c 	mov.w	r1, #312	; 0x138
 8001ad2:	fb01 f303 	mul.w	r3, r1, r3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3302      	adds	r3, #2
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d109      	bne.n	8001af4 <cdcd_open+0x5c>
    {
      p_cdc = &_cdcd_itf[cdc_id];
 8001ae0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001ae4:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001ae8:	fb02 f303 	mul.w	r3, r2, r3
 8001aec:	4a66      	ldr	r2, [pc, #408]	; (8001c88 <cdcd_open+0x1f0>)
 8001aee:	4413      	add	r3, r2
 8001af0:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 8001af2:	e008      	b.n	8001b06 <cdcd_open+0x6e>
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 8001af4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001af8:	3301      	adds	r3, #1
 8001afa:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8001afe:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0e0      	beq.n	8001ac8 <cdcd_open+0x30>
    }
  }
  TU_ASSERT(p_cdc, 0);
 8001b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10a      	bne.n	8001b22 <cdcd_open+0x8a>
 8001b0c:	4b5f      	ldr	r3, [pc, #380]	; (8001c8c <cdcd_open+0x1f4>)
 8001b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8001b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d000      	beq.n	8001b1e <cdcd_open+0x86>
 8001b1c:	be00      	bkpt	0x0000
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e0ae      	b.n	8001c80 <cdcd_open+0x1e8>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	789a      	ldrb	r2, [r3, #2]
 8001b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b28:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8001b2a:	2309      	movs	r3, #9
 8001b2c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	643b      	str	r3, [r7, #64]	; 0x40
//--------------------------------------------------------------------+
// Descriptor helper
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
 8001b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 8001b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b40:	4413      	add	r3, r2
  uint8_t const * p_desc = tu_desc_next( itf_desc );
 8001b42:	657b      	str	r3, [r7, #84]	; 0x54

  // Communication Functional Descriptors
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8001b44:	e013      	b.n	8001b6e <cdcd_open+0xd6>
 8001b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b48:	633b      	str	r3, [r7, #48]	; 0x30
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
}

TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8001b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4c:	781b      	ldrb	r3, [r3, #0]
  {
    drv_len += tu_desc_len(p_desc);
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001b54:	4413      	add	r3, r2
 8001b56:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8001b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 8001b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b60:	637b      	str	r3, [r7, #52]	; 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 8001b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b6a:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8001b6c:	657b      	str	r3, [r7, #84]	; 0x54
 8001b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8001b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b74:	3301      	adds	r3, #1
 8001b76:	781b      	ldrb	r3, [r3, #0]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8001b78:	2b24      	cmp	r3, #36	; 0x24
 8001b7a:	d104      	bne.n	8001b86 <cdcd_open+0xee>
 8001b7c:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8001b80:	88bb      	ldrh	r3, [r7, #4]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d9df      	bls.n	8001b46 <cdcd_open+0xae>
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	781b      	ldrb	r3, [r3, #0]
  }

  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d12f      	bne.n	8001bf4 <cdcd_open+0x15c>
  {
    // notification endpoint
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8001b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b96:	653b      	str	r3, [r7, #80]	; 0x50

    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f003 fd8b 	bl	80056b8 <usbd_edpt_open>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f083 0301 	eor.w	r3, r3, #1
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00a      	beq.n	8001bc4 <cdcd_open+0x12c>
 8001bae:	4b37      	ldr	r3, [pc, #220]	; (8001c8c <cdcd_open+0x1f4>)
 8001bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d000      	beq.n	8001bc0 <cdcd_open+0x128>
 8001bbe:	be00      	bkpt	0x0000
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	e05d      	b.n	8001c80 <cdcd_open+0x1e8>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8001bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bc6:	789a      	ldrb	r2, [r3, #2]
 8001bc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bca:	705a      	strb	r2, [r3, #1]
 8001bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bce:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001bda:	4413      	add	r3, r2
 8001bdc:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8001be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	6a3b      	ldr	r3, [r7, #32]
 8001bf0:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8001bf2:	657b      	str	r3, [r7, #84]	; 0x54
 8001bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf6:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d139      	bne.n	8001c76 <cdcd_open+0x1de>
       (TUSB_CLASS_CDC_DATA == ((tusb_desc_interface_t const *) p_desc)->bInterfaceClass) )
 8001c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c04:	795b      	ldrb	r3, [r3, #5]
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8001c06:	2b0a      	cmp	r3, #10
 8001c08:	d135      	bne.n	8001c76 <cdcd_open+0x1de>
 8001c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c0c:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	781b      	ldrb	r3, [r3, #0]
  {
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001c18:	4413      	add	r3, r2
 8001c1a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8001c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c20:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8001c30:	657b      	str	r3, [r7, #84]	; 0x54

    // Open endpoint pair
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
 8001c32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c34:	3303      	adds	r3, #3
 8001c36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001c38:	3202      	adds	r2, #2
 8001c3a:	79f8      	ldrb	r0, [r7, #7]
 8001c3c:	9201      	str	r2, [sp, #4]
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	2302      	movs	r3, #2
 8001c42:	2202      	movs	r2, #2
 8001c44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c46:	f003 fccf 	bl	80055e8 <usbd_open_edpt_pair>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	f083 0301 	eor.w	r3, r3, #1
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00a      	beq.n	8001c6c <cdcd_open+0x1d4>
 8001c56:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <cdcd_open+0x1f4>)
 8001c58:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d000      	beq.n	8001c68 <cdcd_open+0x1d0>
 8001c66:	be00      	bkpt	0x0000
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e009      	b.n	8001c80 <cdcd_open+0x1e8>

    drv_len += 2*sizeof(tusb_desc_endpoint_t);
 8001c6c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001c70:	330e      	adds	r3, #14
 8001c72:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);
 8001c76:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001c78:	f7ff fd63 	bl	8001742 <_prep_out_transaction>

  return drv_len;
 8001c7c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3760      	adds	r7, #96	; 0x60
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20002bb8 	.word	0x20002bb8
 8001c8c:	e000edf0 	.word	0xe000edf0

08001c90 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	; 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	603a      	str	r2, [r7, #0]
 8001c9a:	71fb      	strb	r3, [r7, #7]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b20      	cmp	r3, #32
 8001cac:	d001      	beq.n	8001cb2 <cdcd_control_xfer_cb+0x22>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	e0cc      	b.n	8001e4c <cdcd_control_xfer_cb+0x1bc>

  uint8_t itf = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  cdcd_interface_t* p_cdc = _cdcd_itf;
 8001cb8:	4b66      	ldr	r3, [pc, #408]	; (8001e54 <cdcd_control_xfer_cb+0x1c4>)
 8001cba:	623b      	str	r3, [r7, #32]

  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8001cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <cdcd_control_xfer_cb+0x38>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	e0c1      	b.n	8001e4c <cdcd_control_xfer_cb+0x1bc>

    if ( p_cdc->itf_num == request->wIndex ) break;
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	889b      	ldrh	r3, [r3, #4]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d009      	beq.n	8001cec <cdcd_control_xfer_cb+0x5c>
  for ( ; ; itf++, p_cdc++)
 8001cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cdc:	3301      	adds	r3, #1
 8001cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001ce8:	623b      	str	r3, [r7, #32]
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8001cea:	e7e7      	b.n	8001cbc <cdcd_control_xfer_cb+0x2c>
    if ( p_cdc->itf_num == request->wIndex ) break;
 8001cec:	bf00      	nop
  }

  switch ( request->bRequest )
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	785b      	ldrb	r3, [r3, #1]
 8001cf2:	3b20      	subs	r3, #32
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	f200 809f 	bhi.w	8001e38 <cdcd_control_xfer_cb+0x1a8>
 8001cfa:	a201      	add	r2, pc, #4	; (adr r2, 8001d00 <cdcd_control_xfer_cb+0x70>)
 8001cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d00:	08001d11 	.word	0x08001d11
 8001d04:	08001d49 	.word	0x08001d49
 8001d08:	08001d5f 	.word	0x08001d5f
 8001d0c:	08001e07 	.word	0x08001e07
  {
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8001d10:	79bb      	ldrb	r3, [r7, #6]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d107      	bne.n	8001d26 <cdcd_control_xfer_cb+0x96>
      {
        TU_LOG2("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	1d9a      	adds	r2, r3, #6
 8001d1a:	79f8      	ldrb	r0, [r7, #7]
 8001d1c:	2307      	movs	r3, #7
 8001d1e:	6839      	ldr	r1, [r7, #0]
 8001d20:	f003 ff46 	bl	8005bb0 <tud_control_xfer>
      }
      else if ( stage == CONTROL_STAGE_ACK)
      {
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
      }
    break;
 8001d24:	e08a      	b.n	8001e3c <cdcd_control_xfer_cb+0x1ac>
      else if ( stage == CONTROL_STAGE_ACK)
 8001d26:	79bb      	ldrb	r3, [r7, #6]
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	f040 8087 	bne.w	8001e3c <cdcd_control_xfer_cb+0x1ac>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8001d2e:	4b4a      	ldr	r3, [pc, #296]	; (8001e58 <cdcd_control_xfer_cb+0x1c8>)
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 8083 	beq.w	8001e3c <cdcd_control_xfer_cb+0x1ac>
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	1d9a      	adds	r2, r3, #6
 8001d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f3af 8000 	nop.w
    break;
 8001d46:	e079      	b.n	8001e3c <cdcd_control_xfer_cb+0x1ac>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8001d48:	79bb      	ldrb	r3, [r7, #6]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d178      	bne.n	8001e40 <cdcd_control_xfer_cb+0x1b0>
      {
        TU_LOG2("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	1d9a      	adds	r2, r3, #6
 8001d52:	79f8      	ldrb	r0, [r7, #7]
 8001d54:	2307      	movs	r3, #7
 8001d56:	6839      	ldr	r1, [r7, #0]
 8001d58:	f003 ff2a 	bl	8005bb0 <tud_control_xfer>
      }
    break;
 8001d5c:	e070      	b.n	8001e40 <cdcd_control_xfer_cb+0x1b0>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP)
 8001d5e:	79bb      	ldrb	r3, [r7, #6]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d105      	bne.n	8001d70 <cdcd_control_xfer_cb+0xe0>
      {
        tud_control_status(rhport, request);
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	6839      	ldr	r1, [r7, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f003 fec3 	bl	8005af4 <tud_control_status>
        TU_LOG2("  Set Control Line State: DTR = %d, RTS = %d\r\n", dtr, rts);

        // Invoke callback
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
      }
    break;
 8001d6e:	e069      	b.n	8001e44 <cdcd_control_xfer_cb+0x1b4>
      else if (stage == CONTROL_STAGE_ACK)
 8001d70:	79bb      	ldrb	r3, [r7, #6]
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d166      	bne.n	8001e44 <cdcd_control_xfer_cb+0x1b4>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	885b      	ldrh	r3, [r3, #2]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	73fb      	strb	r3, [r7, #15]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	bf14      	ite	ne
 8001d92:	2301      	movne	r3, #1
 8001d94:	2300      	moveq	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	885b      	ldrh	r3, [r3, #2]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	61bb      	str	r3, [r7, #24]
 8001da2:	2301      	movs	r3, #1
 8001da4:	75fb      	strb	r3, [r7, #23]
 8001da6:	7dfb      	ldrb	r3, [r7, #23]
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	fa22 f303 	lsr.w	r3, r2, r3
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	bf14      	ite	ne
 8001db6:	2301      	movne	r3, #1
 8001db8:	2300      	moveq	r3, #0
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	885b      	ldrh	r3, [r3, #2]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001dd0:	7ffb      	ldrb	r3, [r7, #31]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	bf14      	ite	ne
 8001dd6:	2301      	movne	r3, #1
 8001dd8:	2300      	moveq	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	f083 0301 	eor.w	r3, r3, #1
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	4619      	mov	r1, r3
 8001dea:	4610      	mov	r0, r2
 8001dec:	f002 facd 	bl	800438a <tu_fifo_set_overwritable>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 8001df0:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <cdcd_control_xfer_cb+0x1cc>)
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d026      	beq.n	8001e44 <cdcd_control_xfer_cb+0x1b4>
 8001df6:	7fba      	ldrb	r2, [r7, #30]
 8001df8:	7ff9      	ldrb	r1, [r7, #31]
 8001dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f3af 8000 	nop.w
    break;
 8001e04:	e01e      	b.n	8001e44 <cdcd_control_xfer_cb+0x1b4>
    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP)
 8001e06:	79bb      	ldrb	r3, [r7, #6]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d105      	bne.n	8001e18 <cdcd_control_xfer_cb+0x188>
      {
        tud_control_status(rhport, request);
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	6839      	ldr	r1, [r7, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f003 fe6f 	bl	8005af4 <tud_control_status>
      else if (stage == CONTROL_STAGE_ACK)
      {
        TU_LOG2("  Send Break\r\n");
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
      }
    break;
 8001e16:	e017      	b.n	8001e48 <cdcd_control_xfer_cb+0x1b8>
      else if (stage == CONTROL_STAGE_ACK)
 8001e18:	79bb      	ldrb	r3, [r7, #6]
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d114      	bne.n	8001e48 <cdcd_control_xfer_cb+0x1b8>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <cdcd_control_xfer_cb+0x1d0>)
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d011      	beq.n	8001e48 <cdcd_control_xfer_cb+0x1b8>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	885b      	ldrh	r3, [r3, #2]
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f3af 8000 	nop.w
    break;
 8001e36:	e007      	b.n	8001e48 <cdcd_control_xfer_cb+0x1b8>

    default: return false; // stall unsupported request
 8001e38:	2300      	movs	r3, #0
 8001e3a:	e007      	b.n	8001e4c <cdcd_control_xfer_cb+0x1bc>
    break;
 8001e3c:	bf00      	nop
 8001e3e:	e004      	b.n	8001e4a <cdcd_control_xfer_cb+0x1ba>
    break;
 8001e40:	bf00      	nop
 8001e42:	e002      	b.n	8001e4a <cdcd_control_xfer_cb+0x1ba>
    break;
 8001e44:	bf00      	nop
 8001e46:	e000      	b.n	8001e4a <cdcd_control_xfer_cb+0x1ba>
    break;
 8001e48:	bf00      	nop
  }

  return true;
 8001e4a:	2301      	movs	r3, #1
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3728      	adds	r7, #40	; 0x28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20002bb8 	.word	0x20002bb8
	...

08001e64 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	71fb      	strb	r3, [r7, #7]
 8001e70:	460b      	mov	r3, r1
 8001e72:	71bb      	strb	r3, [r7, #6]
 8001e74:	4613      	mov	r3, r2
 8001e76:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 8001e78:	2300      	movs	r3, #0
 8001e7a:	75fb      	strb	r3, [r7, #23]
 8001e7c:	e014      	b.n	8001ea8 <cdcd_xfer_cb+0x44>
  {
    p_cdc = &_cdcd_itf[itf];
 8001e7e:	7dfb      	ldrb	r3, [r7, #23]
 8001e80:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001e84:	fb02 f303 	mul.w	r3, r2, r3
 8001e88:	4a54      	ldr	r2, [pc, #336]	; (8001fdc <cdcd_xfer_cb+0x178>)
 8001e8a:	4413      	add	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	78db      	ldrb	r3, [r3, #3]
 8001e92:	79ba      	ldrb	r2, [r7, #6]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d00a      	beq.n	8001eae <cdcd_xfer_cb+0x4a>
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	789b      	ldrb	r3, [r3, #2]
 8001e9c:	79ba      	ldrb	r2, [r7, #6]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d005      	beq.n	8001eae <cdcd_xfer_cb+0x4a>
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 8001ea2:	7dfb      	ldrb	r3, [r7, #23]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	75fb      	strb	r3, [r7, #23]
 8001ea8:	7dfb      	ldrb	r3, [r7, #23]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0e7      	beq.n	8001e7e <cdcd_xfer_cb+0x1a>
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 8001eae:	7dfb      	ldrb	r3, [r7, #23]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00a      	beq.n	8001eca <cdcd_xfer_cb+0x66>
 8001eb4:	4b4a      	ldr	r3, [pc, #296]	; (8001fe0 <cdcd_xfer_cb+0x17c>)
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d000      	beq.n	8001ec6 <cdcd_xfer_cb+0x62>
 8001ec4:	be00      	bkpt	0x0000
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e084      	b.n	8001fd4 <cdcd_xfer_cb+0x170>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	78db      	ldrb	r3, [r3, #3]
 8001ece:	79ba      	ldrb	r2, [r7, #6]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d14a      	bne.n	8001f6a <cdcd_xfer_cb+0x106>
  {
    tu_fifo_write_n(&p_cdc->rx_ff, &p_cdc->epout_buf, (uint16_t) xferred_bytes);
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	f103 0010 	add.w	r0, r3, #16
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	33b8      	adds	r3, #184	; 0xb8
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	b292      	uxth	r2, r2
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f002 fa0d 	bl	8004302 <tu_fifo_write_n>
    
    // Check for wanted char and invoke callback if needed
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
 8001ee8:	4b3e      	ldr	r3, [pc, #248]	; (8001fe4 <cdcd_xfer_cb+0x180>)
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d028      	beq.n	8001f40 <cdcd_xfer_cb+0xdc>
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	795b      	ldrb	r3, [r3, #5]
 8001ef2:	2bff      	cmp	r3, #255	; 0xff
 8001ef4:	d024      	beq.n	8001f40 <cdcd_xfer_cb+0xdc>
    {
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	e01d      	b.n	8001f38 <cdcd_xfer_cb+0xd4>
      {
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	795a      	ldrb	r2, [r3, #5]
 8001f00:	6939      	ldr	r1, [r7, #16]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	440b      	add	r3, r1
 8001f06:	33b8      	adds	r3, #184	; 0xb8
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d111      	bne.n	8001f32 <cdcd_xfer_cb+0xce>
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	3310      	adds	r3, #16
 8001f12:	4618      	mov	r0, r3
 8001f14:	f002 f94d 	bl	80041b2 <tu_fifo_empty>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f083 0301 	eor.w	r3, r3, #1
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d006      	beq.n	8001f32 <cdcd_xfer_cb+0xce>
        {
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	795a      	ldrb	r2, [r3, #5]
 8001f28:	7dfb      	ldrb	r3, [r7, #23]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f3af 8000 	nop.w
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	3301      	adds	r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d3dd      	bcc.n	8001efc <cdcd_xfer_cb+0x98>
        }
      }
    }
    
    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 8001f40:	4b29      	ldr	r3, [pc, #164]	; (8001fe8 <cdcd_xfer_cb+0x184>)
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00e      	beq.n	8001f64 <cdcd_xfer_cb+0x100>
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	3310      	adds	r3, #16
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f002 f931 	bl	80041b2 <tu_fifo_empty>
 8001f50:	4603      	mov	r3, r0
 8001f52:	f083 0301 	eor.w	r3, r3, #1
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <cdcd_xfer_cb+0x100>
 8001f5c:	7dfb      	ldrb	r3, [r7, #23]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f3af 8000 	nop.w
    
    // prepare for OUT transaction
    _prep_out_transaction(p_cdc);
 8001f64:	6938      	ldr	r0, [r7, #16]
 8001f66:	f7ff fbec 	bl	8001742 <_prep_out_transaction>
  }
  
  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	789b      	ldrb	r3, [r3, #2]
 8001f6e:	79ba      	ldrb	r2, [r7, #6]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d12e      	bne.n	8001fd2 <cdcd_xfer_cb+0x16e>
  {
    // invoke transmit callback to possibly refill tx fifo
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
 8001f74:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <cdcd_xfer_cb+0x188>)
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <cdcd_xfer_cb+0x11e>
 8001f7a:	7dfb      	ldrb	r3, [r7, #23]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f3af 8000 	nop.w

    if ( 0 == tud_cdc_n_write_flush(itf) )
 8001f82:	7dfb      	ldrb	r3, [r7, #23]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fc87 	bl	8001898 <tud_cdc_n_write_flush>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d120      	bne.n	8001fd2 <cdcd_xfer_cb+0x16e>
    {
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	3324      	adds	r3, #36	; 0x24
 8001f94:	4618      	mov	r0, r3
 8001f96:	f002 f8ee 	bl	8004176 <tu_fifo_count>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d118      	bne.n	8001fd2 <cdcd_xfer_cb+0x16e>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d015      	beq.n	8001fd2 <cdcd_xfer_cb+0x16e>
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d110      	bne.n	8001fd2 <cdcd_xfer_cb+0x16e>
      {
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	789a      	ldrb	r2, [r3, #2]
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f003 fbc1 	bl	8005740 <usbd_edpt_claim>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d006      	beq.n	8001fd2 <cdcd_xfer_cb+0x16e>
        {
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	7899      	ldrb	r1, [r3, #2]
 8001fc8:	79f8      	ldrb	r0, [r7, #7]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f003 fc0b 	bl	80057e8 <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 8001fd2:	2301      	movs	r3, #1
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20002bb8 	.word	0x20002bb8
 8001fe0:	e000edf0 	.word	0xe000edf0
	...

08001ff0 <reset_state>:

// Only a single dfu state is allowed
CFG_TUSB_MEM_SECTION static dfu_state_ctx_t _dfu_ctx;

static void reset_state(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  _dfu_ctx.state = DFU_IDLE;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <reset_state+0x20>)
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	709a      	strb	r2, [r3, #2]
  _dfu_ctx.status = DFU_STATUS_OK;
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <reset_state+0x20>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	70da      	strb	r2, [r3, #3]
  _dfu_ctx.flashing_in_progress = false;
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <reset_state+0x20>)
 8002002:	2200      	movs	r2, #0
 8002004:	711a      	strb	r2, [r3, #4]
}
 8002006:	bf00      	nop
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	20002cf0 	.word	0x20002cf0

08002014 <dfu_moded_reset>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void dfu_moded_reset(uint8_t rhport)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  _dfu_ctx.attrs = 0;
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <dfu_moded_reset+0x24>)
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
  _dfu_ctx.alt = 0;
 8002024:	4b04      	ldr	r3, [pc, #16]	; (8002038 <dfu_moded_reset+0x24>)
 8002026:	2200      	movs	r2, #0
 8002028:	705a      	strb	r2, [r3, #1]

  reset_state();
 800202a:	f7ff ffe1 	bl	8001ff0 <reset_state>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20002cf0 	.word	0x20002cf0

0800203c <dfu_moded_init>:

void dfu_moded_init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  dfu_moded_reset(0);
 8002040:	2000      	movs	r0, #0
 8002042:	f7ff ffe7 	bl	8002014 <dfu_moded_reset>
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <dfu_moded_open>:

uint16_t dfu_moded_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 800204c:	b480      	push	{r7}
 800204e:	b091      	sub	sp, #68	; 0x44
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	6039      	str	r1, [r7, #0]
 8002056:	71fb      	strb	r3, [r7, #7]
 8002058:	4613      	mov	r3, r2
 800205a:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  //------------- Interface (with Alt) descriptor -------------//
  uint8_t const itf_num = itf_desc->bInterfaceNumber;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	789b      	ldrb	r3, [r3, #2]
 8002060:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  uint8_t alt_count = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  uint16_t drv_len = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TU_VERIFY(itf_desc->bInterfaceSubClass == TUD_DFU_APP_SUBCLASS && itf_desc->bInterfaceProtocol == DFU_PROTOCOL_DFU, 0);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	799b      	ldrb	r3, [r3, #6]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d103      	bne.n	800207e <dfu_moded_open+0x32>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	79db      	ldrb	r3, [r3, #7]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d049      	beq.n	8002112 <dfu_moded_open+0xc6>
 800207e:	2300      	movs	r3, #0
 8002080:	e07f      	b.n	8002182 <dfu_moded_open+0x136>

  while(itf_desc->bInterfaceSubClass == TUD_DFU_APP_SUBCLASS && itf_desc->bInterfaceProtocol == DFU_PROTOCOL_DFU)
  {
    TU_ASSERT(max_len > drv_len, 0);
 8002082:	88ba      	ldrh	r2, [r7, #4]
 8002084:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002086:	429a      	cmp	r2, r3
 8002088:	d80a      	bhi.n	80020a0 <dfu_moded_open+0x54>
 800208a:	4b41      	ldr	r3, [pc, #260]	; (8002190 <dfu_moded_open+0x144>)
 800208c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800208e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d000      	beq.n	800209c <dfu_moded_open+0x50>
 800209a:	be00      	bkpt	0x0000
 800209c:	2300      	movs	r3, #0
 800209e:	e070      	b.n	8002182 <dfu_moded_open+0x136>

    // Alternate must have the same interface number
    TU_ASSERT(itf_desc->bInterfaceNumber == itf_num, 0);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	789b      	ldrb	r3, [r3, #2]
 80020a4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d00a      	beq.n	80020c2 <dfu_moded_open+0x76>
 80020ac:	4b38      	ldr	r3, [pc, #224]	; (8002190 <dfu_moded_open+0x144>)
 80020ae:	633b      	str	r3, [r7, #48]	; 0x30
 80020b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d000      	beq.n	80020be <dfu_moded_open+0x72>
 80020bc:	be00      	bkpt	0x0000
 80020be:	2300      	movs	r3, #0
 80020c0:	e05f      	b.n	8002182 <dfu_moded_open+0x136>

    // Alt should increase by one every time
    TU_ASSERT(itf_desc->bAlternateSetting == alt_count, 0);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	78db      	ldrb	r3, [r3, #3]
 80020c6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d00a      	beq.n	80020e4 <dfu_moded_open+0x98>
 80020ce:	4b30      	ldr	r3, [pc, #192]	; (8002190 <dfu_moded_open+0x144>)
 80020d0:	637b      	str	r3, [r7, #52]	; 0x34
 80020d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d000      	beq.n	80020e0 <dfu_moded_open+0x94>
 80020de:	be00      	bkpt	0x0000
 80020e0:	2300      	movs	r3, #0
 80020e2:	e04e      	b.n	8002182 <dfu_moded_open+0x136>
    alt_count++;
 80020e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80020e8:	3301      	adds	r3, #1
 80020ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(itf_desc);
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80020fa:	4413      	add	r3, r2
 80020fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	4413      	add	r3, r2
    itf_desc = (tusb_desc_interface_t const *) tu_desc_next(itf_desc);
 8002110:	603b      	str	r3, [r7, #0]
  while(itf_desc->bInterfaceSubClass == TUD_DFU_APP_SUBCLASS && itf_desc->bInterfaceProtocol == DFU_PROTOCOL_DFU)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	799b      	ldrb	r3, [r3, #6]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d103      	bne.n	8002122 <dfu_moded_open+0xd6>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	79db      	ldrb	r3, [r3, #7]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d0af      	beq.n	8002082 <dfu_moded_open+0x36>
  }

  //------------- DFU Functional descriptor -------------//
  tusb_desc_dfu_functional_t const *func_desc = (tusb_desc_dfu_functional_t const *) itf_desc;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	62bb      	str	r3, [r7, #40]	; 0x28
 8002126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002128:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	3301      	adds	r3, #1
 800212e:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(tu_desc_type(func_desc) == TUSB_DESC_FUNCTIONAL, 0);
 8002130:	2b21      	cmp	r3, #33	; 0x21
 8002132:	d00a      	beq.n	800214a <dfu_moded_open+0xfe>
 8002134:	4b16      	ldr	r3, [pc, #88]	; (8002190 <dfu_moded_open+0x144>)
 8002136:	61fb      	str	r3, [r7, #28]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	d000      	beq.n	8002146 <dfu_moded_open+0xfa>
 8002144:	be00      	bkpt	0x0000
 8002146:	2300      	movs	r3, #0
 8002148:	e01b      	b.n	8002182 <dfu_moded_open+0x136>
  drv_len += sizeof(tusb_desc_dfu_functional_t);
 800214a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800214c:	3309      	adds	r3, #9
 800214e:	87bb      	strh	r3, [r7, #60]	; 0x3c

  _dfu_ctx.attrs = func_desc->bAttributes;
 8002150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002152:	789a      	ldrb	r2, [r3, #2]
 8002154:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <dfu_moded_open+0x148>)
 8002156:	701a      	strb	r2, [r3, #0]

  // CFG_TUD_DFU_XFER_BUFSIZE has to be set to the buffer size used in TUD_DFU_DESCRIPTOR
  uint16_t const transfer_size = tu_le16toh( tu_unaligned_read16((uint8_t const*) func_desc + offsetof(tusb_desc_dfu_functional_t, wTransferSize)) );
 8002158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215a:	3305      	adds	r3, #5
 800215c:	60bb      	str	r3, [r7, #8]

#else

// MCU that could access unaligned memory natively
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	84fb      	strh	r3, [r7, #38]	; 0x26
  TU_ASSERT(transfer_size <= CFG_TUD_DFU_XFER_BUFSIZE, drv_len);
 8002164:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002166:	2b40      	cmp	r3, #64	; 0x40
 8002168:	d90a      	bls.n	8002180 <dfu_moded_open+0x134>
 800216a:	4b09      	ldr	r3, [pc, #36]	; (8002190 <dfu_moded_open+0x144>)
 800216c:	623b      	str	r3, [r7, #32]
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d000      	beq.n	800217c <dfu_moded_open+0x130>
 800217a:	be00      	bkpt	0x0000
 800217c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800217e:	e000      	b.n	8002182 <dfu_moded_open+0x136>

  return drv_len;
 8002180:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
}
 8002182:	4618      	mov	r0, r3
 8002184:	3744      	adds	r7, #68	; 0x44
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000edf0 	.word	0xe000edf0
 8002194:	20002cf0 	.word	0x20002cf0

08002198 <dfu_moded_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool dfu_moded_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af02      	add	r7, sp, #8
 800219e:	4603      	mov	r3, r0
 80021a0:	603a      	str	r2, [r7, #0]
 80021a2:	71fb      	strb	r3, [r7, #7]
 80021a4:	460b      	mov	r3, r1
 80021a6:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	f003 031f 	and.w	r3, r3, #31
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d001      	beq.n	80021ba <dfu_moded_control_xfer_cb+0x22>
 80021b6:	2300      	movs	r3, #0
 80021b8:	e13e      	b.n	8002438 <dfu_moded_control_xfer_cb+0x2a0>

  TU_LOG2("  DFU State  : %s, Status: %s\r\n", tu_lookup_find(&_dfu_state_table, _dfu_ctx.state), tu_lookup_find(&_dfu_status_table, _dfu_ctx.status));

  if ( request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD )
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d126      	bne.n	8002216 <dfu_moded_control_xfer_cb+0x7e>
  {
    // Standard request include GET/SET_INTERFACE
    switch ( request->bRequest )
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	785b      	ldrb	r3, [r3, #1]
 80021cc:	2b0a      	cmp	r3, #10
 80021ce:	d014      	beq.n	80021fa <dfu_moded_control_xfer_cb+0x62>
 80021d0:	2b0b      	cmp	r3, #11
 80021d2:	d11e      	bne.n	8002212 <dfu_moded_control_xfer_cb+0x7a>
    {
      case TUSB_REQ_SET_INTERFACE:
        if ( stage == CONTROL_STAGE_SETUP )
 80021d4:	79bb      	ldrb	r3, [r7, #6]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	f040 811e 	bne.w	8002418 <dfu_moded_control_xfer_cb+0x280>
        {
          // Switch Alt interface and reset state machine
          _dfu_ctx.alt = (uint8_t) request->wValue;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	885b      	ldrh	r3, [r3, #2]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	4b96      	ldr	r3, [pc, #600]	; (8002440 <dfu_moded_control_xfer_cb+0x2a8>)
 80021e6:	705a      	strb	r2, [r3, #1]
          reset_state();
 80021e8:	f7ff ff02 	bl	8001ff0 <reset_state>
          return tud_control_status(rhport, request);
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	6839      	ldr	r1, [r7, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f003 fc7f 	bl	8005af4 <tud_control_status>
 80021f6:	4603      	mov	r3, r0
 80021f8:	e11e      	b.n	8002438 <dfu_moded_control_xfer_cb+0x2a0>
        }
      break;

      case TUSB_REQ_GET_INTERFACE:
        if(stage == CONTROL_STAGE_SETUP)
 80021fa:	79bb      	ldrb	r3, [r7, #6]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	f040 810d 	bne.w	800241c <dfu_moded_control_xfer_cb+0x284>
        {
          return tud_control_xfer(rhport, request, &_dfu_ctx.alt, 1);
 8002202:	79f8      	ldrb	r0, [r7, #7]
 8002204:	2301      	movs	r3, #1
 8002206:	4a8f      	ldr	r2, [pc, #572]	; (8002444 <dfu_moded_control_xfer_cb+0x2ac>)
 8002208:	6839      	ldr	r1, [r7, #0]
 800220a:	f003 fcd1 	bl	8005bb0 <tud_control_xfer>
 800220e:	4603      	mov	r3, r0
 8002210:	e112      	b.n	8002438 <dfu_moded_control_xfer_cb+0x2a0>
        }
      break;

      // unsupported request
      default: return false;
 8002212:	2300      	movs	r3, #0
 8002214:	e110      	b.n	8002438 <dfu_moded_control_xfer_cb+0x2a0>
    }
  }
  else if ( request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS )
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b20      	cmp	r3, #32
 8002222:	f040 80f7 	bne.w	8002414 <dfu_moded_control_xfer_cb+0x27c>
  {
    TU_LOG2("  DFU Request: %s\r\n", tu_lookup_find(&_dfu_request_table, request->bRequest));

    // Class request
    switch ( request->bRequest )
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	785b      	ldrb	r3, [r3, #1]
 800222a:	2b06      	cmp	r3, #6
 800222c:	f200 80f0 	bhi.w	8002410 <dfu_moded_control_xfer_cb+0x278>
 8002230:	a201      	add	r2, pc, #4	; (adr r2, 8002238 <dfu_moded_control_xfer_cb+0xa0>)
 8002232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002236:	bf00      	nop
 8002238:	08002255 	.word	0x08002255
 800223c:	08002337 	.word	0x08002337
 8002240:	080022dd 	.word	0x080022dd
 8002244:	080023c1 	.word	0x080023c1
 8002248:	0800227d 	.word	0x0800227d
 800224c:	08002295 	.word	0x08002295
 8002250:	080022ab 	.word	0x080022ab
    {
      case DFU_REQUEST_DETACH:
        if ( stage == CONTROL_STAGE_SETUP )
 8002254:	79bb      	ldrb	r3, [r7, #6]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d105      	bne.n	8002266 <dfu_moded_control_xfer_cb+0xce>
        {
          tud_control_status(rhport, request);
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	6839      	ldr	r1, [r7, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f003 fc48 	bl	8005af4 <tud_control_status>
        }
        else if ( stage == CONTROL_STAGE_ACK )
        {
          if ( tud_dfu_detach_cb ) tud_dfu_detach_cb();
        }
      break;
 8002264:	e0dc      	b.n	8002420 <dfu_moded_control_xfer_cb+0x288>
        else if ( stage == CONTROL_STAGE_ACK )
 8002266:	79bb      	ldrb	r3, [r7, #6]
 8002268:	2b03      	cmp	r3, #3
 800226a:	f040 80d9 	bne.w	8002420 <dfu_moded_control_xfer_cb+0x288>
          if ( tud_dfu_detach_cb ) tud_dfu_detach_cb();
 800226e:	4b76      	ldr	r3, [pc, #472]	; (8002448 <dfu_moded_control_xfer_cb+0x2b0>)
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80d5 	beq.w	8002420 <dfu_moded_control_xfer_cb+0x288>
 8002276:	f7fe fc67 	bl	8000b48 <tud_dfu_detach_cb>
      break;
 800227a:	e0d1      	b.n	8002420 <dfu_moded_control_xfer_cb+0x288>

      case DFU_REQUEST_CLRSTATUS:
        if ( stage == CONTROL_STAGE_SETUP )
 800227c:	79bb      	ldrb	r3, [r7, #6]
 800227e:	2b01      	cmp	r3, #1
 8002280:	f040 80d0 	bne.w	8002424 <dfu_moded_control_xfer_cb+0x28c>
        {
          reset_state();
 8002284:	f7ff feb4 	bl	8001ff0 <reset_state>
          tud_control_status(rhport, request);
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	6839      	ldr	r1, [r7, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f003 fc31 	bl	8005af4 <tud_control_status>
        }
      break;
 8002292:	e0c7      	b.n	8002424 <dfu_moded_control_xfer_cb+0x28c>

      case DFU_REQUEST_GETSTATE:
        if ( stage == CONTROL_STAGE_SETUP )
 8002294:	79bb      	ldrb	r3, [r7, #6]
 8002296:	2b01      	cmp	r3, #1
 8002298:	f040 80c6 	bne.w	8002428 <dfu_moded_control_xfer_cb+0x290>
        {
          tud_control_xfer(rhport, request, &_dfu_ctx.state, 1);
 800229c:	79f8      	ldrb	r0, [r7, #7]
 800229e:	2301      	movs	r3, #1
 80022a0:	4a6a      	ldr	r2, [pc, #424]	; (800244c <dfu_moded_control_xfer_cb+0x2b4>)
 80022a2:	6839      	ldr	r1, [r7, #0]
 80022a4:	f003 fc84 	bl	8005bb0 <tud_control_xfer>
        }
      break;
 80022a8:	e0be      	b.n	8002428 <dfu_moded_control_xfer_cb+0x290>

      case DFU_REQUEST_ABORT:
        if ( stage == CONTROL_STAGE_SETUP )
 80022aa:	79bb      	ldrb	r3, [r7, #6]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d107      	bne.n	80022c0 <dfu_moded_control_xfer_cb+0x128>
        {
          reset_state();
 80022b0:	f7ff fe9e 	bl	8001ff0 <reset_state>
          tud_control_status(rhport, request);
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	6839      	ldr	r1, [r7, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f003 fc1b 	bl	8005af4 <tud_control_status>
        }
        else if ( stage == CONTROL_STAGE_ACK )
        {
          if ( tud_dfu_abort_cb ) tud_dfu_abort_cb(_dfu_ctx.alt);
        }
      break;
 80022be:	e0b5      	b.n	800242c <dfu_moded_control_xfer_cb+0x294>
        else if ( stage == CONTROL_STAGE_ACK )
 80022c0:	79bb      	ldrb	r3, [r7, #6]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	f040 80b2 	bne.w	800242c <dfu_moded_control_xfer_cb+0x294>
          if ( tud_dfu_abort_cb ) tud_dfu_abort_cb(_dfu_ctx.alt);
 80022c8:	4b61      	ldr	r3, [pc, #388]	; (8002450 <dfu_moded_control_xfer_cb+0x2b8>)
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 80ae 	beq.w	800242c <dfu_moded_control_xfer_cb+0x294>
 80022d0:	4b5b      	ldr	r3, [pc, #364]	; (8002440 <dfu_moded_control_xfer_cb+0x2a8>)
 80022d2:	785b      	ldrb	r3, [r3, #1]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe fc29 	bl	8000b2c <tud_dfu_abort_cb>
      break;
 80022da:	e0a7      	b.n	800242c <dfu_moded_control_xfer_cb+0x294>

      case DFU_REQUEST_UPLOAD:
        if ( stage == CONTROL_STAGE_SETUP )
 80022dc:	79bb      	ldrb	r3, [r7, #6]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	f040 80a6 	bne.w	8002430 <dfu_moded_control_xfer_cb+0x298>
        {
          TU_VERIFY(_dfu_ctx.attrs & DFU_ATTR_CAN_UPLOAD);
 80022e4:	4b56      	ldr	r3, [pc, #344]	; (8002440 <dfu_moded_control_xfer_cb+0x2a8>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <dfu_moded_control_xfer_cb+0x15c>
 80022f0:	2300      	movs	r3, #0
 80022f2:	e0a1      	b.n	8002438 <dfu_moded_control_xfer_cb+0x2a0>
          TU_VERIFY(tud_dfu_upload_cb);
 80022f4:	4b57      	ldr	r3, [pc, #348]	; (8002454 <dfu_moded_control_xfer_cb+0x2bc>)
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <dfu_moded_control_xfer_cb+0x166>
 80022fa:	2300      	movs	r3, #0
 80022fc:	e09c      	b.n	8002438 <dfu_moded_control_xfer_cb+0x2a0>
          TU_VERIFY(request->wLength <= CFG_TUD_DFU_XFER_BUFSIZE);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	88db      	ldrh	r3, [r3, #6]
 8002302:	b29b      	uxth	r3, r3
 8002304:	2b40      	cmp	r3, #64	; 0x40
 8002306:	d901      	bls.n	800230c <dfu_moded_control_xfer_cb+0x174>
 8002308:	2300      	movs	r3, #0
 800230a:	e095      	b.n	8002438 <dfu_moded_control_xfer_cb+0x2a0>

          uint16_t const xfer_len = tud_dfu_upload_cb(_dfu_ctx.alt, request->wValue, _dfu_ctx.transfer_buf, request->wLength);
 800230c:	4b4c      	ldr	r3, [pc, #304]	; (8002440 <dfu_moded_control_xfer_cb+0x2a8>)
 800230e:	7858      	ldrb	r0, [r3, #1]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	885b      	ldrh	r3, [r3, #2]
 8002314:	b299      	uxth	r1, r3
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	88db      	ldrh	r3, [r3, #6]
 800231a:	b29b      	uxth	r3, r3
 800231c:	4a4e      	ldr	r2, [pc, #312]	; (8002458 <dfu_moded_control_xfer_cb+0x2c0>)
 800231e:	f7fe fbe1 	bl	8000ae4 <tud_dfu_upload_cb>
 8002322:	4603      	mov	r3, r0
 8002324:	81fb      	strh	r3, [r7, #14]

          return tud_control_xfer(rhport, request, _dfu_ctx.transfer_buf, xfer_len);
 8002326:	89fb      	ldrh	r3, [r7, #14]
 8002328:	79f8      	ldrb	r0, [r7, #7]
 800232a:	4a4b      	ldr	r2, [pc, #300]	; (8002458 <dfu_moded_control_xfer_cb+0x2c0>)
 800232c:	6839      	ldr	r1, [r7, #0]
 800232e:	f003 fc3f 	bl	8005bb0 <tud_control_xfer>
 8002332:	4603      	mov	r3, r0
 8002334:	e080      	b.n	8002438 <dfu_moded_control_xfer_cb+0x2a0>
        }
      break;

      case DFU_REQUEST_DNLOAD:
        if ( stage == CONTROL_STAGE_SETUP )
 8002336:	79bb      	ldrb	r3, [r7, #6]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d17b      	bne.n	8002434 <dfu_moded_control_xfer_cb+0x29c>
        {
          TU_VERIFY(_dfu_ctx.attrs & DFU_ATTR_CAN_DOWNLOAD);
 800233c:	4b40      	ldr	r3, [pc, #256]	; (8002440 <dfu_moded_control_xfer_cb+0x2a8>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <dfu_moded_control_xfer_cb+0x1b4>
 8002348:	2300      	movs	r3, #0
 800234a:	e075      	b.n	8002438 <dfu_moded_control_xfer_cb+0x2a0>
          TU_VERIFY(_dfu_ctx.state == DFU_IDLE || _dfu_ctx.state == DFU_DNLOAD_IDLE);
 800234c:	4b3c      	ldr	r3, [pc, #240]	; (8002440 <dfu_moded_control_xfer_cb+0x2a8>)
 800234e:	789b      	ldrb	r3, [r3, #2]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d005      	beq.n	8002360 <dfu_moded_control_xfer_cb+0x1c8>
 8002354:	4b3a      	ldr	r3, [pc, #232]	; (8002440 <dfu_moded_control_xfer_cb+0x2a8>)
 8002356:	789b      	ldrb	r3, [r3, #2]
 8002358:	2b05      	cmp	r3, #5
 800235a:	d001      	beq.n	8002360 <dfu_moded_control_xfer_cb+0x1c8>
 800235c:	2300      	movs	r3, #0
 800235e:	e06b      	b.n	8002438 <dfu_moded_control_xfer_cb+0x2a0>
          TU_VERIFY(request->wLength <= CFG_TUD_DFU_XFER_BUFSIZE);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	88db      	ldrh	r3, [r3, #6]
 8002364:	b29b      	uxth	r3, r3
 8002366:	2b40      	cmp	r3, #64	; 0x40
 8002368:	d901      	bls.n	800236e <dfu_moded_control_xfer_cb+0x1d6>
 800236a:	2300      	movs	r3, #0
 800236c:	e064      	b.n	8002438 <dfu_moded_control_xfer_cb+0x2a0>

          // set to true for both download and manifest
          _dfu_ctx.flashing_in_progress = true;
 800236e:	4b34      	ldr	r3, [pc, #208]	; (8002440 <dfu_moded_control_xfer_cb+0x2a8>)
 8002370:	2201      	movs	r2, #1
 8002372:	711a      	strb	r2, [r3, #4]

          // save block and length for flashing
          _dfu_ctx.block  = request->wValue;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	885b      	ldrh	r3, [r3, #2]
 8002378:	b29a      	uxth	r2, r3
 800237a:	4b31      	ldr	r3, [pc, #196]	; (8002440 <dfu_moded_control_xfer_cb+0x2a8>)
 800237c:	80da      	strh	r2, [r3, #6]
          _dfu_ctx.length = request->wLength;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	88db      	ldrh	r3, [r3, #6]
 8002382:	b29a      	uxth	r2, r3
 8002384:	4b2e      	ldr	r3, [pc, #184]	; (8002440 <dfu_moded_control_xfer_cb+0x2a8>)
 8002386:	811a      	strh	r2, [r3, #8]

          if ( request->wLength )
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	88db      	ldrh	r3, [r3, #6]
 800238c:	b29b      	uxth	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00c      	beq.n	80023ac <dfu_moded_control_xfer_cb+0x214>
          {
            // Download with payload -> transition to DOWNLOAD SYNC
            _dfu_ctx.state = DFU_DNLOAD_SYNC;
 8002392:	4b2b      	ldr	r3, [pc, #172]	; (8002440 <dfu_moded_control_xfer_cb+0x2a8>)
 8002394:	2203      	movs	r2, #3
 8002396:	709a      	strb	r2, [r3, #2]
            return tud_control_xfer(rhport, request, _dfu_ctx.transfer_buf, request->wLength);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	88db      	ldrh	r3, [r3, #6]
 800239c:	b29b      	uxth	r3, r3
 800239e:	79f8      	ldrb	r0, [r7, #7]
 80023a0:	4a2d      	ldr	r2, [pc, #180]	; (8002458 <dfu_moded_control_xfer_cb+0x2c0>)
 80023a2:	6839      	ldr	r1, [r7, #0]
 80023a4:	f003 fc04 	bl	8005bb0 <tud_control_xfer>
 80023a8:	4603      	mov	r3, r0
 80023aa:	e045      	b.n	8002438 <dfu_moded_control_xfer_cb+0x2a0>
          }
          else
          {
            // Download is complete -> transition to MANIFEST SYNC
            _dfu_ctx.state = DFU_MANIFEST_SYNC;
 80023ac:	4b24      	ldr	r3, [pc, #144]	; (8002440 <dfu_moded_control_xfer_cb+0x2a8>)
 80023ae:	2206      	movs	r2, #6
 80023b0:	709a      	strb	r2, [r3, #2]
            return tud_control_status(rhport, request);
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	6839      	ldr	r1, [r7, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f003 fb9c 	bl	8005af4 <tud_control_status>
 80023bc:	4603      	mov	r3, r0
 80023be:	e03b      	b.n	8002438 <dfu_moded_control_xfer_cb+0x2a0>
          }
        }
      break;

      case DFU_REQUEST_GETSTATUS:
        switch ( _dfu_ctx.state )
 80023c0:	4b1f      	ldr	r3, [pc, #124]	; (8002440 <dfu_moded_control_xfer_cb+0x2a8>)
 80023c2:	789b      	ldrb	r3, [r3, #2]
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d002      	beq.n	80023ce <dfu_moded_control_xfer_cb+0x236>
 80023c8:	2b06      	cmp	r3, #6
 80023ca:	d008      	beq.n	80023de <dfu_moded_control_xfer_cb+0x246>
 80023cc:	e00f      	b.n	80023ee <dfu_moded_control_xfer_cb+0x256>
        {
          case DFU_DNLOAD_SYNC:
            return process_download_get_status(rhport, stage, request);
 80023ce:	79b9      	ldrb	r1, [r7, #6]
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 f873 	bl	80024c0 <process_download_get_status>
 80023da:	4603      	mov	r3, r0
 80023dc:	e02c      	b.n	8002438 <dfu_moded_control_xfer_cb+0x2a0>
          break;

          case DFU_MANIFEST_SYNC:
            return process_manifest_get_status(rhport, stage, request);
 80023de:	79b9      	ldrb	r1, [r7, #6]
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 f8b5 	bl	8002554 <process_manifest_get_status>
 80023ea:	4603      	mov	r3, r0
 80023ec:	e024      	b.n	8002438 <dfu_moded_control_xfer_cb+0x2a0>
          break;

          default:
            if ( stage == CONTROL_STAGE_SETUP ) return reply_getstatus(rhport, request, _dfu_ctx.state, _dfu_ctx.status, 0);
 80023ee:	79bb      	ldrb	r3, [r7, #6]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d10b      	bne.n	800240c <dfu_moded_control_xfer_cb+0x274>
 80023f4:	4b12      	ldr	r3, [pc, #72]	; (8002440 <dfu_moded_control_xfer_cb+0x2a8>)
 80023f6:	789a      	ldrb	r2, [r3, #2]
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <dfu_moded_control_xfer_cb+0x2a8>)
 80023fa:	78db      	ldrb	r3, [r3, #3]
 80023fc:	79f8      	ldrb	r0, [r7, #7]
 80023fe:	2100      	movs	r1, #0
 8002400:	9100      	str	r1, [sp, #0]
 8002402:	6839      	ldr	r1, [r7, #0]
 8002404:	f000 f8ea 	bl	80025dc <reply_getstatus>
 8002408:	4603      	mov	r3, r0
 800240a:	e015      	b.n	8002438 <dfu_moded_control_xfer_cb+0x2a0>
          break;
 800240c:	bf00      	nop
        }
      break;
 800240e:	e012      	b.n	8002436 <dfu_moded_control_xfer_cb+0x29e>

      default: return false; // stall unsupported request
 8002410:	2300      	movs	r3, #0
 8002412:	e011      	b.n	8002438 <dfu_moded_control_xfer_cb+0x2a0>
    }
  }else
  {
    return false; // unsupported request
 8002414:	2300      	movs	r3, #0
 8002416:	e00f      	b.n	8002438 <dfu_moded_control_xfer_cb+0x2a0>
      break;
 8002418:	bf00      	nop
 800241a:	e00c      	b.n	8002436 <dfu_moded_control_xfer_cb+0x29e>
      break;
 800241c:	bf00      	nop
 800241e:	e00a      	b.n	8002436 <dfu_moded_control_xfer_cb+0x29e>
      break;
 8002420:	bf00      	nop
 8002422:	e008      	b.n	8002436 <dfu_moded_control_xfer_cb+0x29e>
      break;
 8002424:	bf00      	nop
 8002426:	e006      	b.n	8002436 <dfu_moded_control_xfer_cb+0x29e>
      break;
 8002428:	bf00      	nop
 800242a:	e004      	b.n	8002436 <dfu_moded_control_xfer_cb+0x29e>
      break;
 800242c:	bf00      	nop
 800242e:	e002      	b.n	8002436 <dfu_moded_control_xfer_cb+0x29e>
      break;
 8002430:	bf00      	nop
 8002432:	e000      	b.n	8002436 <dfu_moded_control_xfer_cb+0x29e>
      break;
 8002434:	bf00      	nop
  }

  return true;
 8002436:	2301      	movs	r3, #1
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20002cf0 	.word	0x20002cf0
 8002444:	20002cf1 	.word	0x20002cf1
 8002448:	08000b49 	.word	0x08000b49
 800244c:	20002cf2 	.word	0x20002cf2
 8002450:	08000b2d 	.word	0x08000b2d
 8002454:	08000ae5 	.word	0x08000ae5
 8002458:	20002cfc 	.word	0x20002cfc

0800245c <tud_dfu_finish_flashing>:

void tud_dfu_finish_flashing(uint8_t status)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	71fb      	strb	r3, [r7, #7]
  _dfu_ctx.flashing_in_progress = false;
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <tud_dfu_finish_flashing+0x60>)
 8002468:	2200      	movs	r2, #0
 800246a:	711a      	strb	r2, [r3, #4]

  if ( status == DFU_STATUS_OK )
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d117      	bne.n	80024a2 <tud_dfu_finish_flashing+0x46>
  {
    if (_dfu_ctx.state == DFU_DNBUSY)
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <tud_dfu_finish_flashing+0x60>)
 8002474:	789b      	ldrb	r3, [r3, #2]
 8002476:	2b04      	cmp	r3, #4
 8002478:	d103      	bne.n	8002482 <tud_dfu_finish_flashing+0x26>
    {
      _dfu_ctx.state = DFU_DNLOAD_SYNC;
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <tud_dfu_finish_flashing+0x60>)
 800247c:	2203      	movs	r2, #3
 800247e:	709a      	strb	r2, [r3, #2]
  {
    // failed while flashing, move to dfuError
    _dfu_ctx.state = DFU_ERROR;
    _dfu_ctx.status = (dfu_status_t)status;
  }
}
 8002480:	e015      	b.n	80024ae <tud_dfu_finish_flashing+0x52>
    else if (_dfu_ctx.state == DFU_MANIFEST)
 8002482:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <tud_dfu_finish_flashing+0x60>)
 8002484:	789b      	ldrb	r3, [r3, #2]
 8002486:	2b07      	cmp	r3, #7
 8002488:	d111      	bne.n	80024ae <tud_dfu_finish_flashing+0x52>
      _dfu_ctx.state = (_dfu_ctx.attrs & DFU_ATTR_MANIFESTATION_TOLERANT)
 800248a:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <tud_dfu_finish_flashing+0x60>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	f003 0304 	and.w	r3, r3, #4
                               ? DFU_MANIFEST_SYNC : DFU_MANIFEST_WAIT_RESET;
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <tud_dfu_finish_flashing+0x3e>
 8002496:	2206      	movs	r2, #6
 8002498:	e000      	b.n	800249c <tud_dfu_finish_flashing+0x40>
 800249a:	2208      	movs	r2, #8
      _dfu_ctx.state = (_dfu_ctx.attrs & DFU_ATTR_MANIFESTATION_TOLERANT)
 800249c:	4b07      	ldr	r3, [pc, #28]	; (80024bc <tud_dfu_finish_flashing+0x60>)
 800249e:	709a      	strb	r2, [r3, #2]
}
 80024a0:	e005      	b.n	80024ae <tud_dfu_finish_flashing+0x52>
    _dfu_ctx.state = DFU_ERROR;
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <tud_dfu_finish_flashing+0x60>)
 80024a4:	220a      	movs	r2, #10
 80024a6:	709a      	strb	r2, [r3, #2]
    _dfu_ctx.status = (dfu_status_t)status;
 80024a8:	4a04      	ldr	r2, [pc, #16]	; (80024bc <tud_dfu_finish_flashing+0x60>)
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	70d3      	strb	r3, [r2, #3]
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20002cf0 	.word	0x20002cf0

080024c0 <process_download_get_status>:

static bool process_download_get_status(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	4603      	mov	r3, r0
 80024c8:	603a      	str	r2, [r7, #0]
 80024ca:	71fb      	strb	r3, [r7, #7]
 80024cc:	460b      	mov	r3, r1
 80024ce:	71bb      	strb	r3, [r7, #6]
  if ( stage == CONTROL_STAGE_SETUP )
 80024d0:	79bb      	ldrb	r3, [r7, #6]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d11e      	bne.n	8002514 <process_download_get_status+0x54>
  {
    // only transition to next state on CONTROL_STAGE_ACK
    dfu_state_t next_state;
    uint32_t timeout;

    if ( _dfu_ctx.flashing_in_progress )
 80024d6:	4b1d      	ldr	r3, [pc, #116]	; (800254c <process_download_get_status+0x8c>)
 80024d8:	791b      	ldrb	r3, [r3, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00a      	beq.n	80024f4 <process_download_get_status+0x34>
    {
      next_state = DFU_DNBUSY;
 80024de:	2304      	movs	r3, #4
 80024e0:	73fb      	strb	r3, [r7, #15]
      timeout = tud_dfu_get_timeout_cb(_dfu_ctx.alt, (uint8_t) next_state);
 80024e2:	4b1a      	ldr	r3, [pc, #104]	; (800254c <process_download_get_status+0x8c>)
 80024e4:	785b      	ldrb	r3, [r3, #1]
 80024e6:	7bfa      	ldrb	r2, [r7, #15]
 80024e8:	4611      	mov	r1, r2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe faa6 	bl	8000a3c <tud_dfu_get_timeout_cb>
 80024f0:	60b8      	str	r0, [r7, #8]
 80024f2:	e003      	b.n	80024fc <process_download_get_status+0x3c>
    }
    else
    {
      next_state = DFU_DNLOAD_IDLE;
 80024f4:	2305      	movs	r3, #5
 80024f6:	73fb      	strb	r3, [r7, #15]
      timeout = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60bb      	str	r3, [r7, #8]
    }

    return reply_getstatus(rhport, request, next_state, _dfu_ctx.status, timeout);
 80024fc:	4b13      	ldr	r3, [pc, #76]	; (800254c <process_download_get_status+0x8c>)
 80024fe:	78d9      	ldrb	r1, [r3, #3]
 8002500:	7bfa      	ldrb	r2, [r7, #15]
 8002502:	79f8      	ldrb	r0, [r7, #7]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	460b      	mov	r3, r1
 800250a:	6839      	ldr	r1, [r7, #0]
 800250c:	f000 f866 	bl	80025dc <reply_getstatus>
 8002510:	4603      	mov	r3, r0
 8002512:	e017      	b.n	8002544 <process_download_get_status+0x84>
  }
  else if ( stage == CONTROL_STAGE_ACK )
 8002514:	79bb      	ldrb	r3, [r7, #6]
 8002516:	2b03      	cmp	r3, #3
 8002518:	d113      	bne.n	8002542 <process_download_get_status+0x82>
  {
    if ( _dfu_ctx.flashing_in_progress )
 800251a:	4b0c      	ldr	r3, [pc, #48]	; (800254c <process_download_get_status+0x8c>)
 800251c:	791b      	ldrb	r3, [r3, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00c      	beq.n	800253c <process_download_get_status+0x7c>
    {
      _dfu_ctx.state = DFU_DNBUSY;
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <process_download_get_status+0x8c>)
 8002524:	2204      	movs	r2, #4
 8002526:	709a      	strb	r2, [r3, #2]
      tud_dfu_download_cb(_dfu_ctx.alt, _dfu_ctx.block, _dfu_ctx.transfer_buf, _dfu_ctx.length);
 8002528:	4b08      	ldr	r3, [pc, #32]	; (800254c <process_download_get_status+0x8c>)
 800252a:	7858      	ldrb	r0, [r3, #1]
 800252c:	4b07      	ldr	r3, [pc, #28]	; (800254c <process_download_get_status+0x8c>)
 800252e:	88d9      	ldrh	r1, [r3, #6]
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <process_download_get_status+0x8c>)
 8002532:	891b      	ldrh	r3, [r3, #8]
 8002534:	4a06      	ldr	r2, [pc, #24]	; (8002550 <process_download_get_status+0x90>)
 8002536:	f7fe fa9f 	bl	8000a78 <tud_dfu_download_cb>
 800253a:	e002      	b.n	8002542 <process_download_get_status+0x82>
    }else
    {
      _dfu_ctx.state = DFU_DNLOAD_IDLE;
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <process_download_get_status+0x8c>)
 800253e:	2205      	movs	r2, #5
 8002540:	709a      	strb	r2, [r3, #2]
    }
  }

  return true;
 8002542:	2301      	movs	r3, #1
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20002cf0 	.word	0x20002cf0
 8002550:	20002cfc 	.word	0x20002cfc

08002554 <process_manifest_get_status>:

static bool process_manifest_get_status(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af02      	add	r7, sp, #8
 800255a:	4603      	mov	r3, r0
 800255c:	603a      	str	r2, [r7, #0]
 800255e:	71fb      	strb	r3, [r7, #7]
 8002560:	460b      	mov	r3, r1
 8002562:	71bb      	strb	r3, [r7, #6]
  if ( stage == CONTROL_STAGE_SETUP )
 8002564:	79bb      	ldrb	r3, [r7, #6]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d11e      	bne.n	80025a8 <process_manifest_get_status+0x54>
  {
    // only transition to next state on CONTROL_STAGE_ACK
    dfu_state_t next_state;
    uint32_t timeout;

    if ( _dfu_ctx.flashing_in_progress )
 800256a:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <process_manifest_get_status+0x84>)
 800256c:	791b      	ldrb	r3, [r3, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00a      	beq.n	8002588 <process_manifest_get_status+0x34>
    {
      next_state = DFU_MANIFEST;
 8002572:	2307      	movs	r3, #7
 8002574:	73fb      	strb	r3, [r7, #15]
      timeout = tud_dfu_get_timeout_cb(_dfu_ctx.alt, next_state);
 8002576:	4b18      	ldr	r3, [pc, #96]	; (80025d8 <process_manifest_get_status+0x84>)
 8002578:	785b      	ldrb	r3, [r3, #1]
 800257a:	7bfa      	ldrb	r2, [r7, #15]
 800257c:	4611      	mov	r1, r2
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe fa5c 	bl	8000a3c <tud_dfu_get_timeout_cb>
 8002584:	60b8      	str	r0, [r7, #8]
 8002586:	e003      	b.n	8002590 <process_manifest_get_status+0x3c>
    }
    else
    {
      next_state = DFU_IDLE;
 8002588:	2302      	movs	r3, #2
 800258a:	73fb      	strb	r3, [r7, #15]
      timeout = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	60bb      	str	r3, [r7, #8]
    }

    return reply_getstatus(rhport, request, next_state, _dfu_ctx.status, timeout);
 8002590:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <process_manifest_get_status+0x84>)
 8002592:	78d9      	ldrb	r1, [r3, #3]
 8002594:	7bfa      	ldrb	r2, [r7, #15]
 8002596:	79f8      	ldrb	r0, [r7, #7]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	460b      	mov	r3, r1
 800259e:	6839      	ldr	r1, [r7, #0]
 80025a0:	f000 f81c 	bl	80025dc <reply_getstatus>
 80025a4:	4603      	mov	r3, r0
 80025a6:	e013      	b.n	80025d0 <process_manifest_get_status+0x7c>
  }
  else if ( stage == CONTROL_STAGE_ACK )
 80025a8:	79bb      	ldrb	r3, [r7, #6]
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d10f      	bne.n	80025ce <process_manifest_get_status+0x7a>
  {
    if ( _dfu_ctx.flashing_in_progress )
 80025ae:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <process_manifest_get_status+0x84>)
 80025b0:	791b      	ldrb	r3, [r3, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d008      	beq.n	80025c8 <process_manifest_get_status+0x74>
    {
      _dfu_ctx.state = DFU_MANIFEST;
 80025b6:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <process_manifest_get_status+0x84>)
 80025b8:	2207      	movs	r2, #7
 80025ba:	709a      	strb	r2, [r3, #2]
      tud_dfu_manifest_cb(_dfu_ctx.alt);
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <process_manifest_get_status+0x84>)
 80025be:	785b      	ldrb	r3, [r3, #1]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fe fa7d 	bl	8000ac0 <tud_dfu_manifest_cb>
 80025c6:	e002      	b.n	80025ce <process_manifest_get_status+0x7a>
    }
    else
    {
      _dfu_ctx.state = DFU_IDLE;
 80025c8:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <process_manifest_get_status+0x84>)
 80025ca:	2202      	movs	r2, #2
 80025cc:	709a      	strb	r2, [r3, #2]
    }
  }

  return true;
 80025ce:	2301      	movs	r3, #1
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20002cf0 	.word	0x20002cf0

080025dc <reply_getstatus>:

static bool reply_getstatus(uint8_t rhport, tusb_control_request_t const * request, dfu_state_t state, dfu_status_t status, uint32_t timeout)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6039      	str	r1, [r7, #0]
 80025e4:	4611      	mov	r1, r2
 80025e6:	461a      	mov	r2, r3
 80025e8:	4603      	mov	r3, r0
 80025ea:	71fb      	strb	r3, [r7, #7]
 80025ec:	460b      	mov	r3, r1
 80025ee:	71bb      	strb	r3, [r7, #6]
 80025f0:	4613      	mov	r3, r2
 80025f2:	717b      	strb	r3, [r7, #5]
  dfu_status_response_t resp;
  resp.bStatus          = (uint8_t) status;
 80025f4:	797b      	ldrb	r3, [r7, #5]
 80025f6:	723b      	strb	r3, [r7, #8]
  resp.bwPollTimeout[0] = TU_U32_BYTE0(timeout);
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	727b      	strb	r3, [r7, #9]
  resp.bwPollTimeout[1] = TU_U32_BYTE1(timeout);
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	0a1b      	lsrs	r3, r3, #8
 8002602:	b2db      	uxtb	r3, r3
 8002604:	72bb      	strb	r3, [r7, #10]
  resp.bwPollTimeout[2] = TU_U32_BYTE2(timeout);
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	0c1b      	lsrs	r3, r3, #16
 800260a:	b2db      	uxtb	r3, r3
 800260c:	72fb      	strb	r3, [r7, #11]
  resp.bState           = (uint8_t) state;
 800260e:	79bb      	ldrb	r3, [r7, #6]
 8002610:	733b      	strb	r3, [r7, #12]
  resp.iString          = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	737b      	strb	r3, [r7, #13]

  return tud_control_xfer(rhport, request, &resp, sizeof(dfu_status_response_t));
 8002616:	f107 0208 	add.w	r2, r7, #8
 800261a:	79f8      	ldrb	r0, [r7, #7]
 800261c:	2306      	movs	r3, #6
 800261e:	6839      	ldr	r1, [r7, #0]
 8002620:	f003 fac6 	bl	8005bb0 <tud_control_xfer>
 8002624:	4603      	mov	r3, r0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <send_csw>:
{
  return tu_bit_test(dir, 7);
}

static inline bool send_csw(uint8_t rhport, mscd_interface_t* p_msc)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	6039      	str	r1, [r7, #0]
 8002638:	71fb      	strb	r3, [r7, #7]
  // Data residue is always = host expect - actual transferred
  p_msc->csw.data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002642:	1ad2      	subs	r2, r2, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	629a      	str	r2, [r3, #40]	; 0x28

  p_msc->stage = MSC_STAGE_STATUS_SENT;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	2203      	movs	r2, #3
 800264c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_in , (uint8_t*) &p_msc->csw, sizeof(msc_csw_t));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	f103 0220 	add.w	r2, r3, #32
 800265c:	79f8      	ldrb	r0, [r7, #7]
 800265e:	230d      	movs	r3, #13
 8002660:	f003 f8c2 	bl	80057e8 <usbd_edpt_xfer>
 8002664:	4603      	mov	r3, r0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <prepare_cbw>:

static inline bool prepare_cbw(uint8_t rhport, mscd_interface_t* p_msc)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	6039      	str	r1, [r7, #0]
 8002678:	71fb      	strb	r3, [r7, #7]
  p_msc->stage = MSC_STAGE_CMD;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	79f8      	ldrb	r0, [r7, #7]
 800268c:	231f      	movs	r3, #31
 800268e:	f003 f8ab 	bl	80057e8 <usbd_edpt_xfer>
 8002692:	4603      	mov	r3, r0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <fail_scsi_op>:

static void fail_scsi_op(uint8_t rhport, mscd_interface_t* p_msc, uint8_t status)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b088      	sub	sp, #32
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	6039      	str	r1, [r7, #0]
 80026a6:	71fb      	strb	r3, [r7, #7]
 80026a8:	4613      	mov	r3, r2
 80026aa:	71bb      	strb	r3, [r7, #6]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	61fb      	str	r3, [r7, #28]
  msc_csw_t       * p_csw = &p_msc->csw;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	3320      	adds	r3, #32
 80026b4:	61bb      	str	r3, [r7, #24]

  p_csw->status       = status;
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	79ba      	ldrb	r2, [r7, #6]
 80026ba:	731a      	strb	r2, [r3, #12]
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c4:	1ad2      	subs	r2, r2, r3
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	609a      	str	r2, [r3, #8]
  p_msc->stage        = MSC_STAGE_STATUS;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2202      	movs	r2, #2
 80026ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  // failed but sense key is not set: default to Illegal Request
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d106      	bne.n	80026ea <fail_scsi_op+0x4e>
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	7b58      	ldrb	r0, [r3, #13]
 80026e0:	2300      	movs	r3, #0
 80026e2:	2220      	movs	r2, #32
 80026e4:	2105      	movs	r1, #5
 80026e6:	f000 f8cf 	bl	8002888 <tud_msc_set_sense>

  // If there is data stage and not yet complete, stall it
  if ( p_cbw->total_bytes && p_csw->data_residue )
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d028      	beq.n	8002744 <fail_scsi_op+0xa8>
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d024      	beq.n	8002744 <fail_scsi_op+0xa8>
  {
    if ( is_data_in(p_cbw->dir) )
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	7b1b      	ldrb	r3, [r3, #12]
 80026fe:	75fb      	strb	r3, [r7, #23]
  return tu_bit_test(dir, 7);
 8002700:	7dfb      	ldrb	r3, [r7, #23]
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	2307      	movs	r3, #7
 8002706:	73fb      	strb	r3, [r7, #15]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	fa22 f303 	lsr.w	r3, r2, r3
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	bf14      	ite	ne
 8002718:	2301      	movne	r3, #1
 800271a:	2300      	moveq	r3, #0
 800271c:	b2db      	uxtb	r3, r3
    if ( is_data_in(p_cbw->dir) )
 800271e:	2b00      	cmp	r3, #0
 8002720:	d008      	beq.n	8002734 <fail_scsi_op+0x98>
    {
      usbd_edpt_stall(rhport, p_msc->ep_in);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8002728:	79fb      	ldrb	r3, [r7, #7]
 800272a:	4611      	mov	r1, r2
 800272c:	4618      	mov	r0, r3
 800272e:	f003 f8ff 	bl	8005930 <usbd_edpt_stall>
    else
    {
      usbd_edpt_stall(rhport, p_msc->ep_out);
    }
  }
}
 8002732:	e007      	b.n	8002744 <fail_scsi_op+0xa8>
      usbd_edpt_stall(rhport, p_msc->ep_out);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	4611      	mov	r1, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f003 f8f6 	bl	8005930 <usbd_edpt_stall>
}
 8002744:	bf00      	nop
 8002746:	3720      	adds	r7, #32
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <rdwr10_get_lba>:

static inline uint32_t rdwr10_get_lba(uint8_t const command[])
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  // use offsetof to avoid pointer to the odd/unaligned address
  uint32_t const lba = tu_unaligned_read32(command + offsetof(scsi_write10_t, lba));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3302      	adds	r3, #2
 8002758:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	60fb      	str	r3, [r7, #12]

  // lba is in Big Endian
  return tu_ntohl(lba);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	ba1b      	rev	r3, r3
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <rdwr10_get_blockcount>:

static inline uint16_t rdwr10_get_blockcount(msc_cbw_t const* cbw)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint16_t const block_count = tu_unaligned_read16(cbw->command + offsetof(scsi_write10_t, block_count));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	330f      	adds	r3, #15
 800277c:	3307      	adds	r3, #7
 800277e:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	81fb      	strh	r3, [r7, #14]
  return tu_ntohs(block_count);
 8002786:	89fb      	ldrh	r3, [r7, #14]
 8002788:	ba5b      	rev16	r3, r3
 800278a:	b29b      	uxth	r3, r3
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <rdwr10_get_blocksize>:

static inline uint16_t rdwr10_get_blocksize(msc_cbw_t const* cbw)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  // first extract block count in the command
  uint16_t const block_count = rdwr10_get_blockcount(cbw);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7ff ffe5 	bl	8002770 <rdwr10_get_blockcount>
 80027a6:	4603      	mov	r3, r0
 80027a8:	81fb      	strh	r3, [r7, #14]

  // invalid block count
  if (block_count == 0) return 0;
 80027aa:	89fb      	ldrh	r3, [r7, #14]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <rdwr10_get_blocksize+0x1c>
 80027b0:	2300      	movs	r3, #0
 80027b2:	e005      	b.n	80027c0 <rdwr10_get_blocksize+0x28>

  return (uint16_t) (cbw->total_bytes / block_count);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	89fb      	ldrh	r3, [r7, #14]
 80027ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80027be:	b29b      	uxth	r3, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <rdwr10_validate_cmd>:

uint8_t rdwr10_validate_cmd(msc_cbw_t const* cbw)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint8_t status = MSC_CSW_STATUS_PASSED;
 80027d0:	2300      	movs	r3, #0
 80027d2:	77fb      	strb	r3, [r7, #31]
  uint16_t const block_count = rdwr10_get_blockcount(cbw);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7ff ffcb 	bl	8002770 <rdwr10_get_blockcount>
 80027da:	4603      	mov	r3, r0
 80027dc:	83bb      	strh	r3, [r7, #28]

  if ( cbw->total_bytes == 0 )
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d105      	bne.n	80027f2 <rdwr10_validate_cmd+0x2a>
  {
    if ( block_count )
 80027e6:	8bbb      	ldrh	r3, [r7, #28]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d048      	beq.n	800287e <rdwr10_validate_cmd+0xb6>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 2 (Hn < Di) or case 3 (Hn < Do) \r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 80027ec:	2302      	movs	r3, #2
 80027ee:	77fb      	strb	r3, [r7, #31]
 80027f0:	e045      	b.n	800287e <rdwr10_validate_cmd+0xb6>
    {
      // no data transfer, only exist in complaint test suite
    }
  }else
  {
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	7bdb      	ldrb	r3, [r3, #15]
 80027f6:	2b28      	cmp	r3, #40	; 0x28
 80027f8:	d119      	bne.n	800282e <rdwr10_validate_cmd+0x66>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	7b1b      	ldrb	r3, [r3, #12]
 80027fe:	76fb      	strb	r3, [r7, #27]
  return tu_bit_test(dir, 7);
 8002800:	7efb      	ldrb	r3, [r7, #27]
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	2307      	movs	r3, #7
 8002806:	74fb      	strb	r3, [r7, #19]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8002808:	7cfb      	ldrb	r3, [r7, #19]
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	fa22 f303 	lsr.w	r3, r2, r3
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	bf14      	ite	ne
 8002818:	2301      	movne	r3, #1
 800281a:	2300      	moveq	r3, #0
 800281c:	b2db      	uxtb	r3, r3
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 800281e:	f083 0301 	eor.w	r3, r3, #1
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <rdwr10_validate_cmd+0x66>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 10 (Ho <> Di)\r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 8002828:	2302      	movs	r3, #2
 800282a:	77fb      	strb	r3, [r7, #31]
 800282c:	e027      	b.n	800287e <rdwr10_validate_cmd+0xb6>
    }
    else if ( SCSI_CMD_WRITE_10 == cbw->command[0] && is_data_in(cbw->dir) )
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	7bdb      	ldrb	r3, [r3, #15]
 8002832:	2b2a      	cmp	r3, #42	; 0x2a
 8002834:	d116      	bne.n	8002864 <rdwr10_validate_cmd+0x9c>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	7b1b      	ldrb	r3, [r3, #12]
 800283a:	74bb      	strb	r3, [r7, #18]
  return tu_bit_test(dir, 7);
 800283c:	7cbb      	ldrb	r3, [r7, #18]
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	2307      	movs	r3, #7
 8002842:	72fb      	strb	r3, [r7, #11]
 8002844:	7afb      	ldrb	r3, [r7, #11]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	fa22 f303 	lsr.w	r3, r2, r3
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf14      	ite	ne
 8002854:	2301      	movne	r3, #1
 8002856:	2300      	moveq	r3, #0
 8002858:	b2db      	uxtb	r3, r3
    else if ( SCSI_CMD_WRITE_10 == cbw->command[0] && is_data_in(cbw->dir) )
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <rdwr10_validate_cmd+0x9c>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 8 (Hi <> Do)\r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 800285e:	2302      	movs	r3, #2
 8002860:	77fb      	strb	r3, [r7, #31]
 8002862:	e00c      	b.n	800287e <rdwr10_validate_cmd+0xb6>
    }
    else if ( 0 == block_count )
 8002864:	8bbb      	ldrh	r3, [r7, #28]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d102      	bne.n	8002870 <rdwr10_validate_cmd+0xa8>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 4 Hi > Dn (READ10) or case 9 Ho > Dn (WRITE10) \r\n");
      status =  MSC_CSW_STATUS_FAILED;
 800286a:	2301      	movs	r3, #1
 800286c:	77fb      	strb	r3, [r7, #31]
 800286e:	e006      	b.n	800287e <rdwr10_validate_cmd+0xb6>
    }
    else if ( cbw->total_bytes / block_count == 0 )
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	8bbb      	ldrh	r3, [r7, #28]
 8002876:	429a      	cmp	r2, r3
 8002878:	d201      	bcs.n	800287e <rdwr10_validate_cmd+0xb6>
    {
      TU_LOG(MSC_DEBUG, " Computed block size = 0. SCSI case 7 Hi < Di (READ10) or case 13 Ho < Do (WRIT10)\r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 800287a:	2302      	movs	r3, #2
 800287c:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 800287e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3720      	adds	r7, #32
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <tud_msc_set_sense>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_msc_set_sense(uint8_t lun, uint8_t sense_key, uint8_t add_sense_code, uint8_t add_sense_qualifier)
{
 8002888:	b490      	push	{r4, r7}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	4604      	mov	r4, r0
 8002890:	4608      	mov	r0, r1
 8002892:	4611      	mov	r1, r2
 8002894:	461a      	mov	r2, r3
 8002896:	4623      	mov	r3, r4
 8002898:	71fb      	strb	r3, [r7, #7]
 800289a:	4603      	mov	r3, r0
 800289c:	71bb      	strb	r3, [r7, #6]
 800289e:	460b      	mov	r3, r1
 80028a0:	717b      	strb	r3, [r7, #5]
 80028a2:	4613      	mov	r3, r2
 80028a4:	713b      	strb	r3, [r7, #4]
  (void) lun;

  _mscd_itf.sense_key           = sense_key;
 80028a6:	4a09      	ldr	r2, [pc, #36]	; (80028cc <tud_msc_set_sense+0x44>)
 80028a8:	79bb      	ldrb	r3, [r7, #6]
 80028aa:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  _mscd_itf.add_sense_code      = add_sense_code;
 80028ae:	4a07      	ldr	r2, [pc, #28]	; (80028cc <tud_msc_set_sense+0x44>)
 80028b0:	797b      	ldrb	r3, [r7, #5]
 80028b2:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 80028b6:	4a05      	ldr	r2, [pc, #20]	; (80028cc <tud_msc_set_sense+0x44>)
 80028b8:	793b      	ldrb	r3, [r7, #4]
 80028ba:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e

  return true;
 80028be:	2301      	movs	r3, #1
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc90      	pop	{r4, r7}
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	20002d3c 	.word	0x20002d3c

080028d0 <set_sense_medium_not_present>:

static inline void set_sense_medium_not_present(uint8_t lun)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
  // default sense is NOT READY, MEDIUM NOT PRESENT
  tud_msc_set_sense(lun, SCSI_SENSE_NOT_READY, 0x3A, 0x00);
 80028da:	79f8      	ldrb	r0, [r7, #7]
 80028dc:	2300      	movs	r3, #0
 80028de:	223a      	movs	r2, #58	; 0x3a
 80028e0:	2102      	movs	r1, #2
 80028e2:	f7ff ffd1 	bl	8002888 <tud_msc_set_sense>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <mscd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void mscd_init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 80028f4:	2240      	movs	r2, #64	; 0x40
 80028f6:	2100      	movs	r1, #0
 80028f8:	4802      	ldr	r0, [pc, #8]	; (8002904 <mscd_init+0x14>)
 80028fa:	f00a f8a9 	bl	800ca50 <memset>
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20002d3c 	.word	0x20002d3c

08002908 <mscd_reset>:

void mscd_reset(uint8_t rhport)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 8002912:	2240      	movs	r2, #64	; 0x40
 8002914:	2100      	movs	r1, #0
 8002916:	4803      	ldr	r0, [pc, #12]	; (8002924 <mscd_reset+0x1c>)
 8002918:	f00a f89a 	bl	800ca50 <memset>
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20002d3c 	.word	0x20002d3c

08002928 <mscd_open>:

uint16_t mscd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08c      	sub	sp, #48	; 0x30
 800292c:	af02      	add	r7, sp, #8
 800292e:	4603      	mov	r3, r0
 8002930:	6039      	str	r1, [r7, #0]
 8002932:	71fb      	strb	r3, [r7, #7]
 8002934:	4613      	mov	r3, r2
 8002936:	80bb      	strh	r3, [r7, #4]
  // only support SCSI's BOT protocol
  TU_VERIFY(TUSB_CLASS_MSC    == itf_desc->bInterfaceClass &&
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	795b      	ldrb	r3, [r3, #5]
 800293c:	2b08      	cmp	r3, #8
 800293e:	d107      	bne.n	8002950 <mscd_open+0x28>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	799b      	ldrb	r3, [r3, #6]
 8002944:	2b06      	cmp	r3, #6
 8002946:	d103      	bne.n	8002950 <mscd_open+0x28>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	79db      	ldrb	r3, [r3, #7]
 800294c:	2b50      	cmp	r3, #80	; 0x50
 800294e:	d001      	beq.n	8002954 <mscd_open+0x2c>
 8002950:	2300      	movs	r3, #0
 8002952:	e053      	b.n	80029fc <mscd_open+0xd4>
            MSC_SUBCLASS_SCSI == itf_desc->bInterfaceSubClass &&
            MSC_PROTOCOL_BOT  == itf_desc->bInterfaceProtocol, 0);

  // msc driver length is fixed
  uint16_t const drv_len = sizeof(tusb_desc_interface_t) + 2*sizeof(tusb_desc_endpoint_t);
 8002954:	2317      	movs	r3, #23
 8002956:	84fb      	strh	r3, [r7, #38]	; 0x26

  // Max length must be at least 1 interface + 2 endpoints
  TU_ASSERT(max_len >= drv_len, 0);
 8002958:	88ba      	ldrh	r2, [r7, #4]
 800295a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800295c:	429a      	cmp	r2, r3
 800295e:	d20a      	bcs.n	8002976 <mscd_open+0x4e>
 8002960:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <mscd_open+0xdc>)
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d000      	beq.n	8002972 <mscd_open+0x4a>
 8002970:	be00      	bkpt	0x0000
 8002972:	2300      	movs	r3, #0
 8002974:	e042      	b.n	80029fc <mscd_open+0xd4>

  mscd_interface_t * p_msc = &_mscd_itf;
 8002976:	4b24      	ldr	r3, [pc, #144]	; (8002a08 <mscd_open+0xe0>)
 8002978:	623b      	str	r3, [r7, #32]
  p_msc->itf_num = itf_desc->bInterfaceNumber;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	789a      	ldrb	r2, [r3, #2]
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1899      	adds	r1, r3, r2

  // Open endpoint pair
  TU_ASSERT( usbd_open_edpt_pair(rhport, tu_desc_next(itf_desc), 2, TUSB_XFER_BULK, &p_msc->ep_out, &p_msc->ep_in), 0 );
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	332f      	adds	r3, #47	; 0x2f
 800299a:	6a3a      	ldr	r2, [r7, #32]
 800299c:	322e      	adds	r2, #46	; 0x2e
 800299e:	79f8      	ldrb	r0, [r7, #7]
 80029a0:	9201      	str	r2, [sp, #4]
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	2302      	movs	r3, #2
 80029a6:	2202      	movs	r2, #2
 80029a8:	f002 fe1e 	bl	80055e8 <usbd_open_edpt_pair>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f083 0301 	eor.w	r3, r3, #1
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00a      	beq.n	80029ce <mscd_open+0xa6>
 80029b8:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <mscd_open+0xdc>)
 80029ba:	61bb      	str	r3, [r7, #24]
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d000      	beq.n	80029ca <mscd_open+0xa2>
 80029c8:	be00      	bkpt	0x0000
 80029ca:	2300      	movs	r3, #0
 80029cc:	e016      	b.n	80029fc <mscd_open+0xd4>

  // Prepare for Command Block Wrapper
  TU_ASSERT( prepare_cbw(rhport, p_msc), drv_len);
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	6a39      	ldr	r1, [r7, #32]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff fe4b 	bl	800266e <prepare_cbw>
 80029d8:	4603      	mov	r3, r0
 80029da:	f083 0301 	eor.w	r3, r3, #1
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <mscd_open+0xd2>
 80029e4:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <mscd_open+0xdc>)
 80029e6:	61fb      	str	r3, [r7, #28]
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d000      	beq.n	80029f6 <mscd_open+0xce>
 80029f4:	be00      	bkpt	0x0000
 80029f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029f8:	e000      	b.n	80029fc <mscd_open+0xd4>

  return drv_len;
 80029fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3728      	adds	r7, #40	; 0x28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	e000edf0 	.word	0xe000edf0
 8002a08:	20002d3c 	.word	0x20002d3c

08002a0c <proc_bot_reset>:

static void proc_bot_reset(mscd_interface_t* p_msc)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  p_msc->stage       = MSC_STAGE_CMD;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  p_msc->total_len   = 0;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	635a      	str	r2, [r3, #52]	; 0x34
  p_msc->xferred_len = 0;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	639a      	str	r2, [r3, #56]	; 0x38

  p_msc->sense_key           = 0;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  p_msc->add_sense_code      = 0;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  p_msc->add_sense_qualifier = 0;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <mscd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool mscd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	603a      	str	r2, [r7, #0]
 8002a56:	71fb      	strb	r3, [r7, #7]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	71bb      	strb	r3, [r7, #6]
  // nothing to do with DATA & ACK stage
  if (stage != CONTROL_STAGE_SETUP) return true;
 8002a5c:	79bb      	ldrb	r3, [r7, #6]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d001      	beq.n	8002a66 <mscd_control_xfer_cb+0x1a>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e0e6      	b.n	8002c34 <mscd_control_xfer_cb+0x1e8>

  mscd_interface_t* p_msc = &_mscd_itf;
 8002a66:	4b75      	ldr	r3, [pc, #468]	; (8002c3c <mscd_control_xfer_cb+0x1f0>)
 8002a68:	61fb      	str	r3, [r7, #28]

  // Clear Endpoint Feature (stall) for recovery
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f040 8090 	bne.w	8002b9a <mscd_control_xfer_cb+0x14e>
       TUSB_REQ_RCPT_ENDPOINT     == request->bmRequestType_bit.recipient &&
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	b2db      	uxtb	r3, r3
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	f040 8088 	bne.w	8002b9a <mscd_control_xfer_cb+0x14e>
       TUSB_REQ_CLEAR_FEATURE     == request->bRequest                    &&
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	785b      	ldrb	r3, [r3, #1]
       TUSB_REQ_RCPT_ENDPOINT     == request->bmRequestType_bit.recipient &&
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	f040 8083 	bne.w	8002b9a <mscd_control_xfer_cb+0x14e>
       TUSB_REQ_FEATURE_EDPT_HALT == request->wValue )
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	885b      	ldrh	r3, [r3, #2]
 8002a98:	b29b      	uxth	r3, r3
       TUSB_REQ_CLEAR_FEATURE     == request->bRequest                    &&
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d17d      	bne.n	8002b9a <mscd_control_xfer_cb+0x14e>
  {
    uint8_t const ep_addr = tu_u16_low(request->wIndex);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	889b      	ldrh	r3, [r3, #4]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8002aa6:	89fb      	ldrh	r3, [r7, #14]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	76fb      	strb	r3, [r7, #27]

    if ( p_msc->stage == MSC_STAGE_NEED_RESET )
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d106      	bne.n	8002ac4 <mscd_control_xfer_cb+0x78>
    {
      // reset recovery is required to recover from this stage
      // Clear Stall request cannot resolve this -> continue to stall endpoint
      usbd_edpt_stall(rhport, ep_addr);
 8002ab6:	7efa      	ldrb	r2, [r7, #27]
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f002 ff37 	bl	8005930 <usbd_edpt_stall>
 8002ac2:	e068      	b.n	8002b96 <mscd_control_xfer_cb+0x14a>
    }
    else
    {
      if ( ep_addr == p_msc->ep_in )
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002aca:	7efa      	ldrb	r2, [r7, #27]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d11a      	bne.n	8002b06 <mscd_control_xfer_cb+0xba>
      {
        if ( p_msc->stage == MSC_STAGE_STATUS )
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d15d      	bne.n	8002b96 <mscd_control_xfer_cb+0x14a>
        {
          // resume sending SCSI status if we are in this stage previously before stalled
          TU_ASSERT( send_csw(rhport, p_msc) );
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	69f9      	ldr	r1, [r7, #28]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fda5 	bl	800262e <send_csw>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f083 0301 	eor.w	r3, r3, #1
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d052      	beq.n	8002b96 <mscd_control_xfer_cb+0x14a>
 8002af0:	4b53      	ldr	r3, [pc, #332]	; (8002c40 <mscd_control_xfer_cb+0x1f4>)
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d000      	beq.n	8002b02 <mscd_control_xfer_cb+0xb6>
 8002b00:	be00      	bkpt	0x0000
 8002b02:	2300      	movs	r3, #0
 8002b04:	e096      	b.n	8002c34 <mscd_control_xfer_cb+0x1e8>
        }
      }
      else if ( ep_addr == p_msc->ep_out )
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002b0c:	7efa      	ldrb	r2, [r7, #27]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d141      	bne.n	8002b96 <mscd_control_xfer_cb+0x14a>
      {
        if ( p_msc->stage == MSC_STAGE_CMD )
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d13c      	bne.n	8002b96 <mscd_control_xfer_cb+0x14a>
        {
          // part of reset recovery (probably due to invalid CBW) -> prepare for new command
          // Note: skip if already queued previously
          if ( usbd_edpt_ready(rhport, p_msc->ep_out) )
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	737b      	strb	r3, [r7, #13]
 8002b26:	4613      	mov	r3, r2
 8002b28:	733b      	strb	r3, [r7, #12]

// Check if endpoint is ready (not busy and not stalled)
TU_ATTR_ALWAYS_INLINE static inline
bool usbd_edpt_ready(uint8_t rhport, uint8_t ep_addr)
{
  return !usbd_edpt_busy(rhport, ep_addr) && !usbd_edpt_stalled(rhport, ep_addr);
 8002b2a:	7b3a      	ldrb	r2, [r7, #12]
 8002b2c:	7b7b      	ldrb	r3, [r7, #13]
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f002 fecf 	bl	80058d4 <usbd_edpt_busy>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f083 0301 	eor.w	r3, r3, #1
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00d      	beq.n	8002b5e <mscd_control_xfer_cb+0x112>
 8002b42:	7b3a      	ldrb	r2, [r7, #12]
 8002b44:	7b7b      	ldrb	r3, [r7, #13]
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f002 ff89 	bl	8005a60 <usbd_edpt_stalled>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	f083 0301 	eor.w	r3, r3, #1
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <mscd_control_xfer_cb+0x112>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <mscd_control_xfer_cb+0x114>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d015      	beq.n	8002b96 <mscd_control_xfer_cb+0x14a>
          {
            TU_ASSERT( prepare_cbw(rhport, p_msc) );
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	69f9      	ldr	r1, [r7, #28]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fd7d 	bl	800266e <prepare_cbw>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f083 0301 	eor.w	r3, r3, #1
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00a      	beq.n	8002b96 <mscd_control_xfer_cb+0x14a>
 8002b80:	4b2f      	ldr	r3, [pc, #188]	; (8002c40 <mscd_control_xfer_cb+0x1f4>)
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d000      	beq.n	8002b92 <mscd_control_xfer_cb+0x146>
 8002b90:	be00      	bkpt	0x0000
 8002b92:	2300      	movs	r3, #0
 8002b94:	e04e      	b.n	8002c34 <mscd_control_xfer_cb+0x1e8>
          }
        }
      }
    }

    return true;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e04c      	b.n	8002c34 <mscd_control_xfer_cb+0x1e8>
  }

  // From this point only handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	d001      	beq.n	8002bac <mscd_control_xfer_cb+0x160>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	e043      	b.n	8002c34 <mscd_control_xfer_cb+0x1e8>

  switch ( request->bRequest )
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	785b      	ldrb	r3, [r3, #1]
 8002bb0:	2bfe      	cmp	r3, #254	; 0xfe
 8002bb2:	d016      	beq.n	8002be2 <mscd_control_xfer_cb+0x196>
 8002bb4:	2bff      	cmp	r3, #255	; 0xff
 8002bb6:	d13a      	bne.n	8002c2e <mscd_control_xfer_cb+0x1e2>
  {
    case MSC_REQ_RESET:
      TU_LOG(MSC_DEBUG, "  MSC BOT Reset\r\n");
      TU_VERIFY(request->wValue == 0 && request->wLength == 0);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	885b      	ldrh	r3, [r3, #2]
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d104      	bne.n	8002bcc <mscd_control_xfer_cb+0x180>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	88db      	ldrh	r3, [r3, #6]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <mscd_control_xfer_cb+0x184>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	e031      	b.n	8002c34 <mscd_control_xfer_cb+0x1e8>

      // driver state reset
      proc_bot_reset(p_msc);
 8002bd0:	69f8      	ldr	r0, [r7, #28]
 8002bd2:	f7ff ff1b 	bl	8002a0c <proc_bot_reset>

      tud_control_status(rhport, request);
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	6839      	ldr	r1, [r7, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f002 ff8a 	bl	8005af4 <tud_control_status>
    break;
 8002be0:	e027      	b.n	8002c32 <mscd_control_xfer_cb+0x1e6>

    case MSC_REQ_GET_MAX_LUN:
    {
      TU_LOG(MSC_DEBUG, "  MSC Get Max Lun\r\n");
      TU_VERIFY(request->wValue == 0 && request->wLength == 1);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	885b      	ldrh	r3, [r3, #2]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d104      	bne.n	8002bf6 <mscd_control_xfer_cb+0x1aa>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	88db      	ldrh	r3, [r3, #6]
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d001      	beq.n	8002bfa <mscd_control_xfer_cb+0x1ae>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	e01c      	b.n	8002c34 <mscd_control_xfer_cb+0x1e8>

      uint8_t maxlun = 1;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	72fb      	strb	r3, [r7, #11]
      if (tud_msc_get_maxlun_cb) maxlun = tud_msc_get_maxlun_cb();
 8002bfe:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <mscd_control_xfer_cb+0x1f8>)
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <mscd_control_xfer_cb+0x1c0>
 8002c04:	f3af 8000 	nop.w
 8002c08:	4603      	mov	r3, r0
 8002c0a:	72fb      	strb	r3, [r7, #11]
      TU_VERIFY(maxlun);
 8002c0c:	7afb      	ldrb	r3, [r7, #11]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <mscd_control_xfer_cb+0x1ca>
 8002c12:	2300      	movs	r3, #0
 8002c14:	e00e      	b.n	8002c34 <mscd_control_xfer_cb+0x1e8>

      // MAX LUN is minus 1 by specs
      maxlun--;
 8002c16:	7afb      	ldrb	r3, [r7, #11]
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	72fb      	strb	r3, [r7, #11]

      tud_control_xfer(rhport, request, &maxlun, 1);
 8002c1e:	f107 020b 	add.w	r2, r7, #11
 8002c22:	79f8      	ldrb	r0, [r7, #7]
 8002c24:	2301      	movs	r3, #1
 8002c26:	6839      	ldr	r1, [r7, #0]
 8002c28:	f002 ffc2 	bl	8005bb0 <tud_control_xfer>
    }
    break;
 8002c2c:	e001      	b.n	8002c32 <mscd_control_xfer_cb+0x1e6>

    default: return false; // stall unsupported request
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e000      	b.n	8002c34 <mscd_control_xfer_cb+0x1e8>
  }

  return true;
 8002c32:	2301      	movs	r3, #1
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3720      	adds	r7, #32
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20002d3c 	.word	0x20002d3c
 8002c40:	e000edf0 	.word	0xe000edf0
 8002c44:	00000000 	.word	0x00000000

08002c48 <mscd_xfer_cb>:

bool mscd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b098      	sub	sp, #96	; 0x60
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	4603      	mov	r3, r0
 8002c52:	71fb      	strb	r3, [r7, #7]
 8002c54:	460b      	mov	r3, r1
 8002c56:	71bb      	strb	r3, [r7, #6]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	717b      	strb	r3, [r7, #5]
  (void) event;

  mscd_interface_t* p_msc = &_mscd_itf;
 8002c5c:	4b95      	ldr	r3, [pc, #596]	; (8002eb4 <mscd_xfer_cb+0x26c>)
 8002c5e:	65bb      	str	r3, [r7, #88]	; 0x58
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 8002c60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c62:	657b      	str	r3, [r7, #84]	; 0x54
  msc_csw_t       * p_csw = &p_msc->csw;
 8002c64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c66:	3320      	adds	r3, #32
 8002c68:	653b      	str	r3, [r7, #80]	; 0x50

  switch (p_msc->stage)
 8002c6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	f200 8207 	bhi.w	8003084 <mscd_xfer_cb+0x43c>
 8002c76:	a201      	add	r2, pc, #4	; (adr r2, 8002c7c <mscd_xfer_cb+0x34>)
 8002c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7c:	08002c8d 	.word	0x08002c8d
 8002c80:	08002f19 	.word	0x08002f19
 8002c84:	08003085 	.word	0x08003085
 8002c88:	08002ff3 	.word	0x08002ff3
  {
    case MSC_STAGE_CMD:
      //------------- new CBW received -------------//
      // Complete IN while waiting for CMD is usually Status of previous SCSI op, ignore it
      if(ep_addr != p_msc->ep_out) return true;
 8002c8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c8e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002c92:	79ba      	ldrb	r2, [r7, #6]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <mscd_xfer_cb+0x54>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e247      	b.n	800312c <mscd_xfer_cb+0x4e4>

      if ( !(xferred_bytes == sizeof(msc_cbw_t) && p_cbw->signature == MSC_CBW_SIGNATURE) )
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b1f      	cmp	r3, #31
 8002ca0:	d104      	bne.n	8002cac <mscd_xfer_cb+0x64>
 8002ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a84      	ldr	r2, [pc, #528]	; (8002eb8 <mscd_xfer_cb+0x270>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d015      	beq.n	8002cd8 <mscd_xfer_cb+0x90>
      {
        TU_LOG(MSC_DEBUG, "  SCSI CBW is not valid\r\n");

        // BOT 6.6.1 If CBW is not valid stall both endpoints until reset recovery
        p_msc->stage = MSC_STAGE_NEED_RESET;
 8002cac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cae:	2204      	movs	r2, #4
 8002cb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

        // invalid CBW stall both endpoints
        usbd_edpt_stall(rhport, p_msc->ep_in);
 8002cb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cb6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f002 fe36 	bl	8005930 <usbd_edpt_stall>
        usbd_edpt_stall(rhport, p_msc->ep_out);
 8002cc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cc6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	4611      	mov	r1, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f002 fe2e 	bl	8005930 <usbd_edpt_stall>

        return false;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	e229      	b.n	800312c <mscd_xfer_cb+0x4e4>
      }

      TU_LOG(MSC_DEBUG, "  SCSI Command [Lun%u]: %s\r\n", p_cbw->lun, tu_lookup_find(&_msc_scsi_cmd_table, p_cbw->command[0]));
      //TU_LOG_MEM(MSC_DEBUG, p_cbw, xferred_bytes, 2);

      p_csw->signature    = MSC_CSW_SIGNATURE;
 8002cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 8002ce0:	701a      	strb	r2, [r3, #0]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8002ce8:	705a      	strb	r2, [r3, #1]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 8002cf0:	709a      	strb	r2, [r3, #2]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8002cf8:	70da      	strb	r2, [r3, #3]
      p_csw->tag          = p_cbw->tag;
 8002cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d00:	605a      	str	r2, [r3, #4]
      p_csw->data_residue = 0;
 8002d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d04:	2200      	movs	r2, #0
 8002d06:	721a      	strb	r2, [r3, #8]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	725a      	strb	r2, [r3, #9]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	729a      	strb	r2, [r3, #10]
 8002d10:	2200      	movs	r2, #0
 8002d12:	72da      	strb	r2, [r3, #11]
      p_csw->status       = MSC_CSW_STATUS_PASSED;
 8002d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d16:	2200      	movs	r2, #0
 8002d18:	731a      	strb	r2, [r3, #12]

      /*------------- Parse command and prepare DATA -------------*/
      p_msc->stage = MSC_STAGE_DATA;
 8002d1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      p_msc->total_len = p_cbw->total_bytes;
 8002d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d28:	635a      	str	r2, [r3, #52]	; 0x34
      p_msc->xferred_len = 0;
 8002d2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	639a      	str	r2, [r3, #56]	; 0x38

      // Read10 or Write10
      if ( (SCSI_CMD_READ_10 == p_cbw->command[0]) || (SCSI_CMD_WRITE_10 == p_cbw->command[0]) )
 8002d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d32:	7bdb      	ldrb	r3, [r3, #15]
 8002d34:	2b28      	cmp	r3, #40	; 0x28
 8002d36:	d003      	beq.n	8002d40 <mscd_xfer_cb+0xf8>
 8002d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d3a:	7bdb      	ldrb	r3, [r3, #15]
 8002d3c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d3e:	d12a      	bne.n	8002d96 <mscd_xfer_cb+0x14e>
      {
        uint8_t const status = rdwr10_validate_cmd(p_cbw);
 8002d40:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002d42:	f7ff fd41 	bl	80027c8 <rdwr10_validate_cmd>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

        if ( status != MSC_CSW_STATUS_PASSED)
 8002d4c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d007      	beq.n	8002d64 <mscd_xfer_cb+0x11c>
        {
          fail_scsi_op(rhport, p_msc, status);
 8002d54:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff fc9d 	bl	800269c <fail_scsi_op>
      {
 8002d62:	e0d8      	b.n	8002f16 <mscd_xfer_cb+0x2ce>
        }else if ( p_cbw->total_bytes )
 8002d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00f      	beq.n	8002d8c <mscd_xfer_cb+0x144>
        {
          if (SCSI_CMD_READ_10 == p_cbw->command[0])
 8002d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d6e:	7bdb      	ldrb	r3, [r3, #15]
 8002d70:	2b28      	cmp	r3, #40	; 0x28
 8002d72:	d105      	bne.n	8002d80 <mscd_xfer_cb+0x138>
          {
            proc_read10_cmd(rhport, p_msc);
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fbfb 	bl	8003574 <proc_read10_cmd>
      {
 8002d7e:	e0ca      	b.n	8002f16 <mscd_xfer_cb+0x2ce>
          }else
          {
            proc_write10_cmd(rhport, p_msc);
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 fc89 	bl	800369c <proc_write10_cmd>
      {
 8002d8a:	e0c4      	b.n	8002f16 <mscd_xfer_cb+0x2ce>
          }
        }else
        {
          // no data transfer, only exist in complaint test suite
          p_msc->stage = MSC_STAGE_STATUS;
 8002d8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      {
 8002d94:	e0bf      	b.n	8002f16 <mscd_xfer_cb+0x2ce>
      else
      {
        // For other SCSI commands
        // 1. OUT : queue transfer (invoke app callback after done)
        // 2. IN & Zero: Process if is built-in, else Invoke app callback. Skip DATA if zero length
        if ( (p_cbw->total_bytes > 0 ) && !is_data_in(p_cbw->dir) )
 8002d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d042      	beq.n	8002e24 <mscd_xfer_cb+0x1dc>
 8002d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da0:	7b1b      	ldrb	r3, [r3, #12]
 8002da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  return tu_bit_test(dir, 7);
 8002da6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dac:	2307      	movs	r3, #7
 8002dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8002db2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	bf14      	ite	ne
 8002dc4:	2301      	movne	r3, #1
 8002dc6:	2300      	moveq	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
        if ( (p_cbw->total_bytes > 0 ) && !is_data_in(p_cbw->dir) )
 8002dca:	f083 0301 	eor.w	r3, r3, #1
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d027      	beq.n	8002e24 <mscd_xfer_cb+0x1dc>
        {
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 8002dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ddc:	d906      	bls.n	8002dec <mscd_xfer_cb+0x1a4>
          {
            TU_LOG(MSC_DEBUG, "  SCSI reject non READ10/WRITE10 with large data\r\n");
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	2201      	movs	r2, #1
 8002de2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff fc59 	bl	800269c <fail_scsi_op>
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 8002dea:	e093      	b.n	8002f14 <mscd_xfer_cb+0x2cc>
          }else
          {
            // Didn't check for case 9 (Ho > Dn), which requires examining scsi command first
            // but it is OK to just receive data then responded with failed status
            TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, (uint16_t) p_msc->total_len) );
 8002dec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dee:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8002df2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	79f8      	ldrb	r0, [r7, #7]
 8002dfa:	4a30      	ldr	r2, [pc, #192]	; (8002ebc <mscd_xfer_cb+0x274>)
 8002dfc:	f002 fcf4 	bl	80057e8 <usbd_edpt_xfer>
 8002e00:	4603      	mov	r3, r0
 8002e02:	f083 0301 	eor.w	r3, r3, #1
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 8083 	beq.w	8002f14 <mscd_xfer_cb+0x2cc>
 8002e0e:	4b2c      	ldr	r3, [pc, #176]	; (8002ec0 <mscd_xfer_cb+0x278>)
 8002e10:	643b      	str	r3, [r7, #64]	; 0x40
 8002e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d000      	beq.n	8002e20 <mscd_xfer_cb+0x1d8>
 8002e1e:	be00      	bkpt	0x0000
 8002e20:	2300      	movs	r3, #0
 8002e22:	e183      	b.n	800312c <mscd_xfer_cb+0x4e4>
          }
        }else
        {
          // First process if it is a built-in commands
          int32_t resplen = proc_builtin_scsi(p_cbw->lun, p_cbw->command, _mscd_buf, sizeof(_mscd_buf));
 8002e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e26:	7b58      	ldrb	r0, [r3, #13]
 8002e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e2a:	f103 010f 	add.w	r1, r3, #15
 8002e2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e32:	4a22      	ldr	r2, [pc, #136]	; (8002ebc <mscd_xfer_cb+0x274>)
 8002e34:	f000 f988 	bl	8003148 <proc_builtin_scsi>
 8002e38:	65f8      	str	r0, [r7, #92]	; 0x5c

          // Invoke user callback if not built-in
          if ( (resplen < 0) && (p_msc->sense_key == 0) )
 8002e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	da10      	bge.n	8002e62 <mscd_xfer_cb+0x21a>
 8002e40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10b      	bne.n	8002e62 <mscd_xfer_cb+0x21a>
          {
            resplen = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, (uint16_t) p_msc->total_len);
 8002e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e4c:	7b58      	ldrb	r0, [r3, #13]
 8002e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e50:	f103 010f 	add.w	r1, r3, #15
 8002e54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	4a18      	ldr	r2, [pc, #96]	; (8002ebc <mscd_xfer_cb+0x274>)
 8002e5c:	f7fd ff96 	bl	8000d8c <tud_msc_scsi_cb>
 8002e60:	65f8      	str	r0, [r7, #92]	; 0x5c
          }

          if ( resplen < 0 )
 8002e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	da06      	bge.n	8002e76 <mscd_xfer_cb+0x22e>
          {
            // unsupported command
            TU_LOG(MSC_DEBUG, "  SCSI unsupported or failed command\r\n");
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff fc14 	bl	800269c <fail_scsi_op>
              TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) p_msc->total_len) );
            }
          }
        }
      }
    break;
 8002e74:	e108      	b.n	8003088 <mscd_xfer_cb+0x440>
          else if (resplen == 0)
 8002e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10f      	bne.n	8002e9c <mscd_xfer_cb+0x254>
            if (p_cbw->total_bytes)
 8002e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d006      	beq.n	8002e92 <mscd_xfer_cb+0x24a>
              fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	2201      	movs	r2, #1
 8002e88:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff fc06 	bl	800269c <fail_scsi_op>
    break;
 8002e90:	e0fa      	b.n	8003088 <mscd_xfer_cb+0x440>
              p_msc->stage = MSC_STAGE_STATUS;
 8002e92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e94:	2202      	movs	r2, #2
 8002e96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    break;
 8002e9a:	e0f5      	b.n	8003088 <mscd_xfer_cb+0x440>
            if ( p_cbw->total_bytes == 0 )
 8002e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10f      	bne.n	8002ec4 <mscd_xfer_cb+0x27c>
              fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fbf6 	bl	800269c <fail_scsi_op>
    break;
 8002eb0:	e0ea      	b.n	8003088 <mscd_xfer_cb+0x440>
 8002eb2:	bf00      	nop
 8002eb4:	20002d3c 	.word	0x20002d3c
 8002eb8:	43425355 	.word	0x43425355
 8002ebc:	20002d7c 	.word	0x20002d7c
 8002ec0:	e000edf0 	.word	0xe000edf0
              p_msc->total_len = tu_min32((uint32_t) resplen, p_cbw->total_bytes);
 8002ec4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	627a      	str	r2, [r7, #36]	; 0x24
 8002ecc:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 8002ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	bf28      	it	cs
 8002ed6:	461a      	movcs	r2, r3
 8002ed8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eda:	635a      	str	r2, [r3, #52]	; 0x34
              TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) p_msc->total_len) );
 8002edc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ede:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 8002ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	79f8      	ldrb	r0, [r7, #7]
 8002eea:	4a92      	ldr	r2, [pc, #584]	; (8003134 <mscd_xfer_cb+0x4ec>)
 8002eec:	f002 fc7c 	bl	80057e8 <usbd_edpt_xfer>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	f083 0301 	eor.w	r3, r3, #1
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80c5 	beq.w	8003088 <mscd_xfer_cb+0x440>
 8002efe:	4b8e      	ldr	r3, [pc, #568]	; (8003138 <mscd_xfer_cb+0x4f0>)
 8002f00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d000      	beq.n	8002f10 <mscd_xfer_cb+0x2c8>
 8002f0e:	be00      	bkpt	0x0000
 8002f10:	2300      	movs	r3, #0
 8002f12:	e10b      	b.n	800312c <mscd_xfer_cb+0x4e4>
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 8002f14:	bf00      	nop
    break;
 8002f16:	e0b7      	b.n	8003088 <mscd_xfer_cb+0x440>

    case MSC_STAGE_DATA:
      TU_LOG(MSC_DEBUG, "  SCSI Data [Lun%u]\r\n", p_cbw->lun);
      //TU_LOG_MEM(MSC_DEBUG, _mscd_buf, xferred_bytes, 2);

      if (SCSI_CMD_READ_10 == p_cbw->command[0])
 8002f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f1a:	7bdb      	ldrb	r3, [r3, #15]
 8002f1c:	2b28      	cmp	r3, #40	; 0x28
 8002f1e:	d116      	bne.n	8002f4e <mscd_xfer_cb+0x306>
      {
        p_msc->xferred_len += xferred_bytes;
 8002f20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	441a      	add	r2, r3
 8002f28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f2a:	639a      	str	r2, [r3, #56]	; 0x38

        if ( p_msc->xferred_len >= p_msc->total_len )
 8002f2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d304      	bcc.n	8002f42 <mscd_xfer_cb+0x2fa>
        {
          // Data Stage is complete
          p_msc->stage = MSC_STAGE_STATUS;
 8002f38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        {
          // This scenario with command that take more than one transfer is already rejected at Command stage
          TU_BREAKPOINT();
        }
      }
    break;
 8002f40:	e0a4      	b.n	800308c <mscd_xfer_cb+0x444>
          proc_read10_cmd(rhport, p_msc);
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fb14 	bl	8003574 <proc_read10_cmd>
    break;
 8002f4c:	e09e      	b.n	800308c <mscd_xfer_cb+0x444>
      else if (SCSI_CMD_WRITE_10 == p_cbw->command[0])
 8002f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f50:	7bdb      	ldrb	r3, [r3, #15]
 8002f52:	2b2a      	cmp	r3, #42	; 0x2a
 8002f54:	d106      	bne.n	8002f64 <mscd_xfer_cb+0x31c>
        proc_write10_new_data(rhport, p_msc, xferred_bytes);
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fbf5 	bl	800374c <proc_write10_new_data>
    break;
 8002f62:	e093      	b.n	800308c <mscd_xfer_cb+0x444>
        p_msc->xferred_len += xferred_bytes;
 8002f64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	441a      	add	r2, r3
 8002f6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f6e:	639a      	str	r2, [r3, #56]	; 0x38
        if ( !is_data_in(p_cbw->dir) )
 8002f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f72:	7b1b      	ldrb	r3, [r3, #12]
 8002f74:	77fb      	strb	r3, [r7, #31]
  return tu_bit_test(dir, 7);
 8002f76:	7ffb      	ldrb	r3, [r7, #31]
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	2307      	movs	r3, #7
 8002f7c:	75fb      	strb	r3, [r7, #23]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8002f7e:	7dfb      	ldrb	r3, [r7, #23]
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	fa22 f303 	lsr.w	r3, r2, r3
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	bf14      	ite	ne
 8002f8e:	2301      	movne	r3, #1
 8002f90:	2300      	moveq	r3, #0
 8002f92:	b2db      	uxtb	r3, r3
        if ( !is_data_in(p_cbw->dir) )
 8002f94:	f083 0301 	eor.w	r3, r3, #1
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d014      	beq.n	8002fc8 <mscd_xfer_cb+0x380>
          int32_t cb_result = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, (uint16_t) p_msc->total_len);
 8002f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fa0:	7b58      	ldrb	r0, [r3, #13]
 8002fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fa4:	f103 010f 	add.w	r1, r3, #15
 8002fa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	4a61      	ldr	r2, [pc, #388]	; (8003134 <mscd_xfer_cb+0x4ec>)
 8002fb0:	f7fd feec 	bl	8000d8c <tud_msc_scsi_cb>
 8002fb4:	64b8      	str	r0, [r7, #72]	; 0x48
          if ( cb_result < 0 )
 8002fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	da05      	bge.n	8002fc8 <mscd_xfer_cb+0x380>
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff fb6a 	bl	800269c <fail_scsi_op>
        if ( p_msc->xferred_len >= p_msc->total_len )
 8002fc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d304      	bcc.n	8002fde <mscd_xfer_cb+0x396>
          p_msc->stage = MSC_STAGE_STATUS;
 8002fd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    break;
 8002fdc:	e056      	b.n	800308c <mscd_xfer_cb+0x444>
          TU_BREAKPOINT();
 8002fde:	4b56      	ldr	r3, [pc, #344]	; (8003138 <mscd_xfer_cb+0x4f0>)
 8002fe0:	647b      	str	r3, [r7, #68]	; 0x44
 8002fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d04e      	beq.n	800308c <mscd_xfer_cb+0x444>
 8002fee:	be00      	bkpt	0x0000
    break;
 8002ff0:	e04c      	b.n	800308c <mscd_xfer_cb+0x444>
      // processed immediately after this switch, supposedly to be empty
    break;

    case MSC_STAGE_STATUS_SENT:
      // Wait for the Status phase to complete
      if( (ep_addr == p_msc->ep_in) && (xferred_bytes == sizeof(msc_csw_t)) )
 8002ff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ff4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002ff8:	79ba      	ldrb	r2, [r7, #6]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d148      	bne.n	8003090 <mscd_xfer_cb+0x448>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b0d      	cmp	r3, #13
 8003002:	d145      	bne.n	8003090 <mscd_xfer_cb+0x448>
        // TU_LOG_MEM(MSC_DEBUG, p_csw, xferred_bytes, 2);

        // Invoke complete callback if defined
        // Note: There is racing issue with samd51 + qspi flash testing with arduino
        // if complete_cb() is invoked after queuing the status.
        switch(p_cbw->command[0])
 8003004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003006:	7bdb      	ldrb	r3, [r3, #15]
 8003008:	2b28      	cmp	r3, #40	; 0x28
 800300a:	d002      	beq.n	8003012 <mscd_xfer_cb+0x3ca>
 800300c:	2b2a      	cmp	r3, #42	; 0x2a
 800300e:	d009      	beq.n	8003024 <mscd_xfer_cb+0x3dc>
 8003010:	e011      	b.n	8003036 <mscd_xfer_cb+0x3ee>
        {
          case SCSI_CMD_READ_10:
            if ( tud_msc_read10_complete_cb ) tud_msc_read10_complete_cb(p_cbw->lun);
 8003012:	4b4a      	ldr	r3, [pc, #296]	; (800313c <mscd_xfer_cb+0x4f4>)
 8003014:	2b00      	cmp	r3, #0
 8003016:	d01a      	beq.n	800304e <mscd_xfer_cb+0x406>
 8003018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800301a:	7b5b      	ldrb	r3, [r3, #13]
 800301c:	4618      	mov	r0, r3
 800301e:	f3af 8000 	nop.w
          break;
 8003022:	e014      	b.n	800304e <mscd_xfer_cb+0x406>

          case SCSI_CMD_WRITE_10:
            if ( tud_msc_write10_complete_cb ) tud_msc_write10_complete_cb(p_cbw->lun);
 8003024:	4b46      	ldr	r3, [pc, #280]	; (8003140 <mscd_xfer_cb+0x4f8>)
 8003026:	2b00      	cmp	r3, #0
 8003028:	d013      	beq.n	8003052 <mscd_xfer_cb+0x40a>
 800302a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800302c:	7b5b      	ldrb	r3, [r3, #13]
 800302e:	4618      	mov	r0, r3
 8003030:	f3af 8000 	nop.w
          break;
 8003034:	e00d      	b.n	8003052 <mscd_xfer_cb+0x40a>

          default:
            if ( tud_msc_scsi_complete_cb ) tud_msc_scsi_complete_cb(p_cbw->lun, p_cbw->command);
 8003036:	4b43      	ldr	r3, [pc, #268]	; (8003144 <mscd_xfer_cb+0x4fc>)
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00c      	beq.n	8003056 <mscd_xfer_cb+0x40e>
 800303c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800303e:	7b5a      	ldrb	r2, [r3, #13]
 8003040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003042:	330f      	adds	r3, #15
 8003044:	4619      	mov	r1, r3
 8003046:	4610      	mov	r0, r2
 8003048:	f3af 8000 	nop.w
          break;
 800304c:	e003      	b.n	8003056 <mscd_xfer_cb+0x40e>
          break;
 800304e:	bf00      	nop
 8003050:	e002      	b.n	8003058 <mscd_xfer_cb+0x410>
          break;
 8003052:	bf00      	nop
 8003054:	e000      	b.n	8003058 <mscd_xfer_cb+0x410>
          break;
 8003056:	bf00      	nop
        }

        TU_ASSERT( prepare_cbw(rhport, p_msc) );
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff fb06 	bl	800266e <prepare_cbw>
 8003062:	4603      	mov	r3, r0
 8003064:	f083 0301 	eor.w	r3, r3, #1
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d010      	beq.n	8003090 <mscd_xfer_cb+0x448>
 800306e:	4b32      	ldr	r3, [pc, #200]	; (8003138 <mscd_xfer_cb+0x4f0>)
 8003070:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d000      	beq.n	8003080 <mscd_xfer_cb+0x438>
 800307e:	be00      	bkpt	0x0000
 8003080:	2300      	movs	r3, #0
 8003082:	e053      	b.n	800312c <mscd_xfer_cb+0x4e4>
        // Any xfer ended here is consider unknown error, ignore it
        TU_LOG1("  Warning expect SCSI Status but received unknown data\r\n");
      }
    break;

    default : break;
 8003084:	bf00      	nop
 8003086:	e004      	b.n	8003092 <mscd_xfer_cb+0x44a>
    break;
 8003088:	bf00      	nop
 800308a:	e002      	b.n	8003092 <mscd_xfer_cb+0x44a>
    break;
 800308c:	bf00      	nop
 800308e:	e000      	b.n	8003092 <mscd_xfer_cb+0x44a>
    break;
 8003090:	bf00      	nop
  }

  if ( p_msc->stage == MSC_STAGE_STATUS )
 8003092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003094:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003098:	2b02      	cmp	r3, #2
 800309a:	d146      	bne.n	800312a <mscd_xfer_cb+0x4e2>
  {
    // skip status if epin is currently stalled, will do it when received Clear Stall request
    if ( !usbd_edpt_stalled(rhport,  p_msc->ep_in) )
 800309c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800309e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f002 fcda 	bl	8005a60 <usbd_edpt_stalled>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f083 0301 	eor.w	r3, r3, #1
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d038      	beq.n	800312a <mscd_xfer_cb+0x4e2>
    {
      if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
 80030b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d91c      	bls.n	80030fe <mscd_xfer_cb+0x4b6>
 80030c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030c6:	7b1b      	ldrb	r3, [r3, #12]
 80030c8:	75bb      	strb	r3, [r7, #22]
  return tu_bit_test(dir, 7);
 80030ca:	7dbb      	ldrb	r3, [r7, #22]
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	2307      	movs	r3, #7
 80030d0:	73fb      	strb	r3, [r7, #15]
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	fa22 f303 	lsr.w	r3, r2, r3
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	bf14      	ite	ne
 80030e2:	2301      	movne	r3, #1
 80030e4:	2300      	moveq	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
      if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <mscd_xfer_cb+0x4b6>
      {
        // 6.7 The 13 Cases: case 5 (Hi > Di): STALL before status
        // TU_LOG(MSC_DEBUG, "  SCSI case 5 (Hi > Di): %lu > %lu\r\n", p_cbw->total_bytes, p_msc->xferred_len);
        usbd_edpt_stall(rhport, p_msc->ep_in);
 80030ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ee:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	4611      	mov	r1, r2
 80030f6:	4618      	mov	r0, r3
 80030f8:	f002 fc1a 	bl	8005930 <usbd_edpt_stall>
 80030fc:	e015      	b.n	800312a <mscd_xfer_cb+0x4e2>
      }else
      {
        TU_ASSERT( send_csw(rhport, p_msc) );
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fa93 	bl	800262e <send_csw>
 8003108:	4603      	mov	r3, r0
 800310a:	f083 0301 	eor.w	r3, r3, #1
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00a      	beq.n	800312a <mscd_xfer_cb+0x4e2>
 8003114:	4b08      	ldr	r3, [pc, #32]	; (8003138 <mscd_xfer_cb+0x4f0>)
 8003116:	637b      	str	r3, [r7, #52]	; 0x34
 8003118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d000      	beq.n	8003126 <mscd_xfer_cb+0x4de>
 8003124:	be00      	bkpt	0x0000
 8003126:	2300      	movs	r3, #0
 8003128:	e000      	b.n	800312c <mscd_xfer_cb+0x4e4>
      send_csw(rhport, p_msc);
    }
    #endif
  }

  return true;
 800312a:	2301      	movs	r3, #1
}
 800312c:	4618      	mov	r0, r3
 800312e:	3760      	adds	r7, #96	; 0x60
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	20002d7c 	.word	0x20002d7c
 8003138:	e000edf0 	.word	0xe000edf0
	...

08003148 <proc_builtin_scsi>:
 *------------------------------------------------------------------*/

// return response's length (copied to buffer). Negative if it is not an built-in command or indicate Failed status (CSW)
// In case of a failed status, sense key must be set for reason of failure
static int32_t proc_builtin_scsi(uint8_t lun, uint8_t const scsi_cmd[16], uint8_t* buffer, uint32_t bufsize)
{
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b0a3      	sub	sp, #140	; 0x8c
 800314c:	af00      	add	r7, sp, #0
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	4603      	mov	r3, r0
 8003156:	73fb      	strb	r3, [r7, #15]
  (void) bufsize; // TODO refractor later
  int32_t resplen;

  mscd_interface_t* p_msc = &_mscd_itf;
 8003158:	4bb4      	ldr	r3, [pc, #720]	; (800342c <proc_builtin_scsi+0x2e4>)
 800315a:	67fb      	str	r3, [r7, #124]	; 0x7c

  switch ( scsi_cmd[0] )
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b25      	cmp	r3, #37	; 0x25
 8003162:	f200 81f4 	bhi.w	800354e <proc_builtin_scsi+0x406>
 8003166:	a201      	add	r2, pc, #4	; (adr r2, 800316c <proc_builtin_scsi+0x24>)
 8003168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316c:	08003205 	.word	0x08003205
 8003170:	0800354f 	.word	0x0800354f
 8003174:	0800354f 	.word	0x0800354f
 8003178:	080034b7 	.word	0x080034b7
 800317c:	0800354f 	.word	0x0800354f
 8003180:	0800354f 	.word	0x0800354f
 8003184:	0800354f 	.word	0x0800354f
 8003188:	0800354f 	.word	0x0800354f
 800318c:	0800354f 	.word	0x0800354f
 8003190:	0800354f 	.word	0x0800354f
 8003194:	0800354f 	.word	0x0800354f
 8003198:	0800354f 	.word	0x0800354f
 800319c:	0800354f 	.word	0x0800354f
 80031a0:	0800354f 	.word	0x0800354f
 80031a4:	0800354f 	.word	0x0800354f
 80031a8:	0800354f 	.word	0x0800354f
 80031ac:	0800354f 	.word	0x0800354f
 80031b0:	0800354f 	.word	0x0800354f
 80031b4:	0800339b 	.word	0x0800339b
 80031b8:	0800354f 	.word	0x0800354f
 80031bc:	0800354f 	.word	0x0800354f
 80031c0:	0800354f 	.word	0x0800354f
 80031c4:	0800354f 	.word	0x0800354f
 80031c8:	0800354f 	.word	0x0800354f
 80031cc:	0800354f 	.word	0x0800354f
 80031d0:	0800354f 	.word	0x0800354f
 80031d4:	08003435 	.word	0x08003435
 80031d8:	0800323f 	.word	0x0800323f
 80031dc:	0800354f 	.word	0x0800354f
 80031e0:	0800354f 	.word	0x0800354f
 80031e4:	0800354f 	.word	0x0800354f
 80031e8:	0800354f 	.word	0x0800354f
 80031ec:	0800354f 	.word	0x0800354f
 80031f0:	0800354f 	.word	0x0800354f
 80031f4:	0800354f 	.word	0x0800354f
 80031f8:	0800331d 	.word	0x0800331d
 80031fc:	0800354f 	.word	0x0800354f
 8003200:	080032b7 	.word	0x080032b7
  {
    case SCSI_CMD_TEST_UNIT_READY:
      resplen = 0;
 8003204:	2300      	movs	r3, #0
 8003206:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      if ( !tud_msc_test_unit_ready_cb(lun) )
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	4618      	mov	r0, r3
 800320e:	f7fd fd21 	bl	8000c54 <tud_msc_test_unit_ready_cb>
 8003212:	4603      	mov	r3, r0
 8003214:	f083 0301 	eor.w	r3, r3, #1
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 819c 	beq.w	8003558 <proc_builtin_scsi+0x410>
      {
        // Failed status response
        resplen = - 1;
 8003220:	f04f 33ff 	mov.w	r3, #4294967295
 8003224:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 8003228:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800322a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800322e:	2b00      	cmp	r3, #0
 8003230:	f040 8192 	bne.w	8003558 <proc_builtin_scsi+0x410>
 8003234:	7bfb      	ldrb	r3, [r7, #15]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fb4a 	bl	80028d0 <set_sense_medium_not_present>
      }
    break;
 800323c:	e18c      	b.n	8003558 <proc_builtin_scsi+0x410>

    case SCSI_CMD_START_STOP_UNIT:
      resplen = 0;
 800323e:	2300      	movs	r3, #0
 8003240:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      if (tud_msc_start_stop_cb)
 8003244:	4b7a      	ldr	r3, [pc, #488]	; (8003430 <proc_builtin_scsi+0x2e8>)
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 8188 	beq.w	800355c <proc_builtin_scsi+0x414>
      {
        scsi_start_stop_unit_t const * start_stop = (scsi_start_stop_unit_t const *) scsi_cmd;
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	677b      	str	r3, [r7, #116]	; 0x74
        if ( !tud_msc_start_stop_cb(lun, start_stop->power_condition, start_stop->start, start_stop->load_eject) )
 8003250:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003252:	791b      	ldrb	r3, [r3, #4]
 8003254:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003258:	b2db      	uxtb	r3, r3
 800325a:	4619      	mov	r1, r3
 800325c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800325e:	791b      	ldrb	r3, [r3, #4]
 8003260:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	bf14      	ite	ne
 800326a:	2301      	movne	r3, #1
 800326c:	2300      	moveq	r3, #0
 800326e:	b2da      	uxtb	r2, r3
 8003270:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003272:	791b      	ldrb	r3, [r3, #4]
 8003274:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	bf14      	ite	ne
 800327e:	2301      	movne	r3, #1
 8003280:	2300      	moveq	r3, #0
 8003282:	b2db      	uxtb	r3, r3
 8003284:	7bf8      	ldrb	r0, [r7, #15]
 8003286:	f7fd fd11 	bl	8000cac <tud_msc_start_stop_cb>
 800328a:	4603      	mov	r3, r0
 800328c:	f083 0301 	eor.w	r3, r3, #1
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 8162 	beq.w	800355c <proc_builtin_scsi+0x414>
        {
          // Failed status response
          resplen = - 1;
 8003298:	f04f 33ff 	mov.w	r3, #4294967295
 800329c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

          // set default sense if not set by callback
          if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 80032a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f040 8158 	bne.w	800355c <proc_builtin_scsi+0x414>
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fb0e 	bl	80028d0 <set_sense_medium_not_present>
        }
      }
    break;
 80032b4:	e152      	b.n	800355c <proc_builtin_scsi+0x414>
    {
      uint32_t block_count;
      uint32_t block_size;
      uint16_t block_size_u16;

      tud_msc_capacity_cb(lun, &block_count, &block_size_u16);
 80032b6:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 80032ba:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fd fcdf 	bl	8000c84 <tud_msc_capacity_cb>
      block_size = (uint32_t) block_size_u16;
 80032c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80032ca:	67bb      	str	r3, [r7, #120]	; 0x78

      // Invalid block size/count from callback, possibly unit is not ready
      // stall this request, set sense key to NOT READY
      if (block_count == 0 || block_size == 0)
 80032cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <proc_builtin_scsi+0x190>
 80032d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10d      	bne.n	80032f4 <proc_builtin_scsi+0x1ac>
      {
        resplen = -1;
 80032d8:	f04f 33ff 	mov.w	r3, #4294967295
 80032dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 80032e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d117      	bne.n	800331a <proc_builtin_scsi+0x1d2>
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff faef 	bl	80028d0 <set_sense_medium_not_present>
 80032f2:	e012      	b.n	800331a <proc_builtin_scsi+0x1d2>
      }else
      {
        scsi_read_capacity10_resp_t read_capa10;

        read_capa10.last_lba   = tu_htonl(block_count-1);
 80032f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032f6:	3b01      	subs	r3, #1
 80032f8:	ba1b      	rev	r3, r3
 80032fa:	667b      	str	r3, [r7, #100]	; 0x64
        read_capa10.block_size = tu_htonl(block_size);
 80032fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032fe:	ba1b      	rev	r3, r3
 8003300:	66bb      	str	r3, [r7, #104]	; 0x68

        resplen = sizeof(read_capa10);
 8003302:	2308      	movs	r3, #8
 8003304:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        memcpy(buffer, &read_capa10, (size_t) resplen);
 8003308:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800330c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003310:	4619      	mov	r1, r3
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f009 fb74 	bl	800ca00 <memcpy>
      }
    }
    break;
 8003318:	e121      	b.n	800355e <proc_builtin_scsi+0x416>
 800331a:	e120      	b.n	800355e <proc_builtin_scsi+0x416>

    case SCSI_CMD_READ_FORMAT_CAPACITY:
    {
      scsi_read_format_capacity_data_t read_fmt_capa =
 800331c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	609a      	str	r2, [r3, #8]
 8003328:	2308      	movs	r3, #8
 800332a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800332e:	2302      	movs	r3, #2
 8003330:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
      };

      uint32_t block_count;
      uint16_t block_size;

      tud_msc_capacity_cb(lun, &block_count, &block_size);
 8003334:	f107 0252 	add.w	r2, r7, #82	; 0x52
 8003338:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fd fca0 	bl	8000c84 <tud_msc_capacity_cb>

      // Invalid block size/count from callback, possibly unit is not ready
      // stall this request, set sense key to NOT READY
      if (block_count == 0 || block_size == 0)
 8003344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <proc_builtin_scsi+0x20a>
 800334a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10d      	bne.n	800336e <proc_builtin_scsi+0x226>
      {
        resplen = -1;
 8003352:	f04f 33ff 	mov.w	r3, #4294967295
 8003356:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 800335a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800335c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003360:	2b00      	cmp	r3, #0
 8003362:	d119      	bne.n	8003398 <proc_builtin_scsi+0x250>
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff fab2 	bl	80028d0 <set_sense_medium_not_present>
 800336c:	e014      	b.n	8003398 <proc_builtin_scsi+0x250>
      }else
      {
        read_fmt_capa.block_num = tu_htonl(block_count);
 800336e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003370:	ba1b      	rev	r3, r3
 8003372:	65fb      	str	r3, [r7, #92]	; 0x5c
        read_fmt_capa.block_size_u16 = tu_htons(block_size);
 8003374:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003378:	ba5b      	rev16	r3, r3
 800337a:	b29b      	uxth	r3, r3
 800337c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        resplen = sizeof(read_fmt_capa);
 8003380:	230c      	movs	r3, #12
 8003382:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        memcpy(buffer, &read_fmt_capa, (size_t) resplen);
 8003386:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800338a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800338e:	4619      	mov	r1, r3
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f009 fb35 	bl	800ca00 <memcpy>
      }
    }
    break;
 8003396:	e0e2      	b.n	800355e <proc_builtin_scsi+0x416>
 8003398:	e0e1      	b.n	800355e <proc_builtin_scsi+0x416>

    case SCSI_CMD_INQUIRY:
    {
      scsi_inquiry_resp_t inquiry_rsp =
 800339a:	f107 0314 	add.w	r3, r7, #20
 800339e:	2224      	movs	r2, #36	; 0x24
 80033a0:	2100      	movs	r1, #0
 80033a2:	4618      	mov	r0, r3
 80033a4:	f009 fb54 	bl	800ca50 <memset>
 80033a8:	7d7b      	ldrb	r3, [r7, #21]
 80033aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ae:	757b      	strb	r3, [r7, #21]
 80033b0:	2302      	movs	r3, #2
 80033b2:	75bb      	strb	r3, [r7, #22]
 80033b4:	7dfb      	ldrb	r3, [r7, #23]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f362 0303 	bfi	r3, r2, #0, #4
 80033bc:	75fb      	strb	r3, [r7, #23]
 80033be:	231f      	movs	r3, #31
 80033c0:	763b      	strb	r3, [r7, #24]
          .response_data_format = 2,
          .additional_length    = sizeof(scsi_inquiry_resp_t) - 5,
      };

      // vendor_id, product_id, product_rev is space padded string
      memset(inquiry_rsp.vendor_id  , ' ', sizeof(inquiry_rsp.vendor_id));
 80033c2:	f107 0314 	add.w	r3, r7, #20
 80033c6:	3308      	adds	r3, #8
 80033c8:	2208      	movs	r2, #8
 80033ca:	2120      	movs	r1, #32
 80033cc:	4618      	mov	r0, r3
 80033ce:	f009 fb3f 	bl	800ca50 <memset>
      memset(inquiry_rsp.product_id , ' ', sizeof(inquiry_rsp.product_id));
 80033d2:	f107 0314 	add.w	r3, r7, #20
 80033d6:	3310      	adds	r3, #16
 80033d8:	2210      	movs	r2, #16
 80033da:	2120      	movs	r1, #32
 80033dc:	4618      	mov	r0, r3
 80033de:	f009 fb37 	bl	800ca50 <memset>
      memset(inquiry_rsp.product_rev, ' ', sizeof(inquiry_rsp.product_rev));
 80033e2:	f107 0314 	add.w	r3, r7, #20
 80033e6:	3320      	adds	r3, #32
 80033e8:	2204      	movs	r2, #4
 80033ea:	2120      	movs	r1, #32
 80033ec:	4618      	mov	r0, r3
 80033ee:	f009 fb2f 	bl	800ca50 <memset>

      tud_msc_inquiry_cb(lun, inquiry_rsp.vendor_id, inquiry_rsp.product_id, inquiry_rsp.product_rev);
 80033f2:	f107 0314 	add.w	r3, r7, #20
 80033f6:	f103 0420 	add.w	r4, r3, #32
 80033fa:	f107 0314 	add.w	r3, r7, #20
 80033fe:	f103 0210 	add.w	r2, r3, #16
 8003402:	f107 0314 	add.w	r3, r7, #20
 8003406:	f103 0108 	add.w	r1, r3, #8
 800340a:	7bf8      	ldrb	r0, [r7, #15]
 800340c:	4623      	mov	r3, r4
 800340e:	f7fd fbdb 	bl	8000bc8 <tud_msc_inquiry_cb>

      resplen = sizeof(inquiry_rsp);
 8003412:	2324      	movs	r3, #36	; 0x24
 8003414:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      memcpy(buffer, &inquiry_rsp, (size_t) resplen);
 8003418:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800341c:	f107 0314 	add.w	r3, r7, #20
 8003420:	4619      	mov	r1, r3
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f009 faec 	bl	800ca00 <memcpy>
    }
    break;
 8003428:	e099      	b.n	800355e <proc_builtin_scsi+0x416>
 800342a:	bf00      	nop
 800342c:	20002d3c 	.word	0x20002d3c
 8003430:	08000cad 	.word	0x08000cad

    case SCSI_CMD_MODE_SENSE_6:
    {
      scsi_mode_sense6_resp_t mode_resp =
 8003434:	2303      	movs	r3, #3
 8003436:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 800343a:	2300      	movs	r3, #0
 800343c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8003440:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003444:	f36f 0306 	bfc	r3, #0, #7
 8003448:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800344c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003450:	f36f 13c7 	bfc	r3, #7, #1
 8003454:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8003458:	2300      	movs	r3, #0
 800345a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          .write_protected      = false,
          .reserved             = 0,
          .block_descriptor_len = 0  // no block descriptor are included
      };

      bool writable = true;
 800345e:	2301      	movs	r3, #1
 8003460:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
      if ( tud_msc_is_writable_cb )
 8003464:	4b41      	ldr	r3, [pc, #260]	; (800356c <proc_builtin_scsi+0x424>)
 8003466:	2b00      	cmp	r3, #0
 8003468:	d006      	beq.n	8003478 <proc_builtin_scsi+0x330>
      {
        writable = tud_msc_is_writable_cb(lun);
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	4618      	mov	r0, r3
 800346e:	f7fd fc5f 	bl	8000d30 <tud_msc_is_writable_cb>
 8003472:	4603      	mov	r3, r0
 8003474:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
      }

      mode_resp.write_protected = !writable;
 8003478:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf14      	ite	ne
 8003480:	2301      	movne	r3, #1
 8003482:	2300      	moveq	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	f083 0301 	eor.w	r3, r3, #1
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	b2da      	uxtb	r2, r3
 8003492:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003496:	f362 13c7 	bfi	r3, r2, #7, #1
 800349a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

      resplen = sizeof(mode_resp);
 800349e:	2304      	movs	r3, #4
 80034a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      memcpy(buffer, &mode_resp, (size_t) resplen);
 80034a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80034a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80034ac:	4619      	mov	r1, r3
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f009 faa6 	bl	800ca00 <memcpy>
    }
    break;
 80034b4:	e053      	b.n	800355e <proc_builtin_scsi+0x416>

    case SCSI_CMD_REQUEST_SENSE:
    {
      scsi_sense_fixed_resp_t sense_rsp =
 80034b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	605a      	str	r2, [r3, #4]
 80034c0:	609a      	str	r2, [r3, #8]
 80034c2:	60da      	str	r2, [r3, #12]
 80034c4:	821a      	strh	r2, [r3, #16]
 80034c6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80034ca:	2270      	movs	r2, #112	; 0x70
 80034cc:	f362 0306 	bfi	r3, r2, #0, #7
 80034d0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80034d4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80034d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034dc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      {
          .response_code = 0x70, // current, fixed format
          .valid         = 1
      };

      sense_rsp.add_sense_len       = sizeof(scsi_sense_fixed_resp_t) - 8;
 80034e0:	230a      	movs	r3, #10
 80034e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      sense_rsp.sense_key           = (uint8_t) (p_msc->sense_key & 0x0F);
 80034e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80034f6:	f362 0303 	bfi	r3, r2, #0, #4
 80034fa:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
      sense_rsp.add_sense_code      = p_msc->add_sense_code;
 80034fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003504:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
      sense_rsp.add_sense_qualifier = p_msc->add_sense_qualifier;
 8003508:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800350a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800350e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

      resplen = sizeof(sense_rsp);
 8003512:	2312      	movs	r3, #18
 8003514:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      memcpy(buffer, &sense_rsp, (size_t) resplen);
 8003518:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800351c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003520:	4619      	mov	r1, r3
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f009 fa6c 	bl	800ca00 <memcpy>

      // request sense callback could overwrite the sense data
      if (tud_msc_request_sense_cb)
 8003528:	4b11      	ldr	r3, [pc, #68]	; (8003570 <proc_builtin_scsi+0x428>)
 800352a:	2b00      	cmp	r3, #0
 800352c:	d008      	beq.n	8003540 <proc_builtin_scsi+0x3f8>
      {
        resplen = tud_msc_request_sense_cb(lun, buffer, (uint16_t) bufsize);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	b29a      	uxth	r2, r3
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4618      	mov	r0, r3
 8003538:	f3af 8000 	nop.w
 800353c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
      }

      // Clear sense data after copy
      tud_msc_set_sense(lun, 0, 0, 0);
 8003540:	7bf8      	ldrb	r0, [r7, #15]
 8003542:	2300      	movs	r3, #0
 8003544:	2200      	movs	r2, #0
 8003546:	2100      	movs	r1, #0
 8003548:	f7ff f99e 	bl	8002888 <tud_msc_set_sense>
    }
    break;
 800354c:	e007      	b.n	800355e <proc_builtin_scsi+0x416>

    default: resplen = -1; break;
 800354e:	f04f 33ff 	mov.w	r3, #4294967295
 8003552:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003556:	e002      	b.n	800355e <proc_builtin_scsi+0x416>
    break;
 8003558:	bf00      	nop
 800355a:	e000      	b.n	800355e <proc_builtin_scsi+0x416>
    break;
 800355c:	bf00      	nop
  }

  return resplen;
 800355e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
}
 8003562:	4618      	mov	r0, r3
 8003564:	378c      	adds	r7, #140	; 0x8c
 8003566:	46bd      	mov	sp, r7
 8003568:	bd90      	pop	{r4, r7, pc}
 800356a:	bf00      	nop
 800356c:	08000d31 	.word	0x08000d31
 8003570:	00000000 	.word	0x00000000

08003574 <proc_read10_cmd>:

static void proc_read10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b092      	sub	sp, #72	; 0x48
 8003578:	af02      	add	r7, sp, #8
 800357a:	4603      	mov	r3, r0
 800357c:	6039      	str	r1, [r7, #0]
 800357e:	71fb      	strb	r3, [r7, #7]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	63fb      	str	r3, [r7, #60]	; 0x3c

  // block size already verified not zero
  uint16_t const block_sz = rdwr10_get_blocksize(p_cbw);
 8003584:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003586:	f7ff f907 	bl	8002798 <rdwr10_get_blocksize>
 800358a:	4603      	mov	r3, r0
 800358c:	877b      	strh	r3, [r7, #58]	; 0x3a

  // Adjust lba with transferred bytes
  uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 800358e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003590:	330f      	adds	r3, #15
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff f8da 	bl	800274c <rdwr10_get_lba>
 8003598:	4601      	mov	r1, r0
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800359e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80035a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a4:	440b      	add	r3, r1
 80035a6:	637b      	str	r3, [r7, #52]	; 0x34

  // remaining bytes capped at class buffer
  int32_t nbytes = (int32_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 80035a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035b6:	627a      	str	r2, [r7, #36]	; 0x24
 80035b8:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 80035ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	4293      	cmp	r3, r2
 80035c0:	bf28      	it	cs
 80035c2:	4613      	movcs	r3, r2
 80035c4:	633b      	str	r3, [r7, #48]	; 0x30

  // Application can consume smaller bytes
  uint32_t const offset = p_msc->xferred_len % block_sz;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80035cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80035d0:	fb01 f202 	mul.w	r2, r1, r2
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  nbytes = tud_msc_read10_cb(p_cbw->lun, lba, offset, _mscd_buf, (uint32_t) nbytes);
 80035d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035da:	7b58      	ldrb	r0, [r3, #13]
 80035dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	4b2c      	ldr	r3, [pc, #176]	; (8003694 <proc_read10_cmd+0x120>)
 80035e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80035e6:	f7fd fb81 	bl	8000cec <tud_msc_read10_cb>
 80035ea:	6338      	str	r0, [r7, #48]	; 0x30

  if ( nbytes < 0 )
 80035ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	da0b      	bge.n	800360a <proc_read10_cmd+0x96>
  {
    // negative means error -> endpoint is stalled & status in CSW set to failed
    TU_LOG(MSC_DEBUG, "  tud_msc_read10_cb() return -1\r\n");

    // set sense
    set_sense_medium_not_present(p_cbw->lun);
 80035f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035f4:	7b5b      	ldrb	r3, [r3, #13]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff f96a 	bl	80028d0 <set_sense_medium_not_present>

    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	2201      	movs	r2, #1
 8003600:	6839      	ldr	r1, [r7, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff f84a 	bl	800269c <fail_scsi_op>
 8003608:	e040      	b.n	800368c <proc_read10_cmd+0x118>
  }
  else if ( nbytes == 0 )
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	2b00      	cmp	r3, #0
 800360e:	d124      	bne.n	800365a <proc_read10_cmd+0xe6>
  {
    // zero means not ready -> simulate an transfer complete so that this driver callback will fired again
    dcd_event_xfer_complete(rhport, p_msc->ep_in, 0, XFER_RESULT_SUCCESS, false);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	77fb      	strb	r3, [r7, #31]
 800361a:	4613      	mov	r3, r2
 800361c:	77bb      	strb	r3, [r7, #30]
 800361e:	2300      	movs	r3, #0
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	2300      	movs	r3, #0
 8003624:	75fb      	strb	r3, [r7, #23]
 8003626:	2300      	movs	r3, #0
 8003628:	75bb      	strb	r3, [r7, #22]
}

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800362a:	f107 0308 	add.w	r3, r7, #8
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	605a      	str	r2, [r3, #4]
 8003634:	609a      	str	r2, [r3, #8]
 8003636:	7ffb      	ldrb	r3, [r7, #31]
 8003638:	723b      	strb	r3, [r7, #8]
 800363a:	2307      	movs	r3, #7
 800363c:	727b      	strb	r3, [r7, #9]

  event.xfer_complete.ep_addr = ep_addr;
 800363e:	7fbb      	ldrb	r3, [r7, #30]
 8003640:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 8003646:	7dfb      	ldrb	r3, [r7, #23]
 8003648:	737b      	strb	r3, [r7, #13]

  dcd_event_handler(&event, in_isr);
 800364a:	7dba      	ldrb	r2, [r7, #22]
 800364c:	f107 0308 	add.w	r3, r7, #8
 8003650:	4611      	mov	r1, r2
 8003652:	4618      	mov	r0, r3
 8003654:	f001 fdb8 	bl	80051c8 <dcd_event_handler>
}
 8003658:	e018      	b.n	800368c <proc_read10_cmd+0x118>
  }
  else
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) nbytes), );
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 8003660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003662:	b29b      	uxth	r3, r3
 8003664:	79f8      	ldrb	r0, [r7, #7]
 8003666:	4a0b      	ldr	r2, [pc, #44]	; (8003694 <proc_read10_cmd+0x120>)
 8003668:	f002 f8be 	bl	80057e8 <usbd_edpt_xfer>
 800366c:	4603      	mov	r3, r0
 800366e:	f083 0301 	eor.w	r3, r3, #1
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d009      	beq.n	800368c <proc_read10_cmd+0x118>
 8003678:	4b07      	ldr	r3, [pc, #28]	; (8003698 <proc_read10_cmd+0x124>)
 800367a:	62bb      	str	r3, [r7, #40]	; 0x28
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d000      	beq.n	800368a <proc_read10_cmd+0x116>
 8003688:	be00      	bkpt	0x0000
 800368a:	bf00      	nop
  }
}
 800368c:	3740      	adds	r7, #64	; 0x40
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20002d7c 	.word	0x20002d7c
 8003698:	e000edf0 	.word	0xe000edf0

0800369c <proc_write10_cmd>:

static void proc_write10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b088      	sub	sp, #32
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	6039      	str	r1, [r7, #0]
 80036a6:	71fb      	strb	r3, [r7, #7]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	61bb      	str	r3, [r7, #24]
  bool writable = true;
 80036ac:	2301      	movs	r3, #1
 80036ae:	77fb      	strb	r3, [r7, #31]

  if ( tud_msc_is_writable_cb )
 80036b0:	4b23      	ldr	r3, [pc, #140]	; (8003740 <proc_write10_cmd+0xa4>)
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d006      	beq.n	80036c4 <proc_write10_cmd+0x28>
  {
    writable = tud_msc_is_writable_cb(p_cbw->lun);
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	7b5b      	ldrb	r3, [r3, #13]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fd fb38 	bl	8000d30 <tud_msc_is_writable_cb>
 80036c0:	4603      	mov	r3, r0
 80036c2:	77fb      	strb	r3, [r7, #31]
  }

  if ( !writable )
 80036c4:	7ffb      	ldrb	r3, [r7, #31]
 80036c6:	f083 0301 	eor.w	r3, r3, #1
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00d      	beq.n	80036ec <proc_write10_cmd+0x50>
  {
    // Not writable, complete this SCSI op with error
    // Sense = Write protected
    tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_DATA_PROTECT, 0x27, 0x00);
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	7b58      	ldrb	r0, [r3, #13]
 80036d4:	2300      	movs	r3, #0
 80036d6:	2227      	movs	r2, #39	; 0x27
 80036d8:	2107      	movs	r1, #7
 80036da:	f7ff f8d5 	bl	8002888 <tud_msc_set_sense>
    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	2201      	movs	r2, #1
 80036e2:	6839      	ldr	r1, [r7, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fe ffd9 	bl	800269c <fail_scsi_op>
    return;
 80036ea:	e026      	b.n	800373a <proc_write10_cmd+0x9e>
  }

  // remaining bytes capped at class buffer
  uint16_t nbytes = (uint16_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036fa:	60fa      	str	r2, [r7, #12]
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4293      	cmp	r3, r2
 8003704:	bf28      	it	cs
 8003706:	4613      	movcs	r3, r2
 8003708:	82fb      	strh	r3, [r7, #22]

  // Write10 callback will be called later when usb transfer complete
  TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, nbytes), );
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8003710:	8afb      	ldrh	r3, [r7, #22]
 8003712:	79f8      	ldrb	r0, [r7, #7]
 8003714:	4a0b      	ldr	r2, [pc, #44]	; (8003744 <proc_write10_cmd+0xa8>)
 8003716:	f002 f867 	bl	80057e8 <usbd_edpt_xfer>
 800371a:	4603      	mov	r3, r0
 800371c:	f083 0301 	eor.w	r3, r3, #1
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d009      	beq.n	800373a <proc_write10_cmd+0x9e>
 8003726:	4b08      	ldr	r3, [pc, #32]	; (8003748 <proc_write10_cmd+0xac>)
 8003728:	613b      	str	r3, [r7, #16]
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d000      	beq.n	8003738 <proc_write10_cmd+0x9c>
 8003736:	be00      	bkpt	0x0000
 8003738:	bf00      	nop
}
 800373a:	3720      	adds	r7, #32
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	08000d31 	.word	0x08000d31
 8003744:	20002d7c 	.word	0x20002d7c
 8003748:	e000edf0 	.word	0xe000edf0

0800374c <proc_write10_new_data>:

// process new data arrived from WRITE10
static void proc_write10_new_data(uint8_t rhport, mscd_interface_t* p_msc, uint32_t xferred_bytes)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b092      	sub	sp, #72	; 0x48
 8003750:	af02      	add	r7, sp, #8
 8003752:	4603      	mov	r3, r0
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	73fb      	strb	r3, [r7, #15]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	63fb      	str	r3, [r7, #60]	; 0x3c

  // block size already verified not zero
  uint16_t const block_sz = rdwr10_get_blocksize(p_cbw);
 800375e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003760:	f7ff f81a 	bl	8002798 <rdwr10_get_blocksize>
 8003764:	4603      	mov	r3, r0
 8003766:	877b      	strh	r3, [r7, #58]	; 0x3a

  // Adjust lba with transferred bytes
  uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 8003768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800376a:	330f      	adds	r3, #15
 800376c:	4618      	mov	r0, r3
 800376e:	f7fe ffed 	bl	800274c <rdwr10_get_lba>
 8003772:	4601      	mov	r1, r0
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003778:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800377a:	fbb2 f3f3 	udiv	r3, r2, r3
 800377e:	440b      	add	r3, r1
 8003780:	637b      	str	r3, [r7, #52]	; 0x34

  // Invoke callback to consume new data
  uint32_t const offset = p_msc->xferred_len % block_sz;
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003786:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003788:	fbb3 f1f2 	udiv	r1, r3, r2
 800378c:	fb01 f202 	mul.w	r2, r1, r2
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t nbytes = tud_msc_write10_cb(p_cbw->lun, lba, offset, _mscd_buf, xferred_bytes);
 8003794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003796:	7b58      	ldrb	r0, [r3, #13]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	4b3c      	ldr	r3, [pc, #240]	; (8003890 <proc_write10_new_data+0x144>)
 800379e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80037a2:	f7fd fad1 	bl	8000d48 <tud_msc_write10_cb>
 80037a6:	62f8      	str	r0, [r7, #44]	; 0x2c

  if ( nbytes < 0 )
 80037a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	da11      	bge.n	80037d2 <proc_write10_new_data+0x86>
  {
    // negative means error -> failed this scsi op
    TU_LOG(MSC_DEBUG, "  tud_msc_write10_cb() return -1\r\n");

    // update actual byte before failed
    p_msc->xferred_len += xferred_bytes;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	441a      	add	r2, r3
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	639a      	str	r2, [r3, #56]	; 0x38

    // Set sense
    set_sense_medium_not_present(p_cbw->lun);
 80037ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037bc:	7b5b      	ldrb	r3, [r3, #13]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff f886 	bl	80028d0 <set_sense_medium_not_present>

    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	2201      	movs	r2, #1
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fe ff66 	bl	800269c <fail_scsi_op>
        // prepare to receive more data from host
        proc_write10_cmd(rhport, p_msc);
      }
    }
  }
}
 80037d0:	e059      	b.n	8003886 <proc_write10_new_data+0x13a>
    if ( (uint32_t) nbytes < xferred_bytes )
 80037d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d93f      	bls.n	800385a <proc_write10_new_data+0x10e>
      uint32_t const left_over = xferred_bytes - (uint32_t) nbytes;
 80037da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ( nbytes > 0 )
 80037e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	dd0e      	ble.n	8003806 <proc_write10_new_data+0xba>
        p_msc->xferred_len += (uint16_t) nbytes;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ee:	b292      	uxth	r2, r2
 80037f0:	441a      	add	r2, r3
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	639a      	str	r2, [r3, #56]	; 0x38
        memmove(_mscd_buf, _mscd_buf+nbytes, left_over);
 80037f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f8:	4a25      	ldr	r2, [pc, #148]	; (8003890 <proc_write10_new_data+0x144>)
 80037fa:	4413      	add	r3, r2
 80037fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037fe:	4619      	mov	r1, r3
 8003800:	4823      	ldr	r0, [pc, #140]	; (8003890 <proc_write10_new_data+0x144>)
 8003802:	f009 f90b 	bl	800ca1c <memmove>
      dcd_event_xfer_complete(rhport, p_msc->ep_out, left_over, XFER_RESULT_SUCCESS, false);
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003812:	4613      	mov	r3, r2
 8003814:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381a:	623b      	str	r3, [r7, #32]
 800381c:	2300      	movs	r3, #0
 800381e:	77fb      	strb	r3, [r7, #31]
 8003820:	2300      	movs	r3, #0
 8003822:	77bb      	strb	r3, [r7, #30]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8003824:	f107 0310 	add.w	r3, r7, #16
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003834:	743b      	strb	r3, [r7, #16]
 8003836:	2307      	movs	r3, #7
 8003838:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 800383a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800383e:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 8003844:	7ffb      	ldrb	r3, [r7, #31]
 8003846:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8003848:	7fba      	ldrb	r2, [r7, #30]
 800384a:	f107 0310 	add.w	r3, r7, #16
 800384e:	4611      	mov	r1, r2
 8003850:	4618      	mov	r0, r3
 8003852:	f001 fcb9 	bl	80051c8 <dcd_event_handler>
}
 8003856:	bf00      	nop
}
 8003858:	e015      	b.n	8003886 <proc_write10_new_data+0x13a>
      p_msc->xferred_len += xferred_bytes;
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	441a      	add	r2, r3
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	639a      	str	r2, [r3, #56]	; 0x38
      if ( p_msc->xferred_len >= p_msc->total_len )
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386e:	429a      	cmp	r2, r3
 8003870:	d304      	bcc.n	800387c <proc_write10_new_data+0x130>
        p_msc->stage = MSC_STAGE_STATUS;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2202      	movs	r2, #2
 8003876:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 800387a:	e004      	b.n	8003886 <proc_write10_new_data+0x13a>
        proc_write10_cmd(rhport, p_msc);
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	68b9      	ldr	r1, [r7, #8]
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff ff0b 	bl	800369c <proc_write10_cmd>
}
 8003886:	bf00      	nop
 8003888:	3740      	adds	r7, #64	; 0x40
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	20002d7c 	.word	0x20002d7c

08003894 <tu_fifo_config>:
  TU_FIFO_COPY_INC,            ///< Copy from/to an increasing source/destination address - default mode
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	4611      	mov	r1, r2
 80038a0:	461a      	mov	r2, r3
 80038a2:	460b      	mov	r3, r1
 80038a4:	80fb      	strh	r3, [r7, #6]
 80038a6:	4613      	mov	r3, r2
 80038a8:	80bb      	strh	r3, [r7, #4]
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b0:	d901      	bls.n	80038b6 <tu_fifo_config+0x22>
 80038b2:	2300      	movs	r3, #0
 80038b4:	e020      	b.n	80038f8 <tu_fifo_config+0x64>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer = (uint8_t*) buffer;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	601a      	str	r2, [r3, #0]
  f->depth  = depth;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	88fa      	ldrh	r2, [r7, #6]
 80038c0:	809a      	strh	r2, [r3, #4]
  f->item_size = item_size;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	88ba      	ldrh	r2, [r7, #4]
 80038c6:	80da      	strh	r2, [r3, #6]
  f->overwritable = overwritable;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	7e3a      	ldrb	r2, [r7, #24]
 80038cc:	721a      	strb	r2, [r3, #8]

  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  f->max_pointer_idx = (uint16_t) (2*depth - 1);
 80038ce:	88fb      	ldrh	r3, [r7, #6]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	819a      	strh	r2, [r3, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	899b      	ldrh	r3, [r3, #12]
 80038e0:	43db      	mvns	r3, r3
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	815a      	strh	r2, [r3, #10]

  f->rd_idx = f->wr_idx = 0;
 80038e8:	2100      	movs	r1, #0
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	460a      	mov	r2, r1
 80038ee:	81da      	strh	r2, [r3, #14]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	460a      	mov	r2, r1
 80038f4:	821a      	strh	r2, [r3, #16]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 80038f6:	2301      	movs	r3, #1
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <_ff_mod>:

// Static functions are intended to work on local variables
static inline uint16_t _ff_mod(uint16_t idx, uint16_t depth)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	460a      	mov	r2, r1
 800390e:	80fb      	strh	r3, [r7, #6]
 8003910:	4613      	mov	r3, r2
 8003912:	80bb      	strh	r3, [r7, #4]
  while ( idx >= depth) idx -= depth;
 8003914:	e003      	b.n	800391e <_ff_mod+0x1a>
 8003916:	88fa      	ldrh	r2, [r7, #6]
 8003918:	88bb      	ldrh	r3, [r7, #4]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	80fb      	strh	r3, [r7, #6]
 800391e:	88fa      	ldrh	r2, [r7, #6]
 8003920:	88bb      	ldrh	r3, [r7, #4]
 8003922:	429a      	cmp	r2, r3
 8003924:	d2f7      	bcs.n	8003916 <_ff_mod+0x12>
  return idx;
 8003926:	88fb      	ldrh	r3, [r7, #6]
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <_ff_push_const_addr>:

// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsis.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08a      	sub	sp, #40	; 0x28
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	4613      	mov	r3, r2
 8003940:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8003946:	88fb      	ldrh	r3, [r7, #6]
 8003948:	089b      	lsrs	r3, r3, #2
 800394a:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 800394c:	e00b      	b.n	8003966 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *rx_fifo);
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	61ba      	str	r2, [r7, #24]
 8003956:	617b      	str	r3, [r7, #20]

TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	bf00      	nop
    ff_buf += 4;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3304      	adds	r3, #4
 8003964:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8003966:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003968:	1e5a      	subs	r2, r3, #1
 800396a:	84fa      	strh	r2, [r7, #38]	; 0x26
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1ee      	bne.n	800394e <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 800397a:	7ffb      	ldrb	r3, [r7, #31]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d009      	beq.n	8003994 <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *rx_fifo;
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8003986:	7ffa      	ldrb	r2, [r7, #31]
 8003988:	f107 0310 	add.w	r3, r7, #16
 800398c:	4619      	mov	r1, r3
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f009 f836 	bl	800ca00 <memcpy>
  }
}
 8003994:	bf00      	nop
 8003996:	3728      	adds	r7, #40	; 0x28
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08a      	sub	sp, #40	; 0x28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	4613      	mov	r3, r2
 80039a8:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * tx_fifo = (volatile uint32_t *) app_buf;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	623b      	str	r3, [r7, #32]

  // Pushing full available 32 bit words to const app address
  uint16_t full_words = len >> 2;
 80039ae:	88fb      	ldrh	r3, [r7, #6]
 80039b0:	089b      	lsrs	r3, r3, #2
 80039b2:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 80039b4:	e008      	b.n	80039c8 <_ff_pull_const_addr+0x2c>
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	61bb      	str	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	681a      	ldr	r2, [r3, #0]
  {
    *tx_fifo = tu_unaligned_read32(ff_buf);
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	3304      	adds	r3, #4
 80039c6:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 80039c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80039ca:	1e5a      	subs	r2, r3, #1
 80039cc:	84fa      	strh	r2, [r7, #38]	; 0x26
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f1      	bne.n	80039b6 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const app address
  uint8_t const bytes_rem = len & 0x03;
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 80039dc:	7ffb      	ldrb	r3, [r7, #31]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00b      	beq.n	80039fa <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 80039e6:	7ffa      	ldrb	r2, [r7, #31]
 80039e8:	f107 0314 	add.w	r3, r7, #20
 80039ec:	68b9      	ldr	r1, [r7, #8]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f009 f806 	bl	800ca00 <memcpy>

    *tx_fifo = tmp32;
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	601a      	str	r2, [r3, #0]
  }
}
 80039fa:	bf00      	nop
 80039fc:	3728      	adds	r7, #40	; 0x28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <_ff_push>:

// send one item to FIFO WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	88fa      	ldrh	r2, [r7, #6]
 8003a16:	68f9      	ldr	r1, [r7, #12]
 8003a18:	88c9      	ldrh	r1, [r1, #6]
 8003a1a:	fb01 f202 	mul.w	r2, r1, r2
 8003a1e:	1898      	adds	r0, r3, r2
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	88db      	ldrh	r3, [r3, #6]
 8003a24:	461a      	mov	r2, r3
 8003a26:	68b9      	ldr	r1, [r7, #8]
 8003a28:	f008 ffea 	bl	800ca00 <memcpy>
}
 8003a2c:	bf00      	nop
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <_ff_push_n>:

// send n items to FIFO WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t rel, tu_fifo_copy_mode_t copy_mode)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b08e      	sub	sp, #56	; 0x38
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	4611      	mov	r1, r2
 8003a40:	461a      	mov	r2, r3
 8003a42:	460b      	mov	r3, r1
 8003a44:	80fb      	strh	r3, [r7, #6]
 8003a46:	4613      	mov	r3, r2
 8003a48:	80bb      	strh	r3, [r7, #4]
  uint16_t const nLin = f->depth - rel;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	889a      	ldrh	r2, [r3, #4]
 8003a4e:	88bb      	ldrh	r3, [r7, #4]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const nWrap = n - nLin;
 8003a54:	88fa      	ldrh	r2, [r7, #6]
 8003a56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t nLin_bytes = nLin * f->item_size;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	88db      	ldrh	r3, [r3, #6]
 8003a60:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003a62:	fb12 f303 	smulbb	r3, r2, r3
 8003a66:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t nWrap_bytes = nWrap * f->item_size;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	88db      	ldrh	r3, [r3, #6]
 8003a6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a6e:	fb12 f303 	smulbb	r3, r2, r3
 8003a72:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	88ba      	ldrh	r2, [r7, #4]
 8003a7a:	68f9      	ldr	r1, [r7, #12]
 8003a7c:	88c9      	ldrh	r1, [r1, #6]
 8003a7e:	fb01 f202 	mul.w	r2, r1, r2
 8003a82:	4413      	add	r3, r2
 8003a84:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 8003a86:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <_ff_push_n+0x60>
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d01f      	beq.n	8003ad2 <_ff_push_n+0x9e>
        // Write data wrapped part
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
      }
      break;
  }
}
 8003a92:	e097      	b.n	8003bc4 <_ff_push_n+0x190>
      if(n <= nLin)
 8003a94:	88fa      	ldrh	r2, [r7, #6]
 8003a96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d80a      	bhi.n	8003ab2 <_ff_push_n+0x7e>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	88d2      	ldrh	r2, [r2, #6]
 8003aa2:	fb02 f303 	mul.w	r3, r2, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	68b9      	ldr	r1, [r7, #8]
 8003aaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aac:	f008 ffa8 	bl	800ca00 <memcpy>
      break;
 8003ab0:	e088      	b.n	8003bc4 <_ff_push_n+0x190>
        memcpy(ff_buf, app_buf, nLin_bytes);
 8003ab2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	68b9      	ldr	r1, [r7, #8]
 8003ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aba:	f008 ffa1 	bl	800ca00 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + nLin_bytes, nWrap_bytes);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003aca:	4619      	mov	r1, r3
 8003acc:	f008 ff98 	bl	800ca00 <memcpy>
      break;
 8003ad0:	e078      	b.n	8003bc4 <_ff_push_n+0x190>
      if(n <= nLin)
 8003ad2:	88fa      	ldrh	r2, [r7, #6]
 8003ad4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d80b      	bhi.n	8003af2 <_ff_push_n+0xbe>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	88db      	ldrh	r3, [r3, #6]
 8003ade:	88fa      	ldrh	r2, [r7, #6]
 8003ae0:	fb12 f303 	smulbb	r3, r2, r3
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	68b9      	ldr	r1, [r7, #8]
 8003aea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aec:	f7ff ff22 	bl	8003934 <_ff_push_const_addr>
      break;
 8003af0:	e067      	b.n	8003bc2 <_ff_push_n+0x18e>
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 8003af2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003af4:	f023 0303 	bic.w	r3, r3, #3
 8003af8:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8003afa:	8c3b      	ldrh	r3, [r7, #32]
 8003afc:	461a      	mov	r2, r3
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b02:	f7ff ff17 	bl	8003934 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8003b06:	8c3b      	ldrh	r3, [r7, #32]
 8003b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b0a:	4413      	add	r3, r2
 8003b0c:	633b      	str	r3, [r7, #48]	; 0x30
        volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	61fb      	str	r3, [r7, #28]
        uint8_t rem = nLin_bytes & 0x03;
 8003b12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 8003b1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d041      	beq.n	8003baa <_ff_push_n+0x176>
          uint8_t remrem = (uint8_t) tu_min16(nWrap_bytes, 4-rem);
 8003b26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	f1c3 0304 	rsb	r3, r3, #4
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b34:	837b      	strh	r3, [r7, #26]
 8003b36:	4613      	mov	r3, r2
 8003b38:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8003b3a:	8b7a      	ldrh	r2, [r7, #26]
 8003b3c:	8b3b      	ldrh	r3, [r7, #24]
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	bf28      	it	cs
 8003b42:	4613      	movcs	r3, r2
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          nWrap_bytes -= remrem;
 8003b4a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32 = *rx_fifo;
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8003b5c:	f107 0314 	add.w	r3, r7, #20
 8003b60:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 8003b62:	e007      	b.n	8003b74 <_ff_push_n+0x140>
 8003b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b66:	1c53      	adds	r3, r2, #1
 8003b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	1c59      	adds	r1, r3, #1
 8003b6e:	6339      	str	r1, [r7, #48]	; 0x30
 8003b70:	7812      	ldrb	r2, [r2, #0]
 8003b72:	701a      	strb	r2, [r3, #0]
 8003b74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b78:	1e5a      	subs	r2, r3, #1
 8003b7a:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f0      	bne.n	8003b64 <_ff_push_n+0x130>
          ff_buf = f->buffer;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 8003b88:	e007      	b.n	8003b9a <_ff_push_n+0x166>
 8003b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b8c:	1c53      	adds	r3, r2, #1
 8003b8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b92:	1c59      	adds	r1, r3, #1
 8003b94:	6339      	str	r1, [r7, #48]	; 0x30
 8003b96:	7812      	ldrb	r2, [r2, #0]
 8003b98:	701a      	strb	r2, [r3, #0]
 8003b9a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003b9e:	1e5a      	subs	r2, r3, #1
 8003ba0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f0      	bne.n	8003b8a <_ff_push_n+0x156>
 8003ba8:	e002      	b.n	8003bb0 <_ff_push_n+0x17c>
          ff_buf = f->buffer; // wrap around to beginning
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	633b      	str	r3, [r7, #48]	; 0x30
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
 8003bb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d005      	beq.n	8003bc2 <_ff_push_n+0x18e>
 8003bb6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003bb8:	461a      	mov	r2, r3
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bbe:	f7ff feb9 	bl	8003934 <_ff_push_const_addr>
      break;
 8003bc2:	bf00      	nop
}
 8003bc4:	bf00      	nop
 8003bc6:	3738      	adds	r7, #56	; 0x38
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <_ff_pull>:

// get one item from FIFO WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	88fa      	ldrh	r2, [r7, #6]
 8003be0:	68f9      	ldr	r1, [r7, #12]
 8003be2:	88c9      	ldrh	r1, [r1, #6]
 8003be4:	fb01 f202 	mul.w	r2, r1, r2
 8003be8:	1899      	adds	r1, r3, r2
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	88db      	ldrh	r3, [r3, #6]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68b8      	ldr	r0, [r7, #8]
 8003bf2:	f008 ff05 	bl	800ca00 <memcpy>
}
 8003bf6:	bf00      	nop
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <_ff_pull_n>:

// get n items from FIFO WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rel, tu_fifo_copy_mode_t copy_mode)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b08e      	sub	sp, #56	; 0x38
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	4611      	mov	r1, r2
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	80fb      	strh	r3, [r7, #6]
 8003c10:	4613      	mov	r3, r2
 8003c12:	80bb      	strh	r3, [r7, #4]
  uint16_t const nLin = f->depth - rel;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	889a      	ldrh	r2, [r3, #4]
 8003c18:	88bb      	ldrh	r3, [r7, #4]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const nWrap = n - nLin; // only used if wrapped
 8003c1e:	88fa      	ldrh	r2, [r7, #6]
 8003c20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t nLin_bytes = nLin * f->item_size;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	88db      	ldrh	r3, [r3, #6]
 8003c2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003c2c:	fb12 f303 	smulbb	r3, r2, r3
 8003c30:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t nWrap_bytes = nWrap * f->item_size;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	88db      	ldrh	r3, [r3, #6]
 8003c36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c38:	fb12 f303 	smulbb	r3, r2, r3
 8003c3c:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	88ba      	ldrh	r2, [r7, #4]
 8003c44:	68f9      	ldr	r1, [r7, #12]
 8003c46:	88c9      	ldrh	r1, [r1, #6]
 8003c48:	fb01 f202 	mul.w	r2, r1, r2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 8003c50:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <_ff_pull_n+0x60>
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d01f      	beq.n	8003c9c <_ff_pull_n+0x9e>
        // Read data wrapped part
        if (nWrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, nWrap_bytes);
      }
    break;

    default: break;
 8003c5c:	e099      	b.n	8003d92 <_ff_pull_n+0x194>
      if ( n <= nLin )
 8003c5e:	88fa      	ldrh	r2, [r7, #6]
 8003c60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d80a      	bhi.n	8003c7c <_ff_pull_n+0x7e>
        memcpy(app_buf, ff_buf, n*f->item_size);
 8003c66:	88fb      	ldrh	r3, [r7, #6]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	88d2      	ldrh	r2, [r2, #6]
 8003c6c:	fb02 f303 	mul.w	r3, r2, r3
 8003c70:	461a      	mov	r2, r3
 8003c72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c74:	68b8      	ldr	r0, [r7, #8]
 8003c76:	f008 fec3 	bl	800ca00 <memcpy>
    break;
 8003c7a:	e08a      	b.n	8003d92 <_ff_pull_n+0x194>
        memcpy(app_buf, ff_buf, nLin_bytes);
 8003c7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c7e:	461a      	mov	r2, r3
 8003c80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c82:	68b8      	ldr	r0, [r7, #8]
 8003c84:	f008 febc 	bl	800ca00 <memcpy>
        memcpy((uint8_t*) app_buf + nLin_bytes, f->buffer, nWrap_bytes);
 8003c88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	18d0      	adds	r0, r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003c94:	4619      	mov	r1, r3
 8003c96:	f008 feb3 	bl	800ca00 <memcpy>
    break;
 8003c9a:	e07a      	b.n	8003d92 <_ff_pull_n+0x194>
      if ( n <= nLin )
 8003c9c:	88fa      	ldrh	r2, [r7, #6]
 8003c9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d80b      	bhi.n	8003cbc <_ff_pull_n+0xbe>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	88db      	ldrh	r3, [r3, #6]
 8003ca8:	88fa      	ldrh	r2, [r7, #6]
 8003caa:	fb12 f303 	smulbb	r3, r2, r3
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cb4:	68b8      	ldr	r0, [r7, #8]
 8003cb6:	f7ff fe71 	bl	800399c <_ff_pull_const_addr>
    break;
 8003cba:	e069      	b.n	8003d90 <_ff_pull_n+0x192>
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 8003cbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003cbe:	f023 0303 	bic.w	r3, r3, #3
 8003cc2:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, nLin_4n_bytes);
 8003cc4:	8c3b      	ldrh	r3, [r7, #32]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cca:	68b8      	ldr	r0, [r7, #8]
 8003ccc:	f7ff fe66 	bl	800399c <_ff_pull_const_addr>
        ff_buf += nLin_4n_bytes;
 8003cd0:	8c3b      	ldrh	r3, [r7, #32]
 8003cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cd4:	4413      	add	r3, r2
 8003cd6:	633b      	str	r3, [r7, #48]	; 0x30
        volatile uint32_t * tx_fifo = (volatile uint32_t *) app_buf;
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	61fb      	str	r3, [r7, #28]
        uint8_t rem = nLin_bytes & 0x03;
 8003cdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 8003ce8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d043      	beq.n	8003d78 <_ff_pull_n+0x17a>
          uint8_t remrem = (uint8_t) tu_min16(nWrap_bytes, 4-rem);
 8003cf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	f1c3 0304 	rsb	r3, r3, #4
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cfe:	837b      	strh	r3, [r7, #26]
 8003d00:	4613      	mov	r3, r2
 8003d02:	833b      	strh	r3, [r7, #24]
 8003d04:	8b7a      	ldrh	r2, [r7, #26]
 8003d06:	8b3b      	ldrh	r3, [r7, #24]
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	bf28      	it	cs
 8003d0c:	4613      	movcs	r3, r2
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          nWrap_bytes -= remrem;
 8003d14:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32=0;
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 8003d24:	f107 0314 	add.w	r3, r7, #20
 8003d28:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8003d2a:	e007      	b.n	8003d3c <_ff_pull_n+0x13e>
 8003d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d2e:	1c53      	adds	r3, r2, #1
 8003d30:	633b      	str	r3, [r7, #48]	; 0x30
 8003d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d34:	1c59      	adds	r1, r3, #1
 8003d36:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d38:	7812      	ldrb	r2, [r2, #0]
 8003d3a:	701a      	strb	r2, [r3, #0]
 8003d3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d40:	1e5a      	subs	r2, r3, #1
 8003d42:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <_ff_pull_n+0x12e>
          ff_buf = f->buffer;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 8003d50:	e007      	b.n	8003d62 <_ff_pull_n+0x164>
 8003d52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d54:	1c53      	adds	r3, r2, #1
 8003d56:	633b      	str	r3, [r7, #48]	; 0x30
 8003d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5a:	1c59      	adds	r1, r3, #1
 8003d5c:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d5e:	7812      	ldrb	r2, [r2, #0]
 8003d60:	701a      	strb	r2, [r3, #0]
 8003d62:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003d66:	1e5a      	subs	r2, r3, #1
 8003d68:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1f0      	bne.n	8003d52 <_ff_pull_n+0x154>
          *tx_fifo = tmp32;
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	e002      	b.n	8003d7e <_ff_pull_n+0x180>
          ff_buf = f->buffer; // wrap around to beginning
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	633b      	str	r3, [r7, #48]	; 0x30
        if (nWrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, nWrap_bytes);
 8003d7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <_ff_pull_n+0x192>
 8003d84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d86:	461a      	mov	r2, r3
 8003d88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d8a:	68b8      	ldr	r0, [r7, #8]
 8003d8c:	f7ff fe06 	bl	800399c <_ff_pull_const_addr>
    break;
 8003d90:	bf00      	nop
  }
}
 8003d92:	bf00      	nop
 8003d94:	3738      	adds	r7, #56	; 0x38
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <advance_pointer>:

// Advance an absolute pointer
static uint16_t advance_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	460b      	mov	r3, r1
 8003da4:	807b      	strh	r3, [r7, #2]
 8003da6:	4613      	mov	r3, r2
 8003da8:	803b      	strh	r3, [r7, #0]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
 8003daa:	887a      	ldrh	r2, [r7, #2]
 8003dac:	883b      	ldrh	r3, [r7, #0]
 8003dae:	4413      	add	r3, r2
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	887a      	ldrh	r2, [r7, #2]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d807      	bhi.n	8003dc8 <advance_pointer+0x2e>
 8003db8:	887a      	ldrh	r2, [r7, #2]
 8003dba:	883b      	ldrh	r3, [r7, #0]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	899b      	ldrh	r3, [r3, #12]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d908      	bls.n	8003dda <advance_pointer+0x40>
  {
    p = (uint16_t) ((p + offset) + f->non_used_index_space);
 8003dc8:	887a      	ldrh	r2, [r7, #2]
 8003dca:	883b      	ldrh	r3, [r7, #0]
 8003dcc:	4413      	add	r3, r2
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	895b      	ldrh	r3, [r3, #10]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	807b      	strh	r3, [r7, #2]
 8003dd8:	e003      	b.n	8003de2 <advance_pointer+0x48>
  }
  else
  {
    p += offset;
 8003dda:	887a      	ldrh	r2, [r7, #2]
 8003ddc:	883b      	ldrh	r3, [r7, #0]
 8003dde:	4413      	add	r3, r2
 8003de0:	807b      	strh	r3, [r7, #2]
  }
  return p;
 8003de2:	887b      	ldrh	r3, [r7, #2]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <backward_pointer>:

// Backward an absolute pointer
static uint16_t backward_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	807b      	strh	r3, [r7, #2]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	803b      	strh	r3, [r7, #0]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p < (uint16_t)(p - offset)) || ((uint16_t)(p - offset) > f->max_pointer_idx))
 8003e00:	883a      	ldrh	r2, [r7, #0]
 8003e02:	887b      	ldrh	r3, [r7, #2]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d807      	bhi.n	8003e18 <backward_pointer+0x28>
 8003e08:	887a      	ldrh	r2, [r7, #2]
 8003e0a:	883b      	ldrh	r3, [r7, #0]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	899b      	ldrh	r3, [r3, #12]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d908      	bls.n	8003e2a <backward_pointer+0x3a>
  {
    p = (uint16_t) ((p - offset) - f->non_used_index_space);
 8003e18:	887a      	ldrh	r2, [r7, #2]
 8003e1a:	883b      	ldrh	r3, [r7, #0]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	895b      	ldrh	r3, [r3, #10]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	807b      	strh	r3, [r7, #2]
 8003e28:	e003      	b.n	8003e32 <backward_pointer+0x42>
  }
  else
  {
    p -= offset;
 8003e2a:	887a      	ldrh	r2, [r7, #2]
 8003e2c:	883b      	ldrh	r3, [r7, #0]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	807b      	strh	r3, [r7, #2]
  }
  return p;
 8003e32:	887b      	ldrh	r3, [r7, #2]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <get_relative_pointer>:

// get relative from absolute pointer
static uint16_t get_relative_pointer(tu_fifo_t* f, uint16_t p)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	807b      	strh	r3, [r7, #2]
  return _ff_mod(p, f->depth);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	889a      	ldrh	r2, [r3, #4]
 8003e50:	887b      	ldrh	r3, [r7, #2]
 8003e52:	4611      	mov	r1, r2
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fd55 	bl	8003904 <_ff_mod>
 8003e5a:	4603      	mov	r3, r0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <_tu_fifo_count>:

// Works on local copies of w and r - return only the difference and as such can be used to determine an overflow
static inline uint16_t _tu_fifo_count(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	807b      	strh	r3, [r7, #2]
 8003e70:	4613      	mov	r3, r2
 8003e72:	803b      	strh	r3, [r7, #0]
  uint16_t cnt = wAbs-rAbs;
 8003e74:	887a      	ldrh	r2, [r7, #2]
 8003e76:	883b      	ldrh	r3, [r7, #0]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	81fb      	strh	r3, [r7, #14]

  // In case we have non-power of two depth we need a further modification
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 8003e7c:	883a      	ldrh	r2, [r7, #0]
 8003e7e:	887b      	ldrh	r3, [r7, #2]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d904      	bls.n	8003e8e <_tu_fifo_count+0x2a>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	895b      	ldrh	r3, [r3, #10]
 8003e88:	89fa      	ldrh	r2, [r7, #14]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	81fb      	strh	r3, [r7, #14]

  return cnt;
 8003e8e:	89fb      	ldrh	r3, [r7, #14]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <_tu_fifo_empty>:

// Works on local copies of w and r
static inline bool _tu_fifo_empty(uint16_t wAbs, uint16_t rAbs)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	460a      	mov	r2, r1
 8003ea6:	80fb      	strh	r3, [r7, #6]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	80bb      	strh	r3, [r7, #4]
  return wAbs == rAbs;
 8003eac:	88fa      	ldrh	r2, [r7, #6]
 8003eae:	88bb      	ldrh	r3, [r7, #4]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	bf0c      	ite	eq
 8003eb4:	2301      	moveq	r3, #1
 8003eb6:	2300      	movne	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <_tu_fifo_full>:

// Works on local copies of w and r
static inline bool _tu_fifo_full(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b082      	sub	sp, #8
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	460b      	mov	r3, r1
 8003ed0:	807b      	strh	r3, [r7, #2]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	803b      	strh	r3, [r7, #0]
  return (_tu_fifo_count(f, wAbs, rAbs) == f->depth);
 8003ed6:	883a      	ldrh	r2, [r7, #0]
 8003ed8:	887b      	ldrh	r3, [r7, #2]
 8003eda:	4619      	mov	r1, r3
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff ffc1 	bl	8003e64 <_tu_fifo_count>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	889b      	ldrh	r3, [r3, #4]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	bf0c      	ite	eq
 8003eee:	2301      	moveq	r3, #1
 8003ef0:	2300      	movne	r3, #0
 8003ef2:	b2db      	uxtb	r3, r3
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <_tu_fifo_correct_read_pointer>:
}

// Works on local copies of w
// For more details see _tu_fifo_overflow()!
static inline void _tu_fifo_correct_read_pointer(tu_fifo_t* f, uint16_t wAbs)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	807b      	strh	r3, [r7, #2]
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	889a      	ldrh	r2, [r3, #4]
 8003f0c:	887b      	ldrh	r3, [r7, #2]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff ff6d 	bl	8003df0 <backward_pointer>
 8003f16:	4603      	mov	r3, r0
 8003f18:	461a      	mov	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	821a      	strh	r2, [r3, #16]
}
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <_tu_fifo_peek>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wAbs, uint16_t rAbs)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b086      	sub	sp, #24
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	4611      	mov	r1, r2
 8003f32:	461a      	mov	r2, r3
 8003f34:	460b      	mov	r3, r1
 8003f36:	80fb      	strh	r3, [r7, #6]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _tu_fifo_count(f, wAbs, rAbs);
 8003f3c:	88ba      	ldrh	r2, [r7, #4]
 8003f3e:	88fb      	ldrh	r3, [r7, #6]
 8003f40:	4619      	mov	r1, r3
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f7ff ff8e 	bl	8003e64 <_tu_fifo_count>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	82fb      	strh	r3, [r7, #22]

  // Check overflow and correct if required
  if (cnt > f->depth)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	889b      	ldrh	r3, [r3, #4]
 8003f50:	8afa      	ldrh	r2, [r7, #22]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d907      	bls.n	8003f66 <_tu_fifo_peek+0x40>
  {
    _tu_fifo_correct_read_pointer(f, wAbs);
 8003f56:	88fb      	ldrh	r3, [r7, #6]
 8003f58:	4619      	mov	r1, r3
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f7ff ffce 	bl	8003efc <_tu_fifo_correct_read_pointer>
    cnt = f->depth;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	889b      	ldrh	r3, [r3, #4]
 8003f64:	82fb      	strh	r3, [r7, #22]
  }

  // Skip beginning of buffer
  if (cnt == 0) return false;
 8003f66:	8afb      	ldrh	r3, [r7, #22]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <_tu_fifo_peek+0x4a>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	e00d      	b.n	8003f8c <_tu_fifo_peek+0x66>

  uint16_t rRel = get_relative_pointer(f, rAbs);
 8003f70:	88bb      	ldrh	r3, [r7, #4]
 8003f72:	4619      	mov	r1, r3
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f7ff ff63 	bl	8003e40 <get_relative_pointer>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	82bb      	strh	r3, [r7, #20]

  // Peek data
  _ff_pull(f, p_buffer, rRel);
 8003f7e:	8abb      	ldrh	r3, [r7, #20]
 8003f80:	461a      	mov	r2, r3
 8003f82:	68b9      	ldr	r1, [r7, #8]
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f7ff fe21 	bl	8003bcc <_ff_pull>

  return true;
 8003f8a:	2301      	movs	r3, #1
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wAbs, uint16_t rAbs, tu_fifo_copy_mode_t copy_mode)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	80fb      	strh	r3, [r7, #6]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _tu_fifo_count(f, wAbs, rAbs);
 8003faa:	8c3a      	ldrh	r2, [r7, #32]
 8003fac:	88bb      	ldrh	r3, [r7, #4]
 8003fae:	4619      	mov	r1, r3
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f7ff ff57 	bl	8003e64 <_tu_fifo_count>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	82fb      	strh	r3, [r7, #22]

  // Check overflow and correct if required
  if (cnt > f->depth)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	889b      	ldrh	r3, [r3, #4]
 8003fbe:	8afa      	ldrh	r2, [r7, #22]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d90a      	bls.n	8003fda <_tu_fifo_peek_n+0x46>
  {
    _tu_fifo_correct_read_pointer(f, wAbs);
 8003fc4:	88bb      	ldrh	r3, [r7, #4]
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f7ff ff97 	bl	8003efc <_tu_fifo_correct_read_pointer>
    rAbs = f->rd_idx;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8a1b      	ldrh	r3, [r3, #16]
 8003fd2:	843b      	strh	r3, [r7, #32]
    cnt = f->depth;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	889b      	ldrh	r3, [r3, #4]
 8003fd8:	82fb      	strh	r3, [r7, #22]
  }

  // Skip beginning of buffer
  if (cnt == 0) return 0;
 8003fda:	8afb      	ldrh	r3, [r7, #22]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <_tu_fifo_peek_n+0x50>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	e017      	b.n	8004014 <_tu_fifo_peek_n+0x80>

  // Check if we can read something at and after offset - if too less is available we read what remains
  if (cnt < n) n = cnt;
 8003fe4:	8afa      	ldrh	r2, [r7, #22]
 8003fe6:	88fb      	ldrh	r3, [r7, #6]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d201      	bcs.n	8003ff0 <_tu_fifo_peek_n+0x5c>
 8003fec:	8afb      	ldrh	r3, [r7, #22]
 8003fee:	80fb      	strh	r3, [r7, #6]

  uint16_t rRel = get_relative_pointer(f, rAbs);
 8003ff0:	8c3b      	ldrh	r3, [r7, #32]
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f7ff ff23 	bl	8003e40 <get_relative_pointer>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	82bb      	strh	r3, [r7, #20]

  // Peek data
  _ff_pull_n(f, p_buffer, n, rRel, copy_mode);
 8003ffe:	8ab9      	ldrh	r1, [r7, #20]
 8004000:	88fa      	ldrh	r2, [r7, #6]
 8004002:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	460b      	mov	r3, r1
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f7ff fdf6 	bl	8003bfe <_ff_pull_n>

  return n;
 8004012:	88fb      	ldrh	r3, [r7, #6]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <_tu_fifo_remaining>:

// Works on local copies of w and r
static inline uint16_t _tu_fifo_remaining(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
 800401c:	b590      	push	{r4, r7, lr}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	807b      	strh	r3, [r7, #2]
 8004028:	4613      	mov	r3, r2
 800402a:	803b      	strh	r3, [r7, #0]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	889c      	ldrh	r4, [r3, #4]
 8004030:	883a      	ldrh	r2, [r7, #0]
 8004032:	887b      	ldrh	r3, [r7, #2]
 8004034:	4619      	mov	r1, r3
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff ff14 	bl	8003e64 <_tu_fifo_count>
 800403c:	4603      	mov	r3, r0
 800403e:	1ae3      	subs	r3, r4, r3
 8004040:	b29b      	uxth	r3, r3
}
 8004042:	4618      	mov	r0, r3
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	bd90      	pop	{r4, r7, pc}

0800404a <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b08a      	sub	sp, #40	; 0x28
 800404e:	af02      	add	r7, sp, #8
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	4611      	mov	r1, r2
 8004056:	461a      	mov	r2, r3
 8004058:	460b      	mov	r3, r1
 800405a:	80fb      	strh	r3, [r7, #6]
 800405c:	4613      	mov	r3, r2
 800405e:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 8004060:	88fb      	ldrh	r3, [r7, #6]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <_tu_fifo_write_n+0x20>
 8004066:	2300      	movs	r3, #0
 8004068:	e053      	b.n	8004112 <_tu_fifo_write_n+0xc8>

  _ff_lock(f->mutex_wr);

  uint16_t w = f->wr_idx, r = f->rd_idx;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	89db      	ldrh	r3, [r3, #14]
 800406e:	83fb      	strh	r3, [r7, #30]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8a1b      	ldrh	r3, [r3, #16]
 8004074:	82fb      	strh	r3, [r7, #22]
  uint8_t const* buf8 = (uint8_t const*) data;
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	61bb      	str	r3, [r7, #24]

  if (!f->overwritable)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	7a1b      	ldrb	r3, [r3, #8]
 800407e:	f083 0301 	eor.w	r3, r3, #1
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d013      	beq.n	80040b0 <_tu_fifo_write_n+0x66>
  {
    // Not overwritable limit up to full
    n = tu_min16(n, _tu_fifo_remaining(f, w, r));
 8004088:	8afa      	ldrh	r2, [r7, #22]
 800408a:	8bfb      	ldrh	r3, [r7, #30]
 800408c:	4619      	mov	r1, r3
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f7ff ffc4 	bl	800401c <_tu_fifo_remaining>
 8004094:	4603      	mov	r3, r0
 8004096:	461a      	mov	r2, r3
 8004098:	88fb      	ldrh	r3, [r7, #6]
 800409a:	827b      	strh	r3, [r7, #18]
 800409c:	4613      	mov	r3, r2
 800409e:	823b      	strh	r3, [r7, #16]
 80040a0:	8a7a      	ldrh	r2, [r7, #18]
 80040a2:	8a3b      	ldrh	r3, [r7, #16]
 80040a4:	4293      	cmp	r3, r2
 80040a6:	bf28      	it	cs
 80040a8:	4613      	movcs	r3, r2
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	80fb      	strh	r3, [r7, #6]
 80040ae:	e015      	b.n	80040dc <_tu_fifo_write_n+0x92>
  }
  else if (n >= f->depth)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	889b      	ldrh	r3, [r3, #4]
 80040b4:	88fa      	ldrh	r2, [r7, #6]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d310      	bcc.n	80040dc <_tu_fifo_write_n+0x92>
  {
    // Only copy last part
    buf8 = buf8 + (n - f->depth) * f->item_size;
 80040ba:	88fb      	ldrh	r3, [r7, #6]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	8892      	ldrh	r2, [r2, #4]
 80040c0:	1a9b      	subs	r3, r3, r2
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	88d2      	ldrh	r2, [r2, #6]
 80040c6:	fb02 f303 	mul.w	r3, r2, r3
 80040ca:	461a      	mov	r2, r3
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	4413      	add	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
    n = f->depth;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	889b      	ldrh	r3, [r3, #4]
 80040d6:	80fb      	strh	r3, [r7, #6]

    // We start writing at the read pointer's position since we fill the complete
    // buffer and we do not want to modify the read pointer within a write function!
    // This would end up in a race condition with read functions!
    w = r;
 80040d8:	8afb      	ldrh	r3, [r7, #22]
 80040da:	83fb      	strh	r3, [r7, #30]
  }

  uint16_t wRel = get_relative_pointer(f, w);
 80040dc:	8bfb      	ldrh	r3, [r7, #30]
 80040de:	4619      	mov	r1, r3
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f7ff fead 	bl	8003e40 <get_relative_pointer>
 80040e6:	4603      	mov	r3, r0
 80040e8:	82bb      	strh	r3, [r7, #20]

  // Write data
  _ff_push_n(f, buf8, n, wRel, copy_mode);
 80040ea:	8ab9      	ldrh	r1, [r7, #20]
 80040ec:	88fa      	ldrh	r2, [r7, #6]
 80040ee:	797b      	ldrb	r3, [r7, #5]
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	460b      	mov	r3, r1
 80040f4:	69b9      	ldr	r1, [r7, #24]
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f7ff fc9c 	bl	8003a34 <_ff_push_n>

  // Advance pointer
  f->wr_idx = advance_pointer(f, w, n);
 80040fc:	88fa      	ldrh	r2, [r7, #6]
 80040fe:	8bfb      	ldrh	r3, [r7, #30]
 8004100:	4619      	mov	r1, r3
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f7ff fe49 	bl	8003d9a <advance_pointer>
 8004108:	4603      	mov	r3, r0
 800410a:	461a      	mov	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	81da      	strh	r2, [r3, #14]

  _ff_unlock(f->mutex_wr);

  return n;
 8004110:	88fb      	ldrh	r3, [r7, #6]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3720      	adds	r7, #32
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b086      	sub	sp, #24
 800411e:	af02      	add	r7, sp, #8
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	60b9      	str	r1, [r7, #8]
 8004124:	4611      	mov	r1, r2
 8004126:	461a      	mov	r2, r3
 8004128:	460b      	mov	r3, r1
 800412a:	80fb      	strh	r3, [r7, #6]
 800412c:	4613      	mov	r3, r2
 800412e:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	89db      	ldrh	r3, [r3, #14]
 8004134:	b298      	uxth	r0, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8a1b      	ldrh	r3, [r3, #16]
 800413a:	b29b      	uxth	r3, r3
 800413c:	88f9      	ldrh	r1, [r7, #6]
 800413e:	797a      	ldrb	r2, [r7, #5]
 8004140:	9201      	str	r2, [sp, #4]
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	4603      	mov	r3, r0
 8004146:	460a      	mov	r2, r1
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f7ff ff22 	bl	8003f94 <_tu_fifo_peek_n>
 8004150:	4603      	mov	r3, r0
 8004152:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, n);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8a1b      	ldrh	r3, [r3, #16]
 8004158:	b29b      	uxth	r3, r3
 800415a:	88fa      	ldrh	r2, [r7, #6]
 800415c:	4619      	mov	r1, r3
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f7ff fe1b 	bl	8003d9a <advance_pointer>
 8004164:	4603      	mov	r3, r0
 8004166:	461a      	mov	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	821a      	strh	r2, [r3, #16]

  _ff_unlock(f->mutex_rd);
  return n;
 800416c:	88fb      	ldrh	r3, [r7, #6]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  return tu_min16(_tu_fifo_count(f, f->wr_idx, f->rd_idx), f->depth);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	89db      	ldrh	r3, [r3, #14]
 8004182:	b299      	uxth	r1, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8a1b      	ldrh	r3, [r3, #16]
 8004188:	b29b      	uxth	r3, r3
 800418a:	461a      	mov	r2, r3
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff fe69 	bl	8003e64 <_tu_fifo_count>
 8004192:	4603      	mov	r3, r0
 8004194:	461a      	mov	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	889b      	ldrh	r3, [r3, #4]
 800419a:	81fa      	strh	r2, [r7, #14]
 800419c:	81bb      	strh	r3, [r7, #12]
 800419e:	89fa      	ldrh	r2, [r7, #14]
 80041a0:	89bb      	ldrh	r3, [r7, #12]
 80041a2:	4293      	cmp	r3, r2
 80041a4:	bf28      	it	cs
 80041a6:	4613      	movcs	r3, r2
 80041a8:	b29b      	uxth	r3, r3
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b082      	sub	sp, #8
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  return _tu_fifo_empty(f->wr_idx, f->rd_idx);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	89db      	ldrh	r3, [r3, #14]
 80041be:	b29a      	uxth	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	8a1b      	ldrh	r3, [r3, #16]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	4619      	mov	r1, r3
 80041c8:	4610      	mov	r0, r2
 80041ca:	f7ff fe67 	bl	8003e9c <_tu_fifo_empty>
 80041ce:	4603      	mov	r3, r0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	89db      	ldrh	r3, [r3, #14]
 80041e4:	b299      	uxth	r1, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	8a1b      	ldrh	r3, [r3, #16]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	461a      	mov	r2, r3
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff ff14 	bl	800401c <_tu_fifo_remaining>
 80041f4:	4603      	mov	r3, r0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	89db      	ldrh	r3, [r3, #14]
 800420c:	b29a      	uxth	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	8a1b      	ldrh	r3, [r3, #16]
 8004212:	b29b      	uxth	r3, r3
 8004214:	6839      	ldr	r1, [r7, #0]
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7ff fe85 	bl	8003f26 <_tu_fifo_peek>
 800421c:	4603      	mov	r3, r0
 800421e:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8a1b      	ldrh	r3, [r3, #16]
 8004224:	b29b      	uxth	r3, r3
 8004226:	7bfa      	ldrb	r2, [r7, #15]
 8004228:	b292      	uxth	r2, r2
 800422a:	4619      	mov	r1, r3
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff fdb4 	bl	8003d9a <advance_pointer>
 8004232:	4603      	mov	r3, r0
 8004234:	461a      	mov	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	821a      	strh	r2, [r3, #16]

  _ff_unlock(f->mutex_rd);
  return ret;
 800423a:	7bfb      	ldrb	r3, [r7, #15]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	4613      	mov	r3, r2
 8004250:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8004252:	88fa      	ldrh	r2, [r7, #6]
 8004254:	2300      	movs	r3, #0
 8004256:	68b9      	ldr	r1, [r7, #8]
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f7ff ff5e 	bl	800411a <_tu_fifo_read_n>
 800425e:	4603      	mov	r3, r0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <tu_fifo_read_n_const_addr_full_words>:

uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	4613      	mov	r3, r2
 8004274:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8004276:	88fa      	ldrh	r2, [r7, #6]
 8004278:	2301      	movs	r3, #1
 800427a:	68b9      	ldr	r1, [r7, #8]
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f7ff ff4c 	bl	800411a <_tu_fifo_read_n>
 8004282:	4603      	mov	r3, r0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const w = f->wr_idx;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	89db      	ldrh	r3, [r3, #14]
 800429a:	81bb      	strh	r3, [r7, #12]

  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable )
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8a1b      	ldrh	r3, [r3, #16]
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	89bb      	ldrh	r3, [r7, #12]
 80042a4:	4619      	mov	r1, r3
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff fe0d 	bl	8003ec6 <_tu_fifo_full>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d009      	beq.n	80042c6 <tu_fifo_write+0x3a>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	7a1b      	ldrb	r3, [r3, #8]
 80042b6:	f083 0301 	eor.w	r3, r3, #1
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <tu_fifo_write+0x3a>
  {
    ret = false;
 80042c0:	2300      	movs	r3, #0
 80042c2:	73fb      	strb	r3, [r7, #15]
 80042c4:	e018      	b.n	80042f8 <tu_fifo_write+0x6c>
  }else
  {
    uint16_t wRel = get_relative_pointer(f, w);
 80042c6:	89bb      	ldrh	r3, [r7, #12]
 80042c8:	4619      	mov	r1, r3
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff fdb8 	bl	8003e40 <get_relative_pointer>
 80042d0:	4603      	mov	r3, r0
 80042d2:	817b      	strh	r3, [r7, #10]

    // Write data
    _ff_push(f, data, wRel);
 80042d4:	897b      	ldrh	r3, [r7, #10]
 80042d6:	461a      	mov	r2, r3
 80042d8:	6839      	ldr	r1, [r7, #0]
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7ff fb91 	bl	8003a02 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_pointer(f, w, 1);
 80042e0:	89bb      	ldrh	r3, [r7, #12]
 80042e2:	2201      	movs	r2, #1
 80042e4:	4619      	mov	r1, r3
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff fd57 	bl	8003d9a <advance_pointer>
 80042ec:	4603      	mov	r3, r0
 80042ee:	461a      	mov	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	81da      	strh	r2, [r3, #14]

    ret = true;
 80042f4:	2301      	movs	r3, #1
 80042f6:	73fb      	strb	r3, [r7, #15]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b084      	sub	sp, #16
 8004306:	af00      	add	r7, sp, #0
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	4613      	mov	r3, r2
 800430e:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8004310:	88fa      	ldrh	r2, [r7, #6]
 8004312:	2300      	movs	r3, #0
 8004314:	68b9      	ldr	r1, [r7, #8]
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f7ff fe97 	bl	800404a <_tu_fifo_write_n>
 800431c:	4603      	mov	r3, r0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	4613      	mov	r3, r2
 8004332:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8004334:	88fa      	ldrh	r2, [r7, #6]
 8004336:	2301      	movs	r3, #1
 8004338:	68b9      	ldr	r1, [r7, #8]
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f7ff fe85 	bl	800404a <_tu_fifo_write_n>
 8004340:	4603      	mov	r3, r0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = f->wr_idx = 0;
 8004352:	2100      	movs	r1, #0
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	460a      	mov	r2, r1
 8004358:	81da      	strh	r2, [r3, #14]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	460a      	mov	r2, r1
 800435e:	821a      	strh	r2, [r3, #16]
  f->max_pointer_idx = (uint16_t) (2*f->depth-1);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	889b      	ldrh	r3, [r3, #4]
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	819a      	strh	r2, [r3, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	899b      	ldrh	r3, [r3, #12]
 8004374:	43db      	mvns	r3, r3
 8004376:	b29a      	uxth	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 800437c:	2301      	movs	r3, #1
}
 800437e:	4618      	mov	r0, r3
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	460b      	mov	r3, r1
 8004394:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	78fa      	ldrb	r2, [r7, #3]
 800439a:	721a      	strb	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 800439c:	2301      	movs	r3, #1
}
 800439e:	4618      	mov	r0, r3
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
	...

080043ac <get_driver>:
static uint8_t _app_driver_count = 0;

// virtually joins built-in and application drivers together.
// Application is positioned first to allow overwriting built-in ones.
static inline usbd_class_driver_t const * get_driver(uint8_t drvid)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	71fb      	strb	r3, [r7, #7]
  // Application drivers
  if ( usbd_app_driver_get_cb )
 80043b6:	4b14      	ldr	r3, [pc, #80]	; (8004408 <get_driver+0x5c>)
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d012      	beq.n	80043e2 <get_driver+0x36>
  {
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80043bc:	4b13      	ldr	r3, [pc, #76]	; (800440c <get_driver+0x60>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	79fa      	ldrb	r2, [r7, #7]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d208      	bcs.n	80043d8 <get_driver+0x2c>
 80043c6:	4b12      	ldr	r3, [pc, #72]	; (8004410 <get_driver+0x64>)
 80043c8:	6819      	ldr	r1, [r3, #0]
 80043ca:	79fa      	ldrb	r2, [r7, #7]
 80043cc:	4613      	mov	r3, r2
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	4413      	add	r3, r2
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	440b      	add	r3, r1
 80043d6:	e010      	b.n	80043fa <get_driver+0x4e>
    drvid -= _app_driver_count;
 80043d8:	4b0c      	ldr	r3, [pc, #48]	; (800440c <get_driver+0x60>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	79fa      	ldrb	r2, [r7, #7]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	71fb      	strb	r3, [r7, #7]
  }

  // Built-in drivers
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d807      	bhi.n	80043f8 <get_driver+0x4c>
 80043e8:	79fa      	ldrb	r2, [r7, #7]
 80043ea:	4613      	mov	r3, r2
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	4413      	add	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	4a08      	ldr	r2, [pc, #32]	; (8004414 <get_driver+0x68>)
 80043f4:	4413      	add	r3, r2
 80043f6:	e000      	b.n	80043fa <get_driver+0x4e>

  return NULL;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	00000000 	.word	0x00000000
 800440c:	20002fac 	.word	0x20002fac
 8004410:	20002fa8 	.word	0x20002fa8
 8004414:	0800df28 	.word	0x0800df28

08004418 <tud_mounted>:
{
  return _usbd_dev.connected;
}

bool tud_mounted(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 800441c:	4b06      	ldr	r3, [pc, #24]	; (8004438 <tud_mounted+0x20>)
 800441e:	785b      	ldrb	r3, [r3, #1]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	bf14      	ite	ne
 8004426:	2301      	movne	r3, #1
 8004428:	2300      	moveq	r3, #0
 800442a:	b2db      	uxtb	r3, r3
}
 800442c:	4618      	mov	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	20002f7c 	.word	0x20002f7c

0800443c <tud_suspended>:

bool tud_suspended(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8004440:	4b07      	ldr	r3, [pc, #28]	; (8004460 <tud_suspended+0x24>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	bf14      	ite	ne
 800444e:	2301      	movne	r3, #1
 8004450:	2300      	moveq	r3, #0
 8004452:	b2db      	uxtb	r3, r3
}
 8004454:	4618      	mov	r0, r3
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	20002f7c 	.word	0x20002f7c

08004464 <tud_inited>:

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8004468:	4b05      	ldr	r3, [pc, #20]	; (8004480 <tud_inited+0x1c>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2bff      	cmp	r3, #255	; 0xff
 800446e:	bf14      	ite	ne
 8004470:	2301      	movne	r3, #1
 8004472:	2300      	moveq	r3, #0
 8004474:	b2db      	uxtb	r3, r3
}
 8004476:	4618      	mov	r0, r3
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	20002430 	.word	0x20002430

08004484 <tud_init>:

bool tud_init (uint8_t rhport)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af00      	add	r7, sp, #0
 800448a:	4603      	mov	r3, r0
 800448c:	71fb      	strb	r3, [r7, #7]
  // skip if already initialized
  if ( tud_inited() ) return true;
 800448e:	f7ff ffe9 	bl	8004464 <tud_inited>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <tud_init+0x18>
 8004498:	2301      	movs	r3, #1
 800449a:	e054      	b.n	8004546 <tud_init+0xc2>

  TU_LOG(USBD_DBG, "USBD init on controller %u\r\n", rhport);
  TU_LOG_INT(USBD_DBG, sizeof(usbd_device_t));

  tu_varclr(&_usbd_dev);
 800449c:	222b      	movs	r2, #43	; 0x2b
 800449e:	2100      	movs	r1, #0
 80044a0:	482b      	ldr	r0, [pc, #172]	; (8004550 <tud_init+0xcc>)
 80044a2:	f008 fad5 	bl	800ca50 <memset>
 80044a6:	4b2b      	ldr	r3, [pc, #172]	; (8004554 <tud_init+0xd0>)
 80044a8:	60fb      	str	r3, [r7, #12]
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  tu_fifo_clear(&qdef->ff);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	3304      	adds	r3, #4
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7ff ff4b 	bl	800434a <tu_fifo_clear>
  return (osal_queue_t) qdef;
 80044b4:	68fb      	ldr	r3, [r7, #12]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 80044b6:	4a28      	ldr	r2, [pc, #160]	; (8004558 <tud_init+0xd4>)
 80044b8:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 80044ba:	4b27      	ldr	r3, [pc, #156]	; (8004558 <tud_init+0xd4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10a      	bne.n	80044d8 <tud_init+0x54>
 80044c2:	4b26      	ldr	r3, [pc, #152]	; (800455c <tud_init+0xd8>)
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d000      	beq.n	80044d4 <tud_init+0x50>
 80044d2:	be00      	bkpt	0x0000
 80044d4:	2300      	movs	r3, #0
 80044d6:	e036      	b.n	8004546 <tud_init+0xc2>

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
 80044d8:	4b21      	ldr	r3, [pc, #132]	; (8004560 <tud_init+0xdc>)
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <tud_init+0x66>
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 80044de:	4821      	ldr	r0, [pc, #132]	; (8004564 <tud_init+0xe0>)
 80044e0:	f3af 8000 	nop.w
 80044e4:	4603      	mov	r3, r0
 80044e6:	4a20      	ldr	r2, [pc, #128]	; (8004568 <tud_init+0xe4>)
 80044e8:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80044ea:	2300      	movs	r3, #0
 80044ec:	77fb      	strb	r3, [r7, #31]
 80044ee:	e018      	b.n	8004522 <tud_init+0x9e>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 80044f0:	7ffb      	ldrb	r3, [r7, #31]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff ff5a 	bl	80043ac <get_driver>
 80044f8:	61b8      	str	r0, [r7, #24]
    TU_ASSERT(driver);
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10a      	bne.n	8004516 <tud_init+0x92>
 8004500:	4b16      	ldr	r3, [pc, #88]	; (800455c <tud_init+0xd8>)
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d000      	beq.n	8004512 <tud_init+0x8e>
 8004510:	be00      	bkpt	0x0000
 8004512:	2300      	movs	r3, #0
 8004514:	e017      	b.n	8004546 <tud_init+0xc2>
    TU_LOG(USBD_DBG, "%s init\r\n", driver->name);
    driver->init();
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 800451c:	7ffb      	ldrb	r3, [r7, #31]
 800451e:	3301      	adds	r3, #1
 8004520:	77fb      	strb	r3, [r7, #31]
 8004522:	4b10      	ldr	r3, [pc, #64]	; (8004564 <tud_init+0xe0>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	1c9a      	adds	r2, r3, #2
 8004528:	7ffb      	ldrb	r3, [r7, #31]
 800452a:	429a      	cmp	r2, r3
 800452c:	dae0      	bge.n	80044f0 <tud_init+0x6c>
  }

  _usbd_rhport = rhport;
 800452e:	4a0f      	ldr	r2, [pc, #60]	; (800456c <tud_init+0xe8>)
 8004530:	79fb      	ldrb	r3, [r7, #7]
 8004532:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  dcd_init(rhport);
 8004534:	79fb      	ldrb	r3, [r7, #7]
 8004536:	4618      	mov	r0, r3
 8004538:	f001 ff50 	bl	80063dc <dcd_init>
  dcd_int_enable(rhport);
 800453c:	79fb      	ldrb	r3, [r7, #7]
 800453e:	4618      	mov	r0, r3
 8004540:	f001 ffb4 	bl	80064ac <dcd_int_enable>

  return true;
 8004544:	2301      	movs	r3, #1
}
 8004546:	4618      	mov	r0, r3
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20002f7c 	.word	0x20002f7c
 8004554:	20002434 	.word	0x20002434
 8004558:	20003070 	.word	0x20003070
 800455c:	e000edf0 	.word	0xe000edf0
 8004560:	00000000 	.word	0x00000000
 8004564:	20002fac 	.word	0x20002fac
 8004568:	20002fa8 	.word	0x20002fa8
 800456c:	20002430 	.word	0x20002430

08004570 <configuration_reset>:

static void configuration_reset(uint8_t rhport)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	71fb      	strb	r3, [r7, #7]
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 800457a:	2300      	movs	r3, #0
 800457c:	75fb      	strb	r3, [r7, #23]
 800457e:	e019      	b.n	80045b4 <configuration_reset+0x44>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 8004580:	7dfb      	ldrb	r3, [r7, #23]
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff ff12 	bl	80043ac <get_driver>
 8004588:	6138      	str	r0, [r7, #16]
    TU_ASSERT(driver, );
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d109      	bne.n	80045a4 <configuration_reset+0x34>
 8004590:	4b15      	ldr	r3, [pc, #84]	; (80045e8 <configuration_reset+0x78>)
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b00      	cmp	r3, #0
 800459e:	d01f      	beq.n	80045e0 <configuration_reset+0x70>
 80045a0:	be00      	bkpt	0x0000
 80045a2:	e01d      	b.n	80045e0 <configuration_reset+0x70>
    driver->reset(rhport);
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	79fa      	ldrb	r2, [r7, #7]
 80045aa:	4610      	mov	r0, r2
 80045ac:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 80045ae:	7dfb      	ldrb	r3, [r7, #23]
 80045b0:	3301      	adds	r3, #1
 80045b2:	75fb      	strb	r3, [r7, #23]
 80045b4:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <configuration_reset+0x7c>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	1c9a      	adds	r2, r3, #2
 80045ba:	7dfb      	ldrb	r3, [r7, #23]
 80045bc:	429a      	cmp	r2, r3
 80045be:	dadf      	bge.n	8004580 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 80045c0:	222b      	movs	r2, #43	; 0x2b
 80045c2:	2100      	movs	r1, #0
 80045c4:	480a      	ldr	r0, [pc, #40]	; (80045f0 <configuration_reset+0x80>)
 80045c6:	f008 fa43 	bl	800ca50 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 80045ca:	2210      	movs	r2, #16
 80045cc:	21ff      	movs	r1, #255	; 0xff
 80045ce:	4809      	ldr	r0, [pc, #36]	; (80045f4 <configuration_reset+0x84>)
 80045d0:	f008 fa3e 	bl	800ca50 <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 80045d4:	220c      	movs	r2, #12
 80045d6:	21ff      	movs	r1, #255	; 0xff
 80045d8:	4807      	ldr	r0, [pc, #28]	; (80045f8 <configuration_reset+0x88>)
 80045da:	f008 fa39 	bl	800ca50 <memset>
 80045de:	e000      	b.n	80045e2 <configuration_reset+0x72>
    TU_ASSERT(driver, );
 80045e0:	bf00      	nop
}
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	e000edf0 	.word	0xe000edf0
 80045ec:	20002fac 	.word	0x20002fac
 80045f0:	20002f7c 	.word	0x20002f7c
 80045f4:	20002f7f 	.word	0x20002f7f
 80045f8:	20002f8f 	.word	0x20002f8f

080045fc <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8004606:	79fb      	ldrb	r3, [r7, #7]
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff ffb1 	bl	8004570 <configuration_reset>
  usbd_control_reset();
 800460e:	f001 fb3f 	bl	8005c90 <usbd_control_reset>
}
 8004612:	bf00      	nop
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <tud_task_ext>:
      }
    }
    @endcode
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr)
{
 800461c:	b590      	push	{r4, r7, lr}
 800461e:	b091      	sub	sp, #68	; 0x44
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	460b      	mov	r3, r1
 8004626:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if ( !tusb_inited() ) return;
 8004628:	f002 ff4e 	bl	80074c8 <tusb_inited>
 800462c:	4603      	mov	r3, r0
 800462e:	f083 0301 	eor.w	r3, r3, #1
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	f040 812a 	bne.w	800488e <tud_task_ext+0x272>

  // Loop until there is no more events in the queue
  while (1)
  {
    dcd_event_t event;
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 800463a:	4b99      	ldr	r3, [pc, #612]	; (80048a0 <tud_task_ext+0x284>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004640:	f107 0308 	add.w	r3, r7, #8
 8004644:	62bb      	str	r3, [r7, #40]	; 0x28
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
 800464a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464c:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(false);
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2000      	movs	r0, #0
 8004654:	4798      	blx	r3
}
 8004656:	bf00      	nop
TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec)
{
  (void) msec; // not used, always behave as msec = 0

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
 8004658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465a:	3304      	adds	r3, #4
 800465c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff fdcd 	bl	80041fe <tu_fifo_read>
 8004664:	4603      	mov	r3, r0
 8004666:	77fb      	strb	r3, [r7, #31]
 8004668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466a:	61bb      	str	r3, [r7, #24]
  qhdl->interrupt_set(true);
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2001      	movs	r0, #1
 8004672:	4798      	blx	r3
}
 8004674:	bf00      	nop
  _osal_q_unlock(qhdl);

  return success;
 8004676:	7ffb      	ldrb	r3, [r7, #31]
 8004678:	f083 0301 	eor.w	r3, r3, #1
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	f040 8107 	bne.w	8004892 <tud_task_ext+0x276>
#if CFG_TUSB_DEBUG >= 2
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG(USBD_DBG, "\r\n"); // extra line for setup
    TU_LOG(USBD_DBG, "USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
 8004684:	7a7b      	ldrb	r3, [r7, #9]
 8004686:	3b01      	subs	r3, #1
 8004688:	2b07      	cmp	r3, #7
 800468a:	f200 80ea 	bhi.w	8004862 <tud_task_ext+0x246>
 800468e:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <tud_task_ext+0x78>)
 8004690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004694:	080046b5 	.word	0x080046b5
 8004698:	080046c5 	.word	0x080046c5
 800469c:	08004863 	.word	0x08004863
 80046a0:	08004809 	.word	0x08004809
 80046a4:	08004839 	.word	0x08004839
 80046a8:	080046db 	.word	0x080046db
 80046ac:	08004749 	.word	0x08004749
 80046b0:	08004853 	.word	0x08004853
    {
      case DCD_EVENT_BUS_RESET:
        TU_LOG(USBD_DBG, ": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 80046b4:	7a3b      	ldrb	r3, [r7, #8]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff ffa0 	bl	80045fc <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 80046bc:	7b3a      	ldrb	r2, [r7, #12]
 80046be:	4b79      	ldr	r3, [pc, #484]	; (80048a4 <tud_task_ext+0x288>)
 80046c0:	709a      	strb	r2, [r3, #2]
      break;
 80046c2:	e0e3      	b.n	800488c <tud_task_ext+0x270>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG(USBD_DBG, "\r\n");
        usbd_reset(event.rhport);
 80046c4:	7a3b      	ldrb	r3, [r7, #8]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff ff98 	bl	80045fc <usbd_reset>

        // invoke callback
        if (tud_umount_cb) tud_umount_cb();
 80046cc:	4b76      	ldr	r3, [pc, #472]	; (80048a8 <tud_task_ext+0x28c>)
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 80d1 	beq.w	8004876 <tud_task_ext+0x25a>
 80046d4:	f7fc f986 	bl	80009e4 <tud_umount_cb>
      break;
 80046d8:	e0cd      	b.n	8004876 <tud_task_ext+0x25a>
        TU_LOG_VAR(USBD_DBG, &event.setup_received);
        TU_LOG(USBD_DBG, "\r\n");

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 80046da:	4a72      	ldr	r2, [pc, #456]	; (80048a4 <tud_task_ext+0x288>)
 80046dc:	7813      	ldrb	r3, [r2, #0]
 80046de:	f043 0301 	orr.w	r3, r3, #1
 80046e2:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = false;
 80046e4:	4a6f      	ldr	r2, [pc, #444]	; (80048a4 <tud_task_ext+0x288>)
 80046e6:	7fd3      	ldrb	r3, [r2, #31]
 80046e8:	f36f 0300 	bfc	r3, #0, #1
 80046ec:	77d3      	strb	r3, [r2, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 80046ee:	4a6d      	ldr	r2, [pc, #436]	; (80048a4 <tud_task_ext+0x288>)
 80046f0:	7fd3      	ldrb	r3, [r2, #31]
 80046f2:	f36f 0382 	bfc	r3, #2, #1
 80046f6:	77d3      	strb	r3, [r2, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = false;
 80046f8:	4a6a      	ldr	r2, [pc, #424]	; (80048a4 <tud_task_ext+0x288>)
 80046fa:	f892 3020 	ldrb.w	r3, [r2, #32]
 80046fe:	f36f 0300 	bfc	r3, #0, #1
 8004702:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 8004706:	4a67      	ldr	r2, [pc, #412]	; (80048a4 <tud_task_ext+0x288>)
 8004708:	f892 3020 	ldrb.w	r3, [r2, #32]
 800470c:	f36f 0382 	bfc	r3, #2, #1
 8004710:	f882 3020 	strb.w	r3, [r2, #32]

        // Process control request
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8004714:	7a3a      	ldrb	r2, [r7, #8]
 8004716:	f107 0308 	add.w	r3, r7, #8
 800471a:	3304      	adds	r3, #4
 800471c:	4619      	mov	r1, r3
 800471e:	4610      	mov	r0, r2
 8004720:	f000 f8e2 	bl	80048e8 <process_control_request>
 8004724:	4603      	mov	r3, r0
 8004726:	f083 0301 	eor.w	r3, r3, #1
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 80a4 	beq.w	800487a <tud_task_ext+0x25e>
        {
          TU_LOG(USBD_DBG, "  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8004732:	7a3b      	ldrb	r3, [r7, #8]
 8004734:	2100      	movs	r1, #0
 8004736:	4618      	mov	r0, r3
 8004738:	f002 f9c8 	bl	8006acc <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 800473c:	7a3b      	ldrb	r3, [r7, #8]
 800473e:	2180      	movs	r1, #128	; 0x80
 8004740:	4618      	mov	r0, r3
 8004742:	f002 f9c3 	bl	8006acc <dcd_edpt_stall>
        }
      break;
 8004746:	e098      	b.n	800487a <tud_task_ext+0x25e>

      case DCD_EVENT_XFER_COMPLETE:
      {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8004748:	7b3b      	ldrb	r3, [r7, #12]
 800474a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800474e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004752:	75bb      	strb	r3, [r7, #22]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8004754:	7dbb      	ldrb	r3, [r7, #22]
 8004756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800475a:	b2db      	uxtb	r3, r3
        uint8_t const epnum   = tu_edpt_number(ep_addr);
 800475c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8004760:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004764:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004766:	7dfb      	ldrb	r3, [r7, #23]
 8004768:	09db      	lsrs	r3, r3, #7
 800476a:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 800476c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

        TU_LOG(USBD_DBG, "on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
 8004770:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8004774:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004778:	494a      	ldr	r1, [pc, #296]	; (80048a4 <tud_task_ext+0x288>)
 800477a:	0052      	lsls	r2, r2, #1
 800477c:	440a      	add	r2, r1
 800477e:	4413      	add	r3, r2
 8004780:	f103 0218 	add.w	r2, r3, #24
 8004784:	79d3      	ldrb	r3, [r2, #7]
 8004786:	f36f 0300 	bfc	r3, #0, #1
 800478a:	71d3      	strb	r3, [r2, #7]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 800478c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8004790:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004794:	4943      	ldr	r1, [pc, #268]	; (80048a4 <tud_task_ext+0x288>)
 8004796:	0052      	lsls	r2, r2, #1
 8004798:	440a      	add	r2, r1
 800479a:	4413      	add	r3, r2
 800479c:	f103 0218 	add.w	r2, r3, #24
 80047a0:	79d3      	ldrb	r3, [r2, #7]
 80047a2:	f36f 0382 	bfc	r3, #2, #1
 80047a6:	71d3      	strb	r3, [r2, #7]

        if ( 0 == epnum )
 80047a8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d107      	bne.n	80047c0 <tud_task_ext+0x1a4>
        {
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 80047b0:	7a38      	ldrb	r0, [r7, #8]
 80047b2:	7b7a      	ldrb	r2, [r7, #13]
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80047ba:	f001 fa9f 	bl	8005cfc <usbd_control_xfer_cb>

          TU_LOG(USBD_DBG, "  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
        }
      }
      break;
 80047be:	e065      	b.n	800488c <tud_task_ext+0x270>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 80047c0:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80047c4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80047c8:	4936      	ldr	r1, [pc, #216]	; (80048a4 <tud_task_ext+0x288>)
 80047ca:	0052      	lsls	r2, r2, #1
 80047cc:	440a      	add	r2, r1
 80047ce:	4413      	add	r3, r2
 80047d0:	3313      	adds	r3, #19
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff fde9 	bl	80043ac <get_driver>
 80047da:	63b8      	str	r0, [r7, #56]	; 0x38
          TU_ASSERT(driver, );
 80047dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d109      	bne.n	80047f6 <tud_task_ext+0x1da>
 80047e2:	4b32      	ldr	r3, [pc, #200]	; (80048ac <tud_task_ext+0x290>)
 80047e4:	637b      	str	r3, [r7, #52]	; 0x34
 80047e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d051      	beq.n	8004896 <tud_task_ext+0x27a>
 80047f2:	be00      	bkpt	0x0000
 80047f4:	e04f      	b.n	8004896 <tud_task_ext+0x27a>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 80047f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f8:	691c      	ldr	r4, [r3, #16]
 80047fa:	7a38      	ldrb	r0, [r7, #8]
 80047fc:	7b7a      	ldrb	r2, [r7, #13]
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8004804:	47a0      	blx	r4
      break;
 8004806:	e041      	b.n	800488c <tud_task_ext+0x270>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if ( _usbd_dev.connected )
 8004808:	4b26      	ldr	r3, [pc, #152]	; (80048a4 <tud_task_ext+0x288>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d033      	beq.n	800487e <tud_task_ext+0x262>
        {
          TU_LOG(USBD_DBG, ": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8004816:	4b26      	ldr	r3, [pc, #152]	; (80048b0 <tud_task_ext+0x294>)
 8004818:	2b00      	cmp	r3, #0
 800481a:	d030      	beq.n	800487e <tud_task_ext+0x262>
 800481c:	4b21      	ldr	r3, [pc, #132]	; (80048a4 <tud_task_ext+0x288>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	bf14      	ite	ne
 800482a:	2301      	movne	r3, #1
 800482c:	2300      	moveq	r3, #0
 800482e:	b2db      	uxtb	r3, r3
 8004830:	4618      	mov	r0, r3
 8004832:	f7fc f8e3 	bl	80009fc <tud_suspend_cb>
        }else
        {
          TU_LOG(USBD_DBG, " Skipped\r\n");
        }
      break;
 8004836:	e022      	b.n	800487e <tud_task_ext+0x262>

      case DCD_EVENT_RESUME:
        if ( _usbd_dev.connected )
 8004838:	4b1a      	ldr	r3, [pc, #104]	; (80048a4 <tud_task_ext+0x288>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d01d      	beq.n	8004882 <tud_task_ext+0x266>
        {
          TU_LOG(USBD_DBG, "\r\n");
          if (tud_resume_cb) tud_resume_cb();
 8004846:	4b1b      	ldr	r3, [pc, #108]	; (80048b4 <tud_task_ext+0x298>)
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01a      	beq.n	8004882 <tud_task_ext+0x266>
 800484c:	f7fc f8e8 	bl	8000a20 <tud_resume_cb>
        }else
        {
          TU_LOG(USBD_DBG, " Skipped\r\n");
        }
      break;
 8004850:	e017      	b.n	8004882 <tud_task_ext+0x266>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG(USBD_DBG, "\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d016      	beq.n	8004886 <tud_task_ext+0x26a>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4610      	mov	r0, r2
 800485e:	4798      	blx	r3
      break;
 8004860:	e011      	b.n	8004886 <tud_task_ext+0x26a>

      case DCD_EVENT_SOF:
      default:
        TU_BREAKPOINT();
 8004862:	4b12      	ldr	r3, [pc, #72]	; (80048ac <tud_task_ext+0x290>)
 8004864:	633b      	str	r3, [r7, #48]	; 0x30
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00b      	beq.n	800488a <tud_task_ext+0x26e>
 8004872:	be00      	bkpt	0x0000
      break;
 8004874:	e009      	b.n	800488a <tud_task_ext+0x26e>
      break;
 8004876:	bf00      	nop
 8004878:	e6df      	b.n	800463a <tud_task_ext+0x1e>
      break;
 800487a:	bf00      	nop
 800487c:	e6dd      	b.n	800463a <tud_task_ext+0x1e>
      break;
 800487e:	bf00      	nop
 8004880:	e6db      	b.n	800463a <tud_task_ext+0x1e>
      break;
 8004882:	bf00      	nop
 8004884:	e6d9      	b.n	800463a <tud_task_ext+0x1e>
      break;
 8004886:	bf00      	nop
 8004888:	e6d7      	b.n	800463a <tud_task_ext+0x1e>
      break;
 800488a:	bf00      	nop
  {
 800488c:	e6d5      	b.n	800463a <tud_task_ext+0x1e>
  if ( !tusb_inited() ) return;
 800488e:	bf00      	nop
 8004890:	e002      	b.n	8004898 <tud_task_ext+0x27c>
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 8004892:	bf00      	nop
 8004894:	e000      	b.n	8004898 <tud_task_ext+0x27c>
          TU_ASSERT(driver, );
 8004896:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) return;
#endif
  }
}
 8004898:	3744      	adds	r7, #68	; 0x44
 800489a:	46bd      	mov	sp, r7
 800489c:	bd90      	pop	{r4, r7, pc}
 800489e:	bf00      	nop
 80048a0:	20003070 	.word	0x20003070
 80048a4:	20002f7c 	.word	0x20002f7c
 80048a8:	080009e5 	.word	0x080009e5
 80048ac:	e000edf0 	.word	0xe000edf0
 80048b0:	080009fd 	.word	0x080009fd
 80048b4:	08000a21 	.word	0x08000a21

080048b8 <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	4603      	mov	r3, r0
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
 80048c4:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f001 f9ec 	bl	8005ca8 <usbd_control_set_complete_callback>
  TU_LOG(USBD_DBG, "  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	7bf8      	ldrb	r0, [r7, #15]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	2101      	movs	r1, #1
 80048da:	4798      	blx	r3
 80048dc:	4603      	mov	r3, r0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <process_control_request>:

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b094      	sub	sp, #80	; 0x50
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	4603      	mov	r3, r0
 80048f0:	6039      	str	r1, [r7, #0]
 80048f2:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 80048f4:	2000      	movs	r0, #0
 80048f6:	f001 f9d7 	bl	8005ca8 <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b60      	cmp	r3, #96	; 0x60
 8004906:	d10a      	bne.n	800491e <process_control_request+0x36>
 8004908:	4ba4      	ldr	r3, [pc, #656]	; (8004b9c <process_control_request+0x2b4>)
 800490a:	61bb      	str	r3, [r7, #24]
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b00      	cmp	r3, #0
 8004916:	d000      	beq.n	800491a <process_control_request+0x32>
 8004918:	be00      	bkpt	0x0000
 800491a:	2300      	movs	r3, #0
 800491c:	e247      	b.n	8004dae <process_control_request+0x4c6>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b40      	cmp	r3, #64	; 0x40
 800492a:	d10f      	bne.n	800494c <process_control_request+0x64>
  {
    TU_VERIFY(tud_vendor_control_xfer_cb);
 800492c:	4b9c      	ldr	r3, [pc, #624]	; (8004ba0 <process_control_request+0x2b8>)
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <process_control_request+0x4e>
 8004932:	2300      	movs	r3, #0
 8004934:	e23b      	b.n	8004dae <process_control_request+0x4c6>

    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8004936:	489a      	ldr	r0, [pc, #616]	; (8004ba0 <process_control_request+0x2b8>)
 8004938:	f001 f9b6 	bl	8005ca8 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 800493c:	79fb      	ldrb	r3, [r7, #7]
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	2101      	movs	r1, #1
 8004942:	4618      	mov	r0, r3
 8004944:	f3af 8000 	nop.w
 8004948:	4603      	mov	r3, r0
 800494a:	e230      	b.n	8004dae <process_control_request+0x4c6>
    TU_LOG(USBD_DBG, "  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG(USBD_DBG, "\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	f000 8177 	beq.w	8004c4a <process_control_request+0x362>
 800495c:	2b02      	cmp	r3, #2
 800495e:	f300 821a 	bgt.w	8004d96 <process_control_request+0x4ae>
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <process_control_request+0x86>
 8004966:	2b01      	cmp	r3, #1
 8004968:	f000 811e 	beq.w	8004ba8 <process_control_request+0x2c0>
 800496c:	e213      	b.n	8004d96 <process_control_request+0x4ae>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b20      	cmp	r3, #32
 800497a:	d123      	bne.n	80049c4 <process_control_request+0xdc>
      {
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	889b      	ldrh	r3, [r3, #4]
 8004980:	b29b      	uxth	r3, r3
 8004982:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8004984:	8afb      	ldrh	r3, [r7, #22]
 8004986:	b2db      	uxtb	r3, r3
 8004988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 800498c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004990:	2b0f      	cmp	r3, #15
 8004992:	d901      	bls.n	8004998 <process_control_request+0xb0>
 8004994:	2300      	movs	r3, #0
 8004996:	e20a      	b.n	8004dae <process_control_request+0x4c6>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8004998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800499c:	4a81      	ldr	r2, [pc, #516]	; (8004ba4 <process_control_request+0x2bc>)
 800499e:	4413      	add	r3, r2
 80049a0:	78db      	ldrb	r3, [r3, #3]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff fd02 	bl	80043ac <get_driver>
 80049a8:	6238      	str	r0, [r7, #32]
        TU_VERIFY(driver);
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <process_control_request+0xcc>
 80049b0:	2300      	movs	r3, #0
 80049b2:	e1fc      	b.n	8004dae <process_control_request+0x4c6>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 80049b4:	79fb      	ldrb	r3, [r7, #7]
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	6a39      	ldr	r1, [r7, #32]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff ff7c 	bl	80048b8 <invoke_class_control>
 80049c0:	4603      	mov	r3, r0
 80049c2:	e1f4      	b.n	8004dae <process_control_request+0x4c6>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <process_control_request+0x100>
      {
        // Non standard request is not supported
        TU_BREAKPOINT();
 80049d2:	4b72      	ldr	r3, [pc, #456]	; (8004b9c <process_control_request+0x2b4>)
 80049d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80049d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d000      	beq.n	80049e4 <process_control_request+0xfc>
 80049e2:	be00      	bkpt	0x0000
        return false;
 80049e4:	2300      	movs	r3, #0
 80049e6:	e1e2      	b.n	8004dae <process_control_request+0x4c6>
      }

      switch ( p_request->bRequest )
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	785b      	ldrb	r3, [r3, #1]
 80049ec:	2b09      	cmp	r3, #9
 80049ee:	f200 80c8 	bhi.w	8004b82 <process_control_request+0x29a>
 80049f2:	a201      	add	r2, pc, #4	; (adr r2, 80049f8 <process_control_request+0x110>)
 80049f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f8:	08004b4d 	.word	0x08004b4d
 80049fc:	08004b29 	.word	0x08004b29
 8004a00:	08004b83 	.word	0x08004b83
 8004a04:	08004b05 	.word	0x08004b05
 8004a08:	08004b83 	.word	0x08004b83
 8004a0c:	08004a21 	.word	0x08004a21
 8004a10:	08004aeb 	.word	0x08004aeb
 8004a14:	08004b83 	.word	0x08004b83
 8004a18:	08004a45 	.word	0x08004a45
 8004a1c:	08004a5d 	.word	0x08004a5d
      {
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8004a20:	6838      	ldr	r0, [r7, #0]
 8004a22:	f001 f951 	bl	8005cc8 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	885b      	ldrh	r3, [r3, #2]
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	79fb      	ldrb	r3, [r7, #7]
 8004a30:	4611      	mov	r1, r2
 8004a32:	4618      	mov	r0, r3
 8004a34:	f001 fd52 	bl	80064dc <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8004a38:	4a5a      	ldr	r2, [pc, #360]	; (8004ba4 <process_control_request+0x2bc>)
 8004a3a:	7813      	ldrb	r3, [r2, #0]
 8004a3c:	f043 0302 	orr.w	r3, r3, #2
 8004a40:	7013      	strb	r3, [r2, #0]
        break;
 8004a42:	e0aa      	b.n	8004b9a <process_control_request+0x2b2>

        case TUSB_REQ_GET_CONFIGURATION:
        {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8004a44:	4b57      	ldr	r3, [pc, #348]	; (8004ba4 <process_control_request+0x2bc>)
 8004a46:	785b      	ldrb	r3, [r3, #1]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	73fb      	strb	r3, [r7, #15]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8004a4c:	f107 020f 	add.w	r2, r7, #15
 8004a50:	79f8      	ldrb	r0, [r7, #7]
 8004a52:	2301      	movs	r3, #1
 8004a54:	6839      	ldr	r1, [r7, #0]
 8004a56:	f001 f8ab 	bl	8005bb0 <tud_control_xfer>
        }
        break;
 8004a5a:	e09e      	b.n	8004b9a <process_control_request+0x2b2>

        case TUSB_REQ_SET_CONFIGURATION:
        {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	885b      	ldrh	r3, [r3, #2]
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num)
 8004a66:	4b4f      	ldr	r3, [pc, #316]	; (8004ba4 <process_control_request+0x2bc>)
 8004a68:	785b      	ldrb	r3, [r3, #1]
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d030      	beq.n	8004ad6 <process_control_request+0x1ee>
          {
            if ( _usbd_dev.cfg_num )
 8004a74:	4b4b      	ldr	r3, [pc, #300]	; (8004ba4 <process_control_request+0x2bc>)
 8004a76:	785b      	ldrb	r3, [r3, #1]
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00f      	beq.n	8004a9e <process_control_request+0x1b6>
            {
              // already configured: need to clear all endpoints and driver first
              TU_LOG(USBD_DBG, "  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 8004a7e:	79fb      	ldrb	r3, [r7, #7]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f001 fe87 	bl	8006794 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 8004a86:	4b47      	ldr	r3, [pc, #284]	; (8004ba4 <process_control_request+0x2bc>)
 8004a88:	789b      	ldrb	r3, [r3, #2]
 8004a8a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
              configuration_reset(rhport);
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff fd6d 	bl	8004570 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 8004a96:	4a43      	ldr	r2, [pc, #268]	; (8004ba4 <process_control_request+0x2bc>)
 8004a98:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004a9c:	7093      	strb	r3, [r2, #2]
            }

            // switch to new configuration if not zero
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 8004a9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d017      	beq.n	8004ad6 <process_control_request+0x1ee>
 8004aa6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	4611      	mov	r1, r2
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 f986 	bl	8004dc0 <process_set_config>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	f083 0301 	eor.w	r3, r3, #1
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <process_control_request+0x1ee>
 8004ac0:	4b36      	ldr	r3, [pc, #216]	; (8004b9c <process_control_request+0x2b4>)
 8004ac2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d000      	beq.n	8004ad2 <process_control_request+0x1ea>
 8004ad0:	be00      	bkpt	0x0000
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	e16b      	b.n	8004dae <process_control_request+0x4c6>
          }

          _usbd_dev.cfg_num = cfg_num;
 8004ad6:	4a33      	ldr	r2, [pc, #204]	; (8004ba4 <process_control_request+0x2bc>)
 8004ad8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004adc:	7053      	strb	r3, [r2, #1]
          tud_control_status(rhport, p_request);
 8004ade:	79fb      	ldrb	r3, [r7, #7]
 8004ae0:	6839      	ldr	r1, [r7, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f001 f806 	bl	8005af4 <tud_control_status>
        }
        break;
 8004ae8:	e057      	b.n	8004b9a <process_control_request+0x2b2>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	6839      	ldr	r1, [r7, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fa82 	bl	8004ff8 <process_get_descriptor>
 8004af4:	4603      	mov	r3, r0
 8004af6:	f083 0301 	eor.w	r3, r3, #1
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d04b      	beq.n	8004b98 <process_control_request+0x2b0>
 8004b00:	2300      	movs	r3, #0
 8004b02:	e154      	b.n	8004dae <process_control_request+0x4c6>
        break;

        case TUSB_REQ_SET_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	885b      	ldrh	r3, [r3, #2]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d001      	beq.n	8004b12 <process_control_request+0x22a>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	e14d      	b.n	8004dae <process_control_request+0x4c6>

          TU_LOG(USBD_DBG, "    Enable Remote Wakeup\r\n");

          // Host may enable remote wake up before suspending especially HID device
          _usbd_dev.remote_wakeup_en = true;
 8004b12:	4a24      	ldr	r2, [pc, #144]	; (8004ba4 <process_control_request+0x2bc>)
 8004b14:	7813      	ldrb	r3, [r2, #0]
 8004b16:	f043 0308 	orr.w	r3, r3, #8
 8004b1a:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8004b1c:	79fb      	ldrb	r3, [r7, #7]
 8004b1e:	6839      	ldr	r1, [r7, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 ffe7 	bl	8005af4 <tud_control_status>
        break;
 8004b26:	e038      	b.n	8004b9a <process_control_request+0x2b2>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	885b      	ldrh	r3, [r3, #2]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d001      	beq.n	8004b36 <process_control_request+0x24e>
 8004b32:	2300      	movs	r3, #0
 8004b34:	e13b      	b.n	8004dae <process_control_request+0x4c6>

          TU_LOG(USBD_DBG, "    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 8004b36:	4a1b      	ldr	r2, [pc, #108]	; (8004ba4 <process_control_request+0x2bc>)
 8004b38:	7813      	ldrb	r3, [r2, #0]
 8004b3a:	f36f 03c3 	bfc	r3, #3, #1
 8004b3e:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8004b40:	79fb      	ldrb	r3, [r7, #7]
 8004b42:	6839      	ldr	r1, [r7, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 ffd5 	bl	8005af4 <tud_control_status>
        break;
 8004b4a:	e026      	b.n	8004b9a <process_control_request+0x2b2>
        case TUSB_REQ_GET_STATUS:
        {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8004b4c:	4b15      	ldr	r3, [pc, #84]	; (8004ba4 <process_control_request+0x2bc>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	095b      	lsrs	r3, r3, #5
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	4b11      	ldr	r3, [pc, #68]	; (8004ba4 <process_control_request+0x2bc>)
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	089b      	lsrs	r3, r3, #2
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	81bb      	strh	r3, [r7, #12]
          tud_control_xfer(rhport, p_request, &status, 2);
 8004b72:	f107 020c 	add.w	r2, r7, #12
 8004b76:	79f8      	ldrb	r0, [r7, #7]
 8004b78:	2302      	movs	r3, #2
 8004b7a:	6839      	ldr	r1, [r7, #0]
 8004b7c:	f001 f818 	bl	8005bb0 <tud_control_xfer>
        }
        break;
 8004b80:	e00b      	b.n	8004b9a <process_control_request+0x2b2>

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 8004b82:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <process_control_request+0x2b4>)
 8004b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d000      	beq.n	8004b94 <process_control_request+0x2ac>
 8004b92:	be00      	bkpt	0x0000
 8004b94:	2300      	movs	r3, #0
 8004b96:	e10a      	b.n	8004dae <process_control_request+0x4c6>
        break;
 8004b98:	bf00      	nop
      }
    break;
 8004b9a:	e107      	b.n	8004dac <process_control_request+0x4c4>
 8004b9c:	e000edf0 	.word	0xe000edf0
 8004ba0:	00000000 	.word	0x00000000
 8004ba4:	20002f7c 	.word	0x20002f7c

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	889b      	ldrh	r3, [r3, #4]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	82bb      	strh	r3, [r7, #20]
 8004bb0:	8abb      	ldrh	r3, [r7, #20]
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8004bb8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004bbc:	2b0f      	cmp	r3, #15
 8004bbe:	d901      	bls.n	8004bc4 <process_control_request+0x2dc>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	e0f4      	b.n	8004dae <process_control_request+0x4c6>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8004bc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004bc8:	4a7b      	ldr	r2, [pc, #492]	; (8004db8 <process_control_request+0x4d0>)
 8004bca:	4413      	add	r3, r2
 8004bcc:	78db      	ldrb	r3, [r3, #3]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff fbec 	bl	80043ac <get_driver>
 8004bd4:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(driver);
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <process_control_request+0x2f8>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	e0e6      	b.n	8004dae <process_control_request+0x4c6>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) )
 8004be0:	79fb      	ldrb	r3, [r7, #7]
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff fe66 	bl	80048b8 <invoke_class_control>
 8004bec:	4603      	mov	r3, r0
 8004bee:	f083 0301 	eor.w	r3, r3, #1
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d026      	beq.n	8004c46 <process_control_request+0x35e>
      {
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <process_control_request+0x322>
 8004c06:	2300      	movs	r3, #0
 8004c08:	e0d1      	b.n	8004dae <process_control_request+0x4c6>

        switch(p_request->bRequest)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	785b      	ldrb	r3, [r3, #1]
 8004c0e:	3b0a      	subs	r3, #10
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d816      	bhi.n	8004c42 <process_control_request+0x35a>
        {
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8004c14:	2000      	movs	r0, #0
 8004c16:	f001 f847 	bl	8005ca8 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	785b      	ldrb	r3, [r3, #1]
 8004c1e:	2b0a      	cmp	r3, #10
 8004c20:	d109      	bne.n	8004c36 <process_control_request+0x34e>
            {
              uint8_t alternate = 0;
 8004c22:	2300      	movs	r3, #0
 8004c24:	72fb      	strb	r3, [r7, #11]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8004c26:	f107 020b 	add.w	r2, r7, #11
 8004c2a:	79f8      	ldrb	r0, [r7, #7]
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	6839      	ldr	r1, [r7, #0]
 8004c30:	f000 ffbe 	bl	8005bb0 <tud_control_xfer>
            }else
            {
              tud_control_status(rhport, p_request);
            }
          break;
 8004c34:	e008      	b.n	8004c48 <process_control_request+0x360>
              tud_control_status(rhport, p_request);
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	6839      	ldr	r1, [r7, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 ff5a 	bl	8005af4 <tud_control_status>
          break;
 8004c40:	e002      	b.n	8004c48 <process_control_request+0x360>

          default: return false;
 8004c42:	2300      	movs	r3, #0
 8004c44:	e0b3      	b.n	8004dae <process_control_request+0x4c6>
        }
      }
 8004c46:	bf00      	nop
    }
    break;
 8004c48:	e0b0      	b.n	8004dac <process_control_request+0x4c4>

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	889b      	ldrh	r3, [r3, #4]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	823b      	strh	r3, [r7, #16]
 8004c52:	8a3b      	ldrh	r3, [r7, #16]
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004c5a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004c5e:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8004c60:	7cbb      	ldrb	r3, [r7, #18]
 8004c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c66:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8004c68:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8004c6c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004c70:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004c72:	7cfb      	ldrb	r3, [r7, #19]
 8004c74:	09db      	lsrs	r3, r3, #7
 8004c76:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8004c78:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8004c7c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8004c80:	2b05      	cmp	r3, #5
 8004c82:	d90a      	bls.n	8004c9a <process_control_request+0x3b2>
 8004c84:	4b4d      	ldr	r3, [pc, #308]	; (8004dbc <process_control_request+0x4d4>)
 8004c86:	643b      	str	r3, [r7, #64]	; 0x40
 8004c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d000      	beq.n	8004c96 <process_control_request+0x3ae>
 8004c94:	be00      	bkpt	0x0000
 8004c96:	2300      	movs	r3, #0
 8004c98:	e089      	b.n	8004dae <process_control_request+0x4c6>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8004c9a:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8004c9e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004ca2:	4945      	ldr	r1, [pc, #276]	; (8004db8 <process_control_request+0x4d0>)
 8004ca4:	0052      	lsls	r2, r2, #1
 8004ca6:	440a      	add	r2, r1
 8004ca8:	4413      	add	r3, r2
 8004caa:	3313      	adds	r3, #19
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff fb7c 	bl	80043ac <get_driver>
 8004cb4:	64b8      	str	r0, [r7, #72]	; 0x48

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00c      	beq.n	8004cde <process_control_request+0x3f6>
      {
        // Forward class request to its driver
        TU_VERIFY(driver);
 8004cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <process_control_request+0x3e6>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	e06f      	b.n	8004dae <process_control_request+0x4c6>
        return invoke_class_control(rhport, driver, p_request);
 8004cce:	79fb      	ldrb	r3, [r7, #7]
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7ff fdef 	bl	80048b8 <invoke_class_control>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	e067      	b.n	8004dae <process_control_request+0x4c6>
      }
      else
      {
        // Handle STD request to endpoint
        switch ( p_request->bRequest )
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	785b      	ldrb	r3, [r3, #1]
 8004ce2:	2b03      	cmp	r3, #3
 8004ce4:	d018      	beq.n	8004d18 <process_control_request+0x430>
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	dc48      	bgt.n	8004d7c <process_control_request+0x494>
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <process_control_request+0x40c>
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d012      	beq.n	8004d18 <process_control_request+0x430>
 8004cf2:	e043      	b.n	8004d7c <process_control_request+0x494>
        {
          case TUSB_REQ_GET_STATUS:
          {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8004cf4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004cf8:	79fb      	ldrb	r3, [r7, #7]
 8004cfa:	4611      	mov	r1, r2
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 feaf 	bl	8005a60 <usbd_edpt_stalled>
 8004d02:	4603      	mov	r3, r0
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	813b      	strh	r3, [r7, #8]
            tud_control_xfer(rhport, p_request, &status, 2);
 8004d08:	f107 0208 	add.w	r2, r7, #8
 8004d0c:	79f8      	ldrb	r0, [r7, #7]
 8004d0e:	2302      	movs	r3, #2
 8004d10:	6839      	ldr	r1, [r7, #0]
 8004d12:	f000 ff4d 	bl	8005bb0 <tud_control_xfer>
          }
          break;
 8004d16:	e03d      	b.n	8004d94 <process_control_request+0x4ac>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE:
          {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	885b      	ldrh	r3, [r3, #2]
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d112      	bne.n	8004d48 <process_control_request+0x460>
            {
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	785b      	ldrb	r3, [r3, #1]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d107      	bne.n	8004d3a <process_control_request+0x452>
              {
                usbd_edpt_clear_stall(rhport, ep_addr);
 8004d2a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004d2e:	79fb      	ldrb	r3, [r7, #7]
 8004d30:	4611      	mov	r1, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fe48 	bl	80059c8 <usbd_edpt_clear_stall>
 8004d38:	e006      	b.n	8004d48 <process_control_request+0x460>
              }else
              {
                usbd_edpt_stall(rhport, ep_addr);
 8004d3a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004d3e:	79fb      	ldrb	r3, [r7, #7]
 8004d40:	4611      	mov	r1, r2
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fdf4 	bl	8005930 <usbd_edpt_stall>
              }
            }

            if (driver)
 8004d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d021      	beq.n	8004d92 <process_control_request+0x4aa>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8004d4e:	79fb      	ldrb	r3, [r7, #7]
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff fdaf 	bl	80048b8 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	f000 ffa4 	bl	8005ca8 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8004d60:	4b15      	ldr	r3, [pc, #84]	; (8004db8 <process_control_request+0x4d0>)
 8004d62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d66:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d110      	bne.n	8004d92 <process_control_request+0x4aa>
 8004d70:	79fb      	ldrb	r3, [r7, #7]
 8004d72:	6839      	ldr	r1, [r7, #0]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 febd 	bl	8005af4 <tud_control_status>
            }
          }
          break;
 8004d7a:	e00a      	b.n	8004d92 <process_control_request+0x4aa>

          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
 8004d7c:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <process_control_request+0x4d4>)
 8004d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8004d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d000      	beq.n	8004d8e <process_control_request+0x4a6>
 8004d8c:	be00      	bkpt	0x0000
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e00d      	b.n	8004dae <process_control_request+0x4c6>
          break;
 8004d92:	bf00      	nop
        }
      }
    }
    break;
 8004d94:	e00a      	b.n	8004dac <process_control_request+0x4c4>

    // Unknown recipient
    default: TU_BREAKPOINT(); return false;
 8004d96:	4b09      	ldr	r3, [pc, #36]	; (8004dbc <process_control_request+0x4d4>)
 8004d98:	61fb      	str	r3, [r7, #28]
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d000      	beq.n	8004da8 <process_control_request+0x4c0>
 8004da6:	be00      	bkpt	0x0000
 8004da8:	2300      	movs	r3, #0
 8004daa:	e000      	b.n	8004dae <process_control_request+0x4c6>
  }

  return true;
 8004dac:	2301      	movs	r3, #1
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3750      	adds	r7, #80	; 0x50
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20002f7c 	.word	0x20002f7c
 8004dbc:	e000edf0 	.word	0xe000edf0

08004dc0 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b094      	sub	sp, #80	; 0x50
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	460a      	mov	r2, r1
 8004dca:	71fb      	strb	r3, [r7, #7]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8004dd0:	79bb      	ldrb	r3, [r7, #6]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fc fba8 	bl	800152c <tud_descriptor_configuration_cb>
 8004ddc:	6478      	str	r0, [r7, #68]	; 0x44
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8004dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <process_set_config+0x2c>
 8004de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004de6:	785b      	ldrb	r3, [r3, #1]
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d00a      	beq.n	8004e02 <process_set_config+0x42>
 8004dec:	4b7c      	ldr	r3, [pc, #496]	; (8004fe0 <process_set_config+0x220>)
 8004dee:	61bb      	str	r3, [r7, #24]
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d000      	beq.n	8004dfe <process_set_config+0x3e>
 8004dfc:	be00      	bkpt	0x0000
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e0e9      	b.n	8004fd6 <process_set_config+0x216>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8004e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e04:	79db      	ldrb	r3, [r3, #7]
 8004e06:	115b      	asrs	r3, r3, #5
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	b2d9      	uxtb	r1, r3
 8004e0e:	4a75      	ldr	r2, [pc, #468]	; (8004fe4 <process_set_config+0x224>)
 8004e10:	7813      	ldrb	r3, [r2, #0]
 8004e12:	f361 1304 	bfi	r3, r1, #4, #1
 8004e16:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8004e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e1a:	79db      	ldrb	r3, [r3, #7]
 8004e1c:	119b      	asrs	r3, r3, #6
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	b2d9      	uxtb	r1, r3
 8004e24:	4a6f      	ldr	r2, [pc, #444]	; (8004fe4 <process_set_config+0x224>)
 8004e26:	7813      	ldrb	r3, [r2, #0]
 8004e28:	f361 1345 	bfi	r3, r1, #5, #1
 8004e2c:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8004e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e30:	3309      	adds	r3, #9
 8004e32:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8004e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e36:	885b      	ldrh	r3, [r3, #2]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e3e:	4413      	add	r3, r2
 8004e40:	643b      	str	r3, [r7, #64]	; 0x40

  while( p_desc < desc_end )
 8004e42:	e0bd      	b.n	8004fc0 <process_set_config+0x200>
  {
    uint8_t assoc_itf_count = 1;
 8004e44:	2301      	movs	r3, #1
 8004e46:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8004e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e4c:	617b      	str	r3, [r7, #20]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	3301      	adds	r3, #1
 8004e52:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8004e54:	2b0b      	cmp	r3, #11
 8004e56:	d10f      	bne.n	8004e78 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8004e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      assoc_itf_count = desc_iad->bInterfaceCount;
 8004e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e5e:	78db      	ldrb	r3, [r3, #3]
 8004e60:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8004e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e66:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	461a      	mov	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8004e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e7a:	60bb      	str	r3, [r7, #8]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d00a      	beq.n	8004e9c <process_set_config+0xdc>
 8004e86:	4b56      	ldr	r3, [pc, #344]	; (8004fe0 <process_set_config+0x220>)
 8004e88:	61fb      	str	r3, [r7, #28]
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d000      	beq.n	8004e98 <process_set_config+0xd8>
 8004e96:	be00      	bkpt	0x0000
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e09c      	b.n	8004fd6 <process_set_config+0x216>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8004e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e9e:	63bb      	str	r3, [r7, #56]	; 0x38

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8004ea0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8004eae:	e06e      	b.n	8004f8e <process_set_config+0x1ce>
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8004eb0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff fa79 	bl	80043ac <get_driver>
 8004eba:	6338      	str	r0, [r7, #48]	; 0x30
      TU_ASSERT(driver);
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10a      	bne.n	8004ed8 <process_set_config+0x118>
 8004ec2:	4b47      	ldr	r3, [pc, #284]	; (8004fe0 <process_set_config+0x220>)
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d000      	beq.n	8004ed4 <process_set_config+0x114>
 8004ed2:	be00      	bkpt	0x0000
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	e07e      	b.n	8004fd6 <process_set_config+0x216>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004ede:	79f8      	ldrb	r0, [r7, #7]
 8004ee0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ee2:	4798      	blx	r3
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8004ee8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d94a      	bls.n	8004f84 <process_set_config+0x1c4>
 8004eee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004ef0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d846      	bhi.n	8004f84 <process_set_config+0x1c4>
        // Open successfully
        TU_LOG(USBD_DBG, "  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 8004ef6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d107      	bne.n	8004f0e <process_set_config+0x14e>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 8004efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	4a39      	ldr	r2, [pc, #228]	; (8004fe8 <process_set_config+0x228>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d102      	bne.n	8004f0e <process_set_config+0x14e>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8004f14:	e024      	b.n	8004f60 <process_set_config+0x1a0>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8004f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f18:	789a      	ldrb	r2, [r3, #2]
 8004f1a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004f1e:	4413      	add	r3, r2
 8004f20:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8004f24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004f28:	4a2e      	ldr	r2, [pc, #184]	; (8004fe4 <process_set_config+0x224>)
 8004f2a:	4413      	add	r3, r2
 8004f2c:	78db      	ldrb	r3, [r3, #3]
 8004f2e:	2bff      	cmp	r3, #255	; 0xff
 8004f30:	d00a      	beq.n	8004f48 <process_set_config+0x188>
 8004f32:	4b2b      	ldr	r3, [pc, #172]	; (8004fe0 <process_set_config+0x220>)
 8004f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d000      	beq.n	8004f44 <process_set_config+0x184>
 8004f42:	be00      	bkpt	0x0000
 8004f44:	2300      	movs	r3, #0
 8004f46:	e046      	b.n	8004fd6 <process_set_config+0x216>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8004f48:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004f4c:	4a25      	ldr	r2, [pc, #148]	; (8004fe4 <process_set_config+0x224>)
 8004f4e:	4413      	add	r3, r2
 8004f50:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8004f54:	70da      	strb	r2, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8004f56:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8004f60:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8004f64:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d3d4      	bcc.n	8004f16 <process_set_config+0x156>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8004f6c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004f70:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004f72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f74:	481d      	ldr	r0, [pc, #116]	; (8004fec <process_set_config+0x22c>)
 8004f76:	f002 fb91 	bl	800769c <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8004f7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f7e:	4413      	add	r3, r2
 8004f80:	64fb      	str	r3, [r7, #76]	; 0x4c

        break; // exit driver find loop
 8004f82:	e00b      	b.n	8004f9c <process_set_config+0x1dc>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8004f84:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004f88:	3301      	adds	r3, #1
 8004f8a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8004f8e:	4b18      	ldr	r3, [pc, #96]	; (8004ff0 <process_set_config+0x230>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	1c9a      	adds	r2, r3, #2
 8004f94:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	da89      	bge.n	8004eb0 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8004f9c:	4b14      	ldr	r3, [pc, #80]	; (8004ff0 <process_set_config+0x230>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	1c9a      	adds	r2, r3, #2
 8004fa2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	da0a      	bge.n	8004fc0 <process_set_config+0x200>
 8004faa:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <process_set_config+0x220>)
 8004fac:	623b      	str	r3, [r7, #32]
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d000      	beq.n	8004fbc <process_set_config+0x1fc>
 8004fba:	be00      	bkpt	0x0000
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	e00a      	b.n	8004fd6 <process_set_config+0x216>
  while( p_desc < desc_end )
 8004fc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	f4ff af3d 	bcc.w	8004e44 <process_set_config+0x84>
  }

  // invoke callback
  if (tud_mount_cb) tud_mount_cb();
 8004fca:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <process_set_config+0x234>)
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <process_set_config+0x214>
 8004fd0:	f7fb fcfa 	bl	80009c8 <tud_mount_cb>

  return true;
 8004fd4:	2301      	movs	r3, #1
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3750      	adds	r7, #80	; 0x50
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	e000edf0 	.word	0xe000edf0
 8004fe4:	20002f7c 	.word	0x20002f7c
 8004fe8:	08001a99 	.word	0x08001a99
 8004fec:	20002f8f 	.word	0x20002f8f
 8004ff0:	20002fac 	.word	0x20002fac
 8004ff4:	080009c9 	.word	0x080009c9

08004ff8 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b094      	sub	sp, #80	; 0x50
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	4603      	mov	r3, r0
 8005000:	6039      	str	r1, [r7, #0]
 8005002:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	885b      	ldrh	r3, [r3, #2]
 8005008:	b29b      	uxth	r3, r3
 800500a:	84bb      	strh	r3, [r7, #36]	; 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 800500c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800500e:	0a1b      	lsrs	r3, r3, #8
 8005010:	b29b      	uxth	r3, r3
 8005012:	b2db      	uxtb	r3, r3
 8005014:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	885b      	ldrh	r3, [r3, #2]
 800501c:	b29b      	uxth	r3, r3
 800501e:	84fb      	strh	r3, [r7, #38]	; 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8005020:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005022:	b2db      	uxtb	r3, r3
 8005024:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

  switch(desc_type)
 8005028:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800502c:	3b01      	subs	r3, #1
 800502e:	2b0e      	cmp	r3, #14
 8005030:	f200 80bc 	bhi.w	80051ac <process_get_descriptor+0x1b4>
 8005034:	a201      	add	r2, pc, #4	; (adr r2, 800503c <process_get_descriptor+0x44>)
 8005036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503a:	bf00      	nop
 800503c:	08005079 	.word	0x08005079
 8005040:	080050dd 	.word	0x080050dd
 8005044:	08005145 	.word	0x08005145
 8005048:	080051ad 	.word	0x080051ad
 800504c:	080051ad 	.word	0x080051ad
 8005050:	0800517b 	.word	0x0800517b
 8005054:	080050dd 	.word	0x080050dd
 8005058:	080051ad 	.word	0x080051ad
 800505c:	080051ad 	.word	0x080051ad
 8005060:	080051ad 	.word	0x080051ad
 8005064:	080051ad 	.word	0x080051ad
 8005068:	080051ad 	.word	0x080051ad
 800506c:	080051ad 	.word	0x080051ad
 8005070:	080051ad 	.word	0x080051ad
 8005074:	0800508f 	.word	0x0800508f
  {
    case TUSB_DESC_DEVICE:
    {
      TU_LOG(USBD_DBG, " Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8005078:	f7fc fa4e 	bl	8001518 <tud_descriptor_device_cb>
 800507c:	62b8      	str	r0, [r7, #40]	; 0x28
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else
      {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 800507e:	79f8      	ldrb	r0, [r7, #7]
 8005080:	2312      	movs	r3, #18
 8005082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005084:	6839      	ldr	r1, [r7, #0]
 8005086:	f000 fd93 	bl	8005bb0 <tud_control_xfer>
 800508a:	4603      	mov	r3, r0
 800508c:	e08f      	b.n	80051ae <process_get_descriptor+0x1b6>
    case TUSB_DESC_BOS:
    {
      TU_LOG(USBD_DBG, " BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      if (!tud_descriptor_bos_cb) return false;
 800508e:	4b4a      	ldr	r3, [pc, #296]	; (80051b8 <process_get_descriptor+0x1c0>)
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <process_get_descriptor+0xa0>
 8005094:	2300      	movs	r3, #0
 8005096:	e08a      	b.n	80051ae <process_get_descriptor+0x1b6>

      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8005098:	f3af 8000 	nop.w
 800509c:	4603      	mov	r3, r0
 800509e:	647b      	str	r3, [r7, #68]	; 0x44
      TU_ASSERT(desc_bos);
 80050a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10a      	bne.n	80050bc <process_get_descriptor+0xc4>
 80050a6:	4b45      	ldr	r3, [pc, #276]	; (80051bc <process_get_descriptor+0x1c4>)
 80050a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d000      	beq.n	80050b8 <process_get_descriptor+0xc0>
 80050b6:	be00      	bkpt	0x0000
 80050b8:	2300      	movs	r3, #0
 80050ba:	e078      	b.n	80051ae <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 80050bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050be:	3302      	adds	r3, #2
 80050c0:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	881b      	ldrh	r3, [r3, #0]
 80050c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 80050ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80050d0:	79f8      	ldrb	r0, [r7, #7]
 80050d2:	6839      	ldr	r1, [r7, #0]
 80050d4:	f000 fd6c 	bl	8005bb0 <tud_control_xfer>
 80050d8:	4603      	mov	r3, r0
 80050da:	e068      	b.n	80051ae <process_get_descriptor+0x1b6>
    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG:
    {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION )
 80050dc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d107      	bne.n	80050f4 <process_get_descriptor+0xfc>
      {
        TU_LOG(USBD_DBG, " Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 80050e4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fc fa1f 	bl	800152c <tud_descriptor_configuration_cb>
 80050ee:	4603      	mov	r3, r0
 80050f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050f2:	e00b      	b.n	800510c <process_get_descriptor+0x114>
      }else
      {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG(USBD_DBG, " Other Speed Configuration\r\n");
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 80050f4:	4b32      	ldr	r3, [pc, #200]	; (80051c0 <process_get_descriptor+0x1c8>)
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <process_get_descriptor+0x106>
 80050fa:	2300      	movs	r3, #0
 80050fc:	e057      	b.n	80051ae <process_get_descriptor+0x1b6>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 80050fe:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005102:	4618      	mov	r0, r3
 8005104:	f3af 8000 	nop.w
 8005108:	4603      	mov	r3, r0
 800510a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }

      TU_ASSERT(desc_config);
 800510c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10a      	bne.n	8005128 <process_get_descriptor+0x130>
 8005112:	4b2a      	ldr	r3, [pc, #168]	; (80051bc <process_get_descriptor+0x1c4>)
 8005114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d000      	beq.n	8005124 <process_get_descriptor+0x12c>
 8005122:	be00      	bkpt	0x0000
 8005124:	2300      	movs	r3, #0
 8005126:	e042      	b.n	80051ae <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8005128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800512a:	3302      	adds	r3, #2
 800512c:	61fb      	str	r3, [r7, #28]
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	867b      	strh	r3, [r7, #50]	; 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8005134:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005136:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005138:	79f8      	ldrb	r0, [r7, #7]
 800513a:	6839      	ldr	r1, [r7, #0]
 800513c:	f000 fd38 	bl	8005bb0 <tud_control_xfer>
 8005140:	4603      	mov	r3, r0
 8005142:	e034      	b.n	80051ae <process_get_descriptor+0x1b6>
    case TUSB_DESC_STRING:
    {
      TU_LOG(USBD_DBG, " String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	889b      	ldrh	r3, [r3, #4]
 8005148:	b29a      	uxth	r2, r3
 800514a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800514e:	4611      	mov	r1, r2
 8005150:	4618      	mov	r0, r3
 8005152:	f7fc f9f9 	bl	8001548 <tud_descriptor_string_cb>
 8005156:	6378      	str	r0, [r7, #52]	; 0x34
      TU_VERIFY(desc_str);
 8005158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <process_get_descriptor+0x16a>
 800515e:	2300      	movs	r3, #0
 8005160:	e025      	b.n	80051ae <process_get_descriptor+0x1b6>
 8005162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005164:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 800516a:	b29b      	uxth	r3, r3
 800516c:	79f8      	ldrb	r0, [r7, #7]
 800516e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005170:	6839      	ldr	r1, [r7, #0]
 8005172:	f000 fd1d 	bl	8005bb0 <tud_control_xfer>
 8005176:	4603      	mov	r3, r0
 8005178:	e019      	b.n	80051ae <process_get_descriptor+0x1b6>

    case TUSB_DESC_DEVICE_QUALIFIER:
    {
      TU_LOG(USBD_DBG, " Device Qualifier\r\n");

      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 800517a:	4b12      	ldr	r3, [pc, #72]	; (80051c4 <process_get_descriptor+0x1cc>)
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <process_get_descriptor+0x18c>
 8005180:	2300      	movs	r3, #0
 8005182:	e014      	b.n	80051ae <process_get_descriptor+0x1b6>

      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8005184:	f3af 8000 	nop.w
 8005188:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(desc_qualifier);
 800518a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <process_get_descriptor+0x19c>
 8005190:	2300      	movs	r3, #0
 8005192:	e00c      	b.n	80051ae <process_get_descriptor+0x1b6>
 8005194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 800519c:	b29b      	uxth	r3, r3
 800519e:	79f8      	ldrb	r0, [r7, #7]
 80051a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051a2:	6839      	ldr	r1, [r7, #0]
 80051a4:	f000 fd04 	bl	8005bb0 <tud_control_xfer>
 80051a8:	4603      	mov	r3, r0
 80051aa:	e000      	b.n	80051ae <process_get_descriptor+0x1b6>
    }
    // break; // unreachable

    default: return false;
 80051ac:	2300      	movs	r3, #0
  }
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3750      	adds	r7, #80	; 0x50
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	00000000 	.word	0x00000000
 80051bc:	e000edf0 	.word	0xe000edf0
	...

080051c8 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const * event, bool in_isr)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b0aa      	sub	sp, #168	; 0xa8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	70fb      	strb	r3, [r7, #3]
  switch (event->event_id)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	785b      	ldrb	r3, [r3, #1]
 80051d8:	3b02      	subs	r3, #2
 80051da:	2b03      	cmp	r3, #3
 80051dc:	f200 8198 	bhi.w	8005510 <dcd_event_handler+0x348>
 80051e0:	a201      	add	r2, pc, #4	; (adr r2, 80051e8 <dcd_event_handler+0x20>)
 80051e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e6:	bf00      	nop
 80051e8:	080051f9 	.word	0x080051f9
 80051ec:	080053fd 	.word	0x080053fd
 80051f0:	080052b9 	.word	0x080052b9
 80051f4:	0800535f 	.word	0x0800535f
  {
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected  = 0;
 80051f8:	4a82      	ldr	r2, [pc, #520]	; (8005404 <dcd_event_handler+0x23c>)
 80051fa:	7813      	ldrb	r3, [r2, #0]
 80051fc:	f36f 0300 	bfc	r3, #0, #1
 8005200:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed  = 0;
 8005202:	4a80      	ldr	r2, [pc, #512]	; (8005404 <dcd_event_handler+0x23c>)
 8005204:	7813      	ldrb	r3, [r2, #0]
 8005206:	f36f 0341 	bfc	r3, #1, #1
 800520a:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num    = 0;
 800520c:	4b7d      	ldr	r3, [pc, #500]	; (8005404 <dcd_event_handler+0x23c>)
 800520e:	2200      	movs	r2, #0
 8005210:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended  = 0;
 8005212:	4a7c      	ldr	r2, [pc, #496]	; (8005404 <dcd_event_handler+0x23c>)
 8005214:	7813      	ldrb	r3, [r2, #0]
 8005216:	f36f 0382 	bfc	r3, #2, #1
 800521a:	7013      	strb	r3, [r2, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 800521c:	4b7a      	ldr	r3, [pc, #488]	; (8005408 <dcd_event_handler+0x240>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800522a:	78fb      	ldrb	r3, [r7, #3]
 800522c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
  if (!in_isr) {
 8005230:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005234:	f083 0301 	eor.w	r3, r3, #1
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d009      	beq.n	8005252 <dcd_event_handler+0x8a>
 800523e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  qhdl->interrupt_set(false);
 8005246:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2000      	movs	r0, #0
 800524e:	4798      	blx	r3
}
 8005250:	bf00      	nop
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 8005252:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005256:	3304      	adds	r3, #4
 8005258:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff f815 	bl	800428c <tu_fifo_write>
 8005262:	4603      	mov	r3, r0
 8005264:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

  if (!in_isr) {
 8005268:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800526c:	f083 0301 	eor.w	r3, r3, #1
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d009      	beq.n	800528a <dcd_event_handler+0xc2>
 8005276:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800527a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  qhdl->interrupt_set(true);
 800527e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2001      	movs	r0, #1
 8005286:	4798      	blx	r3
}
 8005288:	bf00      	nop
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
 800528a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800528e:	f083 0301 	eor.w	r3, r3, #1
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00b      	beq.n	80052b0 <dcd_event_handler+0xe8>
 8005298:	4b5c      	ldr	r3, [pc, #368]	; (800540c <dcd_event_handler+0x244>)
 800529a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800529e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <dcd_event_handler+0xec>
 80052ac:	be00      	bkpt	0x0000
 80052ae:	e001      	b.n	80052b4 <dcd_event_handler+0xec>

  return success;
 80052b0:	bf00      	nop
 80052b2:	e172      	b.n	800559a <dcd_event_handler+0x3d2>
  TU_ASSERT(success);
 80052b4:	bf00      	nop
    break;
 80052b6:	e170      	b.n	800559a <dcd_event_handler+0x3d2>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if ( _usbd_dev.connected )
 80052b8:	4b52      	ldr	r3, [pc, #328]	; (8005404 <dcd_event_handler+0x23c>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 8164 	beq.w	8005590 <dcd_event_handler+0x3c8>
      {
        _usbd_dev.suspended = 1;
 80052c8:	4a4e      	ldr	r2, [pc, #312]	; (8005404 <dcd_event_handler+0x23c>)
 80052ca:	7813      	ldrb	r3, [r2, #0]
 80052cc:	f043 0304 	orr.w	r3, r3, #4
 80052d0:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 80052d2:	4b4d      	ldr	r3, [pc, #308]	; (8005408 <dcd_event_handler+0x240>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052de:	78fb      	ldrb	r3, [r7, #3]
 80052e0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  if (!in_isr) {
 80052e4:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80052e8:	f083 0301 	eor.w	r3, r3, #1
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d007      	beq.n	8005302 <dcd_event_handler+0x13a>
 80052f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052f6:	677b      	str	r3, [r7, #116]	; 0x74
  qhdl->interrupt_set(false);
 80052f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2000      	movs	r0, #0
 80052fe:	4798      	blx	r3
}
 8005300:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8005302:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005306:	3304      	adds	r3, #4
 8005308:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800530a:	4618      	mov	r0, r3
 800530c:	f7fe ffbe 	bl	800428c <tu_fifo_write>
 8005310:	4603      	mov	r3, r0
 8005312:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  if (!in_isr) {
 8005316:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800531a:	f083 0301 	eor.w	r3, r3, #1
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d007      	beq.n	8005334 <dcd_event_handler+0x16c>
 8005324:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005328:	66fb      	str	r3, [r7, #108]	; 0x6c
  qhdl->interrupt_set(true);
 800532a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2001      	movs	r0, #1
 8005330:	4798      	blx	r3
}
 8005332:	bf00      	nop
  TU_ASSERT(success);
 8005334:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8005338:	f083 0301 	eor.w	r3, r3, #1
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d009      	beq.n	8005356 <dcd_event_handler+0x18e>
 8005342:	4b32      	ldr	r3, [pc, #200]	; (800540c <dcd_event_handler+0x244>)
 8005344:	66bb      	str	r3, [r7, #104]	; 0x68
 8005346:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <dcd_event_handler+0x192>
 8005352:	be00      	bkpt	0x0000
 8005354:	e001      	b.n	800535a <dcd_event_handler+0x192>
  return success;
 8005356:	bf00      	nop
 8005358:	e11a      	b.n	8005590 <dcd_event_handler+0x3c8>
  TU_ASSERT(success);
 800535a:	bf00      	nop
      }
    break;
 800535c:	e118      	b.n	8005590 <dcd_event_handler+0x3c8>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if ( _usbd_dev.connected )
 800535e:	4b29      	ldr	r3, [pc, #164]	; (8005404 <dcd_event_handler+0x23c>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 8113 	beq.w	8005594 <dcd_event_handler+0x3cc>
      {
        _usbd_dev.suspended = 0;
 800536e:	4a25      	ldr	r2, [pc, #148]	; (8005404 <dcd_event_handler+0x23c>)
 8005370:	7813      	ldrb	r3, [r2, #0]
 8005372:	f36f 0382 	bfc	r3, #2, #1
 8005376:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8005378:	4b23      	ldr	r3, [pc, #140]	; (8005408 <dcd_event_handler+0x240>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	667b      	str	r3, [r7, #100]	; 0x64
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	663b      	str	r3, [r7, #96]	; 0x60
 8005382:	78fb      	ldrb	r3, [r7, #3]
 8005384:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (!in_isr) {
 8005388:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800538c:	f083 0301 	eor.w	r3, r3, #1
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d006      	beq.n	80053a4 <dcd_event_handler+0x1dc>
 8005396:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005398:	65bb      	str	r3, [r7, #88]	; 0x58
  qhdl->interrupt_set(false);
 800539a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2000      	movs	r0, #0
 80053a0:	4798      	blx	r3
}
 80053a2:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 80053a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053a6:	3304      	adds	r3, #4
 80053a8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fe ff6e 	bl	800428c <tu_fifo_write>
 80053b0:	4603      	mov	r3, r0
 80053b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (!in_isr) {
 80053b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053ba:	f083 0301 	eor.w	r3, r3, #1
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d006      	beq.n	80053d2 <dcd_event_handler+0x20a>
 80053c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053c6:	653b      	str	r3, [r7, #80]	; 0x50
  qhdl->interrupt_set(true);
 80053c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2001      	movs	r0, #1
 80053ce:	4798      	blx	r3
}
 80053d0:	bf00      	nop
  TU_ASSERT(success);
 80053d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053d6:	f083 0301 	eor.w	r3, r3, #1
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d009      	beq.n	80053f4 <dcd_event_handler+0x22c>
 80053e0:	4b0a      	ldr	r3, [pc, #40]	; (800540c <dcd_event_handler+0x244>)
 80053e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <dcd_event_handler+0x230>
 80053f0:	be00      	bkpt	0x0000
 80053f2:	e001      	b.n	80053f8 <dcd_event_handler+0x230>
  return success;
 80053f4:	bf00      	nop
 80053f6:	e0cd      	b.n	8005594 <dcd_event_handler+0x3cc>
  TU_ASSERT(success);
 80053f8:	bf00      	nop
      }
    break;
 80053fa:	e0cb      	b.n	8005594 <dcd_event_handler+0x3cc>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80053fc:	2300      	movs	r3, #0
 80053fe:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8005402:	e023      	b.n	800544c <dcd_event_handler+0x284>
 8005404:	20002f7c 	.word	0x20002f7c
 8005408:	20003070 	.word	0x20003070
 800540c:	e000edf0 	.word	0xe000edf0
      {
        usbd_class_driver_t const * driver = get_driver(i);
 8005410:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005414:	4618      	mov	r0, r3
 8005416:	f7fe ffc9 	bl	80043ac <get_driver>
 800541a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
        if (driver && driver->sof)
 800541e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00d      	beq.n	8005442 <dcd_event_handler+0x27a>
 8005426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <dcd_event_handler+0x27a>
        {
          driver->sof(event->rhport, event->sof.frame_count);
 8005430:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	7810      	ldrb	r0, [r2, #0]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6852      	ldr	r2, [r2, #4]
 800543e:	4611      	mov	r1, r2
 8005440:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8005442:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005446:	3301      	adds	r3, #1
 8005448:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800544c:	4b55      	ldr	r3, [pc, #340]	; (80055a4 <dcd_event_handler+0x3dc>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	1c9a      	adds	r2, r3, #2
 8005452:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005456:	429a      	cmp	r2, r3
 8005458:	dada      	bge.n	8005410 <dcd_event_handler+0x248>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if ( _usbd_dev.suspended )
 800545a:	4b53      	ldr	r3, [pc, #332]	; (80055a8 <dcd_event_handler+0x3e0>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 8097 	beq.w	8005598 <dcd_event_handler+0x3d0>
      {
        _usbd_dev.suspended = 0;
 800546a:	4a4f      	ldr	r2, [pc, #316]	; (80055a8 <dcd_event_handler+0x3e0>)
 800546c:	7813      	ldrb	r3, [r2, #0]
 800546e:	f36f 0382 	bfc	r3, #2, #1
 8005472:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8005474:	f107 0308 	add.w	r3, r7, #8
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	605a      	str	r2, [r3, #4]
 800547e:	609a      	str	r2, [r3, #8]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	723b      	strb	r3, [r7, #8]
 8005486:	2305      	movs	r3, #5
 8005488:	727b      	strb	r3, [r7, #9]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 800548a:	4b48      	ldr	r3, [pc, #288]	; (80055ac <dcd_event_handler+0x3e4>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005490:	f107 0308 	add.w	r3, r7, #8
 8005494:	647b      	str	r3, [r7, #68]	; 0x44
 8005496:	78fb      	ldrb	r3, [r7, #3]
 8005498:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (!in_isr) {
 800549c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80054a0:	f083 0301 	eor.w	r3, r3, #1
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d006      	beq.n	80054b8 <dcd_event_handler+0x2f0>
 80054aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  qhdl->interrupt_set(false);
 80054ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2000      	movs	r0, #0
 80054b4:	4798      	blx	r3
}
 80054b6:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 80054b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ba:	3304      	adds	r3, #4
 80054bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fe fee4 	bl	800428c <tu_fifo_write>
 80054c4:	4603      	mov	r3, r0
 80054c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  if (!in_isr) {
 80054ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80054ce:	f083 0301 	eor.w	r3, r3, #1
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d006      	beq.n	80054e6 <dcd_event_handler+0x31e>
 80054d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054da:	637b      	str	r3, [r7, #52]	; 0x34
  qhdl->interrupt_set(true);
 80054dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2001      	movs	r0, #1
 80054e2:	4798      	blx	r3
}
 80054e4:	bf00      	nop
  TU_ASSERT(success);
 80054e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80054ea:	f083 0301 	eor.w	r3, r3, #1
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d009      	beq.n	8005508 <dcd_event_handler+0x340>
 80054f4:	4b2e      	ldr	r3, [pc, #184]	; (80055b0 <dcd_event_handler+0x3e8>)
 80054f6:	633b      	str	r3, [r7, #48]	; 0x30
 80054f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <dcd_event_handler+0x344>
 8005504:	be00      	bkpt	0x0000
 8005506:	e001      	b.n	800550c <dcd_event_handler+0x344>
  return success;
 8005508:	bf00      	nop
 800550a:	e045      	b.n	8005598 <dcd_event_handler+0x3d0>
  TU_ASSERT(success);
 800550c:	bf00      	nop
      }

      // skip osal queue for SOF in usbd task
    break;
 800550e:	e043      	b.n	8005598 <dcd_event_handler+0x3d0>

    default:
      osal_queue_send(_usbd_q, event, in_isr);
 8005510:	4b26      	ldr	r3, [pc, #152]	; (80055ac <dcd_event_handler+0x3e4>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	62bb      	str	r3, [r7, #40]	; 0x28
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (!in_isr) {
 8005520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005524:	f083 0301 	eor.w	r3, r3, #1
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d006      	beq.n	800553c <dcd_event_handler+0x374>
 800552e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005530:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(false);
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2000      	movs	r0, #0
 8005538:	4798      	blx	r3
}
 800553a:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 800553c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553e:	3304      	adds	r3, #4
 8005540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005542:	4618      	mov	r0, r3
 8005544:	f7fe fea2 	bl	800428c <tu_fifo_write>
 8005548:	4603      	mov	r3, r0
 800554a:	77fb      	strb	r3, [r7, #31]
  if (!in_isr) {
 800554c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005550:	f083 0301 	eor.w	r3, r3, #1
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d006      	beq.n	8005568 <dcd_event_handler+0x3a0>
 800555a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555c:	61bb      	str	r3, [r7, #24]
  qhdl->interrupt_set(true);
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2001      	movs	r0, #1
 8005564:	4798      	blx	r3
}
 8005566:	bf00      	nop
  TU_ASSERT(success);
 8005568:	7ffb      	ldrb	r3, [r7, #31]
 800556a:	f083 0301 	eor.w	r3, r3, #1
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d009      	beq.n	8005588 <dcd_event_handler+0x3c0>
 8005574:	4b0e      	ldr	r3, [pc, #56]	; (80055b0 <dcd_event_handler+0x3e8>)
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <dcd_event_handler+0x3c4>
 8005584:	be00      	bkpt	0x0000
 8005586:	e001      	b.n	800558c <dcd_event_handler+0x3c4>
  return success;
 8005588:	bf00      	nop
 800558a:	e006      	b.n	800559a <dcd_event_handler+0x3d2>
  TU_ASSERT(success);
 800558c:	bf00      	nop
    break;
 800558e:	e004      	b.n	800559a <dcd_event_handler+0x3d2>
    break;
 8005590:	bf00      	nop
 8005592:	e002      	b.n	800559a <dcd_event_handler+0x3d2>
    break;
 8005594:	bf00      	nop
 8005596:	e000      	b.n	800559a <dcd_event_handler+0x3d2>
    break;
 8005598:	bf00      	nop
  }
}
 800559a:	bf00      	nop
 800559c:	37a8      	adds	r7, #168	; 0xa8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	20002fac 	.word	0x20002fac
 80055a8:	20002f7c 	.word	0x20002f7c
 80055ac:	20003070 	.word	0x20003070
 80055b0:	e000edf0 	.word	0xe000edf0

080055b4 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	4603      	mov	r3, r0
 80055bc:	71fb      	strb	r3, [r7, #7]
  if (enabled)
 80055be:	79fb      	ldrb	r3, [r7, #7]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d005      	beq.n	80055d0 <usbd_int_set+0x1c>
  {
    dcd_int_enable(_usbd_rhport);
 80055c4:	4b07      	ldr	r3, [pc, #28]	; (80055e4 <usbd_int_set+0x30>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 ff6f 	bl	80064ac <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 80055ce:	e004      	b.n	80055da <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 80055d0:	4b04      	ldr	r3, [pc, #16]	; (80055e4 <usbd_int_set+0x30>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 ff75 	bl	80064c4 <dcd_int_disable>
}
 80055da:	bf00      	nop
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20002430 	.word	0x20002430

080055e8 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08a      	sub	sp, #40	; 0x28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6039      	str	r1, [r7, #0]
 80055f0:	4611      	mov	r1, r2
 80055f2:	461a      	mov	r2, r3
 80055f4:	4603      	mov	r3, r0
 80055f6:	71fb      	strb	r3, [r7, #7]
 80055f8:	460b      	mov	r3, r1
 80055fa:	71bb      	strb	r3, [r7, #6]
 80055fc:	4613      	mov	r3, r2
 80055fe:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8005600:	2300      	movs	r3, #0
 8005602:	627b      	str	r3, [r7, #36]	; 0x24
 8005604:	e04d      	b.n	80056a2 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	785b      	ldrb	r3, [r3, #1]
 800560e:	2b05      	cmp	r3, #5
 8005610:	d108      	bne.n	8005624 <usbd_open_edpt_pair+0x3c>
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	78db      	ldrb	r3, [r3, #3]
 8005616:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800561a:	b2db      	uxtb	r3, r3
 800561c:	461a      	mov	r2, r3
 800561e:	797b      	ldrb	r3, [r7, #5]
 8005620:	4293      	cmp	r3, r2
 8005622:	d00a      	beq.n	800563a <usbd_open_edpt_pair+0x52>
 8005624:	4b23      	ldr	r3, [pc, #140]	; (80056b4 <usbd_open_edpt_pair+0xcc>)
 8005626:	61bb      	str	r3, [r7, #24]
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d000      	beq.n	8005636 <usbd_open_edpt_pair+0x4e>
 8005634:	be00      	bkpt	0x0000
 8005636:	2300      	movs	r3, #0
 8005638:	e038      	b.n	80056ac <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800563a:	79fb      	ldrb	r3, [r7, #7]
 800563c:	6a39      	ldr	r1, [r7, #32]
 800563e:	4618      	mov	r0, r3
 8005640:	f000 f83a 	bl	80056b8 <usbd_edpt_open>
 8005644:	4603      	mov	r3, r0
 8005646:	f083 0301 	eor.w	r3, r3, #1
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00a      	beq.n	8005666 <usbd_open_edpt_pair+0x7e>
 8005650:	4b18      	ldr	r3, [pc, #96]	; (80056b4 <usbd_open_edpt_pair+0xcc>)
 8005652:	61fb      	str	r3, [r7, #28]
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	d000      	beq.n	8005662 <usbd_open_edpt_pair+0x7a>
 8005660:	be00      	bkpt	0x0000
 8005662:	2300      	movs	r3, #0
 8005664:	e022      	b.n	80056ac <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	789b      	ldrb	r3, [r3, #2]
 800566a:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800566c:	7dfb      	ldrb	r3, [r7, #23]
 800566e:	09db      	lsrs	r3, r3, #7
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b01      	cmp	r3, #1
 8005674:	d104      	bne.n	8005680 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	789a      	ldrb	r2, [r3, #2]
 800567a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800567c:	701a      	strb	r2, [r3, #0]
 800567e:	e003      	b.n	8005688 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	789a      	ldrb	r2, [r3, #2]
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	701a      	strb	r2, [r3, #0]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	461a      	mov	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 800569a:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	3301      	adds	r3, #1
 80056a0:	627b      	str	r3, [r7, #36]	; 0x24
 80056a2:	79bb      	ldrb	r3, [r7, #6]
 80056a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a6:	429a      	cmp	r2, r3
 80056a8:	dbad      	blt.n	8005606 <usbd_open_edpt_pair+0x1e>
  }

  return true;
 80056aa:	2301      	movs	r3, #1
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3728      	adds	r7, #40	; 0x28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	e000edf0 	.word	0xe000edf0

080056b8 <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	4603      	mov	r3, r0
 80056c0:	6039      	str	r1, [r7, #0]
 80056c2:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 80056c4:	4b1b      	ldr	r3, [pc, #108]	; (8005734 <usbd_edpt_open+0x7c>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	789b      	ldrb	r3, [r3, #2]
 80056ce:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b05      	cmp	r3, #5
 80056da:	d90a      	bls.n	80056f2 <usbd_edpt_open+0x3a>
 80056dc:	4b16      	ldr	r3, [pc, #88]	; (8005738 <usbd_edpt_open+0x80>)
 80056de:	613b      	str	r3, [r7, #16]
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d000      	beq.n	80056ee <usbd_edpt_open+0x36>
 80056ec:	be00      	bkpt	0x0000
 80056ee:	2300      	movs	r3, #0
 80056f0:	e01c      	b.n	800572c <usbd_edpt_open+0x74>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 80056f2:	4b12      	ldr	r3, [pc, #72]	; (800573c <usbd_edpt_open+0x84>)
 80056f4:	789b      	ldrb	r3, [r3, #2]
 80056f6:	4619      	mov	r1, r3
 80056f8:	6838      	ldr	r0, [r7, #0]
 80056fa:	f001 ff53 	bl	80075a4 <tu_edpt_validate>
 80056fe:	4603      	mov	r3, r0
 8005700:	f083 0301 	eor.w	r3, r3, #1
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00a      	beq.n	8005720 <usbd_edpt_open+0x68>
 800570a:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <usbd_edpt_open+0x80>)
 800570c:	617b      	str	r3, [r7, #20]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d000      	beq.n	800571c <usbd_edpt_open+0x64>
 800571a:	be00      	bkpt	0x0000
 800571c:	2300      	movs	r3, #0
 800571e:	e005      	b.n	800572c <usbd_edpt_open+0x74>

  return dcd_edpt_open(rhport, desc_ep);
 8005720:	79fb      	ldrb	r3, [r7, #7]
 8005722:	6839      	ldr	r1, [r7, #0]
 8005724:	4618      	mov	r0, r3
 8005726:	f000 ff1d 	bl	8006564 <dcd_edpt_open>
 800572a:	4603      	mov	r3, r0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	20002430 	.word	0x20002430
 8005738:	e000edf0 	.word	0xe000edf0
 800573c:	20002f7c 	.word	0x20002f7c

08005740 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	4603      	mov	r3, r0
 8005748:	460a      	mov	r2, r1
 800574a:	71fb      	strb	r3, [r7, #7]
 800574c:	4613      	mov	r3, r2
 800574e:	71bb      	strb	r3, [r7, #6]
 8005750:	79bb      	ldrb	r3, [r7, #6]
 8005752:	73bb      	strb	r3, [r7, #14]
 8005754:	7bbb      	ldrb	r3, [r7, #14]
 8005756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800575a:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 800575c:	75fb      	strb	r3, [r7, #23]
 800575e:	79bb      	ldrb	r3, [r7, #6]
 8005760:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005762:	7bfb      	ldrb	r3, [r7, #15]
 8005764:	09db      	lsrs	r3, r3, #7
 8005766:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 8005768:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800576a:	7dfa      	ldrb	r2, [r7, #23]
 800576c:	7dbb      	ldrb	r3, [r7, #22]
 800576e:	0052      	lsls	r2, r2, #1
 8005770:	4413      	add	r3, r2
 8005772:	3318      	adds	r3, #24
 8005774:	4a06      	ldr	r2, [pc, #24]	; (8005790 <usbd_edpt_claim+0x50>)
 8005776:	4413      	add	r3, r2
 8005778:	3307      	adds	r3, #7
 800577a:	613b      	str	r3, [r7, #16]

#if TUSB_OPT_MUTEX
  return tu_edpt_claim(ep_state, _usbd_mutex);
#else
  return tu_edpt_claim(ep_state, NULL);
 800577c:	2100      	movs	r1, #0
 800577e:	6938      	ldr	r0, [r7, #16]
 8005780:	f001 febc 	bl	80074fc <tu_edpt_claim>
 8005784:	4603      	mov	r3, r0
#endif
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	20002f7c 	.word	0x20002f7c

08005794 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	4603      	mov	r3, r0
 800579c:	460a      	mov	r2, r1
 800579e:	71fb      	strb	r3, [r7, #7]
 80057a0:	4613      	mov	r3, r2
 80057a2:	71bb      	strb	r3, [r7, #6]
 80057a4:	79bb      	ldrb	r3, [r7, #6]
 80057a6:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80057a8:	7bbb      	ldrb	r3, [r7, #14]
 80057aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057ae:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 80057b0:	75fb      	strb	r3, [r7, #23]
 80057b2:	79bb      	ldrb	r3, [r7, #6]
 80057b4:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
 80057b8:	09db      	lsrs	r3, r3, #7
 80057ba:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 80057bc:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 80057be:	7dfa      	ldrb	r2, [r7, #23]
 80057c0:	7dbb      	ldrb	r3, [r7, #22]
 80057c2:	0052      	lsls	r2, r2, #1
 80057c4:	4413      	add	r3, r2
 80057c6:	3318      	adds	r3, #24
 80057c8:	4a06      	ldr	r2, [pc, #24]	; (80057e4 <usbd_edpt_release+0x50>)
 80057ca:	4413      	add	r3, r2
 80057cc:	3307      	adds	r3, #7
 80057ce:	613b      	str	r3, [r7, #16]

#if TUSB_OPT_MUTEX
  return tu_edpt_release(ep_state, _usbd_mutex);
#else
  return tu_edpt_release(ep_state, NULL);
 80057d0:	2100      	movs	r1, #0
 80057d2:	6938      	ldr	r0, [r7, #16]
 80057d4:	f001 febc 	bl	8007550 <tu_edpt_release>
 80057d8:	4603      	mov	r3, r0
#endif
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20002f7c 	.word	0x20002f7c

080057e8 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	603a      	str	r2, [r7, #0]
 80057f0:	461a      	mov	r2, r3
 80057f2:	4603      	mov	r3, r0
 80057f4:	71fb      	strb	r3, [r7, #7]
 80057f6:	460b      	mov	r3, r1
 80057f8:	71bb      	strb	r3, [r7, #6]
 80057fa:	4613      	mov	r3, r2
 80057fc:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 80057fe:	4b32      	ldr	r3, [pc, #200]	; (80058c8 <usbd_edpt_xfer+0xe0>)
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	71fb      	strb	r3, [r7, #7]
 8005804:	79bb      	ldrb	r3, [r7, #6]
 8005806:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005808:	7abb      	ldrb	r3, [r7, #10]
 800580a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800580e:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8005810:	75fb      	strb	r3, [r7, #23]
 8005812:	79bb      	ldrb	r3, [r7, #6]
 8005814:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005816:	7afb      	ldrb	r3, [r7, #11]
 8005818:	09db      	lsrs	r3, r3, #7
 800581a:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800581c:	75bb      	strb	r3, [r7, #22]
  // TU_VERIFY(tud_ready());

  TU_LOG(USBD_DBG, "  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 800581e:	7dfa      	ldrb	r2, [r7, #23]
 8005820:	7dbb      	ldrb	r3, [r7, #22]
 8005822:	492a      	ldr	r1, [pc, #168]	; (80058cc <usbd_edpt_xfer+0xe4>)
 8005824:	0052      	lsls	r2, r2, #1
 8005826:	440a      	add	r2, r1
 8005828:	4413      	add	r3, r2
 800582a:	3318      	adds	r3, #24
 800582c:	79db      	ldrb	r3, [r3, #7]
 800582e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <usbd_edpt_xfer+0x66>
 8005838:	4b25      	ldr	r3, [pc, #148]	; (80058d0 <usbd_edpt_xfer+0xe8>)
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b00      	cmp	r3, #0
 8005846:	d000      	beq.n	800584a <usbd_edpt_xfer+0x62>
 8005848:	be00      	bkpt	0x0000
 800584a:	2300      	movs	r3, #0
 800584c:	e038      	b.n	80058c0 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = true;
 800584e:	7dfa      	ldrb	r2, [r7, #23]
 8005850:	7dbb      	ldrb	r3, [r7, #22]
 8005852:	491e      	ldr	r1, [pc, #120]	; (80058cc <usbd_edpt_xfer+0xe4>)
 8005854:	0052      	lsls	r2, r2, #1
 8005856:	440a      	add	r2, r1
 8005858:	4413      	add	r3, r2
 800585a:	f103 0218 	add.w	r2, r3, #24
 800585e:	79d3      	ldrb	r3, [r2, #7]
 8005860:	f043 0301 	orr.w	r3, r3, #1
 8005864:	71d3      	strb	r3, [r2, #7]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 8005866:	88bb      	ldrh	r3, [r7, #4]
 8005868:	79b9      	ldrb	r1, [r7, #6]
 800586a:	79f8      	ldrb	r0, [r7, #7]
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	f000 ffd7 	bl	8006820 <dcd_edpt_xfer>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <usbd_edpt_xfer+0x94>
  {
    return true;
 8005878:	2301      	movs	r3, #1
 800587a:	e021      	b.n	80058c0 <usbd_edpt_xfer+0xd8>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = false;
 800587c:	7dfa      	ldrb	r2, [r7, #23]
 800587e:	7dbb      	ldrb	r3, [r7, #22]
 8005880:	4912      	ldr	r1, [pc, #72]	; (80058cc <usbd_edpt_xfer+0xe4>)
 8005882:	0052      	lsls	r2, r2, #1
 8005884:	440a      	add	r2, r1
 8005886:	4413      	add	r3, r2
 8005888:	f103 0218 	add.w	r2, r3, #24
 800588c:	79d3      	ldrb	r3, [r2, #7]
 800588e:	f36f 0300 	bfc	r3, #0, #1
 8005892:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8005894:	7dfa      	ldrb	r2, [r7, #23]
 8005896:	7dbb      	ldrb	r3, [r7, #22]
 8005898:	490c      	ldr	r1, [pc, #48]	; (80058cc <usbd_edpt_xfer+0xe4>)
 800589a:	0052      	lsls	r2, r2, #1
 800589c:	440a      	add	r2, r1
 800589e:	4413      	add	r3, r2
 80058a0:	f103 0218 	add.w	r2, r3, #24
 80058a4:	79d3      	ldrb	r3, [r2, #7]
 80058a6:	f36f 0382 	bfc	r3, #2, #1
 80058aa:	71d3      	strb	r3, [r2, #7]
    TU_LOG(USBD_DBG, "FAILED\r\n");
    TU_BREAKPOINT();
 80058ac:	4b08      	ldr	r3, [pc, #32]	; (80058d0 <usbd_edpt_xfer+0xe8>)
 80058ae:	613b      	str	r3, [r7, #16]
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d000      	beq.n	80058be <usbd_edpt_xfer+0xd6>
 80058bc:	be00      	bkpt	0x0000
    return false;
 80058be:	2300      	movs	r3, #0
  }
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	20002430 	.word	0x20002430
 80058cc:	20002f7c 	.word	0x20002f7c
 80058d0:	e000edf0 	.word	0xe000edf0

080058d4 <usbd_edpt_busy>:
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	4603      	mov	r3, r0
 80058dc:	460a      	mov	r2, r1
 80058de:	71fb      	strb	r3, [r7, #7]
 80058e0:	4613      	mov	r3, r2
 80058e2:	71bb      	strb	r3, [r7, #6]
 80058e4:	79bb      	ldrb	r3, [r7, #6]
 80058e6:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80058e8:	7b3b      	ldrb	r3, [r7, #12]
 80058ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058ee:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80058f0:	73fb      	strb	r3, [r7, #15]
 80058f2:	79bb      	ldrb	r3, [r7, #6]
 80058f4:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80058f6:	7b7b      	ldrb	r3, [r7, #13]
 80058f8:	09db      	lsrs	r3, r3, #7
 80058fa:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80058fc:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 80058fe:	7bfa      	ldrb	r2, [r7, #15]
 8005900:	7bbb      	ldrb	r3, [r7, #14]
 8005902:	490a      	ldr	r1, [pc, #40]	; (800592c <usbd_edpt_busy+0x58>)
 8005904:	0052      	lsls	r2, r2, #1
 8005906:	440a      	add	r2, r1
 8005908:	4413      	add	r3, r2
 800590a:	3318      	adds	r3, #24
 800590c:	79db      	ldrb	r3, [r3, #7]
 800590e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	bf14      	ite	ne
 8005918:	2301      	movne	r3, #1
 800591a:	2300      	moveq	r3, #0
 800591c:	b2db      	uxtb	r3, r3
}
 800591e:	4618      	mov	r0, r3
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	20002f7c 	.word	0x20002f7c

08005930 <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	4603      	mov	r3, r0
 8005938:	460a      	mov	r2, r1
 800593a:	71fb      	strb	r3, [r7, #7]
 800593c:	4613      	mov	r3, r2
 800593e:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8005940:	4b1f      	ldr	r3, [pc, #124]	; (80059c0 <usbd_edpt_stall+0x90>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	71fb      	strb	r3, [r7, #7]
 8005946:	79bb      	ldrb	r3, [r7, #6]
 8005948:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800594a:	7b3b      	ldrb	r3, [r7, #12]
 800594c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005950:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8005952:	73fb      	strb	r3, [r7, #15]
 8005954:	79bb      	ldrb	r3, [r7, #6]
 8005956:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005958:	7b7b      	ldrb	r3, [r7, #13]
 800595a:	09db      	lsrs	r3, r3, #7
 800595c:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800595e:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8005960:	7bfa      	ldrb	r2, [r7, #15]
 8005962:	7bbb      	ldrb	r3, [r7, #14]
 8005964:	4917      	ldr	r1, [pc, #92]	; (80059c4 <usbd_edpt_stall+0x94>)
 8005966:	0052      	lsls	r2, r2, #1
 8005968:	440a      	add	r2, r1
 800596a:	4413      	add	r3, r2
 800596c:	3318      	adds	r3, #24
 800596e:	79db      	ldrb	r3, [r3, #7]
 8005970:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d11d      	bne.n	80059b6 <usbd_edpt_stall+0x86>
  {
    TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
 800597a:	79ba      	ldrb	r2, [r7, #6]
 800597c:	79fb      	ldrb	r3, [r7, #7]
 800597e:	4611      	mov	r1, r2
 8005980:	4618      	mov	r0, r3
 8005982:	f001 f8a3 	bl	8006acc <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = true;
 8005986:	7bfa      	ldrb	r2, [r7, #15]
 8005988:	7bbb      	ldrb	r3, [r7, #14]
 800598a:	490e      	ldr	r1, [pc, #56]	; (80059c4 <usbd_edpt_stall+0x94>)
 800598c:	0052      	lsls	r2, r2, #1
 800598e:	440a      	add	r2, r1
 8005990:	4413      	add	r3, r2
 8005992:	f103 0218 	add.w	r2, r3, #24
 8005996:	79d3      	ldrb	r3, [r2, #7]
 8005998:	f043 0302 	orr.w	r3, r3, #2
 800599c:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = true;
 800599e:	7bfa      	ldrb	r2, [r7, #15]
 80059a0:	7bbb      	ldrb	r3, [r7, #14]
 80059a2:	4908      	ldr	r1, [pc, #32]	; (80059c4 <usbd_edpt_stall+0x94>)
 80059a4:	0052      	lsls	r2, r2, #1
 80059a6:	440a      	add	r2, r1
 80059a8:	4413      	add	r3, r2
 80059aa:	f103 0218 	add.w	r2, r3, #24
 80059ae:	79d3      	ldrb	r3, [r2, #7]
 80059b0:	f043 0301 	orr.w	r3, r3, #1
 80059b4:	71d3      	strb	r3, [r2, #7]
  }
}
 80059b6:	bf00      	nop
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20002430 	.word	0x20002430
 80059c4:	20002f7c 	.word	0x20002f7c

080059c8 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	4603      	mov	r3, r0
 80059d0:	460a      	mov	r2, r1
 80059d2:	71fb      	strb	r3, [r7, #7]
 80059d4:	4613      	mov	r3, r2
 80059d6:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 80059d8:	4b1f      	ldr	r3, [pc, #124]	; (8005a58 <usbd_edpt_clear_stall+0x90>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	71fb      	strb	r3, [r7, #7]
 80059de:	79bb      	ldrb	r3, [r7, #6]
 80059e0:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80059e2:	7b3b      	ldrb	r3, [r7, #12]
 80059e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059e8:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80059ea:	73fb      	strb	r3, [r7, #15]
 80059ec:	79bb      	ldrb	r3, [r7, #6]
 80059ee:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80059f0:	7b7b      	ldrb	r3, [r7, #13]
 80059f2:	09db      	lsrs	r3, r3, #7
 80059f4:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80059f6:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 80059f8:	7bfa      	ldrb	r2, [r7, #15]
 80059fa:	7bbb      	ldrb	r3, [r7, #14]
 80059fc:	4917      	ldr	r1, [pc, #92]	; (8005a5c <usbd_edpt_clear_stall+0x94>)
 80059fe:	0052      	lsls	r2, r2, #1
 8005a00:	440a      	add	r2, r1
 8005a02:	4413      	add	r3, r2
 8005a04:	3318      	adds	r3, #24
 8005a06:	79db      	ldrb	r3, [r3, #7]
 8005a08:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d01d      	beq.n	8005a4e <usbd_edpt_clear_stall+0x86>
  {
    TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
 8005a12:	79ba      	ldrb	r2, [r7, #6]
 8005a14:	79fb      	ldrb	r3, [r7, #7]
 8005a16:	4611      	mov	r1, r2
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f001 f869 	bl	8006af0 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = false;
 8005a1e:	7bfa      	ldrb	r2, [r7, #15]
 8005a20:	7bbb      	ldrb	r3, [r7, #14]
 8005a22:	490e      	ldr	r1, [pc, #56]	; (8005a5c <usbd_edpt_clear_stall+0x94>)
 8005a24:	0052      	lsls	r2, r2, #1
 8005a26:	440a      	add	r2, r1
 8005a28:	4413      	add	r3, r2
 8005a2a:	f103 0218 	add.w	r2, r3, #24
 8005a2e:	79d3      	ldrb	r3, [r2, #7]
 8005a30:	f36f 0341 	bfc	r3, #1, #1
 8005a34:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8005a36:	7bfa      	ldrb	r2, [r7, #15]
 8005a38:	7bbb      	ldrb	r3, [r7, #14]
 8005a3a:	4908      	ldr	r1, [pc, #32]	; (8005a5c <usbd_edpt_clear_stall+0x94>)
 8005a3c:	0052      	lsls	r2, r2, #1
 8005a3e:	440a      	add	r2, r1
 8005a40:	4413      	add	r3, r2
 8005a42:	f103 0218 	add.w	r2, r3, #24
 8005a46:	79d3      	ldrb	r3, [r2, #7]
 8005a48:	f36f 0300 	bfc	r3, #0, #1
 8005a4c:	71d3      	strb	r3, [r2, #7]
  }
}
 8005a4e:	bf00      	nop
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	20002430 	.word	0x20002430
 8005a5c:	20002f7c 	.word	0x20002f7c

08005a60 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	4603      	mov	r3, r0
 8005a68:	460a      	mov	r2, r1
 8005a6a:	71fb      	strb	r3, [r7, #7]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	71bb      	strb	r3, [r7, #6]
 8005a70:	79bb      	ldrb	r3, [r7, #6]
 8005a72:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005a74:	7b3b      	ldrb	r3, [r7, #12]
 8005a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a7a:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8005a7c:	73fb      	strb	r3, [r7, #15]
 8005a7e:	79bb      	ldrb	r3, [r7, #6]
 8005a80:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005a82:	7b7b      	ldrb	r3, [r7, #13]
 8005a84:	09db      	lsrs	r3, r3, #7
 8005a86:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8005a88:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8005a8a:	7bfa      	ldrb	r2, [r7, #15]
 8005a8c:	7bbb      	ldrb	r3, [r7, #14]
 8005a8e:	490a      	ldr	r1, [pc, #40]	; (8005ab8 <usbd_edpt_stalled+0x58>)
 8005a90:	0052      	lsls	r2, r2, #1
 8005a92:	440a      	add	r2, r1
 8005a94:	4413      	add	r3, r2
 8005a96:	3318      	adds	r3, #24
 8005a98:	79db      	ldrb	r3, [r3, #7]
 8005a9a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	bf14      	ite	ne
 8005aa4:	2301      	movne	r3, #1
 8005aa6:	2300      	moveq	r3, #0
 8005aa8:	b2db      	uxtb	r3, r3
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	20002f7c 	.word	0x20002f7c

08005abc <_status_stage_xact>:
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	6039      	str	r1, [r7, #0]
 8005ac6:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <_status_stage_xact+0x1e>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	e000      	b.n	8005adc <_status_stage_xact+0x20>
 8005ada:	2380      	movs	r3, #128	; 0x80
 8005adc:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8005ade:	7bf9      	ldrb	r1, [r7, #15]
 8005ae0:	79f8      	ldrb	r0, [r7, #7]
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f7ff fe7f 	bl	80057e8 <usbd_edpt_xfer>
 8005aea:	4603      	mov	r3, r0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	4603      	mov	r3, r0
 8005afc:	6039      	str	r1, [r7, #0]
 8005afe:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request       = (*request);
 8005b00:	4b0b      	ldr	r3, [pc, #44]	; (8005b30 <tud_control_status+0x3c>)
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	6810      	ldr	r0, [r2, #0]
 8005b06:	6851      	ldr	r1, [r2, #4]
 8005b08:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8005b0a:	4b09      	ldr	r3, [pc, #36]	; (8005b30 <tud_control_status+0x3c>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8005b10:	4b07      	ldr	r3, [pc, #28]	; (8005b30 <tud_control_status+0x3c>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 8005b16:	4b06      	ldr	r3, [pc, #24]	; (8005b30 <tud_control_status+0x3c>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	6839      	ldr	r1, [r7, #0]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff ffcb 	bl	8005abc <_status_stage_xact>
 8005b26:	4603      	mov	r3, r0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	20003074 	.word	0x20003074

08005b34 <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	71fb      	strb	r3, [r7, #7]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8005b3e:	4b1a      	ldr	r3, [pc, #104]	; (8005ba8 <_data_stage_xact+0x74>)
 8005b40:	899a      	ldrh	r2, [r3, #12]
 8005b42:	4b19      	ldr	r3, [pc, #100]	; (8005ba8 <_data_stage_xact+0x74>)
 8005b44:	89db      	ldrh	r3, [r3, #14]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	817b      	strh	r3, [r7, #10]
 8005b4c:	2340      	movs	r3, #64	; 0x40
 8005b4e:	813b      	strh	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8005b50:	897a      	ldrh	r2, [r7, #10]
 8005b52:	893b      	ldrh	r3, [r7, #8]
 8005b54:	4293      	cmp	r3, r2
 8005b56:	bf28      	it	cs
 8005b58:	4613      	movcs	r3, r2
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	81bb      	strh	r3, [r7, #12]

  uint8_t ep_addr = EDPT_CTRL_OUT;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	73fb      	strb	r3, [r7, #15]

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8005b62:	4b11      	ldr	r3, [pc, #68]	; (8005ba8 <_data_stage_xact+0x74>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00b      	beq.n	8005b88 <_data_stage_xact+0x54>
  {
    ep_addr = EDPT_CTRL_IN;
 8005b70:	2380      	movs	r3, #128	; 0x80
 8005b72:	73fb      	strb	r3, [r7, #15]
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
 8005b74:	89bb      	ldrh	r3, [r7, #12]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d006      	beq.n	8005b88 <_data_stage_xact+0x54>
 8005b7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ba8 <_data_stage_xact+0x74>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	89ba      	ldrh	r2, [r7, #12]
 8005b80:	4619      	mov	r1, r3
 8005b82:	480a      	ldr	r0, [pc, #40]	; (8005bac <_data_stage_xact+0x78>)
 8005b84:	f006 ff3c 	bl	800ca00 <memcpy>
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8005b88:	89bb      	ldrh	r3, [r7, #12]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <_data_stage_xact+0x5e>
 8005b8e:	4a07      	ldr	r2, [pc, #28]	; (8005bac <_data_stage_xact+0x78>)
 8005b90:	e000      	b.n	8005b94 <_data_stage_xact+0x60>
 8005b92:	2200      	movs	r2, #0
 8005b94:	89bb      	ldrh	r3, [r7, #12]
 8005b96:	7bf9      	ldrb	r1, [r7, #15]
 8005b98:	79f8      	ldrb	r0, [r7, #7]
 8005b9a:	f7ff fe25 	bl	80057e8 <usbd_edpt_xfer>
 8005b9e:	4603      	mov	r3, r0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	20003074 	.word	0x20003074
 8005bac:	20003088 	.word	0x20003088

08005bb0 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b088      	sub	sp, #32
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	607a      	str	r2, [r7, #4]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	73fb      	strb	r3, [r7, #15]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request       = (*request);
 8005bc4:	4b30      	ldr	r3, [pc, #192]	; (8005c88 <tud_control_xfer+0xd8>)
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	6810      	ldr	r0, [r2, #0]
 8005bca:	6851      	ldr	r1, [r2, #4]
 8005bcc:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 8005bce:	4a2e      	ldr	r2, [pc, #184]	; (8005c88 <tud_control_xfer+0xd8>)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 8005bd4:	4b2c      	ldr	r3, [pc, #176]	; (8005c88 <tud_control_xfer+0xd8>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	88db      	ldrh	r3, [r3, #6]
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	89bb      	ldrh	r3, [r7, #12]
 8005be2:	827b      	strh	r3, [r7, #18]
 8005be4:	4613      	mov	r3, r2
 8005be6:	823b      	strh	r3, [r7, #16]
 8005be8:	8a7a      	ldrh	r2, [r7, #18]
 8005bea:	8a3b      	ldrh	r3, [r7, #16]
 8005bec:	4293      	cmp	r3, r2
 8005bee:	bf28      	it	cs
 8005bf0:	4613      	movcs	r3, r2
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	4b24      	ldr	r3, [pc, #144]	; (8005c88 <tud_control_xfer+0xd8>)
 8005bf6:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U)
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	88db      	ldrh	r3, [r3, #6]
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d026      	beq.n	8005c50 <tud_control_xfer+0xa0>
  {
    if(_ctrl_xfer.data_len > 0U)
 8005c02:	4b21      	ldr	r3, [pc, #132]	; (8005c88 <tud_control_xfer+0xd8>)
 8005c04:	899b      	ldrh	r3, [r3, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00d      	beq.n	8005c26 <tud_control_xfer+0x76>
    {
      TU_ASSERT(buffer);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10a      	bne.n	8005c26 <tud_control_xfer+0x76>
 8005c10:	4b1e      	ldr	r3, [pc, #120]	; (8005c8c <tud_control_xfer+0xdc>)
 8005c12:	61bb      	str	r3, [r7, #24]
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d000      	beq.n	8005c22 <tud_control_xfer+0x72>
 8005c20:	be00      	bkpt	0x0000
 8005c22:	2300      	movs	r3, #0
 8005c24:	e02b      	b.n	8005c7e <tud_control_xfer+0xce>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 8005c26:	7bfb      	ldrb	r3, [r7, #15]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7ff ff83 	bl	8005b34 <_data_stage_xact>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	f083 0301 	eor.w	r3, r3, #1
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d020      	beq.n	8005c7c <tud_control_xfer+0xcc>
 8005c3a:	4b14      	ldr	r3, [pc, #80]	; (8005c8c <tud_control_xfer+0xdc>)
 8005c3c:	617b      	str	r3, [r7, #20]
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d000      	beq.n	8005c4c <tud_control_xfer+0x9c>
 8005c4a:	be00      	bkpt	0x0000
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	e016      	b.n	8005c7e <tud_control_xfer+0xce>
  }
  else
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
 8005c52:	68b9      	ldr	r1, [r7, #8]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7ff ff31 	bl	8005abc <_status_stage_xact>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	f083 0301 	eor.w	r3, r3, #1
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00a      	beq.n	8005c7c <tud_control_xfer+0xcc>
 8005c66:	4b09      	ldr	r3, [pc, #36]	; (8005c8c <tud_control_xfer+0xdc>)
 8005c68:	61fb      	str	r3, [r7, #28]
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d000      	beq.n	8005c78 <tud_control_xfer+0xc8>
 8005c76:	be00      	bkpt	0x0000
 8005c78:	2300      	movs	r3, #0
 8005c7a:	e000      	b.n	8005c7e <tud_control_xfer+0xce>
  }

  return true;
 8005c7c:	2301      	movs	r3, #1
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3720      	adds	r7, #32
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	20003074 	.word	0x20003074
 8005c8c:	e000edf0 	.word	0xe000edf0

08005c90 <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 8005c94:	2214      	movs	r2, #20
 8005c96:	2100      	movs	r1, #0
 8005c98:	4802      	ldr	r0, [pc, #8]	; (8005ca4 <usbd_control_reset+0x14>)
 8005c9a:	f006 fed9 	bl	800ca50 <memset>
}
 8005c9e:	bf00      	nop
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20003074 	.word	0x20003074

08005ca8 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 8005cb0:	4a04      	ldr	r2, [pc, #16]	; (8005cc4 <usbd_control_set_complete_callback+0x1c>)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6113      	str	r3, [r2, #16]
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	20003074 	.word	0x20003074

08005cc8 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request       = (*request);
 8005cd0:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <usbd_control_set_request+0x30>)
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	6810      	ldr	r0, [r2, #0]
 8005cd6:	6851      	ldr	r1, [r2, #4]
 8005cd8:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8005cda:	4b07      	ldr	r3, [pc, #28]	; (8005cf8 <usbd_control_set_request+0x30>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8005ce0:	4b05      	ldr	r3, [pc, #20]	; (8005cf8 <usbd_control_set_request+0x30>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 8005ce6:	4b04      	ldr	r3, [pc, #16]	; (8005cf8 <usbd_control_set_request+0x30>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	819a      	strh	r2, [r3, #12]
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	20003074 	.word	0x20003074

08005cfc <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	603b      	str	r3, [r7, #0]
 8005d04:	4603      	mov	r3, r0
 8005d06:	71fb      	strb	r3, [r7, #7]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	71bb      	strb	r3, [r7, #6]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	717b      	strb	r3, [r7, #5]
 8005d10:	79bb      	ldrb	r3, [r7, #6]
 8005d12:	73fb      	strb	r3, [r7, #15]
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
 8005d16:	09db      	lsrs	r3, r3, #7
 8005d18:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8005d1a:	4a50      	ldr	r2, [pc, #320]	; (8005e5c <usbd_control_xfer_cb+0x160>)
 8005d1c:	7812      	ldrb	r2, [r2, #0]
 8005d1e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8005d22:	b2d2      	uxtb	r2, r2
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d021      	beq.n	8005d6c <usbd_control_xfer_cb+0x70>
  {
    TU_ASSERT(0 == xferred_bytes);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <usbd_control_xfer_cb+0x48>
 8005d2e:	4b4c      	ldr	r3, [pc, #304]	; (8005e60 <usbd_control_xfer_cb+0x164>)
 8005d30:	613b      	str	r3, [r7, #16]
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d000      	beq.n	8005d40 <usbd_control_xfer_cb+0x44>
 8005d3e:	be00      	bkpt	0x0000
 8005d40:	2300      	movs	r3, #0
 8005d42:	e087      	b.n	8005e54 <usbd_control_xfer_cb+0x158>

    // invoke optional dcd hook if available
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8005d44:	4b47      	ldr	r3, [pc, #284]	; (8005e64 <usbd_control_xfer_cb+0x168>)
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d004      	beq.n	8005d54 <usbd_control_xfer_cb+0x58>
 8005d4a:	79fb      	ldrb	r3, [r7, #7]
 8005d4c:	4943      	ldr	r1, [pc, #268]	; (8005e5c <usbd_control_xfer_cb+0x160>)
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f3af 8000 	nop.w

    if (_ctrl_xfer.complete_cb)
 8005d54:	4b41      	ldr	r3, [pc, #260]	; (8005e5c <usbd_control_xfer_cb+0x160>)
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d005      	beq.n	8005d68 <usbd_control_xfer_cb+0x6c>
    {
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8005d5c:	4b3f      	ldr	r3, [pc, #252]	; (8005e5c <usbd_control_xfer_cb+0x160>)
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	79f8      	ldrb	r0, [r7, #7]
 8005d62:	4a3e      	ldr	r2, [pc, #248]	; (8005e5c <usbd_control_xfer_cb+0x160>)
 8005d64:	2103      	movs	r1, #3
 8005d66:	4798      	blx	r3
    }

    return true;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e073      	b.n	8005e54 <usbd_control_xfer_cb+0x158>
  }

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 8005d6c:	4b3b      	ldr	r3, [pc, #236]	; (8005e5c <usbd_control_xfer_cb+0x160>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10c      	bne.n	8005d94 <usbd_control_xfer_cb+0x98>
  {
    TU_VERIFY(_ctrl_xfer.buffer);
 8005d7a:	4b38      	ldr	r3, [pc, #224]	; (8005e5c <usbd_control_xfer_cb+0x160>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <usbd_control_xfer_cb+0x8a>
 8005d82:	2300      	movs	r3, #0
 8005d84:	e066      	b.n	8005e54 <usbd_control_xfer_cb+0x158>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 8005d86:	4b35      	ldr	r3, [pc, #212]	; (8005e5c <usbd_control_xfer_cb+0x160>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	683a      	ldr	r2, [r7, #0]
 8005d8c:	4936      	ldr	r1, [pc, #216]	; (8005e68 <usbd_control_xfer_cb+0x16c>)
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f006 fe36 	bl	800ca00 <memcpy>
    TU_LOG_MEM(2, _usbd_ctrl_buf, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8005d94:	4b31      	ldr	r3, [pc, #196]	; (8005e5c <usbd_control_xfer_cb+0x160>)
 8005d96:	89da      	ldrh	r2, [r3, #14]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	4413      	add	r3, r2
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	4b2e      	ldr	r3, [pc, #184]	; (8005e5c <usbd_control_xfer_cb+0x160>)
 8005da2:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8005da4:	4b2d      	ldr	r3, [pc, #180]	; (8005e5c <usbd_control_xfer_cb+0x160>)
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	4413      	add	r3, r2
 8005dac:	4a2b      	ldr	r2, [pc, #172]	; (8005e5c <usbd_control_xfer_cb+0x160>)
 8005dae:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8005db0:	4b2a      	ldr	r3, [pc, #168]	; (8005e5c <usbd_control_xfer_cb+0x160>)
 8005db2:	88da      	ldrh	r2, [r3, #6]
 8005db4:	4b29      	ldr	r3, [pc, #164]	; (8005e5c <usbd_control_xfer_cb+0x160>)
 8005db6:	89db      	ldrh	r3, [r3, #14]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d002      	beq.n	8005dc2 <usbd_control_xfer_cb+0xc6>
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	2b3f      	cmp	r3, #63	; 0x3f
 8005dc0:	d831      	bhi.n	8005e26 <usbd_control_xfer_cb+0x12a>
  {
    // DATA stage is complete
    bool is_ok = true;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if ( _ctrl_xfer.complete_cb )
 8005dc6:	4b25      	ldr	r3, [pc, #148]	; (8005e5c <usbd_control_xfer_cb+0x160>)
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d007      	beq.n	8005dde <usbd_control_xfer_cb+0xe2>
    {
      #if CFG_TUSB_DEBUG >= 2
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8005dce:	4b23      	ldr	r3, [pc, #140]	; (8005e5c <usbd_control_xfer_cb+0x160>)
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	79f8      	ldrb	r0, [r7, #7]
 8005dd4:	4a21      	ldr	r2, [pc, #132]	; (8005e5c <usbd_control_xfer_cb+0x160>)
 8005dd6:	2102      	movs	r1, #2
 8005dd8:	4798      	blx	r3
 8005dda:	4603      	mov	r3, r0
 8005ddc:	77fb      	strb	r3, [r7, #31]
    }

    if ( is_ok )
 8005dde:	7ffb      	ldrb	r3, [r7, #31]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d015      	beq.n	8005e10 <usbd_control_xfer_cb+0x114>
    {
      // Send status
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 8005de4:	79fb      	ldrb	r3, [r7, #7]
 8005de6:	491d      	ldr	r1, [pc, #116]	; (8005e5c <usbd_control_xfer_cb+0x160>)
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7ff fe67 	bl	8005abc <_status_stage_xact>
 8005dee:	4603      	mov	r3, r0
 8005df0:	f083 0301 	eor.w	r3, r3, #1
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d02a      	beq.n	8005e50 <usbd_control_xfer_cb+0x154>
 8005dfa:	4b19      	ldr	r3, [pc, #100]	; (8005e60 <usbd_control_xfer_cb+0x164>)
 8005dfc:	617b      	str	r3, [r7, #20]
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d000      	beq.n	8005e0c <usbd_control_xfer_cb+0x110>
 8005e0a:	be00      	bkpt	0x0000
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	e021      	b.n	8005e54 <usbd_control_xfer_cb+0x158>
    }else
    {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	2100      	movs	r1, #0
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 fe59 	bl	8006acc <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8005e1a:	79fb      	ldrb	r3, [r7, #7]
 8005e1c:	2180      	movs	r1, #128	; 0x80
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 fe54 	bl	8006acc <dcd_edpt_stall>
  {
 8005e24:	e014      	b.n	8005e50 <usbd_control_xfer_cb+0x154>
    }
  }
  else
  {
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
 8005e26:	79fb      	ldrb	r3, [r7, #7]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7ff fe83 	bl	8005b34 <_data_stage_xact>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	f083 0301 	eor.w	r3, r3, #1
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00b      	beq.n	8005e52 <usbd_control_xfer_cb+0x156>
 8005e3a:	4b09      	ldr	r3, [pc, #36]	; (8005e60 <usbd_control_xfer_cb+0x164>)
 8005e3c:	61bb      	str	r3, [r7, #24]
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d000      	beq.n	8005e4c <usbd_control_xfer_cb+0x150>
 8005e4a:	be00      	bkpt	0x0000
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	e001      	b.n	8005e54 <usbd_control_xfer_cb+0x158>
  {
 8005e50:	bf00      	nop
  }

  return true;
 8005e52:	2301      	movs	r3, #1
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3720      	adds	r7, #32
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	20003074 	.word	0x20003074
 8005e60:	e000edf0 	.word	0xe000edf0
 8005e64:	00000000 	.word	0x00000000
 8005e68:	20003088 	.word	0x20003088

08005e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	4603      	mov	r3, r0
 8005e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	db0b      	blt.n	8005e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e7e:	79fb      	ldrb	r3, [r7, #7]
 8005e80:	f003 021f 	and.w	r2, r3, #31
 8005e84:	4907      	ldr	r1, [pc, #28]	; (8005ea4 <__NVIC_EnableIRQ+0x38>)
 8005e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e8a:	095b      	lsrs	r3, r3, #5
 8005e8c:	2001      	movs	r0, #1
 8005e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8005e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	e000e100 	.word	0xe000e100

08005ea8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	db12      	blt.n	8005ee0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005eba:	79fb      	ldrb	r3, [r7, #7]
 8005ebc:	f003 021f 	and.w	r2, r3, #31
 8005ec0:	490a      	ldr	r1, [pc, #40]	; (8005eec <__NVIC_DisableIRQ+0x44>)
 8005ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec6:	095b      	lsrs	r3, r3, #5
 8005ec8:	2001      	movs	r0, #1
 8005eca:	fa00 f202 	lsl.w	r2, r0, r2
 8005ece:	3320      	adds	r3, #32
 8005ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005ed4:	f3bf 8f4f 	dsb	sy
}
 8005ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005eda:	f3bf 8f6f 	isb	sy
}
 8005ede:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	e000e100 	.word	0xe000e100

08005ef0 <calc_rx_ff_size>:
static uint16_t _allocated_fifo_words_tx;         // TX FIFO size in words (IN EPs)
static bool _out_ep_closed;                       // Flag to check if RX FIFO size needs an update (reduce its size)

// Calculate the RX FIFO size according to recommendations from reference manual
static inline uint16_t calc_rx_ff_size(uint16_t ep_size)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	80fb      	strh	r3, [r7, #6]
  return 15 + 2*(ep_size/4) + 2*EP_MAX;
 8005efa:	88fb      	ldrh	r3, [r7, #6]
 8005efc:	089b      	lsrs	r3, r3, #2
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	005b      	lsls	r3, r3, #1
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	3317      	adds	r3, #23
 8005f06:	b29b      	uxth	r3, r3
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <update_grxfsiz>:

static void update_grxfsiz(uint8_t rhport)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8005f1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005f22:	613b      	str	r3, [r7, #16]

  // Determine largest EP size for RX FIFO
  uint16_t max_epsize = 0;
 8005f24:	2300      	movs	r3, #0
 8005f26:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < EP_MAX; epnum++)
 8005f28:	2300      	movs	r3, #0
 8005f2a:	757b      	strb	r3, [r7, #21]
 8005f2c:	e013      	b.n	8005f56 <update_grxfsiz+0x42>
  {
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 8005f2e:	7d7b      	ldrb	r3, [r7, #21]
 8005f30:	4a10      	ldr	r2, [pc, #64]	; (8005f74 <update_grxfsiz+0x60>)
 8005f32:	015b      	lsls	r3, r3, #5
 8005f34:	4413      	add	r3, r2
 8005f36:	330a      	adds	r3, #10
 8005f38:	881a      	ldrh	r2, [r3, #0]
 8005f3a:	8afb      	ldrh	r3, [r7, #22]
 8005f3c:	81fb      	strh	r3, [r7, #14]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
 8005f42:	89fa      	ldrh	r2, [r7, #14]
 8005f44:	89bb      	ldrh	r3, [r7, #12]
 8005f46:	4293      	cmp	r3, r2
 8005f48:	bf38      	it	cc
 8005f4a:	4613      	movcc	r3, r2
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < EP_MAX; epnum++)
 8005f50:	7d7b      	ldrb	r3, [r7, #21]
 8005f52:	3301      	adds	r3, #1
 8005f54:	757b      	strb	r3, [r7, #21]
 8005f56:	7d7b      	ldrb	r3, [r7, #21]
 8005f58:	2b03      	cmp	r3, #3
 8005f5a:	d9e8      	bls.n	8005f2e <update_grxfsiz+0x1a>
  }

  // Update size of RX FIFO
  usb_otg->GRXFSIZ = calc_rx_ff_size(max_epsize);
 8005f5c:	8afb      	ldrh	r3, [r7, #22]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff ffc6 	bl	8005ef0 <calc_rx_ff_size>
 8005f64:	4603      	mov	r3, r0
 8005f66:	461a      	mov	r2, r3
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005f6c:	bf00      	nop
 8005f6e:	3718      	adds	r7, #24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	200030d0 	.word	0x200030d0

08005f78 <bus_reset>:

// Setup the control endpoint 0.
static void bus_reset(uint8_t rhport)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b088      	sub	sp, #32
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	4603      	mov	r3, r0
 8005f80:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8005f82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005f86:	61bb      	str	r3, [r7, #24]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8005f88:	4b30      	ldr	r3, [pc, #192]	; (800604c <bus_reset+0xd4>)
 8005f8a:	617b      	str	r3, [r7, #20]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8005f8c:	4b30      	ldr	r3, [pc, #192]	; (8006050 <bus_reset+0xd8>)
 8005f8e:	613b      	str	r3, [r7, #16]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8005f90:	4b30      	ldr	r3, [pc, #192]	; (8006054 <bus_reset+0xdc>)
 8005f92:	60fb      	str	r3, [r7, #12]

  tu_memclr(xfer_status, sizeof(xfer_status));
 8005f94:	2280      	movs	r2, #128	; 0x80
 8005f96:	2100      	movs	r1, #0
 8005f98:	482f      	ldr	r0, [pc, #188]	; (8006058 <bus_reset+0xe0>)
 8005f9a:	f006 fd59 	bl	800ca50 <memset>
  _out_ep_closed = false;
 8005f9e:	4b2f      	ldr	r3, [pc, #188]	; (800605c <bus_reset+0xe4>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	701a      	strb	r2, [r3, #0]

  // clear device address
  dev->DCFG &= ~USB_OTG_DCFG_DAD_Msk;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	601a      	str	r2, [r3, #0]

  // 1. NAK for all OUT endpoints
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	77fb      	strb	r3, [r7, #31]
 8005fb4:	e00e      	b.n	8005fd4 <bus_reset+0x5c>
    out_ep[n].DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005fb6:	7ffb      	ldrb	r3, [r7, #31]
 8005fb8:	015b      	lsls	r3, r3, #5
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	7ffb      	ldrb	r3, [r7, #31]
 8005fc2:	015b      	lsls	r3, r3, #5
 8005fc4:	6939      	ldr	r1, [r7, #16]
 8005fc6:	440b      	add	r3, r1
 8005fc8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8005fcc:	601a      	str	r2, [r3, #0]
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8005fce:	7ffb      	ldrb	r3, [r7, #31]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	77fb      	strb	r3, [r7, #31]
 8005fd4:	7ffb      	ldrb	r3, [r7, #31]
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	d9ed      	bls.n	8005fb6 <bus_reset+0x3e>
  }

  // 2. Un-mask interrupt bits
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8005fe0:	61da      	str	r2, [r3, #28]
  dev->DOEPMSK = USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2209      	movs	r2, #9
 8005fe6:	615a      	str	r2, [r3, #20]
  dev->DIEPMSK = USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	2209      	movs	r2, #9
 8005fec:	611a      	str	r2, [r3, #16]
  //
  //   For Isochronous, largest EP size can be 1023/1024 for FS/HS respectively. In addition if multiple ISO
  //   are enabled at least "2 x (Largest-EPsize/4) + 1" are recommended.  Maybe provide a macro for application to
  //   overwrite this.

  usb_otg->GRXFSIZ = calc_rx_ff_size(TUD_OPT_HIGH_SPEED ? 512 : 64);
 8005fee:	2040      	movs	r0, #64	; 0x40
 8005ff0:	f7ff ff7e 	bl	8005ef0 <calc_rx_ff_size>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	625a      	str	r2, [r3, #36]	; 0x24

  _allocated_fifo_words_tx = 16;
 8005ffc:	4b18      	ldr	r3, [pc, #96]	; (8006060 <bus_reset+0xe8>)
 8005ffe:	2210      	movs	r2, #16
 8006000:	801a      	strh	r2, [r3, #0]

  // Control IN uses FIFO 0 with 64 bytes ( 16 32-bit word )
  usb_otg->DIEPTXF0_HNPTXFSIZ = (16 << USB_OTG_TX0FD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8006002:	4b17      	ldr	r3, [pc, #92]	; (8006060 <bus_reset+0xe8>)
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800600a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	629a      	str	r2, [r3, #40]	; 0x28

  // Fixed control EP0 size to 64 bytes
  in_ep[0].DIEPCTL &= ~(0x03 << USB_OTG_DIEPCTL_MPSIZ_Pos);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f023 0203 	bic.w	r2, r3, #3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	601a      	str	r2, [r3, #0]
  xfer_status[0][TUSB_DIR_OUT].max_size = xfer_status[0][TUSB_DIR_IN].max_size = 64;
 800601e:	4b0e      	ldr	r3, [pc, #56]	; (8006058 <bus_reset+0xe0>)
 8006020:	2240      	movs	r2, #64	; 0x40
 8006022:	835a      	strh	r2, [r3, #26]
 8006024:	4b0c      	ldr	r3, [pc, #48]	; (8006058 <bus_reset+0xe0>)
 8006026:	8b5a      	ldrh	r2, [r3, #26]
 8006028:	4b0b      	ldr	r3, [pc, #44]	; (8006058 <bus_reset+0xe0>)
 800602a:	815a      	strh	r2, [r3, #10]

  out_ep[0].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	611a      	str	r2, [r3, #16]

  usb_otg->GINTMSK |= USB_OTG_GINTMSK_OEPINT | USB_OTG_GINTMSK_IEPINT;
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	f443 2240 	orr.w	r2, r3, #786432	; 0xc0000
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	619a      	str	r2, [r3, #24]
}
 8006044:	bf00      	nop
 8006046:	3720      	adds	r7, #32
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	50000800 	.word	0x50000800
 8006050:	50000b00 	.word	0x50000b00
 8006054:	50000900 	.word	0x50000900
 8006058:	200030d0 	.word	0x200030d0
 800605c:	20003156 	.word	0x20003156
 8006060:	20003154 	.word	0x20003154

08006064 <set_turnaround>:

// Set turn-around timeout according to link speed
extern uint32_t SystemCoreClock;
static void set_turnaround(USB_OTG_GlobalTypeDef * usb_otg, tusb_speed_t speed)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	460b      	mov	r3, r1
 800606e:	70fb      	strb	r3, [r7, #3]
  usb_otg->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	60da      	str	r2, [r3, #12]

  if ( speed == TUSB_SPEED_HIGH )
 800607c:	78fb      	ldrb	r3, [r7, #3]
 800607e:	2b02      	cmp	r3, #2
 8006080:	d106      	bne.n	8006090 <set_turnaround+0x2c>
  {
    // Use fixed 0x09 for Highspeed
    usb_otg->GUSBCFG |= (0x09 << USB_OTG_GUSBCFG_TRDT_Pos);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f443 5210 	orr.w	r2, r3, #9216	; 0x2400
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	60da      	str	r2, [r3, #12]
      turnaround = 0xFU;

    // Fullspeed depends on MCU clocks, but we will use 0x06 for 32+ Mhz
    usb_otg->GUSBCFG |= (turnaround << USB_OTG_GUSBCFG_TRDT_Pos);
  }
}
 800608e:	e050      	b.n	8006132 <set_turnaround+0xce>
    if ( SystemCoreClock >= 32000000U )
 8006090:	4b2b      	ldr	r3, [pc, #172]	; (8006140 <set_turnaround+0xdc>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a2b      	ldr	r2, [pc, #172]	; (8006144 <set_turnaround+0xe0>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d302      	bcc.n	80060a0 <set_turnaround+0x3c>
      turnaround = 0x6U;
 800609a:	2306      	movs	r3, #6
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	e041      	b.n	8006124 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 27500000U )
 80060a0:	4b27      	ldr	r3, [pc, #156]	; (8006140 <set_turnaround+0xdc>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a28      	ldr	r2, [pc, #160]	; (8006148 <set_turnaround+0xe4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d902      	bls.n	80060b0 <set_turnaround+0x4c>
      turnaround = 0x7U;
 80060aa:	2307      	movs	r3, #7
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	e039      	b.n	8006124 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 24000000U )
 80060b0:	4b23      	ldr	r3, [pc, #140]	; (8006140 <set_turnaround+0xdc>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a25      	ldr	r2, [pc, #148]	; (800614c <set_turnaround+0xe8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d302      	bcc.n	80060c0 <set_turnaround+0x5c>
      turnaround = 0x8U;
 80060ba:	2308      	movs	r3, #8
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	e031      	b.n	8006124 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 21800000U )
 80060c0:	4b1f      	ldr	r3, [pc, #124]	; (8006140 <set_turnaround+0xdc>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a22      	ldr	r2, [pc, #136]	; (8006150 <set_turnaround+0xec>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d902      	bls.n	80060d0 <set_turnaround+0x6c>
      turnaround = 0x9U;
 80060ca:	2309      	movs	r3, #9
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	e029      	b.n	8006124 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 20000000U )
 80060d0:	4b1b      	ldr	r3, [pc, #108]	; (8006140 <set_turnaround+0xdc>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a1f      	ldr	r2, [pc, #124]	; (8006154 <set_turnaround+0xf0>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d902      	bls.n	80060e0 <set_turnaround+0x7c>
      turnaround = 0xAU;
 80060da:	230a      	movs	r3, #10
 80060dc:	60fb      	str	r3, [r7, #12]
 80060de:	e021      	b.n	8006124 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 18500000U )
 80060e0:	4b17      	ldr	r3, [pc, #92]	; (8006140 <set_turnaround+0xdc>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a1c      	ldr	r2, [pc, #112]	; (8006158 <set_turnaround+0xf4>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d902      	bls.n	80060f0 <set_turnaround+0x8c>
      turnaround = 0xBU;
 80060ea:	230b      	movs	r3, #11
 80060ec:	60fb      	str	r3, [r7, #12]
 80060ee:	e019      	b.n	8006124 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 17200000U )
 80060f0:	4b13      	ldr	r3, [pc, #76]	; (8006140 <set_turnaround+0xdc>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a19      	ldr	r2, [pc, #100]	; (800615c <set_turnaround+0xf8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d302      	bcc.n	8006100 <set_turnaround+0x9c>
      turnaround = 0xCU;
 80060fa:	230c      	movs	r3, #12
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	e011      	b.n	8006124 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 16000000U )
 8006100:	4b0f      	ldr	r3, [pc, #60]	; (8006140 <set_turnaround+0xdc>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a16      	ldr	r2, [pc, #88]	; (8006160 <set_turnaround+0xfc>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d302      	bcc.n	8006110 <set_turnaround+0xac>
      turnaround = 0xDU;
 800610a:	230d      	movs	r3, #13
 800610c:	60fb      	str	r3, [r7, #12]
 800610e:	e009      	b.n	8006124 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 15000000U )
 8006110:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <set_turnaround+0xdc>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a13      	ldr	r2, [pc, #76]	; (8006164 <set_turnaround+0x100>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d302      	bcc.n	8006120 <set_turnaround+0xbc>
      turnaround = 0xEU;
 800611a:	230e      	movs	r3, #14
 800611c:	60fb      	str	r3, [r7, #12]
 800611e:	e001      	b.n	8006124 <set_turnaround+0xc0>
      turnaround = 0xFU;
 8006120:	230f      	movs	r3, #15
 8006122:	60fb      	str	r3, [r7, #12]
    usb_otg->GUSBCFG |= (turnaround << USB_OTG_GUSBCFG_TRDT_Pos);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	029b      	lsls	r3, r3, #10
 800612c:	431a      	orrs	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	60da      	str	r2, [r3, #12]
}
 8006132:	bf00      	nop
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	2000240c 	.word	0x2000240c
 8006144:	01e84800 	.word	0x01e84800
 8006148:	01a39ddf 	.word	0x01a39ddf
 800614c:	016e3600 	.word	0x016e3600
 8006150:	014ca43f 	.word	0x014ca43f
 8006154:	01312cff 	.word	0x01312cff
 8006158:	011a499f 	.word	0x011a499f
 800615c:	01067380 	.word	0x01067380
 8006160:	00f42400 	.word	0x00f42400
 8006164:	00e4e1c0 	.word	0x00e4e1c0

08006168 <get_speed>:

static tusb_speed_t get_speed(uint8_t rhport)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	4603      	mov	r3, r0
 8006170:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8006172:	4b0a      	ldr	r3, [pc, #40]	; (800619c <get_speed+0x34>)
 8006174:	60fb      	str	r3, [r7, #12]
  uint32_t const enum_spd = (dev->DSTS & USB_OTG_DSTS_ENUMSPD_Msk) >> USB_OTG_DSTS_ENUMSPD_Pos;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	085b      	lsrs	r3, r3, #1
 800617c:	f003 0303 	and.w	r3, r3, #3
 8006180:	60bb      	str	r3, [r7, #8]
  return (enum_spd == DCD_HIGH_SPEED) ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d101      	bne.n	800618c <get_speed+0x24>
 8006188:	2302      	movs	r3, #2
 800618a:	e000      	b.n	800618e <get_speed+0x26>
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	50000800 	.word	0x50000800

080061a0 <set_speed>:

static void set_speed(uint8_t rhport, tusb_speed_t speed)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	4603      	mov	r3, r0
 80061a8:	460a      	mov	r2, r1
 80061aa:	71fb      	strb	r3, [r7, #7]
 80061ac:	4613      	mov	r3, r2
 80061ae:	71bb      	strb	r3, [r7, #6]
  uint32_t bitvalue;

  if ( rhport == 1 )
 80061b0:	79fb      	ldrb	r3, [r7, #7]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d107      	bne.n	80061c6 <set_speed+0x26>
  {
    bitvalue = ((TUSB_SPEED_HIGH == speed) ? DCD_HIGH_SPEED : DCD_FULL_SPEED_USE_HS);
 80061b6:	79bb      	ldrb	r3, [r7, #6]
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	bf14      	ite	ne
 80061bc:	2301      	movne	r3, #1
 80061be:	2300      	moveq	r3, #0
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	e001      	b.n	80061ca <set_speed+0x2a>
  }
  else
  {
    bitvalue = DCD_FULL_SPEED;
 80061c6:	2303      	movs	r3, #3
 80061c8:	60fb      	str	r3, [r7, #12]
  }

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 80061ca:	4b0a      	ldr	r3, [pc, #40]	; (80061f4 <set_speed+0x54>)
 80061cc:	60bb      	str	r3, [r7, #8]

  // Clear and set speed bits
  dev->DCFG &= ~(3 << USB_OTG_DCFG_DSPD_Pos);
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f023 0203 	bic.w	r2, r3, #3
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	601a      	str	r2, [r3, #0]
  dev->DCFG |= (bitvalue << USB_OTG_DCFG_DSPD_Pos);
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	431a      	orrs	r2, r3
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	601a      	str	r2, [r3, #0]
}
 80061e6:	bf00      	nop
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	50000800 	.word	0x50000800

080061f8 <edpt_schedule_packets>:
  return true;
}
#endif

static void edpt_schedule_packets(uint8_t rhport, uint8_t const epnum, uint8_t const dir, uint16_t const num_packets, uint16_t total_bytes)
{
 80061f8:	b490      	push	{r4, r7}
 80061fa:	b08a      	sub	sp, #40	; 0x28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	4604      	mov	r4, r0
 8006200:	4608      	mov	r0, r1
 8006202:	4611      	mov	r1, r2
 8006204:	461a      	mov	r2, r3
 8006206:	4623      	mov	r3, r4
 8006208:	71fb      	strb	r3, [r7, #7]
 800620a:	4603      	mov	r3, r0
 800620c:	71bb      	strb	r3, [r7, #6]
 800620e:	460b      	mov	r3, r1
 8006210:	717b      	strb	r3, [r7, #5]
 8006212:	4613      	mov	r3, r2
 8006214:	807b      	strh	r3, [r7, #2]
  (void) rhport;

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8006216:	4b6c      	ldr	r3, [pc, #432]	; (80063c8 <edpt_schedule_packets+0x1d0>)
 8006218:	627b      	str	r3, [r7, #36]	; 0x24
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 800621a:	4b6c      	ldr	r3, [pc, #432]	; (80063cc <edpt_schedule_packets+0x1d4>)
 800621c:	623b      	str	r3, [r7, #32]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 800621e:	4b6c      	ldr	r3, [pc, #432]	; (80063d0 <edpt_schedule_packets+0x1d8>)
 8006220:	61fb      	str	r3, [r7, #28]

  // EP0 is limited to one packet each xfer
  // We use multiple transaction of xfer->max_size length to get a whole transfer done
  if(epnum == 0) {
 8006222:	79bb      	ldrb	r3, [r7, #6]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d121      	bne.n	800626c <edpt_schedule_packets+0x74>
    xfer_ctl_t * const xfer = XFER_CTL_BASE(epnum, dir);
 8006228:	79ba      	ldrb	r2, [r7, #6]
 800622a:	797b      	ldrb	r3, [r7, #5]
 800622c:	0052      	lsls	r2, r2, #1
 800622e:	4413      	add	r3, r2
 8006230:	011b      	lsls	r3, r3, #4
 8006232:	4a68      	ldr	r2, [pc, #416]	; (80063d4 <edpt_schedule_packets+0x1dc>)
 8006234:	4413      	add	r3, r2
 8006236:	61bb      	str	r3, [r7, #24]
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 8006238:	797b      	ldrb	r3, [r7, #5]
 800623a:	4a67      	ldr	r2, [pc, #412]	; (80063d8 <edpt_schedule_packets+0x1e0>)
 800623c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	895b      	ldrh	r3, [r3, #10]
 8006244:	81fa      	strh	r2, [r7, #14]
 8006246:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8006248:	89fa      	ldrh	r2, [r7, #14]
 800624a:	89bb      	ldrh	r3, [r7, #12]
 800624c:	4293      	cmp	r3, r2
 800624e:	bf28      	it	cs
 8006250:	4613      	movcs	r3, r2
 8006252:	b29b      	uxth	r3, r3
 8006254:	863b      	strh	r3, [r7, #48]	; 0x30
    ep0_pending[dir] -= total_bytes;
 8006256:	797b      	ldrb	r3, [r7, #5]
 8006258:	4a5f      	ldr	r2, [pc, #380]	; (80063d8 <edpt_schedule_packets+0x1e0>)
 800625a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800625e:	797b      	ldrb	r3, [r7, #5]
 8006260:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006262:	1a8a      	subs	r2, r1, r2
 8006264:	b291      	uxth	r1, r2
 8006266:	4a5c      	ldr	r2, [pc, #368]	; (80063d8 <edpt_schedule_packets+0x1e0>)
 8006268:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  }

  // IN and OUT endpoint xfers are interrupt-driven, we just schedule them here.
  if(dir == TUSB_DIR_IN) {
 800626c:	797b      	ldrb	r3, [r7, #5]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d14f      	bne.n	8006312 <edpt_schedule_packets+0x11a>
    // A full IN transfer (multiple packets, possibly) triggers XFRC.
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8006272:	887b      	ldrh	r3, [r7, #2]
 8006274:	04db      	lsls	r3, r3, #19
 8006276:	4618      	mov	r0, r3
        ((total_bytes << USB_OTG_DIEPTSIZ_XFRSIZ_Pos) & USB_OTG_DIEPTSIZ_XFRSIZ_Msk);
 8006278:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 800627a:	79bb      	ldrb	r3, [r7, #6]
 800627c:	015b      	lsls	r3, r3, #5
 800627e:	69f9      	ldr	r1, [r7, #28]
 8006280:	440b      	add	r3, r1
 8006282:	4302      	orrs	r2, r0
 8006284:	611a      	str	r2, [r3, #16]

    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 8006286:	79bb      	ldrb	r3, [r7, #6]
 8006288:	015b      	lsls	r3, r3, #5
 800628a:	69fa      	ldr	r2, [r7, #28]
 800628c:	4413      	add	r3, r2
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	79bb      	ldrb	r3, [r7, #6]
 8006292:	015b      	lsls	r3, r3, #5
 8006294:	69f9      	ldr	r1, [r7, #28]
 8006296:	440b      	add	r3, r1
 8006298:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800629c:	601a      	str	r2, [r3, #0]
    // For ISO endpoint set correct odd/even bit for next frame.
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 800629e:	79bb      	ldrb	r3, [r7, #6]
 80062a0:	015b      	lsls	r3, r3, #5
 80062a2:	69fa      	ldr	r2, [r7, #28]
 80062a4:	4413      	add	r3, r2
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80062ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062b0:	d122      	bne.n	80062f8 <edpt_schedule_packets+0x100>
 80062b2:	79ba      	ldrb	r2, [r7, #6]
 80062b4:	797b      	ldrb	r3, [r7, #5]
 80062b6:	4947      	ldr	r1, [pc, #284]	; (80063d4 <edpt_schedule_packets+0x1dc>)
 80062b8:	0052      	lsls	r2, r2, #1
 80062ba:	4413      	add	r3, r2
 80062bc:	011b      	lsls	r3, r3, #4
 80062be:	440b      	add	r3, r1
 80062c0:	330c      	adds	r3, #12
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d117      	bne.n	80062f8 <edpt_schedule_packets+0x100>
    {
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d0:	613b      	str	r3, [r7, #16]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 80062d2:	79bb      	ldrb	r3, [r7, #6]
 80062d4:	015b      	lsls	r3, r3, #5
 80062d6:	69fa      	ldr	r2, [r7, #28]
 80062d8:	4413      	add	r3, r2
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d002      	beq.n	80062e8 <edpt_schedule_packets+0xf0>
 80062e2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 80062e6:	e001      	b.n	80062ec <edpt_schedule_packets+0xf4>
 80062e8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 80062ec:	79bb      	ldrb	r3, [r7, #6]
 80062ee:	015b      	lsls	r3, r3, #5
 80062f0:	69f8      	ldr	r0, [r7, #28]
 80062f2:	4403      	add	r3, r0
 80062f4:	430a      	orrs	r2, r1
 80062f6:	601a      	str	r2, [r3, #0]
    }
    // Enable fifo empty interrupt only if there are something to put in the fifo.
    if(total_bytes != 0) {
 80062f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d05e      	beq.n	80063bc <edpt_schedule_packets+0x1c4>
      dev->DIEPEMPMSK |= (1 << epnum);
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006302:	79ba      	ldrb	r2, [r7, #6]
 8006304:	2101      	movs	r1, #1
 8006306:	fa01 f202 	lsl.w	r2, r1, r2
 800630a:	431a      	orrs	r2, r3
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	635a      	str	r2, [r3, #52]	; 0x34
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
    }
  }
}
 8006310:	e054      	b.n	80063bc <edpt_schedule_packets+0x1c4>
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 8006312:	79bb      	ldrb	r3, [r7, #6]
 8006314:	015b      	lsls	r3, r3, #5
 8006316:	6a3a      	ldr	r2, [r7, #32]
 8006318:	4413      	add	r3, r2
 800631a:	691a      	ldr	r2, [r3, #16]
 800631c:	79bb      	ldrb	r3, [r7, #6]
 800631e:	015b      	lsls	r3, r3, #5
 8006320:	6a39      	ldr	r1, [r7, #32]
 8006322:	440b      	add	r3, r1
 8006324:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 8006328:	611a      	str	r2, [r3, #16]
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 800632a:	79bb      	ldrb	r3, [r7, #6]
 800632c:	015b      	lsls	r3, r3, #5
 800632e:	6a3a      	ldr	r2, [r7, #32]
 8006330:	4413      	add	r3, r2
 8006332:	6919      	ldr	r1, [r3, #16]
 8006334:	887b      	ldrh	r3, [r7, #2]
 8006336:	04db      	lsls	r3, r3, #19
 8006338:	461a      	mov	r2, r3
        ((total_bytes << USB_OTG_DOEPTSIZ_XFRSIZ_Pos) & USB_OTG_DOEPTSIZ_XFRSIZ_Msk);
 800633a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 800633c:	431a      	orrs	r2, r3
 800633e:	79bb      	ldrb	r3, [r7, #6]
 8006340:	015b      	lsls	r3, r3, #5
 8006342:	6a38      	ldr	r0, [r7, #32]
 8006344:	4403      	add	r3, r0
 8006346:	430a      	orrs	r2, r1
 8006348:	611a      	str	r2, [r3, #16]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 800634a:	79bb      	ldrb	r3, [r7, #6]
 800634c:	015b      	lsls	r3, r3, #5
 800634e:	6a3a      	ldr	r2, [r7, #32]
 8006350:	4413      	add	r3, r2
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	79bb      	ldrb	r3, [r7, #6]
 8006356:	015b      	lsls	r3, r3, #5
 8006358:	6a39      	ldr	r1, [r7, #32]
 800635a:	440b      	add	r3, r1
 800635c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8006360:	601a      	str	r2, [r3, #0]
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8006362:	79bb      	ldrb	r3, [r7, #6]
 8006364:	015b      	lsls	r3, r3, #5
 8006366:	6a3a      	ldr	r2, [r7, #32]
 8006368:	4413      	add	r3, r2
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006370:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006374:	d122      	bne.n	80063bc <edpt_schedule_packets+0x1c4>
 8006376:	79ba      	ldrb	r2, [r7, #6]
 8006378:	797b      	ldrb	r3, [r7, #5]
 800637a:	4916      	ldr	r1, [pc, #88]	; (80063d4 <edpt_schedule_packets+0x1dc>)
 800637c:	0052      	lsls	r2, r2, #1
 800637e:	4413      	add	r3, r2
 8006380:	011b      	lsls	r3, r3, #4
 8006382:	440b      	add	r3, r1
 8006384:	330c      	adds	r3, #12
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d117      	bne.n	80063bc <edpt_schedule_packets+0x1c4>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006394:	617b      	str	r3, [r7, #20]
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
 8006396:	79bb      	ldrb	r3, [r7, #6]
 8006398:	015b      	lsls	r3, r3, #5
 800639a:	6a3a      	ldr	r2, [r7, #32]
 800639c:	4413      	add	r3, r2
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <edpt_schedule_packets+0x1b4>
 80063a6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 80063aa:	e001      	b.n	80063b0 <edpt_schedule_packets+0x1b8>
 80063ac:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 80063b0:	79bb      	ldrb	r3, [r7, #6]
 80063b2:	015b      	lsls	r3, r3, #5
 80063b4:	6a38      	ldr	r0, [r7, #32]
 80063b6:	4403      	add	r3, r0
 80063b8:	430a      	orrs	r2, r1
 80063ba:	601a      	str	r2, [r3, #0]
}
 80063bc:	bf00      	nop
 80063be:	3728      	adds	r7, #40	; 0x28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bc90      	pop	{r4, r7}
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	50000800 	.word	0x50000800
 80063cc:	50000b00 	.word	0x50000b00
 80063d0:	50000900 	.word	0x50000900
 80063d4:	200030d0 	.word	0x200030d0
 80063d8:	20003150 	.word	0x20003150

080063dc <dcd_init>:

/*------------------------------------------------------------------*/
/* Controller API
 *------------------------------------------------------------------*/
void dcd_init (uint8_t rhport)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	4603      	mov	r3, r0
 80063e4:	71fb      	strb	r3, [r7, #7]
  // Programming model begins in the last section of the chapter on the USB
  // peripheral in each Reference Manual.

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 80063e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80063ea:	60fb      	str	r3, [r7, #12]

  // No HNP/SRP (no OTG support), program timeout later.
  if ( rhport == 1 )
 80063ec:	79fb      	ldrb	r3, [r7, #7]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d106      	bne.n	8006400 <dcd_init+0x24>
    usb_otg->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);

    // Select default internal VBUS Indicator and Drive for ULPI
    usb_otg->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
#else
    usb_otg->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	60da      	str	r2, [r3, #12]
 80063fe:	e005      	b.n	800640c <dcd_init+0x30>
    USB_HS_PHYCInit();
#endif
  } else
  {
    // Enable internal PHY
    usb_otg->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	60da      	str	r2, [r3, #12]
  }

  // Reset core after selecting PHY
  // Wait AHB IDLE, reset then wait until it is cleared
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U) {}
 800640c:	bf00      	nop
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	2b00      	cmp	r3, #0
 8006414:	dafb      	bge.n	800640e <dcd_init+0x32>
  usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f043 0201 	orr.w	r2, r3, #1
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	611a      	str	r2, [r3, #16]
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST) {}
 8006422:	bf00      	nop
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b01      	cmp	r3, #1
 800642e:	d0f9      	beq.n	8006424 <dcd_init+0x48>

  // Restart PHY clock
  *((volatile uint32_t *)(RHPORT_REGS_BASE + USB_OTG_PCGCCTL_BASE)) = 0;
 8006430:	4b1b      	ldr	r3, [pc, #108]	; (80064a0 <dcd_init+0xc4>)
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]

  // Clear all interrupts
  usb_otg->GINTSTS |= usb_otg->GINTSTS;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	695a      	ldr	r2, [r3, #20]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	431a      	orrs	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	615a      	str	r2, [r3, #20]

  // Required as part of core initialization.
  // TODO: How should mode mismatch be handled? It will cause
  // the core to stop working/require reset.
  usb_otg->GINTMSK |= USB_OTG_GINTMSK_OTGINT | USB_OTG_GINTMSK_MMISM;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	f043 0206 	orr.w	r2, r3, #6
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	619a      	str	r2, [r3, #24]

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8006450:	4b14      	ldr	r3, [pc, #80]	; (80064a4 <dcd_init+0xc8>)
 8006452:	60bb      	str	r3, [r7, #8]

  // If USB host misbehaves during status portion of control xfer
  // (non zero-length packet), send STALL back and discard.
  dev->DCFG |=  USB_OTG_DCFG_NZLSOHSK;
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f043 0204 	orr.w	r2, r3, #4
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	601a      	str	r2, [r3, #0]

  set_speed(rhport, TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL);
 8006460:	79fb      	ldrb	r3, [r7, #7]
 8006462:	2100      	movs	r1, #0
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff fe9b 	bl	80061a0 <set_speed>

  // Enable internal USB transceiver, unless using HS core (port 1) with external PHY.
  if (!(rhport == 1 && (CFG_TUSB_RHPORT0_MODE & OPT_MODE_HIGH_SPEED))) usb_otg->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	639a      	str	r2, [r3, #56]	; 0x38

  usb_otg->GINTMSK |= USB_OTG_GINTMSK_USBRST   | USB_OTG_GINTMSK_ENUMDNEM |
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	699a      	ldr	r2, [r3, #24]
 800647a:	4b0b      	ldr	r3, [pc, #44]	; (80064a8 <dcd_init+0xcc>)
 800647c:	4313      	orrs	r3, r2
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	6193      	str	r3, [r2, #24]
      USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_WUIM     |
      USB_OTG_GINTMSK_RXFLVLM  | (USE_SOF ? USB_OTG_GINTMSK_SOFM : 0);

  // Enable global interrupt
  usb_otg->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f043 0201 	orr.w	r2, r3, #1
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 800648e:	79fb      	ldrb	r3, [r7, #7]
 8006490:	4618      	mov	r0, r3
 8006492:	f000 f851 	bl	8006538 <dcd_connect>
}
 8006496:	bf00      	nop
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	50000e00 	.word	0x50000e00
 80064a4:	50000800 	.word	0x50000800
 80064a8:	80003810 	.word	0x80003810

080064ac <dcd_int_enable>:

void dcd_int_enable (uint8_t rhport)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	4603      	mov	r3, r0
 80064b4:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  NVIC_EnableIRQ(RHPORT_IRQn);
 80064b6:	2043      	movs	r0, #67	; 0x43
 80064b8:	f7ff fcd8 	bl	8005e6c <__NVIC_EnableIRQ>
}
 80064bc:	bf00      	nop
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <dcd_int_disable>:

void dcd_int_disable (uint8_t rhport)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	4603      	mov	r3, r0
 80064cc:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  NVIC_DisableIRQ(RHPORT_IRQn);
 80064ce:	2043      	movs	r0, #67	; 0x43
 80064d0:	f7ff fcea 	bl	8005ea8 <__NVIC_DisableIRQ>
}
 80064d4:	bf00      	nop
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <dcd_set_address>:

void dcd_set_address (uint8_t rhport, uint8_t dev_addr)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	4603      	mov	r3, r0
 80064e4:	460a      	mov	r2, r1
 80064e6:	71fb      	strb	r3, [r7, #7]
 80064e8:	4613      	mov	r3, r2
 80064ea:	71bb      	strb	r3, [r7, #6]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 80064ec:	4b11      	ldr	r3, [pc, #68]	; (8006534 <dcd_set_address+0x58>)
 80064ee:	60fb      	str	r3, [r7, #12]
  dev->DCFG = (dev->DCFG & ~USB_OTG_DCFG_DAD_Msk) | (dev_addr << USB_OTG_DCFG_DAD_Pos);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80064f8:	79ba      	ldrb	r2, [r7, #6]
 80064fa:	0112      	lsls	r2, r2, #4
 80064fc:	431a      	orrs	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	2300      	movs	r3, #0
 8006504:	72fb      	strb	r3, [r7, #11]
 8006506:	2301      	movs	r3, #1
 8006508:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 800650a:	7abb      	ldrb	r3, [r7, #10]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <dcd_set_address+0x3a>
 8006510:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8006514:	e000      	b.n	8006518 <dcd_set_address+0x3c>
 8006516:	2300      	movs	r3, #0
 8006518:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800651c:	4313      	orrs	r3, r2
 800651e:	b25b      	sxtb	r3, r3
 8006520:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8006522:	79f8      	ldrb	r0, [r7, #7]
 8006524:	2300      	movs	r3, #0
 8006526:	2200      	movs	r2, #0
 8006528:	f000 f97a 	bl	8006820 <dcd_edpt_xfer>
}
 800652c:	bf00      	nop
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	50000800 	.word	0x50000800

08006538 <dcd_connect>:

  dev->DCTL &= ~USB_OTG_DCTL_RWUSIG;
}

void dcd_connect(uint8_t rhport)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	4603      	mov	r3, r0
 8006540:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8006542:	4b07      	ldr	r3, [pc, #28]	; (8006560 <dcd_connect+0x28>)
 8006544:	60fb      	str	r3, [r7, #12]
  dev->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f023 0202 	bic.w	r2, r3, #2
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	605a      	str	r2, [r3, #4]
}
 8006552:	bf00      	nop
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	50000800 	.word	0x50000800

08006564 <dcd_edpt_open>:
/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * desc_edpt)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b090      	sub	sp, #64	; 0x40
 8006568:	af00      	add	r7, sp, #0
 800656a:	4603      	mov	r3, r0
 800656c:	6039      	str	r1, [r7, #0]
 800656e:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8006570:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006574:	63fb      	str	r3, [r7, #60]	; 0x3c
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8006576:	4b81      	ldr	r3, [pc, #516]	; (800677c <dcd_edpt_open+0x218>)
 8006578:	63bb      	str	r3, [r7, #56]	; 0x38
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 800657a:	4b81      	ldr	r3, [pc, #516]	; (8006780 <dcd_edpt_open+0x21c>)
 800657c:	637b      	str	r3, [r7, #52]	; 0x34
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 800657e:	4b81      	ldr	r3, [pc, #516]	; (8006784 <dcd_edpt_open+0x220>)
 8006580:	633b      	str	r3, [r7, #48]	; 0x30

  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	789b      	ldrb	r3, [r3, #2]
 8006586:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006588:	7cbb      	ldrb	r3, [r7, #18]
 800658a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800658e:	b2db      	uxtb	r3, r3
 8006590:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t const dir   = tu_edpt_dir(desc_edpt->bEndpointAddress);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	789b      	ldrb	r3, [r3, #2]
 8006598:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800659a:	7cfb      	ldrb	r3, [r7, #19]
 800659c:	09db      	lsrs	r3, r3, #7
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

  TU_ASSERT(epnum < EP_MAX);
 80065a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065a8:	2b03      	cmp	r3, #3
 80065aa:	d90a      	bls.n	80065c2 <dcd_edpt_open+0x5e>
 80065ac:	4b76      	ldr	r3, [pc, #472]	; (8006788 <dcd_edpt_open+0x224>)
 80065ae:	617b      	str	r3, [r7, #20]
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d000      	beq.n	80065be <dcd_edpt_open+0x5a>
 80065bc:	be00      	bkpt	0x0000
 80065be:	2300      	movs	r3, #0
 80065c0:	e0d8      	b.n	8006774 <dcd_edpt_open+0x210>

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 80065c2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80065c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80065ca:	0052      	lsls	r2, r2, #1
 80065cc:	4413      	add	r3, r2
 80065ce:	011b      	lsls	r3, r3, #4
 80065d0:	4a6e      	ldr	r2, [pc, #440]	; (800678c <dcd_edpt_open+0x228>)
 80065d2:	4413      	add	r3, r2
 80065d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	60fb      	str	r3, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	889b      	ldrh	r3, [r3, #4]
 80065de:	b29b      	uxth	r3, r3
 80065e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065e4:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	815a      	strh	r2, [r3, #10]
  xfer->interval = desc_edpt->bInterval;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	799a      	ldrb	r2, [r3, #6]
 80065ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f0:	731a      	strb	r2, [r3, #12]

  uint16_t const fifo_size = (xfer->max_size + 3) / 4; // Round up to next full word
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	895b      	ldrh	r3, [r3, #10]
 80065f6:	3303      	adds	r3, #3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	da00      	bge.n	80065fe <dcd_edpt_open+0x9a>
 80065fc:	3303      	adds	r3, #3
 80065fe:	109b      	asrs	r3, r3, #2
 8006600:	84fb      	strh	r3, [r7, #38]	; 0x26

  if(dir == TUSB_DIR_OUT)
 8006602:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006606:	2b00      	cmp	r3, #0
 8006608:	d152      	bne.n	80066b0 <dcd_edpt_open+0x14c>
  {
    // Calculate required size of RX FIFO
    uint16_t const sz = calc_rx_ff_size(4*fifo_size);
 800660a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	b29b      	uxth	r3, r3
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff fc6d 	bl	8005ef0 <calc_rx_ff_size>
 8006616:	4603      	mov	r3, r0
 8006618:	83fb      	strh	r3, [r7, #30]

    // If size_rx needs to be extended check if possible and if so enlarge it
    if (usb_otg->GRXFSIZ < sz)
 800661a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800661c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800661e:	8bfb      	ldrh	r3, [r7, #30]
 8006620:	429a      	cmp	r2, r3
 8006622:	d214      	bcs.n	800664e <dcd_edpt_open+0xea>
    {
      TU_ASSERT(sz + _allocated_fifo_words_tx <= EP_FIFO_SIZE/4);
 8006624:	8bfb      	ldrh	r3, [r7, #30]
 8006626:	4a5a      	ldr	r2, [pc, #360]	; (8006790 <dcd_edpt_open+0x22c>)
 8006628:	8812      	ldrh	r2, [r2, #0]
 800662a:	4413      	add	r3, r2
 800662c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006630:	d90a      	bls.n	8006648 <dcd_edpt_open+0xe4>
 8006632:	4b55      	ldr	r3, [pc, #340]	; (8006788 <dcd_edpt_open+0x224>)
 8006634:	61bb      	str	r3, [r7, #24]
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d000      	beq.n	8006644 <dcd_edpt_open+0xe0>
 8006642:	be00      	bkpt	0x0000
 8006644:	2300      	movs	r3, #0
 8006646:	e095      	b.n	8006774 <dcd_edpt_open+0x210>

      // Enlarge RX FIFO
      usb_otg->GRXFSIZ = sz;
 8006648:	8bfa      	ldrh	r2, [r7, #30]
 800664a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800664c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 800664e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006652:	015b      	lsls	r3, r3, #5
 8006654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006656:	4413      	add	r3, r2
 8006658:	681a      	ldr	r2, [r3, #0]
        (desc_edpt->bmAttributes.xfer << USB_OTG_DOEPCTL_EPTYP_Pos)   |
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	78db      	ldrb	r3, [r3, #3]
 800665e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006662:	b2db      	uxtb	r3, r3
 8006664:	049b      	lsls	r3, r3, #18
 8006666:	4619      	mov	r1, r3
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	78db      	ldrb	r3, [r3, #3]
 800666c:	f003 0303 	and.w	r3, r3, #3
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b01      	cmp	r3, #1
 8006674:	d002      	beq.n	800667c <dcd_edpt_open+0x118>
 8006676:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800667a:	e000      	b.n	800667e <dcd_edpt_open+0x11a>
 800667c:	2300      	movs	r3, #0
        (desc_edpt->bmAttributes.xfer << USB_OTG_DOEPCTL_EPTYP_Pos)   |
 800667e:	430b      	orrs	r3, r1
        (xfer->max_size << USB_OTG_DOEPCTL_MPSIZ_Pos);
 8006680:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006682:	8949      	ldrh	r1, [r1, #10]
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 8006684:	430b      	orrs	r3, r1
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 8006686:	431a      	orrs	r2, r3
 8006688:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800668c:	015b      	lsls	r3, r3, #5
 800668e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006690:	440b      	add	r3, r1
 8006692:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006696:	601a      	str	r2, [r3, #0]

    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_OEPM_Pos + epnum));
 8006698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669a:	69db      	ldr	r3, [r3, #28]
 800669c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80066a0:	3210      	adds	r2, #16
 80066a2:	2101      	movs	r1, #1
 80066a4:	fa01 f202 	lsl.w	r2, r1, r2
 80066a8:	431a      	orrs	r2, r3
 80066aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ac:	61da      	str	r2, [r3, #28]
 80066ae:	e060      	b.n	8006772 <dcd_edpt_open+0x20e>
    //
    // In FIFO is allocated by following rules:
    // - IN EP 1 gets FIFO 1, IN EP "n" gets FIFO "n".

    // Check if free space is available
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + usb_otg->GRXFSIZ <= EP_FIFO_SIZE/4);
 80066b0:	4b37      	ldr	r3, [pc, #220]	; (8006790 <dcd_edpt_open+0x22c>)
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	461a      	mov	r2, r3
 80066b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066b8:	4413      	add	r3, r2
 80066ba:	461a      	mov	r2, r3
 80066bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c0:	4413      	add	r3, r2
 80066c2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80066c6:	d90a      	bls.n	80066de <dcd_edpt_open+0x17a>
 80066c8:	4b2f      	ldr	r3, [pc, #188]	; (8006788 <dcd_edpt_open+0x224>)
 80066ca:	623b      	str	r3, [r7, #32]
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d000      	beq.n	80066da <dcd_edpt_open+0x176>
 80066d8:	be00      	bkpt	0x0000
 80066da:	2300      	movs	r3, #0
 80066dc:	e04a      	b.n	8006774 <dcd_edpt_open+0x210>

    _allocated_fifo_words_tx += fifo_size;
 80066de:	4b2c      	ldr	r3, [pc, #176]	; (8006790 <dcd_edpt_open+0x22c>)
 80066e0:	881a      	ldrh	r2, [r3, #0]
 80066e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066e4:	4413      	add	r3, r2
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	4b29      	ldr	r3, [pc, #164]	; (8006790 <dcd_edpt_open+0x22c>)
 80066ea:	801a      	strh	r2, [r3, #0]

    TU_LOG(2, "    Allocated %u bytes at offset %u", fifo_size*4, EP_FIFO_SIZE-_allocated_fifo_words_tx*4);

    // DIEPTXF starts at FIFO #1.
    // Both TXFD and TXSA are in unit of 32-bit words.
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 80066ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066ee:	041b      	lsls	r3, r3, #16
 80066f0:	4619      	mov	r1, r3
 80066f2:	4b27      	ldr	r3, [pc, #156]	; (8006790 <dcd_edpt_open+0x22c>)
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 80066fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066fe:	3b01      	subs	r3, #1
 8006700:	430a      	orrs	r2, r1
 8006702:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006704:	3340      	adds	r3, #64	; 0x40
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	440b      	add	r3, r1
 800670a:	605a      	str	r2, [r3, #4]

    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 800670c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006710:	015b      	lsls	r3, r3, #5
 8006712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006714:	4413      	add	r3, r2
 8006716:	6819      	ldr	r1, [r3, #0]
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 8006718:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800671c:	059b      	lsls	r3, r3, #22
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 800671e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	78db      	ldrb	r3, [r3, #3]
 8006726:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800672a:	b2db      	uxtb	r3, r3
 800672c:	049b      	lsls	r3, r3, #18
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 800672e:	4313      	orrs	r3, r2
 8006730:	461a      	mov	r2, r3
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	78db      	ldrb	r3, [r3, #3]
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b01      	cmp	r3, #1
 800673e:	d002      	beq.n	8006746 <dcd_edpt_open+0x1e2>
 8006740:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006744:	e000      	b.n	8006748 <dcd_edpt_open+0x1e4>
 8006746:	2300      	movs	r3, #0
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 8006748:	4313      	orrs	r3, r2
        (xfer->max_size << USB_OTG_DIEPCTL_MPSIZ_Pos);
 800674a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800674c:	8952      	ldrh	r2, [r2, #10]
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 800674e:	431a      	orrs	r2, r3
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 8006750:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006754:	015b      	lsls	r3, r3, #5
 8006756:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006758:	4403      	add	r3, r0
 800675a:	430a      	orrs	r2, r1
 800675c:	601a      	str	r2, [r3, #0]

    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_IEPM_Pos + epnum));
 800675e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006760:	69db      	ldr	r3, [r3, #28]
 8006762:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006766:	2101      	movs	r1, #1
 8006768:	fa01 f202 	lsl.w	r2, r1, r2
 800676c:	431a      	orrs	r2, r3
 800676e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006770:	61da      	str	r2, [r3, #28]
  }

  return true;
 8006772:	2301      	movs	r3, #1
}
 8006774:	4618      	mov	r0, r3
 8006776:	3740      	adds	r7, #64	; 0x40
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	50000800 	.word	0x50000800
 8006780:	50000b00 	.word	0x50000b00
 8006784:	50000900 	.word	0x50000900
 8006788:	e000edf0 	.word	0xe000edf0
 800678c:	200030d0 	.word	0x200030d0
 8006790:	20003154 	.word	0x20003154

08006794 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all (uint8_t rhport)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	4603      	mov	r3, r0
 800679c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

//  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 800679e:	4b1b      	ldr	r3, [pc, #108]	; (800680c <dcd_edpt_close_all+0x78>)
 80067a0:	613b      	str	r3, [r7, #16]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 80067a2:	4b1b      	ldr	r3, [pc, #108]	; (8006810 <dcd_edpt_close_all+0x7c>)
 80067a4:	60fb      	str	r3, [r7, #12]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 80067a6:	4b1b      	ldr	r3, [pc, #108]	; (8006814 <dcd_edpt_close_all+0x80>)
 80067a8:	60bb      	str	r3, [r7, #8]

  // Disable non-control interrupt
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80067b0:	61da      	str	r2, [r3, #28]

  for(uint8_t n = 1; n < EP_MAX; n++)
 80067b2:	2301      	movs	r3, #1
 80067b4:	75fb      	strb	r3, [r7, #23]
 80067b6:	e01c      	b.n	80067f2 <dcd_edpt_close_all+0x5e>
  {
    // disable OUT endpoint
    out_ep[n].DOEPCTL = 0;
 80067b8:	7dfb      	ldrb	r3, [r7, #23]
 80067ba:	015b      	lsls	r3, r3, #5
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	2200      	movs	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 80067c4:	7dfb      	ldrb	r3, [r7, #23]
 80067c6:	4a14      	ldr	r2, [pc, #80]	; (8006818 <dcd_edpt_close_all+0x84>)
 80067c8:	015b      	lsls	r3, r3, #5
 80067ca:	4413      	add	r3, r2
 80067cc:	330a      	adds	r3, #10
 80067ce:	2200      	movs	r2, #0
 80067d0:	801a      	strh	r2, [r3, #0]

    // disable IN endpoint
    in_ep[n].DIEPCTL = 0;
 80067d2:	7dfb      	ldrb	r3, [r7, #23]
 80067d4:	015b      	lsls	r3, r3, #5
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	4413      	add	r3, r2
 80067da:	2200      	movs	r2, #0
 80067dc:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 80067de:	7dfb      	ldrb	r3, [r7, #23]
 80067e0:	4a0d      	ldr	r2, [pc, #52]	; (8006818 <dcd_edpt_close_all+0x84>)
 80067e2:	015b      	lsls	r3, r3, #5
 80067e4:	4413      	add	r3, r2
 80067e6:	331a      	adds	r3, #26
 80067e8:	2200      	movs	r2, #0
 80067ea:	801a      	strh	r2, [r3, #0]
  for(uint8_t n = 1; n < EP_MAX; n++)
 80067ec:	7dfb      	ldrb	r3, [r7, #23]
 80067ee:	3301      	adds	r3, #1
 80067f0:	75fb      	strb	r3, [r7, #23]
 80067f2:	7dfb      	ldrb	r3, [r7, #23]
 80067f4:	2b03      	cmp	r3, #3
 80067f6:	d9df      	bls.n	80067b8 <dcd_edpt_close_all+0x24>
  }

  // reset allocated fifo IN
  _allocated_fifo_words_tx = 16;
 80067f8:	4b08      	ldr	r3, [pc, #32]	; (800681c <dcd_edpt_close_all+0x88>)
 80067fa:	2210      	movs	r2, #16
 80067fc:	801a      	strh	r2, [r3, #0]
}
 80067fe:	bf00      	nop
 8006800:	371c      	adds	r7, #28
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	50000800 	.word	0x50000800
 8006810:	50000b00 	.word	0x50000b00
 8006814:	50000900 	.word	0x50000900
 8006818:	200030d0 	.word	0x200030d0
 800681c:	20003154 	.word	0x20003154

08006820 <dcd_edpt_xfer>:

bool dcd_edpt_xfer (uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 8006820:	b590      	push	{r4, r7, lr}
 8006822:	b089      	sub	sp, #36	; 0x24
 8006824:	af02      	add	r7, sp, #8
 8006826:	603a      	str	r2, [r7, #0]
 8006828:	461a      	mov	r2, r3
 800682a:	4603      	mov	r3, r0
 800682c:	71fb      	strb	r3, [r7, #7]
 800682e:	460b      	mov	r3, r1
 8006830:	71bb      	strb	r3, [r7, #6]
 8006832:	4613      	mov	r3, r2
 8006834:	80bb      	strh	r3, [r7, #4]
 8006836:	79bb      	ldrb	r3, [r7, #6]
 8006838:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800683a:	7b3b      	ldrb	r3, [r7, #12]
 800683c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006840:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006842:	757b      	strb	r3, [r7, #21]
 8006844:	79bb      	ldrb	r3, [r7, #6]
 8006846:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006848:	7b7b      	ldrb	r3, [r7, #13]
 800684a:	09db      	lsrs	r3, r3, #7
 800684c:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800684e:	753b      	strb	r3, [r7, #20]

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 8006850:	7d7a      	ldrb	r2, [r7, #21]
 8006852:	7d3b      	ldrb	r3, [r7, #20]
 8006854:	0052      	lsls	r2, r2, #1
 8006856:	4413      	add	r3, r2
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	4a23      	ldr	r2, [pc, #140]	; (80068e8 <dcd_edpt_xfer+0xc8>)
 800685c:	4413      	add	r3, r2
 800685e:	613b      	str	r3, [r7, #16]
  xfer->buffer      = buffer;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	601a      	str	r2, [r3, #0]
  xfer->ff          = NULL;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	2200      	movs	r2, #0
 800686a:	605a      	str	r2, [r3, #4]
  xfer->total_len   = total_bytes;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	88ba      	ldrh	r2, [r7, #4]
 8006870:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if(epnum == 0) {
 8006872:	7d7b      	ldrb	r3, [r7, #21]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d111      	bne.n	800689c <dcd_edpt_xfer+0x7c>
    ep0_pending[dir] = total_bytes;
 8006878:	7d3b      	ldrb	r3, [r7, #20]
 800687a:	491c      	ldr	r1, [pc, #112]	; (80068ec <dcd_edpt_xfer+0xcc>)
 800687c:	88ba      	ldrh	r2, [r7, #4]
 800687e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
 8006882:	7d3b      	ldrb	r3, [r7, #20]
 8006884:	4a19      	ldr	r2, [pc, #100]	; (80068ec <dcd_edpt_xfer+0xcc>)
 8006886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800688a:	7d3a      	ldrb	r2, [r7, #20]
 800688c:	7d79      	ldrb	r1, [r7, #21]
 800688e:	79f8      	ldrb	r0, [r7, #7]
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	2301      	movs	r3, #1
 8006894:	f7ff fcb0 	bl	80061f8 <edpt_schedule_packets>
    return true;
 8006898:	2301      	movs	r3, #1
 800689a:	e021      	b.n	80068e0 <dcd_edpt_xfer+0xc0>
  }

  uint16_t num_packets = (total_bytes / xfer->max_size);
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	895b      	ldrh	r3, [r3, #10]
 80068a0:	88ba      	ldrh	r2, [r7, #4]
 80068a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a6:	82fb      	strh	r3, [r7, #22]
  uint16_t const short_packet_size = total_bytes % xfer->max_size;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	895a      	ldrh	r2, [r3, #10]
 80068ac:	88bb      	ldrh	r3, [r7, #4]
 80068ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80068b2:	fb01 f202 	mul.w	r2, r1, r2
 80068b6:	1a9b      	subs	r3, r3, r2
 80068b8:	81fb      	strh	r3, [r7, #14]

  // Zero-size packet is special case.
  if(short_packet_size > 0 || (total_bytes == 0)) {
 80068ba:	89fb      	ldrh	r3, [r7, #14]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d102      	bne.n	80068c6 <dcd_edpt_xfer+0xa6>
 80068c0:	88bb      	ldrh	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d102      	bne.n	80068cc <dcd_edpt_xfer+0xac>
    num_packets++;
 80068c6:	8afb      	ldrh	r3, [r7, #22]
 80068c8:	3301      	adds	r3, #1
 80068ca:	82fb      	strh	r3, [r7, #22]
  }

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 80068cc:	8afc      	ldrh	r4, [r7, #22]
 80068ce:	7d3a      	ldrb	r2, [r7, #20]
 80068d0:	7d79      	ldrb	r1, [r7, #21]
 80068d2:	79f8      	ldrb	r0, [r7, #7]
 80068d4:	88bb      	ldrh	r3, [r7, #4]
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	4623      	mov	r3, r4
 80068da:	f7ff fc8d 	bl	80061f8 <edpt_schedule_packets>

  return true;
 80068de:	2301      	movs	r3, #1
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	371c      	adds	r7, #28
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd90      	pop	{r4, r7, pc}
 80068e8:	200030d0 	.word	0x200030d0
 80068ec:	20003150 	.word	0x20003150

080068f0 <dcd_edpt_disable>:

  return true;
}

static void dcd_edpt_disable (uint8_t rhport, uint8_t ep_addr, bool stall)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b089      	sub	sp, #36	; 0x24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	4603      	mov	r3, r0
 80068f8:	71fb      	strb	r3, [r7, #7]
 80068fa:	460b      	mov	r3, r1
 80068fc:	71bb      	strb	r3, [r7, #6]
 80068fe:	4613      	mov	r3, r2
 8006900:	717b      	strb	r3, [r7, #5]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8006902:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006906:	61fb      	str	r3, [r7, #28]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8006908:	4b6c      	ldr	r3, [pc, #432]	; (8006abc <dcd_edpt_disable+0x1cc>)
 800690a:	61bb      	str	r3, [r7, #24]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 800690c:	4b6c      	ldr	r3, [pc, #432]	; (8006ac0 <dcd_edpt_disable+0x1d0>)
 800690e:	617b      	str	r3, [r7, #20]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8006910:	4b6c      	ldr	r3, [pc, #432]	; (8006ac4 <dcd_edpt_disable+0x1d4>)
 8006912:	613b      	str	r3, [r7, #16]
 8006914:	79bb      	ldrb	r3, [r7, #6]
 8006916:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006918:	7b3b      	ldrb	r3, [r7, #12]
 800691a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800691e:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006920:	73fb      	strb	r3, [r7, #15]
 8006922:	79bb      	ldrb	r3, [r7, #6]
 8006924:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006926:	7b7b      	ldrb	r3, [r7, #13]
 8006928:	09db      	lsrs	r3, r3, #7
 800692a:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800692c:	73bb      	strb	r3, [r7, #14]

  if(dir == TUSB_DIR_IN) {
 800692e:	7bbb      	ldrb	r3, [r7, #14]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d16a      	bne.n	8006a0a <dcd_edpt_disable+0x11a>
    // Only disable currently enabled non-control endpoint
    if ( (epnum == 0) || !(in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPENA) ){
 8006934:	7bfb      	ldrb	r3, [r7, #15]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d006      	beq.n	8006948 <dcd_edpt_disable+0x58>
 800693a:	7bfb      	ldrb	r3, [r7, #15]
 800693c:	015b      	lsls	r3, r3, #5
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4413      	add	r3, r2
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	db13      	blt.n	8006970 <dcd_edpt_disable+0x80>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 8006948:	7bfb      	ldrb	r3, [r7, #15]
 800694a:	015b      	lsls	r3, r3, #5
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	4413      	add	r3, r2
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	797b      	ldrb	r3, [r7, #5]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <dcd_edpt_disable+0x6e>
 8006958:	f04f 6102 	mov.w	r1, #136314880	; 0x8200000
 800695c:	e001      	b.n	8006962 <dcd_edpt_disable+0x72>
 800695e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8006962:	7bfb      	ldrb	r3, [r7, #15]
 8006964:	015b      	lsls	r3, r3, #5
 8006966:	6938      	ldr	r0, [r7, #16]
 8006968:	4403      	add	r3, r0
 800696a:	430a      	orrs	r2, r1
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	e037      	b.n	80069e0 <dcd_edpt_disable+0xf0>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006970:	7bfb      	ldrb	r3, [r7, #15]
 8006972:	015b      	lsls	r3, r3, #5
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	4413      	add	r3, r2
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	7bfb      	ldrb	r3, [r7, #15]
 800697c:	015b      	lsls	r3, r3, #5
 800697e:	6939      	ldr	r1, [r7, #16]
 8006980:	440b      	add	r3, r1
 8006982:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8006986:	601a      	str	r2, [r3, #0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_INEPNE) == 0);
 8006988:	bf00      	nop
 800698a:	7bfb      	ldrb	r3, [r7, #15]
 800698c:	015b      	lsls	r3, r3, #5
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	4413      	add	r3, r2
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006998:	2b00      	cmp	r3, #0
 800699a:	d0f6      	beq.n	800698a <dcd_edpt_disable+0x9a>

      // Disable the endpoint.
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPDIS | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 800699c:	7bfb      	ldrb	r3, [r7, #15]
 800699e:	015b      	lsls	r3, r3, #5
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	4413      	add	r3, r2
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	797b      	ldrb	r3, [r7, #5]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d001      	beq.n	80069b0 <dcd_edpt_disable+0xc0>
 80069ac:	4946      	ldr	r1, [pc, #280]	; (8006ac8 <dcd_edpt_disable+0x1d8>)
 80069ae:	e001      	b.n	80069b4 <dcd_edpt_disable+0xc4>
 80069b0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	015b      	lsls	r3, r3, #5
 80069b8:	6938      	ldr	r0, [r7, #16]
 80069ba:	4403      	add	r3, r0
 80069bc:	430a      	orrs	r2, r1
 80069be:	601a      	str	r2, [r3, #0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_EPDISD_Msk) == 0);
 80069c0:	bf00      	nop
 80069c2:	7bfb      	ldrb	r3, [r7, #15]
 80069c4:	015b      	lsls	r3, r3, #5
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	4413      	add	r3, r2
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d0f6      	beq.n	80069c2 <dcd_edpt_disable+0xd2>
      in_ep[epnum].DIEPINT = USB_OTG_DIEPINT_EPDISD;
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
 80069d6:	015b      	lsls	r3, r3, #5
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	4413      	add	r3, r2
 80069dc:	2202      	movs	r2, #2
 80069de:	609a      	str	r2, [r3, #8]
    }

    // Flush the FIFO, and wait until we have confirmed it cleared.
    usb_otg->GRSTCTL |= (epnum << USB_OTG_GRSTCTL_TXFNUM_Pos);
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	7bfa      	ldrb	r2, [r7, #15]
 80069e6:	0192      	lsls	r2, r2, #6
 80069e8:	431a      	orrs	r2, r3
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	611a      	str	r2, [r3, #16]
    usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_TXFFLSH;
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	f043 0220 	orr.w	r2, r3, #32
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	611a      	str	r2, [r3, #16]
    while((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH_Msk) != 0);
 80069fa:	bf00      	nop
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	f003 0320 	and.w	r3, r3, #32
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1f9      	bne.n	80069fc <dcd_edpt_disable+0x10c>

      // Allow other OUT endpoints to keep receiving.
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
    }
  }
}
 8006a08:	e051      	b.n	8006aae <dcd_edpt_disable+0x1be>
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d006      	beq.n	8006a1e <dcd_edpt_disable+0x12e>
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
 8006a12:	015b      	lsls	r3, r3, #5
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	4413      	add	r3, r2
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	db12      	blt.n	8006a44 <dcd_edpt_disable+0x154>
      out_ep[epnum].DOEPCTL |= stall ? USB_OTG_DOEPCTL_STALL : 0;
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
 8006a20:	015b      	lsls	r3, r3, #5
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	4413      	add	r3, r2
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	797b      	ldrb	r3, [r7, #5]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d002      	beq.n	8006a34 <dcd_edpt_disable+0x144>
 8006a2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a32:	e000      	b.n	8006a36 <dcd_edpt_disable+0x146>
 8006a34:	2100      	movs	r1, #0
 8006a36:	7bfb      	ldrb	r3, [r7, #15]
 8006a38:	015b      	lsls	r3, r3, #5
 8006a3a:	6978      	ldr	r0, [r7, #20]
 8006a3c:	4403      	add	r3, r0
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	601a      	str	r2, [r3, #0]
}
 8006a42:	e034      	b.n	8006aae <dcd_edpt_disable+0x1be>
      dev->DCTL |= USB_OTG_DCTL_SGONAK;
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	605a      	str	r2, [r3, #4]
      while((usb_otg->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF_Msk) == 0);
 8006a50:	bf00      	nop
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0f9      	beq.n	8006a52 <dcd_edpt_disable+0x162>
      out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPDIS | (stall ? USB_OTG_DOEPCTL_STALL : 0);
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
 8006a60:	015b      	lsls	r3, r3, #5
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	4413      	add	r3, r2
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	797b      	ldrb	r3, [r7, #5]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <dcd_edpt_disable+0x182>
 8006a6e:	4916      	ldr	r1, [pc, #88]	; (8006ac8 <dcd_edpt_disable+0x1d8>)
 8006a70:	e001      	b.n	8006a76 <dcd_edpt_disable+0x186>
 8006a72:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
 8006a78:	015b      	lsls	r3, r3, #5
 8006a7a:	6978      	ldr	r0, [r7, #20]
 8006a7c:	4403      	add	r3, r0
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	601a      	str	r2, [r3, #0]
      while((out_ep[epnum].DOEPINT & USB_OTG_DOEPINT_EPDISD_Msk) == 0);
 8006a82:	bf00      	nop
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
 8006a86:	015b      	lsls	r3, r3, #5
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f003 0302 	and.w	r3, r3, #2
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d0f6      	beq.n	8006a84 <dcd_edpt_disable+0x194>
      out_ep[epnum].DOEPINT = USB_OTG_DOEPINT_EPDISD;
 8006a96:	7bfb      	ldrb	r3, [r7, #15]
 8006a98:	015b      	lsls	r3, r3, #5
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	609a      	str	r2, [r3, #8]
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	605a      	str	r2, [r3, #4]
}
 8006aae:	bf00      	nop
 8006ab0:	3724      	adds	r7, #36	; 0x24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	50000800 	.word	0x50000800
 8006ac0:	50000b00 	.word	0x50000b00
 8006ac4:	50000900 	.word	0x50000900
 8006ac8:	40200000 	.word	0x40200000

08006acc <dcd_edpt_stall>:
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
  }
}

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	460a      	mov	r2, r1
 8006ad6:	71fb      	strb	r3, [r7, #7]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	71bb      	strb	r3, [r7, #6]
  dcd_edpt_disable(rhport, ep_addr, true);
 8006adc:	79b9      	ldrb	r1, [r7, #6]
 8006ade:	79fb      	ldrb	r3, [r7, #7]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7ff ff04 	bl	80068f0 <dcd_edpt_disable>
}
 8006ae8:	bf00      	nop
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	4603      	mov	r3, r0
 8006af8:	460a      	mov	r2, r1
 8006afa:	71fb      	strb	r3, [r7, #7]
 8006afc:	4613      	mov	r3, r2
 8006afe:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8006b00:	4b25      	ldr	r3, [pc, #148]	; (8006b98 <dcd_edpt_clear_stall+0xa8>)
 8006b02:	617b      	str	r3, [r7, #20]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8006b04:	4b25      	ldr	r3, [pc, #148]	; (8006b9c <dcd_edpt_clear_stall+0xac>)
 8006b06:	613b      	str	r3, [r7, #16]
 8006b08:	79bb      	ldrb	r3, [r7, #6]
 8006b0a:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006b0c:	7b3b      	ldrb	r3, [r7, #12]
 8006b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b12:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006b14:	73fb      	strb	r3, [r7, #15]
 8006b16:	79bb      	ldrb	r3, [r7, #6]
 8006b18:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006b1a:	7b7b      	ldrb	r3, [r7, #13]
 8006b1c:	09db      	lsrs	r3, r3, #7
 8006b1e:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006b20:	73bb      	strb	r3, [r7, #14]

  // Clear stall and reset data toggle
  if(dir == TUSB_DIR_IN) {
 8006b22:	7bbb      	ldrb	r3, [r7, #14]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d118      	bne.n	8006b5a <dcd_edpt_clear_stall+0x6a>
    in_ep[epnum].DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
 8006b2a:	015b      	lsls	r3, r3, #5
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	4413      	add	r3, r2
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
 8006b34:	015b      	lsls	r3, r3, #5
 8006b36:	6939      	ldr	r1, [r7, #16]
 8006b38:	440b      	add	r3, r1
 8006b3a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8006b3e:	601a      	str	r2, [r3, #0]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	015b      	lsls	r3, r3, #5
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	4413      	add	r3, r2
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	7bfb      	ldrb	r3, [r7, #15]
 8006b4c:	015b      	lsls	r3, r3, #5
 8006b4e:	6939      	ldr	r1, [r7, #16]
 8006b50:	440b      	add	r3, r1
 8006b52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006b56:	601a      	str	r2, [r3, #0]
  } else {
    out_ep[epnum].DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
  }
}
 8006b58:	e017      	b.n	8006b8a <dcd_edpt_clear_stall+0x9a>
    out_ep[epnum].DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
 8006b5c:	015b      	lsls	r3, r3, #5
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	4413      	add	r3, r2
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
 8006b66:	015b      	lsls	r3, r3, #5
 8006b68:	6979      	ldr	r1, [r7, #20]
 8006b6a:	440b      	add	r3, r1
 8006b6c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8006b70:	601a      	str	r2, [r3, #0]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
 8006b74:	015b      	lsls	r3, r3, #5
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	4413      	add	r3, r2
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	7bfb      	ldrb	r3, [r7, #15]
 8006b7e:	015b      	lsls	r3, r3, #5
 8006b80:	6979      	ldr	r1, [r7, #20]
 8006b82:	440b      	add	r3, r1
 8006b84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006b88:	601a      	str	r2, [r3, #0]
}
 8006b8a:	bf00      	nop
 8006b8c:	371c      	adds	r7, #28
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	50000b00 	.word	0x50000b00
 8006b9c:	50000900 	.word	0x50000900

08006ba0 <read_fifo_packet>:

/*------------------------------------------------------------------*/

// Read a single data packet from receive FIFO
static void read_fifo_packet(uint8_t rhport, uint8_t * dst, uint16_t len)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b089      	sub	sp, #36	; 0x24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	6039      	str	r1, [r7, #0]
 8006baa:	71fb      	strb	r3, [r7, #7]
 8006bac:	4613      	mov	r3, r2
 8006bae:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  usb_fifo_t rx_fifo = FIFO_BASE(rhport, 0);
 8006bb0:	4b28      	ldr	r3, [pc, #160]	; (8006c54 <read_fifo_packet+0xb4>)
 8006bb2:	61bb      	str	r3, [r7, #24]

  // Reading full available 32 bit words from fifo
  uint16_t full_words = len >> 2;
 8006bb4:	88bb      	ldrh	r3, [r7, #4]
 8006bb6:	089b      	lsrs	r3, r3, #2
 8006bb8:	82fb      	strh	r3, [r7, #22]
  for(uint16_t i = 0; i < full_words; i++) {
 8006bba:	2300      	movs	r3, #0
 8006bbc:	83fb      	strh	r3, [r7, #30]
 8006bbe:	e01e      	b.n	8006bfe <read_fifo_packet+0x5e>
    uint32_t tmp = *rx_fifo;
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	60fb      	str	r3, [r7, #12]
    dst[0] = tmp & 0x000000FF;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	701a      	strb	r2, [r3, #0]
    dst[1] = (tmp & 0x0000FF00) >> 8;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	0a1a      	lsrs	r2, r3, #8
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	b2d2      	uxtb	r2, r2
 8006bd8:	701a      	strb	r2, [r3, #0]
    dst[2] = (tmp & 0x00FF0000) >> 16;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	0c1a      	lsrs	r2, r3, #16
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	3302      	adds	r3, #2
 8006be2:	b2d2      	uxtb	r2, r2
 8006be4:	701a      	strb	r2, [r3, #0]
    dst[3] = (tmp & 0xFF000000) >> 24;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	0e1a      	lsrs	r2, r3, #24
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	3303      	adds	r3, #3
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	701a      	strb	r2, [r3, #0]
    dst += 4;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	603b      	str	r3, [r7, #0]
  for(uint16_t i = 0; i < full_words; i++) {
 8006bf8:	8bfb      	ldrh	r3, [r7, #30]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	83fb      	strh	r3, [r7, #30]
 8006bfe:	8bfa      	ldrh	r2, [r7, #30]
 8006c00:	8afb      	ldrh	r3, [r7, #22]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d3dc      	bcc.n	8006bc0 <read_fifo_packet+0x20>
  }

  // Read the remaining 1-3 bytes from fifo
  uint8_t bytes_rem = len & 0x03;
 8006c06:	88bb      	ldrh	r3, [r7, #4]
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	f003 0303 	and.w	r3, r3, #3
 8006c0e:	757b      	strb	r3, [r7, #21]
  if(bytes_rem != 0) {
 8006c10:	7d7b      	ldrb	r3, [r7, #21]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d018      	beq.n	8006c48 <read_fifo_packet+0xa8>
    uint32_t tmp = *rx_fifo;
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	613b      	str	r3, [r7, #16]
    dst[0] = tmp & 0x000000FF;
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	b2da      	uxtb	r2, r3
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	701a      	strb	r2, [r3, #0]
    if(bytes_rem > 1) {
 8006c24:	7d7b      	ldrb	r3, [r7, #21]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d905      	bls.n	8006c36 <read_fifo_packet+0x96>
      dst[1] = (tmp & 0x0000FF00) >> 8;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	0a1a      	lsrs	r2, r3, #8
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	3301      	adds	r3, #1
 8006c32:	b2d2      	uxtb	r2, r2
 8006c34:	701a      	strb	r2, [r3, #0]
    }
    if(bytes_rem > 2) {
 8006c36:	7d7b      	ldrb	r3, [r7, #21]
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d905      	bls.n	8006c48 <read_fifo_packet+0xa8>
      dst[2] = (tmp & 0x00FF0000) >> 16;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	0c1a      	lsrs	r2, r3, #16
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	3302      	adds	r3, #2
 8006c44:	b2d2      	uxtb	r2, r2
 8006c46:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8006c48:	bf00      	nop
 8006c4a:	3724      	adds	r7, #36	; 0x24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	50001000 	.word	0x50001000

08006c58 <write_fifo_packet>:

// Write a single data packet to EPIN FIFO
static void write_fifo_packet(uint8_t rhport, uint8_t fifo_num, uint8_t * src, uint16_t len)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b087      	sub	sp, #28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	603a      	str	r2, [r7, #0]
 8006c60:	461a      	mov	r2, r3
 8006c62:	4603      	mov	r3, r0
 8006c64:	71fb      	strb	r3, [r7, #7]
 8006c66:	460b      	mov	r3, r1
 8006c68:	71bb      	strb	r3, [r7, #6]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  usb_fifo_t tx_fifo = FIFO_BASE(rhport, fifo_num);
 8006c6e:	79bb      	ldrb	r3, [r7, #6]
 8006c70:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 8006c74:	3301      	adds	r3, #1
 8006c76:	031b      	lsls	r3, r3, #12
 8006c78:	60fb      	str	r3, [r7, #12]

  // Pushing full available 32 bit words to fifo
  uint16_t full_words = len >> 2;
 8006c7a:	88bb      	ldrh	r3, [r7, #4]
 8006c7c:	089b      	lsrs	r3, r3, #2
 8006c7e:	817b      	strh	r3, [r7, #10]
  for(uint16_t i = 0; i < full_words; i++){
 8006c80:	2300      	movs	r3, #0
 8006c82:	82fb      	strh	r3, [r7, #22]
 8006c84:	e019      	b.n	8006cba <write_fifo_packet+0x62>
    *tx_fifo = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	3303      	adds	r3, #3
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	061a      	lsls	r2, r3, #24
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	3302      	adds	r3, #2
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	041b      	lsls	r3, r3, #16
 8006c96:	431a      	orrs	r2, r3
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	021b      	lsls	r3, r3, #8
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	7812      	ldrb	r2, [r2, #0]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	461a      	mov	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	601a      	str	r2, [r3, #0]
    src += 4;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	603b      	str	r3, [r7, #0]
  for(uint16_t i = 0; i < full_words; i++){
 8006cb4:	8afb      	ldrh	r3, [r7, #22]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	82fb      	strh	r3, [r7, #22]
 8006cba:	8afa      	ldrh	r2, [r7, #22]
 8006cbc:	897b      	ldrh	r3, [r7, #10]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d3e1      	bcc.n	8006c86 <write_fifo_packet+0x2e>
  }

  // Write the remaining 1-3 bytes into fifo
  uint8_t bytes_rem = len & 0x03;
 8006cc2:	88bb      	ldrh	r3, [r7, #4]
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	f003 0303 	and.w	r3, r3, #3
 8006cca:	727b      	strb	r3, [r7, #9]
  if(bytes_rem){
 8006ccc:	7a7b      	ldrb	r3, [r7, #9]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d020      	beq.n	8006d14 <write_fifo_packet+0xbc>
    uint32_t tmp_word = 0;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	613b      	str	r3, [r7, #16]
    tmp_word |= src[0];
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	613b      	str	r3, [r7, #16]
    if(bytes_rem > 1){
 8006ce2:	7a7b      	ldrb	r3, [r7, #9]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d907      	bls.n	8006cf8 <write_fifo_packet+0xa0>
      tmp_word |= src[1] << 8;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	3301      	adds	r3, #1
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	021b      	lsls	r3, r3, #8
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	613b      	str	r3, [r7, #16]
    }
    if(bytes_rem > 2){
 8006cf8:	7a7b      	ldrb	r3, [r7, #9]
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d907      	bls.n	8006d0e <write_fifo_packet+0xb6>
      tmp_word |= src[2] << 16;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	3302      	adds	r3, #2
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	041b      	lsls	r3, r3, #16
 8006d06:	461a      	mov	r2, r3
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	613b      	str	r3, [r7, #16]
    }
    *tx_fifo = tmp_word;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	601a      	str	r2, [r3, #0]
  }
}
 8006d14:	bf00      	nop
 8006d16:	371c      	adds	r7, #28
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <handle_rxflvl_ints>:

static void handle_rxflvl_ints(uint8_t rhport, USB_OTG_OUTEndpointTypeDef * out_ep) {
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b088      	sub	sp, #32
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	4603      	mov	r3, r0
 8006d28:	6039      	str	r1, [r7, #0]
 8006d2a:	71fb      	strb	r3, [r7, #7]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8006d2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006d30:	61fb      	str	r3, [r7, #28]
  usb_fifo_t rx_fifo = FIFO_BASE(rhport, 0);
 8006d32:	4b49      	ldr	r3, [pc, #292]	; (8006e58 <handle_rxflvl_ints+0x138>)
 8006d34:	61bb      	str	r3, [r7, #24]

  // Pop control word off FIFO
  uint32_t ctl_word = usb_otg->GRXSTSP;
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	617b      	str	r3, [r7, #20]
  uint8_t pktsts = (ctl_word & USB_OTG_GRXSTSP_PKTSTS_Msk) >> USB_OTG_GRXSTSP_PKTSTS_Pos;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	0c5b      	lsrs	r3, r3, #17
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	f003 030f 	and.w	r3, r3, #15
 8006d46:	74fb      	strb	r3, [r7, #19]
  uint8_t epnum = (ctl_word &  USB_OTG_GRXSTSP_EPNUM_Msk) >>  USB_OTG_GRXSTSP_EPNUM_Pos;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	f003 030f 	and.w	r3, r3, #15
 8006d50:	74bb      	strb	r3, [r7, #18]
  uint16_t bcnt = (ctl_word & USB_OTG_GRXSTSP_BCNT_Msk) >> USB_OTG_GRXSTSP_BCNT_Pos;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	091b      	lsrs	r3, r3, #4
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d5c:	823b      	strh	r3, [r7, #16]

  switch(pktsts) {
 8006d5e:	7cfb      	ldrb	r3, [r7, #19]
 8006d60:	3b01      	subs	r3, #1
 8006d62:	2b05      	cmp	r3, #5
 8006d64:	d864      	bhi.n	8006e30 <handle_rxflvl_ints+0x110>
 8006d66:	a201      	add	r2, pc, #4	; (adr r2, 8006d6c <handle_rxflvl_ints+0x4c>)
 8006d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6c:	08006e45 	.word	0x08006e45
 8006d70:	08006d85 	.word	0x08006d85
 8006d74:	08006e45 	.word	0x08006e45
 8006d78:	08006e05 	.word	0x08006e05
 8006d7c:	08006e31 	.word	0x08006e31
 8006d80:	08006e1f 	.word	0x08006e1f
    case 0x01: // Global OUT NAK (Interrupt)
      break;

    case 0x02: // Out packet recvd
    {
      xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8006d84:	7cbb      	ldrb	r3, [r7, #18]
 8006d86:	015b      	lsls	r3, r3, #5
 8006d88:	4a34      	ldr	r2, [pc, #208]	; (8006e5c <handle_rxflvl_ints+0x13c>)
 8006d8a:	4413      	add	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]

      // Read packet off RxFIFO
      if (xfer->ff)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d007      	beq.n	8006da6 <handle_rxflvl_ints+0x86>
      {
        // Ring buffer
        tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void *)(uintptr_t) rx_fifo, bcnt);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	8a3a      	ldrh	r2, [r7, #16]
 8006d9c:	69b9      	ldr	r1, [r7, #24]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fd fac1 	bl	8004326 <tu_fifo_write_n_const_addr_full_words>
 8006da4:	e00c      	b.n	8006dc0 <handle_rxflvl_ints+0xa0>
      }
      else
      {
        // Linear buffer
        read_fifo_packet(rhport, xfer->buffer, bcnt);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6819      	ldr	r1, [r3, #0]
 8006daa:	8a3a      	ldrh	r2, [r7, #16]
 8006dac:	79fb      	ldrb	r3, [r7, #7]
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7ff fef6 	bl	8006ba0 <read_fifo_packet>

        // Increment pointer to xfer data
        xfer->buffer += bcnt;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	8a3b      	ldrh	r3, [r7, #16]
 8006dba:	441a      	add	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	601a      	str	r2, [r3, #0]
      }

      // Truncate transfer length in case of short packet
      if(bcnt < xfer->max_size) {
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	895b      	ldrh	r3, [r3, #10]
 8006dc4:	8a3a      	ldrh	r2, [r7, #16]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d23e      	bcs.n	8006e48 <handle_rxflvl_ints+0x128>
        xfer->total_len -= (out_ep[epnum].DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DOEPTSIZ_XFRSIZ_Pos;
 8006dca:	7cbb      	ldrb	r3, [r7, #18]
 8006dcc:	015b      	lsls	r3, r3, #5
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	f3c3 0112 	ubfx	r1, r3, #0, #19
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	891a      	ldrh	r2, [r3, #8]
 8006ddc:	b28b      	uxth	r3, r1
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	811a      	strh	r2, [r3, #8]
        if(epnum == 0) {
 8006de6:	7cbb      	ldrb	r3, [r7, #18]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d12d      	bne.n	8006e48 <handle_rxflvl_ints+0x128>
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	891a      	ldrh	r2, [r3, #8]
 8006df0:	4b1b      	ldr	r3, [pc, #108]	; (8006e60 <handle_rxflvl_ints+0x140>)
 8006df2:	881b      	ldrh	r3, [r3, #0]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	811a      	strh	r2, [r3, #8]
          ep0_pending[TUSB_DIR_OUT] = 0;
 8006dfc:	4b18      	ldr	r3, [pc, #96]	; (8006e60 <handle_rxflvl_ints+0x140>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	801a      	strh	r2, [r3, #0]
        }
      }
    }
    break;
 8006e02:	e021      	b.n	8006e48 <handle_rxflvl_ints+0x128>

    case 0x03: // Out packet done (Interrupt)
      break;

    case 0x04: // Setup packet done (Interrupt)
      out_ep[epnum].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 8006e04:	7cbb      	ldrb	r3, [r7, #18]
 8006e06:	015b      	lsls	r3, r3, #5
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	691a      	ldr	r2, [r3, #16]
 8006e0e:	7cbb      	ldrb	r3, [r7, #18]
 8006e10:	015b      	lsls	r3, r3, #5
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	440b      	add	r3, r1
 8006e16:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8006e1a:	611a      	str	r2, [r3, #16]
      break;
 8006e1c:	e017      	b.n	8006e4e <handle_rxflvl_ints+0x12e>

    case 0x06: // Setup packet recvd
      // We can receive up to three setup packets in succession, but
      // only the last one is valid.
      _setup_packet[0] = (* rx_fifo);
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a10      	ldr	r2, [pc, #64]	; (8006e64 <handle_rxflvl_ints+0x144>)
 8006e24:	6013      	str	r3, [r2, #0]
      _setup_packet[1] = (* rx_fifo);
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a0e      	ldr	r2, [pc, #56]	; (8006e64 <handle_rxflvl_ints+0x144>)
 8006e2c:	6053      	str	r3, [r2, #4]
      break;
 8006e2e:	e00e      	b.n	8006e4e <handle_rxflvl_ints+0x12e>

    default: // Invalid
      TU_BREAKPOINT();
 8006e30:	4b0d      	ldr	r3, [pc, #52]	; (8006e68 <handle_rxflvl_ints+0x148>)
 8006e32:	60bb      	str	r3, [r7, #8]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d005      	beq.n	8006e4c <handle_rxflvl_ints+0x12c>
 8006e40:	be00      	bkpt	0x0000
      break;
 8006e42:	e003      	b.n	8006e4c <handle_rxflvl_ints+0x12c>
      break;
 8006e44:	bf00      	nop
 8006e46:	e002      	b.n	8006e4e <handle_rxflvl_ints+0x12e>
    break;
 8006e48:	bf00      	nop
 8006e4a:	e000      	b.n	8006e4e <handle_rxflvl_ints+0x12e>
      break;
 8006e4c:	bf00      	nop
  }
}
 8006e4e:	bf00      	nop
 8006e50:	3720      	adds	r7, #32
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	50001000 	.word	0x50001000
 8006e5c:	200030d0 	.word	0x200030d0
 8006e60:	20003150 	.word	0x20003150
 8006e64:	200030c8 	.word	0x200030c8
 8006e68:	e000edf0 	.word	0xe000edf0

08006e6c <handle_epout_ints>:

static void handle_epout_ints(uint8_t rhport, USB_OTG_DeviceTypeDef * dev, USB_OTG_OUTEndpointTypeDef * out_ep) {
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b094      	sub	sp, #80	; 0x50
 8006e70:	af02      	add	r7, sp, #8
 8006e72:	4603      	mov	r3, r0
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
 8006e78:	73fb      	strb	r3, [r7, #15]
  // DAINT for a given EP clears when DOEPINTx is cleared.
  // OEPINT will be cleared when DAINT's out bits are cleared.
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006e80:	e09e      	b.n	8006fc0 <handle_epout_ints+0x154>
    xfer_ctl_t * xfer = XFER_CTL_BASE(n, TUSB_DIR_OUT);
 8006e82:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006e86:	015b      	lsls	r3, r3, #5
 8006e88:	4a52      	ldr	r2, [pc, #328]	; (8006fd4 <handle_epout_ints+0x168>)
 8006e8a:	4413      	add	r3, r2
 8006e8c:	643b      	str	r3, [r7, #64]	; 0x40

    if(dev->DAINT & (1 << (USB_OTG_DAINT_OEPINT_Pos + n))) {
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8006e96:	3210      	adds	r2, #16
 8006e98:	2101      	movs	r1, #1
 8006e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 8088 	beq.w	8006fb6 <handle_epout_ints+0x14a>
      // SETUP packet Setup Phase done.
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_STUP) {
 8006ea6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006eaa:	015b      	lsls	r3, r3, #5
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	4413      	add	r3, r2
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f003 0308 	and.w	r3, r3, #8
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d028      	beq.n	8006f0c <handle_epout_ints+0xa0>
        out_ep[n].DOEPINT =  USB_OTG_DOEPINT_STUP;
 8006eba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006ebe:	015b      	lsls	r3, r3, #5
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	2208      	movs	r2, #8
 8006ec6:	609a      	str	r2, [r3, #8]
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
 8006eca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006ece:	4b42      	ldr	r3, [pc, #264]	; (8006fd8 <handle_epout_ints+0x16c>)
 8006ed0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8006ed8:	f107 0314 	add.w	r3, r7, #20
 8006edc:	2200      	movs	r2, #0
 8006ede:	601a      	str	r2, [r3, #0]
 8006ee0:	605a      	str	r2, [r3, #4]
 8006ee2:	609a      	str	r2, [r3, #8]
 8006ee4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006ee8:	753b      	strb	r3, [r7, #20]
 8006eea:	2306      	movs	r3, #6
 8006eec:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, 8);
 8006eee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ef0:	f107 0318 	add.w	r3, r7, #24
 8006ef4:	6810      	ldr	r0, [r2, #0]
 8006ef6:	6851      	ldr	r1, [r2, #4]
 8006ef8:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 8006efa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8006efe:	f107 0314 	add.w	r3, r7, #20
 8006f02:	4611      	mov	r1, r2
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7fe f95f 	bl	80051c8 <dcd_event_handler>
}
 8006f0a:	bf00      	nop
        dcd_event_setup_received(rhport, (uint8_t*) &_setup_packet[0], true);
      }

      // OUT XFER complete
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_XFRC) {
 8006f0c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006f10:	015b      	lsls	r3, r3, #5
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	4413      	add	r3, r2
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d04a      	beq.n	8006fb6 <handle_epout_ints+0x14a>
        out_ep[n].DOEPINT = USB_OTG_DOEPINT_XFRC;
 8006f20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006f24:	015b      	lsls	r3, r3, #5
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	4413      	add	r3, r2
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if((n == 0) && ep0_pending[TUSB_DIR_OUT]) {
 8006f2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10e      	bne.n	8006f54 <handle_epout_ints+0xe8>
 8006f36:	4b29      	ldr	r3, [pc, #164]	; (8006fdc <handle_epout_ints+0x170>)
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <handle_epout_ints+0xe8>
          // Schedule another packet to be received.
          edpt_schedule_packets(rhport, n, TUSB_DIR_OUT, 1, ep0_pending[TUSB_DIR_OUT]);
 8006f3e:	4b27      	ldr	r3, [pc, #156]	; (8006fdc <handle_epout_ints+0x170>)
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8006f46:	7bf8      	ldrb	r0, [r7, #15]
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f7ff f953 	bl	80061f8 <edpt_schedule_packets>
 8006f52:	e030      	b.n	8006fb6 <handle_epout_ints+0x14a>
        } else {
          dcd_event_xfer_complete(rhport, n, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8006f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f56:	891b      	ldrh	r3, [r3, #8]
 8006f58:	461a      	mov	r2, r3
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
 8006f5c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8006f60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006f64:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8006f68:	633a      	str	r2, [r7, #48]	; 0x30
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006f70:	2301      	movs	r3, #1
 8006f72:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8006f76:	f107 0320 	add.w	r3, r7, #32
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	605a      	str	r2, [r3, #4]
 8006f80:	609a      	str	r2, [r3, #8]
 8006f82:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006f86:	f887 3020 	strb.w	r3, [r7, #32]
 8006f8a:	2307      	movs	r3, #7
 8006f8c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  event.xfer_complete.ep_addr = ep_addr;
 8006f90:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006f94:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  event.xfer_complete.len     = xferred_bytes;
 8006f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  event.xfer_complete.result  = result;
 8006f9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fa0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dcd_event_handler(&event, in_isr);
 8006fa4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8006fa8:	f107 0320 	add.w	r3, r7, #32
 8006fac:	4611      	mov	r1, r2
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fe f90a 	bl	80051c8 <dcd_event_handler>
}
 8006fb4:	bf00      	nop
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8006fb6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006fba:	3301      	adds	r3, #1
 8006fbc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006fc0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	f67f af5c 	bls.w	8006e82 <handle_epout_ints+0x16>
        }
      }
    }
  }
}
 8006fca:	bf00      	nop
 8006fcc:	bf00      	nop
 8006fce:	3748      	adds	r7, #72	; 0x48
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	200030d0 	.word	0x200030d0
 8006fd8:	200030c8 	.word	0x200030c8
 8006fdc:	20003150 	.word	0x20003150

08006fe0 <handle_epin_ints>:

static void handle_epin_ints(uint8_t rhport, USB_OTG_DeviceTypeDef * dev, USB_OTG_INEndpointTypeDef * in_ep) {
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b092      	sub	sp, #72	; 0x48
 8006fe4:	af02      	add	r7, sp, #8
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
 8006fec:	73fb      	strb	r3, [r7, #15]
  // DAINT for a given EP clears when DIEPINTx is cleared.
  // IEPINT will be cleared when DAINT's out bits are cleared.
  for ( uint8_t n = 0; n < EP_MAX; n++ )
 8006fee:	2300      	movs	r3, #0
 8006ff0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006ff4:	e0ec      	b.n	80071d0 <handle_epin_ints+0x1f0>
  {
    xfer_ctl_t *xfer = XFER_CTL_BASE(n, TUSB_DIR_IN);
 8006ff6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006ffa:	015b      	lsls	r3, r3, #5
 8006ffc:	3310      	adds	r3, #16
 8006ffe:	4a79      	ldr	r2, [pc, #484]	; (80071e4 <handle_epin_ints+0x204>)
 8007000:	4413      	add	r3, r2
 8007002:	63bb      	str	r3, [r7, #56]	; 0x38

    if ( dev->DAINT & (1 << (USB_OTG_DAINT_IEPINT_Pos + n)) )
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800700c:	2101      	movs	r1, #1
 800700e:	fa01 f202 	lsl.w	r2, r1, r2
 8007012:	4013      	ands	r3, r2
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 80d6 	beq.w	80071c6 <handle_epin_ints+0x1e6>
    {
      // IN XFER complete (entire xfer).
      if ( in_ep[n].DIEPINT & USB_OTG_DIEPINT_XFRC )
 800701a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800701e:	015b      	lsls	r3, r3, #5
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	4413      	add	r3, r2
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	d04a      	beq.n	80070c4 <handle_epin_ints+0xe4>
      {
        in_ep[n].DIEPINT = USB_OTG_DIEPINT_XFRC;
 800702e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007032:	015b      	lsls	r3, r3, #5
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	4413      	add	r3, r2
 8007038:	2201      	movs	r2, #1
 800703a:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if((n == 0) && ep0_pending[TUSB_DIR_IN]) {
 800703c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10e      	bne.n	8007062 <handle_epin_ints+0x82>
 8007044:	4b68      	ldr	r3, [pc, #416]	; (80071e8 <handle_epin_ints+0x208>)
 8007046:	885b      	ldrh	r3, [r3, #2]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00a      	beq.n	8007062 <handle_epin_ints+0x82>
          // Schedule another packet to be transmitted.
          edpt_schedule_packets(rhport, n, TUSB_DIR_IN, 1, ep0_pending[TUSB_DIR_IN]);
 800704c:	4b66      	ldr	r3, [pc, #408]	; (80071e8 <handle_epin_ints+0x208>)
 800704e:	885b      	ldrh	r3, [r3, #2]
 8007050:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8007054:	7bf8      	ldrb	r0, [r7, #15]
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	2301      	movs	r3, #1
 800705a:	2201      	movs	r2, #1
 800705c:	f7ff f8cc 	bl	80061f8 <edpt_schedule_packets>
 8007060:	e030      	b.n	80070c4 <handle_epin_ints+0xe4>
        } else {
          dcd_event_xfer_complete(rhport, n | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8007062:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007066:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800706a:	b2d9      	uxtb	r1, r3
 800706c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706e:	891b      	ldrh	r3, [r3, #8]
 8007070:	461a      	mov	r2, r3
 8007072:	7bfb      	ldrb	r3, [r7, #15]
 8007074:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007078:	460b      	mov	r3, r1
 800707a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800707e:	627a      	str	r2, [r7, #36]	; 0x24
 8007080:	2300      	movs	r3, #0
 8007082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007086:	2301      	movs	r3, #1
 8007088:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800708c:	f107 0310 	add.w	r3, r7, #16
 8007090:	2200      	movs	r2, #0
 8007092:	601a      	str	r2, [r3, #0]
 8007094:	605a      	str	r2, [r3, #4]
 8007096:	609a      	str	r2, [r3, #8]
 8007098:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800709c:	743b      	strb	r3, [r7, #16]
 800709e:	2307      	movs	r3, #7
 80070a0:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 80070a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80070a6:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 80070ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070b0:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 80070b2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80070b6:	f107 0310 	add.w	r3, r7, #16
 80070ba:	4611      	mov	r1, r2
 80070bc:	4618      	mov	r0, r3
 80070be:	f7fe f883 	bl	80051c8 <dcd_event_handler>
}
 80070c2:	bf00      	nop
        }
      }

      // XFER FIFO empty
      if ( (in_ep[n].DIEPINT & USB_OTG_DIEPINT_TXFE) && (dev->DIEPEMPMSK & (1 << n)) )
 80070c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80070c8:	015b      	lsls	r3, r3, #5
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	4413      	add	r3, r2
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d076      	beq.n	80071c6 <handle_epin_ints+0x1e6>
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070dc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80070e0:	2101      	movs	r1, #1
 80070e2:	fa01 f202 	lsl.w	r2, r1, r2
 80070e6:	4013      	ands	r3, r2
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d06c      	beq.n	80071c6 <handle_epin_ints+0x1e6>
        // DIEPINT's TXFE bit is read-only, software cannot clear it.
        // It will only be cleared by hardware when written bytes is more than
        // - 64 bytes or
        // - Half of TX FIFO size (configured by DIEPTXF)

        uint16_t remaining_packets = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_PKTCNT_Msk) >> USB_OTG_DIEPTSIZ_PKTCNT_Pos;
 80070ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80070f0:	015b      	lsls	r3, r3, #5
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	4413      	add	r3, r2
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	0cdb      	lsrs	r3, r3, #19
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007100:	86fb      	strh	r3, [r7, #54]	; 0x36

        // Process every single packet (only whole packets can be written to fifo)
        for(uint16_t i = 0; i < remaining_packets; i++)
 8007102:	2300      	movs	r3, #0
 8007104:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007106:	e043      	b.n	8007190 <handle_epin_ints+0x1b0>
        {
          uint16_t const remaining_bytes = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos;
 8007108:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800710c:	015b      	lsls	r3, r3, #5
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	4413      	add	r3, r2
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	86bb      	strh	r3, [r7, #52]	; 0x34

          // Packet can not be larger than ep max size
          uint16_t const packet_size = tu_min16(remaining_bytes, xfer->max_size);
 8007116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007118:	895a      	ldrh	r2, [r3, #10]
 800711a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800711c:	843b      	strh	r3, [r7, #32]
 800711e:	4613      	mov	r3, r2
 8007120:	83fb      	strh	r3, [r7, #30]
 8007122:	8c3a      	ldrh	r2, [r7, #32]
 8007124:	8bfb      	ldrh	r3, [r7, #30]
 8007126:	4293      	cmp	r3, r2
 8007128:	bf28      	it	cs
 800712a:	4613      	movcs	r3, r2
 800712c:	b29b      	uxth	r3, r3
 800712e:	867b      	strh	r3, [r7, #50]	; 0x32

          // It's only possible to write full packets into FIFO. Therefore DTXFSTS register of current
          // EP has to be checked if the buffer can take another WHOLE packet
          if(packet_size > ((in_ep[n].DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 8007130:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8007132:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007136:	015b      	lsls	r3, r3, #5
 8007138:	6879      	ldr	r1, [r7, #4]
 800713a:	440b      	add	r3, r1
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	0099      	lsls	r1, r3, #2
 8007140:	4b2a      	ldr	r3, [pc, #168]	; (80071ec <handle_epin_ints+0x20c>)
 8007142:	400b      	ands	r3, r1
 8007144:	429a      	cmp	r2, r3
 8007146:	d828      	bhi.n	800719a <handle_epin_ints+0x1ba>

          // Push packet to Tx-FIFO
          if (xfer->ff)
 8007148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00e      	beq.n	800716e <handle_epin_ints+0x18e>
          {
            usb_fifo_t tx_fifo = FIFO_BASE(rhport, n);
 8007150:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007154:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 8007158:	3301      	adds	r3, #1
 800715a:	031b      	lsls	r3, r3, #12
 800715c:	62fb      	str	r3, [r7, #44]	; 0x2c
            tu_fifo_read_n_const_addr_full_words(xfer->ff, (void *)(uintptr_t) tx_fifo, packet_size);
 800715e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8007164:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007166:	4618      	mov	r0, r3
 8007168:	f7fd f87e 	bl	8004268 <tu_fifo_read_n_const_addr_full_words>
 800716c:	e00d      	b.n	800718a <handle_epin_ints+0x1aa>
          }
          else
          {
            write_fifo_packet(rhport, n, xfer->buffer, packet_size);
 800716e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007174:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8007178:	7bf8      	ldrb	r0, [r7, #15]
 800717a:	f7ff fd6d 	bl	8006c58 <write_fifo_packet>

            // Increment pointer to xfer data
            xfer->buffer += packet_size;
 800717e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007184:	441a      	add	r2, r3
 8007186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007188:	601a      	str	r2, [r3, #0]
        for(uint16_t i = 0; i < remaining_packets; i++)
 800718a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800718c:	3301      	adds	r3, #1
 800718e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007190:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8007192:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007194:	429a      	cmp	r2, r3
 8007196:	d3b7      	bcc.n	8007108 <handle_epin_ints+0x128>
 8007198:	e000      	b.n	800719c <handle_epin_ints+0x1bc>
          if(packet_size > ((in_ep[n].DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 800719a:	bf00      	nop
          }
        }

        // Turn off TXFE if all bytes are written.
        if (((in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos) == 0)
 800719c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80071a0:	015b      	lsls	r3, r3, #5
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	4413      	add	r3, r2
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10a      	bne.n	80071c6 <handle_epin_ints+0x1e6>
        {
          dev->DIEPEMPMSK &= ~(1 << n);
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80071b8:	2101      	movs	r1, #1
 80071ba:	fa01 f202 	lsl.w	r2, r1, r2
 80071be:	43d2      	mvns	r2, r2
 80071c0:	401a      	ands	r2, r3
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	635a      	str	r2, [r3, #52]	; 0x34
  for ( uint8_t n = 0; n < EP_MAX; n++ )
 80071c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80071ca:	3301      	adds	r3, #1
 80071cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80071d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80071d4:	2b03      	cmp	r3, #3
 80071d6:	f67f af0e 	bls.w	8006ff6 <handle_epin_ints+0x16>
        }
      }
    }
  }
}
 80071da:	bf00      	nop
 80071dc:	bf00      	nop
 80071de:	3740      	adds	r7, #64	; 0x40
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	200030d0 	.word	0x200030d0
 80071e8:	20003150 	.word	0x20003150
 80071ec:	0003fffc 	.word	0x0003fffc

080071f0 <dcd_int_handler>:

void dcd_int_handler(uint8_t rhport)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b09c      	sub	sp, #112	; 0x70
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	4603      	mov	r3, r0
 80071f8:	71fb      	strb	r3, [r7, #7]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 80071fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80071fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8007200:	4b9e      	ldr	r3, [pc, #632]	; (800747c <dcd_int_handler+0x28c>)
 8007202:	66bb      	str	r3, [r7, #104]	; 0x68
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8007204:	4b9e      	ldr	r3, [pc, #632]	; (8007480 <dcd_int_handler+0x290>)
 8007206:	667b      	str	r3, [r7, #100]	; 0x64
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8007208:	4b9e      	ldr	r3, [pc, #632]	; (8007484 <dcd_int_handler+0x294>)
 800720a:	663b      	str	r3, [r7, #96]	; 0x60

  uint32_t const int_status = usb_otg->GINTSTS & usb_otg->GINTMSK;
 800720c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800720e:	695a      	ldr	r2, [r3, #20]
 8007210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	4013      	ands	r3, r2
 8007216:	65fb      	str	r3, [r7, #92]	; 0x5c

  if(int_status & USB_OTG_GINTSTS_USBRST)
 8007218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800721a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d007      	beq.n	8007232 <dcd_int_handler+0x42>
  {
    // USBRST is start of reset.
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBRST;
 8007222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007224:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007228:	615a      	str	r2, [r3, #20]
    bus_reset(rhport);
 800722a:	79fb      	ldrb	r3, [r7, #7]
 800722c:	4618      	mov	r0, r3
 800722e:	f7fe fea3 	bl	8005f78 <bus_reset>
  }

  if(int_status & USB_OTG_GINTSTS_ENUMDNE)
 8007232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007234:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d031      	beq.n	80072a0 <dcd_int_handler+0xb0>
  {
    // ENUMDNE is the end of reset where speed of the link is detected

    usb_otg->GINTSTS = USB_OTG_GINTSTS_ENUMDNE;
 800723c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800723e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007242:	615a      	str	r2, [r3, #20]

    tusb_speed_t const speed = get_speed(rhport);
 8007244:	79fb      	ldrb	r3, [r7, #7]
 8007246:	4618      	mov	r0, r3
 8007248:	f7fe ff8e 	bl	8006168 <get_speed>
 800724c:	4603      	mov	r3, r0
 800724e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

    set_turnaround(usb_otg, speed);
 8007252:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007256:	4619      	mov	r1, r3
 8007258:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800725a:	f7fe ff03 	bl	8006064 <set_turnaround>
 800725e:	79fb      	ldrb	r3, [r7, #7]
 8007260:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8007264:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007268:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800726c:	2301      	movs	r3, #1
 800726e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8007272:	f107 0314 	add.w	r3, r7, #20
 8007276:	2200      	movs	r2, #0
 8007278:	601a      	str	r2, [r3, #0]
 800727a:	605a      	str	r2, [r3, #4]
 800727c:	609a      	str	r2, [r3, #8]
 800727e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007282:	753b      	strb	r3, [r7, #20]
 8007284:	2301      	movs	r3, #1
 8007286:	757b      	strb	r3, [r7, #21]
  event.bus_reset.speed = speed;
 8007288:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800728c:	763b      	strb	r3, [r7, #24]
  dcd_event_handler(&event, in_isr);
 800728e:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8007292:	f107 0314 	add.w	r3, r7, #20
 8007296:	4611      	mov	r1, r2
 8007298:	4618      	mov	r0, r3
 800729a:	f7fd ff95 	bl	80051c8 <dcd_event_handler>
}
 800729e:	bf00      	nop
    dcd_event_bus_reset(rhport, speed, true);
  }

  if(int_status & USB_OTG_GINTSTS_USBSUSP)
 80072a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d023      	beq.n	80072f2 <dcd_int_handler+0x102>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBSUSP;
 80072aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072b0:	615a      	str	r2, [r3, #20]
 80072b2:	79fb      	ldrb	r3, [r7, #7]
 80072b4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 80072b8:	2304      	movs	r3, #4
 80072ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80072be:	2301      	movs	r3, #1
 80072c0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 80072c4:	f107 0320 	add.w	r3, r7, #32
 80072c8:	2200      	movs	r2, #0
 80072ca:	601a      	str	r2, [r3, #0]
 80072cc:	605a      	str	r2, [r3, #4]
 80072ce:	609a      	str	r2, [r3, #8]
 80072d0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80072d4:	f887 3020 	strb.w	r3, [r7, #32]
 80072d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80072dc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  dcd_event_handler(&event, in_isr);
 80072e0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80072e4:	f107 0320 	add.w	r3, r7, #32
 80072e8:	4611      	mov	r1, r2
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7fd ff6c 	bl	80051c8 <dcd_event_handler>
}
 80072f0:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if(int_status & USB_OTG_GINTSTS_WKUINT)
 80072f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	da23      	bge.n	8007340 <dcd_int_handler+0x150>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_WKUINT;
 80072f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80072fe:	615a      	str	r2, [r3, #20]
 8007300:	79fb      	ldrb	r3, [r7, #7]
 8007302:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8007306:	2305      	movs	r3, #5
 8007308:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 800730c:	2301      	movs	r3, #1
 800730e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8007312:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007316:	2200      	movs	r2, #0
 8007318:	601a      	str	r2, [r3, #0]
 800731a:	605a      	str	r2, [r3, #4]
 800731c:	609a      	str	r2, [r3, #8]
 800731e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007322:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8007326:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800732a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dcd_event_handler(&event, in_isr);
 800732e:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8007332:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007336:	4611      	mov	r1, r2
 8007338:	4618      	mov	r0, r3
 800733a:	f7fd ff45 	bl	80051c8 <dcd_event_handler>
}
 800733e:	bf00      	nop
  }

  // TODO check USB_OTG_GINTSTS_DISCINT for disconnect detection
  // if(int_status & USB_OTG_GINTSTS_DISCINT)

  if(int_status & USB_OTG_GINTSTS_OTGINT)
 8007340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007342:	f003 0304 	and.w	r3, r3, #4
 8007346:	2b00      	cmp	r3, #0
 8007348:	d028      	beq.n	800739c <dcd_int_handler+0x1ac>
  {
    // OTG INT bit is read-only
    uint32_t const otg_int = usb_otg->GOTGINT;
 800734a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	657b      	str	r3, [r7, #84]	; 0x54

    if (otg_int & USB_OTG_GOTGINT_SEDET)
 8007350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007352:	f003 0304 	and.w	r3, r3, #4
 8007356:	2b00      	cmp	r3, #0
 8007358:	d01d      	beq.n	8007396 <dcd_int_handler+0x1a6>
 800735a:	79fb      	ldrb	r3, [r7, #7]
 800735c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8007360:	2302      	movs	r3, #2
 8007362:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8007366:	2301      	movs	r3, #1
 8007368:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 800736c:	f107 0308 	add.w	r3, r7, #8
 8007370:	2200      	movs	r2, #0
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	605a      	str	r2, [r3, #4]
 8007376:	609a      	str	r2, [r3, #8]
 8007378:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800737c:	723b      	strb	r3, [r7, #8]
 800737e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8007382:	727b      	strb	r3, [r7, #9]
  dcd_event_handler(&event, in_isr);
 8007384:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8007388:	f107 0308 	add.w	r3, r7, #8
 800738c:	4611      	mov	r1, r2
 800738e:	4618      	mov	r0, r3
 8007390:	f7fd ff1a 	bl	80051c8 <dcd_event_handler>
}
 8007394:	bf00      	nop
    {
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    usb_otg->GOTGINT = otg_int;
 8007396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007398:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800739a:	605a      	str	r2, [r3, #4]
  }

  if(int_status & USB_OTG_GINTSTS_SOF)
 800739c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800739e:	f003 0308 	and.w	r3, r3, #8
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d028      	beq.n	80073f8 <dcd_int_handler+0x208>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_SOF;
 80073a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a8:	2208      	movs	r2, #8
 80073aa:	615a      	str	r2, [r3, #20]

    // Disable SOF interrupt since currently only used for remote wakeup detection
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_SOFM;
 80073ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	f023 0208 	bic.w	r2, r3, #8
 80073b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073b6:	619a      	str	r2, [r3, #24]
 80073b8:	79fb      	ldrb	r3, [r7, #7]
 80073ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80073be:	2303      	movs	r3, #3
 80073c0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80073c4:	2301      	movs	r3, #1
 80073c6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 80073ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80073ce:	2200      	movs	r2, #0
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	605a      	str	r2, [r3, #4]
 80073d4:	609a      	str	r2, [r3, #8]
 80073d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80073da:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80073de:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80073e2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  dcd_event_handler(&event, in_isr);
 80073e6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80073ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80073ee:	4611      	mov	r1, r2
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7fd fee9 	bl	80051c8 <dcd_event_handler>
}
 80073f6:	bf00      	nop

    dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
  }

  // RxFIFO non-empty interrupt handling.
  if(int_status & USB_OTG_GINTSTS_RXFLVL)
 80073f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073fa:	f003 0310 	and.w	r3, r3, #16
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d021      	beq.n	8007446 <dcd_int_handler+0x256>
  {
    // RXFLVL bit is read-only

    // Mask out RXFLVL while reading data from FIFO
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_RXFLVLM;
 8007402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	f023 0210 	bic.w	r2, r3, #16
 800740a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800740c:	619a      	str	r2, [r3, #24]

    // Loop until all available packets were handled
    do
    {
      handle_rxflvl_ints(rhport, out_ep);
 800740e:	79fb      	ldrb	r3, [r7, #7]
 8007410:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007412:	4618      	mov	r0, r3
 8007414:	f7ff fc84 	bl	8006d20 <handle_rxflvl_ints>
    } while(usb_otg->GINTSTS & USB_OTG_GINTSTS_RXFLVL);
 8007418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	f003 0310 	and.w	r3, r3, #16
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1f4      	bne.n	800740e <dcd_int_handler+0x21e>

    // Manage RX FIFO size
    if (_out_ep_closed)
 8007424:	4b18      	ldr	r3, [pc, #96]	; (8007488 <dcd_int_handler+0x298>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d006      	beq.n	800743a <dcd_int_handler+0x24a>
    {
      update_grxfsiz(rhport);
 800742c:	79fb      	ldrb	r3, [r7, #7]
 800742e:	4618      	mov	r0, r3
 8007430:	f7fe fd70 	bl	8005f14 <update_grxfsiz>

      // Disable flag
      _out_ep_closed = false;
 8007434:	4b14      	ldr	r3, [pc, #80]	; (8007488 <dcd_int_handler+0x298>)
 8007436:	2200      	movs	r2, #0
 8007438:	701a      	strb	r2, [r3, #0]
    }

    usb_otg->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800743a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	f043 0210 	orr.w	r2, r3, #16
 8007442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007444:	619a      	str	r2, [r3, #24]
  }

  // OUT endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_OEPINT)
 8007446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007448:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d005      	beq.n	800745c <dcd_int_handler+0x26c>
  {
    // OEPINT is read-only
    handle_epout_ints(rhport, dev, out_ep);
 8007450:	79fb      	ldrb	r3, [r7, #7]
 8007452:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007454:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007456:	4618      	mov	r0, r3
 8007458:	f7ff fd08 	bl	8006e6c <handle_epout_ints>
  }

  // IN endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_IEPINT)
 800745c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800745e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d005      	beq.n	8007472 <dcd_int_handler+0x282>
  {
    // IEPINT bit read-only
    handle_epin_ints(rhport, dev, in_ep);
 8007466:	79fb      	ldrb	r3, [r7, #7]
 8007468:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800746a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800746c:	4618      	mov	r0, r3
 800746e:	f7ff fdb7 	bl	8006fe0 <handle_epin_ints>
  //  // Check for Incomplete isochronous IN transfer
  //  if(int_status & USB_OTG_GINTSTS_IISOIXFR) {
  //    printf("      IISOIXFR!\r\n");
  ////    TU_LOG2("      IISOIXFR!\r\n");
  //  }
}
 8007472:	bf00      	nop
 8007474:	3770      	adds	r7, #112	; 0x70
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	50000800 	.word	0x50000800
 8007480:	50000b00 	.word	0x50000b00
 8007484:	50000900 	.word	0x50000900
 8007488:	20003156 	.word	0x20003156

0800748c <tusb_init>:
#if CFG_TUD_ENABLED
#include "device/usbd_pvt.h"
#endif

bool tusb_init(void)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
#if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
  // init device stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) );
 8007492:	2000      	movs	r0, #0
 8007494:	f7fc fff6 	bl	8004484 <tud_init>
 8007498:	4603      	mov	r3, r0
 800749a:	f083 0301 	eor.w	r3, r3, #1
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00a      	beq.n	80074ba <tusb_init+0x2e>
 80074a4:	4b07      	ldr	r3, [pc, #28]	; (80074c4 <tusb_init+0x38>)
 80074a6:	607b      	str	r3, [r7, #4]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d000      	beq.n	80074b6 <tusb_init+0x2a>
 80074b4:	be00      	bkpt	0x0000
 80074b6:	2300      	movs	r3, #0
 80074b8:	e000      	b.n	80074bc <tusb_init+0x30>
#if CFG_TUH_ENABLED && defined(TUH_OPT_RHPORT)
  // init host stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) );
#endif

  return true;
 80074ba:	2301      	movs	r3, #1
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	e000edf0 	.word	0xe000edf0

080074c8 <tusb_inited>:

bool tusb_inited(void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
  bool ret = false;
 80074ce:	2300      	movs	r3, #0
 80074d0:	71fb      	strb	r3, [r7, #7]

#if CFG_TUD_ENABLED
  ret = ret || tud_inited();
 80074d2:	79fb      	ldrb	r3, [r7, #7]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d104      	bne.n	80074e2 <tusb_inited+0x1a>
 80074d8:	f7fc ffc4 	bl	8004464 <tud_inited>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <tusb_inited+0x1e>
 80074e2:	2301      	movs	r3, #1
 80074e4:	e000      	b.n	80074e8 <tusb_inited+0x20>
 80074e6:	2300      	movs	r3, #0
 80074e8:	71fb      	strb	r3, [r7, #7]
 80074ea:	79fb      	ldrb	r3, [r7, #7]
 80074ec:	f003 0301 	and.w	r3, r3, #1
 80074f0:	71fb      	strb	r3, [r7, #7]

#if CFG_TUH_ENABLED
  ret = ret || tuh_inited();
#endif

  return ret;
 80074f2:	79fb      	ldrb	r3, [r7, #7]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <tu_edpt_claim>:
//--------------------------------------------------------------------+
// Internal Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
  osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
#endif

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b00      	cmp	r3, #0
 8007512:	d108      	bne.n	8007526 <tu_edpt_claim+0x2a>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <tu_edpt_claim+0x2a>
 8007522:	2301      	movs	r3, #1
 8007524:	e000      	b.n	8007528 <tu_edpt_claim+0x2c>
 8007526:	2300      	movs	r3, #0
 8007528:	73fb      	strb	r3, [r7, #15]
 800752a:	7bfb      	ldrb	r3, [r7, #15]
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	73fb      	strb	r3, [r7, #15]
  if (available)
 8007532:	7bfb      	ldrb	r3, [r7, #15]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d004      	beq.n	8007542 <tu_edpt_claim+0x46>
  {
    ep_state->claimed = 1;
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	7813      	ldrb	r3, [r2, #0]
 800753c:	f043 0304 	orr.w	r3, r3, #4
 8007540:	7013      	strb	r3, [r2, #0]

#if TUSB_OPT_MUTEX
  osal_mutex_unlock(mutex);
#endif

  return available;
 8007542:	7bfb      	ldrb	r3, [r7, #15]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3714      	adds	r7, #20
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
#if TUSB_OPT_MUTEX
  osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
#endif

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b01      	cmp	r3, #1
 8007566:	d108      	bne.n	800757a <tu_edpt_release+0x2a>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d101      	bne.n	800757a <tu_edpt_release+0x2a>
 8007576:	2301      	movs	r3, #1
 8007578:	e000      	b.n	800757c <tu_edpt_release+0x2c>
 800757a:	2300      	movs	r3, #0
 800757c:	73fb      	strb	r3, [r7, #15]
 800757e:	7bfb      	ldrb	r3, [r7, #15]
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	73fb      	strb	r3, [r7, #15]
  if (ret)
 8007586:	7bfb      	ldrb	r3, [r7, #15]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d004      	beq.n	8007596 <tu_edpt_release+0x46>
  {
    ep_state->claimed = 0;
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	7813      	ldrb	r3, [r2, #0]
 8007590:	f36f 0382 	bfc	r3, #2, #1
 8007594:	7013      	strb	r3, [r2, #0]

#if TUSB_OPT_MUTEX
  osal_mutex_unlock(mutex);
#endif

  return ret;
 8007596:	7bfb      	ldrb	r3, [r7, #15]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b08b      	sub	sp, #44	; 0x2c
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	460b      	mov	r3, r1
 80075ae:	70fb      	strb	r3, [r7, #3]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	60fb      	str	r3, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	889b      	ldrh	r3, [r3, #4]
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075be:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 80075c0:	84fb      	strh	r3, [r7, #38]	; 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	78db      	ldrb	r3, [r3, #3]
 80075c6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b03      	cmp	r3, #3
 80075ce:	d03e      	beq.n	800764e <tu_edpt_validate+0xaa>
 80075d0:	2b03      	cmp	r3, #3
 80075d2:	dc53      	bgt.n	800767c <tu_edpt_validate+0xd8>
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d002      	beq.n	80075de <tu_edpt_validate+0x3a>
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d018      	beq.n	800760e <tu_edpt_validate+0x6a>
 80075dc:	e04e      	b.n	800767c <tu_edpt_validate+0xd8>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 80075de:	78fb      	ldrb	r3, [r7, #3]
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d102      	bne.n	80075ea <tu_edpt_validate+0x46>
 80075e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075e8:	e001      	b.n	80075ee <tu_edpt_validate+0x4a>
 80075ea:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80075ee:	82fb      	strh	r3, [r7, #22]
      TU_ASSERT(max_packet_size <= spec_size);
 80075f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80075f2:	8afb      	ldrh	r3, [r7, #22]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d943      	bls.n	8007680 <tu_edpt_validate+0xdc>
 80075f8:	4b27      	ldr	r3, [pc, #156]	; (8007698 <tu_edpt_validate+0xf4>)
 80075fa:	613b      	str	r3, [r7, #16]
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b00      	cmp	r3, #0
 8007606:	d000      	beq.n	800760a <tu_edpt_validate+0x66>
 8007608:	be00      	bkpt	0x0000
 800760a:	2300      	movs	r3, #0
 800760c:	e03e      	b.n	800768c <tu_edpt_validate+0xe8>
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 800760e:	78fb      	ldrb	r3, [r7, #3]
 8007610:	2b02      	cmp	r3, #2
 8007612:	d10e      	bne.n	8007632 <tu_edpt_validate+0x8e>
      {
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 8007614:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800761a:	d033      	beq.n	8007684 <tu_edpt_validate+0xe0>
 800761c:	4b1e      	ldr	r3, [pc, #120]	; (8007698 <tu_edpt_validate+0xf4>)
 800761e:	61bb      	str	r3, [r7, #24]
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	2b00      	cmp	r3, #0
 800762a:	d000      	beq.n	800762e <tu_edpt_validate+0x8a>
 800762c:	be00      	bkpt	0x0000
 800762e:	2300      	movs	r3, #0
 8007630:	e02c      	b.n	800768c <tu_edpt_validate+0xe8>
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 8007632:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007634:	2b40      	cmp	r3, #64	; 0x40
 8007636:	d925      	bls.n	8007684 <tu_edpt_validate+0xe0>
 8007638:	4b17      	ldr	r3, [pc, #92]	; (8007698 <tu_edpt_validate+0xf4>)
 800763a:	61fb      	str	r3, [r7, #28]
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b00      	cmp	r3, #0
 8007646:	d000      	beq.n	800764a <tu_edpt_validate+0xa6>
 8007648:	be00      	bkpt	0x0000
 800764a:	2300      	movs	r3, #0
 800764c:	e01e      	b.n	800768c <tu_edpt_validate+0xe8>
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 800764e:	78fb      	ldrb	r3, [r7, #3]
 8007650:	2b02      	cmp	r3, #2
 8007652:	d102      	bne.n	800765a <tu_edpt_validate+0xb6>
 8007654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007658:	e000      	b.n	800765c <tu_edpt_validate+0xb8>
 800765a:	2340      	movs	r3, #64	; 0x40
 800765c:	84bb      	strh	r3, [r7, #36]	; 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 800765e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007660:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007662:	429a      	cmp	r2, r3
 8007664:	d910      	bls.n	8007688 <tu_edpt_validate+0xe4>
 8007666:	4b0c      	ldr	r3, [pc, #48]	; (8007698 <tu_edpt_validate+0xf4>)
 8007668:	623b      	str	r3, [r7, #32]
 800766a:	6a3b      	ldr	r3, [r7, #32]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	2b00      	cmp	r3, #0
 8007674:	d000      	beq.n	8007678 <tu_edpt_validate+0xd4>
 8007676:	be00      	bkpt	0x0000
 8007678:	2300      	movs	r3, #0
 800767a:	e007      	b.n	800768c <tu_edpt_validate+0xe8>
    }
    break;

    default: return false;
 800767c:	2300      	movs	r3, #0
 800767e:	e005      	b.n	800768c <tu_edpt_validate+0xe8>
    break;
 8007680:	bf00      	nop
 8007682:	e002      	b.n	800768a <tu_edpt_validate+0xe6>
    break;
 8007684:	bf00      	nop
 8007686:	e000      	b.n	800768a <tu_edpt_validate+0xe6>
    break;
 8007688:	bf00      	nop
  }

  return true;
 800768a:	2301      	movs	r3, #1
}
 800768c:	4618      	mov	r0, r3
 800768e:	372c      	adds	r7, #44	; 0x2c
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr
 8007698:	e000edf0 	.word	0xe000edf0

0800769c <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
 800769c:	b480      	push	{r7}
 800769e:	b08d      	sub	sp, #52	; 0x34
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	4611      	mov	r1, r2
 80076a8:	461a      	mov	r2, r3
 80076aa:	460b      	mov	r3, r1
 80076ac:	80fb      	strh	r3, [r7, #6]
 80076ae:	4613      	mov	r3, r2
 80076b0:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 80076b6:	88fb      	ldrh	r3, [r7, #6]
 80076b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076ba:	4413      	add	r3, r2
 80076bc:	62bb      	str	r3, [r7, #40]	; 0x28

  while( p_desc < desc_end )
 80076be:	e027      	b.n	8007710 <tu_edpt_bind_driver+0x74>
 80076c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c2:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	3301      	adds	r3, #1
 80076c8:	781b      	ldrb	r3, [r3, #0]
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 80076ca:	2b05      	cmp	r3, #5
 80076cc:	d116      	bne.n	80076fc <tu_edpt_bind_driver+0x60>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 80076ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d0:	789b      	ldrb	r3, [r3, #2]
 80076d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80076d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076da:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80076dc:	7fbb      	ldrb	r3, [r7, #30]
 80076de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076e2:	b2db      	uxtb	r3, r3

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	4413      	add	r3, r2
 80076ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80076ee:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80076f0:	7ffa      	ldrb	r2, [r7, #31]
 80076f2:	09d2      	lsrs	r2, r2, #7
 80076f4:	b2d2      	uxtb	r2, r2
 80076f6:	4611      	mov	r1, r2
 80076f8:	797a      	ldrb	r2, [r7, #5]
 80076fa:	545a      	strb	r2, [r3, r1]
 80076fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fe:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	461a      	mov	r2, r3
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 800770e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while( p_desc < desc_end )
 8007710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007714:	429a      	cmp	r2, r3
 8007716:	d3d3      	bcc.n	80076c0 <tu_edpt_bind_driver+0x24>
  }
}
 8007718:	bf00      	nop
 800771a:	bf00      	nop
 800771c:	3734      	adds	r7, #52	; 0x34
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
	...

08007728 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800772c:	4b0e      	ldr	r3, [pc, #56]	; (8007768 <HAL_Init+0x40>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a0d      	ldr	r2, [pc, #52]	; (8007768 <HAL_Init+0x40>)
 8007732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007736:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007738:	4b0b      	ldr	r3, [pc, #44]	; (8007768 <HAL_Init+0x40>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a0a      	ldr	r2, [pc, #40]	; (8007768 <HAL_Init+0x40>)
 800773e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007742:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007744:	4b08      	ldr	r3, [pc, #32]	; (8007768 <HAL_Init+0x40>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a07      	ldr	r2, [pc, #28]	; (8007768 <HAL_Init+0x40>)
 800774a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800774e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007750:	2003      	movs	r0, #3
 8007752:	f000 f94f 	bl	80079f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007756:	200f      	movs	r0, #15
 8007758:	f000 f808 	bl	800776c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800775c:	f7f9 fb4a 	bl	8000df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	40023c00 	.word	0x40023c00

0800776c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007774:	4b12      	ldr	r3, [pc, #72]	; (80077c0 <HAL_InitTick+0x54>)
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	4b12      	ldr	r3, [pc, #72]	; (80077c4 <HAL_InitTick+0x58>)
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	4619      	mov	r1, r3
 800777e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007782:	fbb3 f3f1 	udiv	r3, r3, r1
 8007786:	fbb2 f3f3 	udiv	r3, r2, r3
 800778a:	4618      	mov	r0, r3
 800778c:	f000 f967 	bl	8007a5e <HAL_SYSTICK_Config>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e00e      	b.n	80077b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b0f      	cmp	r3, #15
 800779e:	d80a      	bhi.n	80077b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80077a0:	2200      	movs	r2, #0
 80077a2:	6879      	ldr	r1, [r7, #4]
 80077a4:	f04f 30ff 	mov.w	r0, #4294967295
 80077a8:	f000 f92f 	bl	8007a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80077ac:	4a06      	ldr	r2, [pc, #24]	; (80077c8 <HAL_InitTick+0x5c>)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	e000      	b.n	80077b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	2000240c 	.word	0x2000240c
 80077c4:	20002450 	.word	0x20002450
 80077c8:	2000244c 	.word	0x2000244c

080077cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80077d0:	4b06      	ldr	r3, [pc, #24]	; (80077ec <HAL_IncTick+0x20>)
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	461a      	mov	r2, r3
 80077d6:	4b06      	ldr	r3, [pc, #24]	; (80077f0 <HAL_IncTick+0x24>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4413      	add	r3, r2
 80077dc:	4a04      	ldr	r2, [pc, #16]	; (80077f0 <HAL_IncTick+0x24>)
 80077de:	6013      	str	r3, [r2, #0]
}
 80077e0:	bf00      	nop
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	20002450 	.word	0x20002450
 80077f0:	20003158 	.word	0x20003158

080077f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80077f4:	b480      	push	{r7}
 80077f6:	af00      	add	r7, sp, #0
  return uwTick;
 80077f8:	4b03      	ldr	r3, [pc, #12]	; (8007808 <HAL_GetTick+0x14>)
 80077fa:	681b      	ldr	r3, [r3, #0]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	20003158 	.word	0x20003158

0800780c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007814:	f7ff ffee 	bl	80077f4 <HAL_GetTick>
 8007818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007824:	d005      	beq.n	8007832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007826:	4b0a      	ldr	r3, [pc, #40]	; (8007850 <HAL_Delay+0x44>)
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	4413      	add	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007832:	bf00      	nop
 8007834:	f7ff ffde 	bl	80077f4 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	429a      	cmp	r2, r3
 8007842:	d8f7      	bhi.n	8007834 <HAL_Delay+0x28>
  {
  }
}
 8007844:	bf00      	nop
 8007846:	bf00      	nop
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	20002450 	.word	0x20002450

08007854 <__NVIC_SetPriorityGrouping>:
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f003 0307 	and.w	r3, r3, #7
 8007862:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007864:	4b0c      	ldr	r3, [pc, #48]	; (8007898 <__NVIC_SetPriorityGrouping+0x44>)
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007870:	4013      	ands	r3, r2
 8007872:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800787c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007886:	4a04      	ldr	r2, [pc, #16]	; (8007898 <__NVIC_SetPriorityGrouping+0x44>)
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	60d3      	str	r3, [r2, #12]
}
 800788c:	bf00      	nop
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr
 8007898:	e000ed00 	.word	0xe000ed00

0800789c <__NVIC_GetPriorityGrouping>:
{
 800789c:	b480      	push	{r7}
 800789e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80078a0:	4b04      	ldr	r3, [pc, #16]	; (80078b4 <__NVIC_GetPriorityGrouping+0x18>)
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	0a1b      	lsrs	r3, r3, #8
 80078a6:	f003 0307 	and.w	r3, r3, #7
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr
 80078b4:	e000ed00 	.word	0xe000ed00

080078b8 <__NVIC_EnableIRQ>:
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	4603      	mov	r3, r0
 80078c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	db0b      	blt.n	80078e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078ca:	79fb      	ldrb	r3, [r7, #7]
 80078cc:	f003 021f 	and.w	r2, r3, #31
 80078d0:	4907      	ldr	r1, [pc, #28]	; (80078f0 <__NVIC_EnableIRQ+0x38>)
 80078d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078d6:	095b      	lsrs	r3, r3, #5
 80078d8:	2001      	movs	r0, #1
 80078da:	fa00 f202 	lsl.w	r2, r0, r2
 80078de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80078e2:	bf00      	nop
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	e000e100 	.word	0xe000e100

080078f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	4603      	mov	r3, r0
 80078fc:	6039      	str	r1, [r7, #0]
 80078fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007904:	2b00      	cmp	r3, #0
 8007906:	db0a      	blt.n	800791e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	b2da      	uxtb	r2, r3
 800790c:	490c      	ldr	r1, [pc, #48]	; (8007940 <__NVIC_SetPriority+0x4c>)
 800790e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007912:	0112      	lsls	r2, r2, #4
 8007914:	b2d2      	uxtb	r2, r2
 8007916:	440b      	add	r3, r1
 8007918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800791c:	e00a      	b.n	8007934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	b2da      	uxtb	r2, r3
 8007922:	4908      	ldr	r1, [pc, #32]	; (8007944 <__NVIC_SetPriority+0x50>)
 8007924:	79fb      	ldrb	r3, [r7, #7]
 8007926:	f003 030f 	and.w	r3, r3, #15
 800792a:	3b04      	subs	r3, #4
 800792c:	0112      	lsls	r2, r2, #4
 800792e:	b2d2      	uxtb	r2, r2
 8007930:	440b      	add	r3, r1
 8007932:	761a      	strb	r2, [r3, #24]
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	e000e100 	.word	0xe000e100
 8007944:	e000ed00 	.word	0xe000ed00

08007948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007948:	b480      	push	{r7}
 800794a:	b089      	sub	sp, #36	; 0x24
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f003 0307 	and.w	r3, r3, #7
 800795a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	f1c3 0307 	rsb	r3, r3, #7
 8007962:	2b04      	cmp	r3, #4
 8007964:	bf28      	it	cs
 8007966:	2304      	movcs	r3, #4
 8007968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	3304      	adds	r3, #4
 800796e:	2b06      	cmp	r3, #6
 8007970:	d902      	bls.n	8007978 <NVIC_EncodePriority+0x30>
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	3b03      	subs	r3, #3
 8007976:	e000      	b.n	800797a <NVIC_EncodePriority+0x32>
 8007978:	2300      	movs	r3, #0
 800797a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800797c:	f04f 32ff 	mov.w	r2, #4294967295
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	fa02 f303 	lsl.w	r3, r2, r3
 8007986:	43da      	mvns	r2, r3
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	401a      	ands	r2, r3
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007990:	f04f 31ff 	mov.w	r1, #4294967295
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	fa01 f303 	lsl.w	r3, r1, r3
 800799a:	43d9      	mvns	r1, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079a0:	4313      	orrs	r3, r2
         );
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3724      	adds	r7, #36	; 0x24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
	...

080079b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079c0:	d301      	bcc.n	80079c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80079c2:	2301      	movs	r3, #1
 80079c4:	e00f      	b.n	80079e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80079c6:	4a0a      	ldr	r2, [pc, #40]	; (80079f0 <SysTick_Config+0x40>)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	3b01      	subs	r3, #1
 80079cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80079ce:	210f      	movs	r1, #15
 80079d0:	f04f 30ff 	mov.w	r0, #4294967295
 80079d4:	f7ff ff8e 	bl	80078f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80079d8:	4b05      	ldr	r3, [pc, #20]	; (80079f0 <SysTick_Config+0x40>)
 80079da:	2200      	movs	r2, #0
 80079dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80079de:	4b04      	ldr	r3, [pc, #16]	; (80079f0 <SysTick_Config+0x40>)
 80079e0:	2207      	movs	r2, #7
 80079e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	e000e010 	.word	0xe000e010

080079f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7ff ff29 	bl	8007854 <__NVIC_SetPriorityGrouping>
}
 8007a02:	bf00      	nop
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b086      	sub	sp, #24
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	4603      	mov	r3, r0
 8007a12:	60b9      	str	r1, [r7, #8]
 8007a14:	607a      	str	r2, [r7, #4]
 8007a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007a1c:	f7ff ff3e 	bl	800789c <__NVIC_GetPriorityGrouping>
 8007a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	68b9      	ldr	r1, [r7, #8]
 8007a26:	6978      	ldr	r0, [r7, #20]
 8007a28:	f7ff ff8e 	bl	8007948 <NVIC_EncodePriority>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a32:	4611      	mov	r1, r2
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7ff ff5d 	bl	80078f4 <__NVIC_SetPriority>
}
 8007a3a:	bf00      	nop
 8007a3c:	3718      	adds	r7, #24
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b082      	sub	sp, #8
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	4603      	mov	r3, r0
 8007a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7ff ff31 	bl	80078b8 <__NVIC_EnableIRQ>
}
 8007a56:	bf00      	nop
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b082      	sub	sp, #8
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7ff ffa2 	bl	80079b0 <SysTick_Config>
 8007a6c:	4603      	mov	r3, r0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b082      	sub	sp, #8
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e00e      	b.n	8007aa6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	795b      	ldrb	r3, [r3, #5]
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d105      	bne.n	8007a9e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7f8 fd3b 	bl	8000514 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
	...

08007ab0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007abc:	f7ff fe9a 	bl	80077f4 <HAL_GetTick>
 8007ac0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d101      	bne.n	8007acc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e099      	b.n	8007c00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 0201 	bic.w	r2, r2, #1
 8007aea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007aec:	e00f      	b.n	8007b0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007aee:	f7ff fe81 	bl	80077f4 <HAL_GetTick>
 8007af2:	4602      	mov	r2, r0
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	2b05      	cmp	r3, #5
 8007afa:	d908      	bls.n	8007b0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2220      	movs	r2, #32
 8007b00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2203      	movs	r2, #3
 8007b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e078      	b.n	8007c00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1e8      	bne.n	8007aee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	4b38      	ldr	r3, [pc, #224]	; (8007c08 <HAL_DMA_Init+0x158>)
 8007b28:	4013      	ands	r3, r2
 8007b2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685a      	ldr	r2, [r3, #4]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a1b      	ldr	r3, [r3, #32]
 8007b58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b64:	2b04      	cmp	r3, #4
 8007b66:	d107      	bne.n	8007b78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b70:	4313      	orrs	r3, r2
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f023 0307 	bic.w	r3, r3, #7
 8007b8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	d117      	bne.n	8007bd2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00e      	beq.n	8007bd2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f9e9 	bl	8007f8c <DMA_CheckFifoParam>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d008      	beq.n	8007bd2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2240      	movs	r2, #64	; 0x40
 8007bc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e016      	b.n	8007c00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f9a0 	bl	8007f20 <DMA_CalcBaseAndBitshift>
 8007be0:	4603      	mov	r3, r0
 8007be2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007be8:	223f      	movs	r2, #63	; 0x3f
 8007bea:	409a      	lsls	r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	f010803f 	.word	0xf010803f

08007c0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007c14:	2300      	movs	r3, #0
 8007c16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007c18:	4b8e      	ldr	r3, [pc, #568]	; (8007e54 <HAL_DMA_IRQHandler+0x248>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a8e      	ldr	r2, [pc, #568]	; (8007e58 <HAL_DMA_IRQHandler+0x24c>)
 8007c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c22:	0a9b      	lsrs	r3, r3, #10
 8007c24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c36:	2208      	movs	r2, #8
 8007c38:	409a      	lsls	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d01a      	beq.n	8007c78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0304 	and.w	r3, r3, #4
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d013      	beq.n	8007c78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f022 0204 	bic.w	r2, r2, #4
 8007c5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c64:	2208      	movs	r2, #8
 8007c66:	409a      	lsls	r2, r3
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c70:	f043 0201 	orr.w	r2, r3, #1
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	409a      	lsls	r2, r3
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	4013      	ands	r3, r2
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d012      	beq.n	8007cae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00b      	beq.n	8007cae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	409a      	lsls	r2, r3
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca6:	f043 0202 	orr.w	r2, r3, #2
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cb2:	2204      	movs	r2, #4
 8007cb4:	409a      	lsls	r2, r3
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	4013      	ands	r3, r2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d012      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 0302 	and.w	r3, r3, #2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00b      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cd0:	2204      	movs	r2, #4
 8007cd2:	409a      	lsls	r2, r3
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cdc:	f043 0204 	orr.w	r2, r3, #4
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ce8:	2210      	movs	r2, #16
 8007cea:	409a      	lsls	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4013      	ands	r3, r2
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d043      	beq.n	8007d7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 0308 	and.w	r3, r3, #8
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d03c      	beq.n	8007d7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d06:	2210      	movs	r2, #16
 8007d08:	409a      	lsls	r2, r3
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d018      	beq.n	8007d4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d108      	bne.n	8007d3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d024      	beq.n	8007d7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	4798      	blx	r3
 8007d3a:	e01f      	b.n	8007d7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d01b      	beq.n	8007d7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	4798      	blx	r3
 8007d4c:	e016      	b.n	8007d7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d107      	bne.n	8007d6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f022 0208 	bic.w	r2, r2, #8
 8007d6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d003      	beq.n	8007d7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d80:	2220      	movs	r2, #32
 8007d82:	409a      	lsls	r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	4013      	ands	r3, r2
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 808f 	beq.w	8007eac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0310 	and.w	r3, r3, #16
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 8087 	beq.w	8007eac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007da2:	2220      	movs	r2, #32
 8007da4:	409a      	lsls	r2, r3
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b05      	cmp	r3, #5
 8007db4:	d136      	bne.n	8007e24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f022 0216 	bic.w	r2, r2, #22
 8007dc4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	695a      	ldr	r2, [r3, #20]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007dd4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d103      	bne.n	8007de6 <HAL_DMA_IRQHandler+0x1da>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d007      	beq.n	8007df6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f022 0208 	bic.w	r2, r2, #8
 8007df4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dfa:	223f      	movs	r2, #63	; 0x3f
 8007dfc:	409a      	lsls	r2, r3
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d07e      	beq.n	8007f18 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	4798      	blx	r3
        }
        return;
 8007e22:	e079      	b.n	8007f18 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d01d      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10d      	bne.n	8007e5c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d031      	beq.n	8007eac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	4798      	blx	r3
 8007e50:	e02c      	b.n	8007eac <HAL_DMA_IRQHandler+0x2a0>
 8007e52:	bf00      	nop
 8007e54:	2000240c 	.word	0x2000240c
 8007e58:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d023      	beq.n	8007eac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	4798      	blx	r3
 8007e6c:	e01e      	b.n	8007eac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10f      	bne.n	8007e9c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f022 0210 	bic.w	r2, r2, #16
 8007e8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d003      	beq.n	8007eac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d032      	beq.n	8007f1a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb8:	f003 0301 	and.w	r3, r3, #1
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d022      	beq.n	8007f06 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2205      	movs	r2, #5
 8007ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f022 0201 	bic.w	r2, r2, #1
 8007ed6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	3301      	adds	r3, #1
 8007edc:	60bb      	str	r3, [r7, #8]
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d307      	bcc.n	8007ef4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 0301 	and.w	r3, r3, #1
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1f2      	bne.n	8007ed8 <HAL_DMA_IRQHandler+0x2cc>
 8007ef2:	e000      	b.n	8007ef6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007ef4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d005      	beq.n	8007f1a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	4798      	blx	r3
 8007f16:	e000      	b.n	8007f1a <HAL_DMA_IRQHandler+0x30e>
        return;
 8007f18:	bf00      	nop
    }
  }
}
 8007f1a:	3718      	adds	r7, #24
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	3b10      	subs	r3, #16
 8007f30:	4a14      	ldr	r2, [pc, #80]	; (8007f84 <DMA_CalcBaseAndBitshift+0x64>)
 8007f32:	fba2 2303 	umull	r2, r3, r2, r3
 8007f36:	091b      	lsrs	r3, r3, #4
 8007f38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007f3a:	4a13      	ldr	r2, [pc, #76]	; (8007f88 <DMA_CalcBaseAndBitshift+0x68>)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	4413      	add	r3, r2
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	461a      	mov	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2b03      	cmp	r3, #3
 8007f4c:	d909      	bls.n	8007f62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007f56:	f023 0303 	bic.w	r3, r3, #3
 8007f5a:	1d1a      	adds	r2, r3, #4
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	659a      	str	r2, [r3, #88]	; 0x58
 8007f60:	e007      	b.n	8007f72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007f6a:	f023 0303 	bic.w	r3, r3, #3
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3714      	adds	r7, #20
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	aaaaaaab 	.word	0xaaaaaaab
 8007f88:	0800df70 	.word	0x0800df70

08007f8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f94:	2300      	movs	r3, #0
 8007f96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	699b      	ldr	r3, [r3, #24]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d11f      	bne.n	8007fe6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2b03      	cmp	r3, #3
 8007faa:	d856      	bhi.n	800805a <DMA_CheckFifoParam+0xce>
 8007fac:	a201      	add	r2, pc, #4	; (adr r2, 8007fb4 <DMA_CheckFifoParam+0x28>)
 8007fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb2:	bf00      	nop
 8007fb4:	08007fc5 	.word	0x08007fc5
 8007fb8:	08007fd7 	.word	0x08007fd7
 8007fbc:	08007fc5 	.word	0x08007fc5
 8007fc0:	0800805b 	.word	0x0800805b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d046      	beq.n	800805e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fd4:	e043      	b.n	800805e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007fde:	d140      	bne.n	8008062 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fe4:	e03d      	b.n	8008062 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fee:	d121      	bne.n	8008034 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	d837      	bhi.n	8008066 <DMA_CheckFifoParam+0xda>
 8007ff6:	a201      	add	r2, pc, #4	; (adr r2, 8007ffc <DMA_CheckFifoParam+0x70>)
 8007ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffc:	0800800d 	.word	0x0800800d
 8008000:	08008013 	.word	0x08008013
 8008004:	0800800d 	.word	0x0800800d
 8008008:	08008025 	.word	0x08008025
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	73fb      	strb	r3, [r7, #15]
      break;
 8008010:	e030      	b.n	8008074 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008016:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d025      	beq.n	800806a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008022:	e022      	b.n	800806a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008028:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800802c:	d11f      	bne.n	800806e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008032:	e01c      	b.n	800806e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	2b02      	cmp	r3, #2
 8008038:	d903      	bls.n	8008042 <DMA_CheckFifoParam+0xb6>
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2b03      	cmp	r3, #3
 800803e:	d003      	beq.n	8008048 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008040:	e018      	b.n	8008074 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	73fb      	strb	r3, [r7, #15]
      break;
 8008046:	e015      	b.n	8008074 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00e      	beq.n	8008072 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	73fb      	strb	r3, [r7, #15]
      break;
 8008058:	e00b      	b.n	8008072 <DMA_CheckFifoParam+0xe6>
      break;
 800805a:	bf00      	nop
 800805c:	e00a      	b.n	8008074 <DMA_CheckFifoParam+0xe8>
      break;
 800805e:	bf00      	nop
 8008060:	e008      	b.n	8008074 <DMA_CheckFifoParam+0xe8>
      break;
 8008062:	bf00      	nop
 8008064:	e006      	b.n	8008074 <DMA_CheckFifoParam+0xe8>
      break;
 8008066:	bf00      	nop
 8008068:	e004      	b.n	8008074 <DMA_CheckFifoParam+0xe8>
      break;
 800806a:	bf00      	nop
 800806c:	e002      	b.n	8008074 <DMA_CheckFifoParam+0xe8>
      break;   
 800806e:	bf00      	nop
 8008070:	e000      	b.n	8008074 <DMA_CheckFifoParam+0xe8>
      break;
 8008072:	bf00      	nop
    }
  } 
  
  return status; 
 8008074:	7bfb      	ldrb	r3, [r7, #15]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop

08008084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008084:	b480      	push	{r7}
 8008086:	b089      	sub	sp, #36	; 0x24
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800808e:	2300      	movs	r3, #0
 8008090:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008092:	2300      	movs	r3, #0
 8008094:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008096:	2300      	movs	r3, #0
 8008098:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800809a:	2300      	movs	r3, #0
 800809c:	61fb      	str	r3, [r7, #28]
 800809e:	e159      	b.n	8008354 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80080a0:	2201      	movs	r2, #1
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	fa02 f303 	lsl.w	r3, r2, r3
 80080a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	4013      	ands	r3, r2
 80080b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	f040 8148 	bne.w	800834e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f003 0303 	and.w	r3, r3, #3
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d005      	beq.n	80080d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d130      	bne.n	8008138 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	005b      	lsls	r3, r3, #1
 80080e0:	2203      	movs	r2, #3
 80080e2:	fa02 f303 	lsl.w	r3, r2, r3
 80080e6:	43db      	mvns	r3, r3
 80080e8:	69ba      	ldr	r2, [r7, #24]
 80080ea:	4013      	ands	r3, r2
 80080ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	68da      	ldr	r2, [r3, #12]
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	005b      	lsls	r3, r3, #1
 80080f6:	fa02 f303 	lsl.w	r3, r2, r3
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	69ba      	ldr	r2, [r7, #24]
 8008104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800810c:	2201      	movs	r2, #1
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	fa02 f303 	lsl.w	r3, r2, r3
 8008114:	43db      	mvns	r3, r3
 8008116:	69ba      	ldr	r2, [r7, #24]
 8008118:	4013      	ands	r3, r2
 800811a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	091b      	lsrs	r3, r3, #4
 8008122:	f003 0201 	and.w	r2, r3, #1
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	fa02 f303 	lsl.w	r3, r2, r3
 800812c:	69ba      	ldr	r2, [r7, #24]
 800812e:	4313      	orrs	r3, r2
 8008130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	f003 0303 	and.w	r3, r3, #3
 8008140:	2b03      	cmp	r3, #3
 8008142:	d017      	beq.n	8008174 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	005b      	lsls	r3, r3, #1
 800814e:	2203      	movs	r2, #3
 8008150:	fa02 f303 	lsl.w	r3, r2, r3
 8008154:	43db      	mvns	r3, r3
 8008156:	69ba      	ldr	r2, [r7, #24]
 8008158:	4013      	ands	r3, r2
 800815a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	689a      	ldr	r2, [r3, #8]
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	005b      	lsls	r3, r3, #1
 8008164:	fa02 f303 	lsl.w	r3, r2, r3
 8008168:	69ba      	ldr	r2, [r7, #24]
 800816a:	4313      	orrs	r3, r2
 800816c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	69ba      	ldr	r2, [r7, #24]
 8008172:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f003 0303 	and.w	r3, r3, #3
 800817c:	2b02      	cmp	r3, #2
 800817e:	d123      	bne.n	80081c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	08da      	lsrs	r2, r3, #3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	3208      	adds	r2, #8
 8008188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800818c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	f003 0307 	and.w	r3, r3, #7
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	220f      	movs	r2, #15
 8008198:	fa02 f303 	lsl.w	r3, r2, r3
 800819c:	43db      	mvns	r3, r3
 800819e:	69ba      	ldr	r2, [r7, #24]
 80081a0:	4013      	ands	r3, r2
 80081a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	691a      	ldr	r2, [r3, #16]
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	f003 0307 	and.w	r3, r3, #7
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	fa02 f303 	lsl.w	r3, r2, r3
 80081b4:	69ba      	ldr	r2, [r7, #24]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	08da      	lsrs	r2, r3, #3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	3208      	adds	r2, #8
 80081c2:	69b9      	ldr	r1, [r7, #24]
 80081c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	005b      	lsls	r3, r3, #1
 80081d2:	2203      	movs	r2, #3
 80081d4:	fa02 f303 	lsl.w	r3, r2, r3
 80081d8:	43db      	mvns	r3, r3
 80081da:	69ba      	ldr	r2, [r7, #24]
 80081dc:	4013      	ands	r3, r2
 80081de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	f003 0203 	and.w	r2, r3, #3
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	005b      	lsls	r3, r3, #1
 80081ec:	fa02 f303 	lsl.w	r3, r2, r3
 80081f0:	69ba      	ldr	r2, [r7, #24]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	69ba      	ldr	r2, [r7, #24]
 80081fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 80a2 	beq.w	800834e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800820a:	2300      	movs	r3, #0
 800820c:	60fb      	str	r3, [r7, #12]
 800820e:	4b57      	ldr	r3, [pc, #348]	; (800836c <HAL_GPIO_Init+0x2e8>)
 8008210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008212:	4a56      	ldr	r2, [pc, #344]	; (800836c <HAL_GPIO_Init+0x2e8>)
 8008214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008218:	6453      	str	r3, [r2, #68]	; 0x44
 800821a:	4b54      	ldr	r3, [pc, #336]	; (800836c <HAL_GPIO_Init+0x2e8>)
 800821c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800821e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008226:	4a52      	ldr	r2, [pc, #328]	; (8008370 <HAL_GPIO_Init+0x2ec>)
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	089b      	lsrs	r3, r3, #2
 800822c:	3302      	adds	r3, #2
 800822e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008232:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	f003 0303 	and.w	r3, r3, #3
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	220f      	movs	r2, #15
 800823e:	fa02 f303 	lsl.w	r3, r2, r3
 8008242:	43db      	mvns	r3, r3
 8008244:	69ba      	ldr	r2, [r7, #24]
 8008246:	4013      	ands	r3, r2
 8008248:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a49      	ldr	r2, [pc, #292]	; (8008374 <HAL_GPIO_Init+0x2f0>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d019      	beq.n	8008286 <HAL_GPIO_Init+0x202>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a48      	ldr	r2, [pc, #288]	; (8008378 <HAL_GPIO_Init+0x2f4>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d013      	beq.n	8008282 <HAL_GPIO_Init+0x1fe>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a47      	ldr	r2, [pc, #284]	; (800837c <HAL_GPIO_Init+0x2f8>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d00d      	beq.n	800827e <HAL_GPIO_Init+0x1fa>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a46      	ldr	r2, [pc, #280]	; (8008380 <HAL_GPIO_Init+0x2fc>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d007      	beq.n	800827a <HAL_GPIO_Init+0x1f6>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a45      	ldr	r2, [pc, #276]	; (8008384 <HAL_GPIO_Init+0x300>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d101      	bne.n	8008276 <HAL_GPIO_Init+0x1f2>
 8008272:	2304      	movs	r3, #4
 8008274:	e008      	b.n	8008288 <HAL_GPIO_Init+0x204>
 8008276:	2307      	movs	r3, #7
 8008278:	e006      	b.n	8008288 <HAL_GPIO_Init+0x204>
 800827a:	2303      	movs	r3, #3
 800827c:	e004      	b.n	8008288 <HAL_GPIO_Init+0x204>
 800827e:	2302      	movs	r3, #2
 8008280:	e002      	b.n	8008288 <HAL_GPIO_Init+0x204>
 8008282:	2301      	movs	r3, #1
 8008284:	e000      	b.n	8008288 <HAL_GPIO_Init+0x204>
 8008286:	2300      	movs	r3, #0
 8008288:	69fa      	ldr	r2, [r7, #28]
 800828a:	f002 0203 	and.w	r2, r2, #3
 800828e:	0092      	lsls	r2, r2, #2
 8008290:	4093      	lsls	r3, r2
 8008292:	69ba      	ldr	r2, [r7, #24]
 8008294:	4313      	orrs	r3, r2
 8008296:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008298:	4935      	ldr	r1, [pc, #212]	; (8008370 <HAL_GPIO_Init+0x2ec>)
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	089b      	lsrs	r3, r3, #2
 800829e:	3302      	adds	r3, #2
 80082a0:	69ba      	ldr	r2, [r7, #24]
 80082a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80082a6:	4b38      	ldr	r3, [pc, #224]	; (8008388 <HAL_GPIO_Init+0x304>)
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	43db      	mvns	r3, r3
 80082b0:	69ba      	ldr	r2, [r7, #24]
 80082b2:	4013      	ands	r3, r2
 80082b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80082c2:	69ba      	ldr	r2, [r7, #24]
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80082ca:	4a2f      	ldr	r2, [pc, #188]	; (8008388 <HAL_GPIO_Init+0x304>)
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80082d0:	4b2d      	ldr	r3, [pc, #180]	; (8008388 <HAL_GPIO_Init+0x304>)
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	43db      	mvns	r3, r3
 80082da:	69ba      	ldr	r2, [r7, #24]
 80082dc:	4013      	ands	r3, r2
 80082de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d003      	beq.n	80082f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80082ec:	69ba      	ldr	r2, [r7, #24]
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80082f4:	4a24      	ldr	r2, [pc, #144]	; (8008388 <HAL_GPIO_Init+0x304>)
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80082fa:	4b23      	ldr	r3, [pc, #140]	; (8008388 <HAL_GPIO_Init+0x304>)
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	43db      	mvns	r3, r3
 8008304:	69ba      	ldr	r2, [r7, #24]
 8008306:	4013      	ands	r3, r2
 8008308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d003      	beq.n	800831e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8008316:	69ba      	ldr	r2, [r7, #24]
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	4313      	orrs	r3, r2
 800831c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800831e:	4a1a      	ldr	r2, [pc, #104]	; (8008388 <HAL_GPIO_Init+0x304>)
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008324:	4b18      	ldr	r3, [pc, #96]	; (8008388 <HAL_GPIO_Init+0x304>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	43db      	mvns	r3, r3
 800832e:	69ba      	ldr	r2, [r7, #24]
 8008330:	4013      	ands	r3, r2
 8008332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d003      	beq.n	8008348 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008340:	69ba      	ldr	r2, [r7, #24]
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	4313      	orrs	r3, r2
 8008346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008348:	4a0f      	ldr	r2, [pc, #60]	; (8008388 <HAL_GPIO_Init+0x304>)
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	3301      	adds	r3, #1
 8008352:	61fb      	str	r3, [r7, #28]
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	2b0f      	cmp	r3, #15
 8008358:	f67f aea2 	bls.w	80080a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800835c:	bf00      	nop
 800835e:	bf00      	nop
 8008360:	3724      	adds	r7, #36	; 0x24
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	40023800 	.word	0x40023800
 8008370:	40013800 	.word	0x40013800
 8008374:	40020000 	.word	0x40020000
 8008378:	40020400 	.word	0x40020400
 800837c:	40020800 	.word	0x40020800
 8008380:	40020c00 	.word	0x40020c00
 8008384:	40021000 	.word	0x40021000
 8008388:	40013c00 	.word	0x40013c00

0800838c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	460b      	mov	r3, r1
 8008396:	807b      	strh	r3, [r7, #2]
 8008398:	4613      	mov	r3, r2
 800839a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800839c:	787b      	ldrb	r3, [r7, #1]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d003      	beq.n	80083aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80083a2:	887a      	ldrh	r2, [r7, #2]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80083a8:	e003      	b.n	80083b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80083aa:	887b      	ldrh	r3, [r7, #2]
 80083ac:	041a      	lsls	r2, r3, #16
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	619a      	str	r2, [r3, #24]
}
 80083b2:	bf00      	nop
 80083b4:	370c      	adds	r7, #12
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
	...

080083c0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b088      	sub	sp, #32
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e128      	b.n	8008624 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d109      	bne.n	80083f2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a90      	ldr	r2, [pc, #576]	; (800862c <HAL_I2S_Init+0x26c>)
 80083ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f7f8 f977 	bl	80006e0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2202      	movs	r2, #2
 80083f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	6812      	ldr	r2, [r2, #0]
 8008404:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008408:	f023 030f 	bic.w	r3, r3, #15
 800840c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2202      	movs	r2, #2
 8008414:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	695b      	ldr	r3, [r3, #20]
 800841a:	2b02      	cmp	r3, #2
 800841c:	d060      	beq.n	80084e0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d102      	bne.n	800842c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8008426:	2310      	movs	r3, #16
 8008428:	617b      	str	r3, [r7, #20]
 800842a:	e001      	b.n	8008430 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800842c:	2320      	movs	r3, #32
 800842e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	2b20      	cmp	r3, #32
 8008436:	d802      	bhi.n	800843e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	005b      	lsls	r3, r3, #1
 800843c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800843e:	2001      	movs	r0, #1
 8008440:	f001 fada 	bl	80099f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008444:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800844e:	d125      	bne.n	800849c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d010      	beq.n	800847a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008462:	4613      	mov	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4413      	add	r3, r2
 8008468:	005b      	lsls	r3, r3, #1
 800846a:	461a      	mov	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	695b      	ldr	r3, [r3, #20]
 8008470:	fbb2 f3f3 	udiv	r3, r2, r3
 8008474:	3305      	adds	r3, #5
 8008476:	613b      	str	r3, [r7, #16]
 8008478:	e01f      	b.n	80084ba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	00db      	lsls	r3, r3, #3
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	fbb2 f2f3 	udiv	r2, r2, r3
 8008484:	4613      	mov	r3, r2
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	4413      	add	r3, r2
 800848a:	005b      	lsls	r3, r3, #1
 800848c:	461a      	mov	r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	fbb2 f3f3 	udiv	r3, r2, r3
 8008496:	3305      	adds	r3, #5
 8008498:	613b      	str	r3, [r7, #16]
 800849a:	e00e      	b.n	80084ba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80084a4:	4613      	mov	r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4413      	add	r3, r2
 80084aa:	005b      	lsls	r3, r3, #1
 80084ac:	461a      	mov	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b6:	3305      	adds	r3, #5
 80084b8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	4a5c      	ldr	r2, [pc, #368]	; (8008630 <HAL_I2S_Init+0x270>)
 80084be:	fba2 2303 	umull	r2, r3, r2, r3
 80084c2:	08db      	lsrs	r3, r3, #3
 80084c4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80084ce:	693a      	ldr	r2, [r7, #16]
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	1ad3      	subs	r3, r2, r3
 80084d4:	085b      	lsrs	r3, r3, #1
 80084d6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	021b      	lsls	r3, r3, #8
 80084dc:	61bb      	str	r3, [r7, #24]
 80084de:	e003      	b.n	80084e8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80084e0:	2302      	movs	r3, #2
 80084e2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80084e4:	2300      	movs	r3, #0
 80084e6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d902      	bls.n	80084f4 <HAL_I2S_Init+0x134>
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	2bff      	cmp	r3, #255	; 0xff
 80084f2:	d907      	bls.n	8008504 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084f8:	f043 0210 	orr.w	r2, r3, #16
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	e08f      	b.n	8008624 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	691a      	ldr	r2, [r3, #16]
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	ea42 0103 	orr.w	r1, r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	69fa      	ldr	r2, [r7, #28]
 8008514:	430a      	orrs	r2, r1
 8008516:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	69db      	ldr	r3, [r3, #28]
 800851e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008522:	f023 030f 	bic.w	r3, r3, #15
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	6851      	ldr	r1, [r2, #4]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	6892      	ldr	r2, [r2, #8]
 800852e:	4311      	orrs	r1, r2
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	68d2      	ldr	r2, [r2, #12]
 8008534:	4311      	orrs	r1, r2
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	6992      	ldr	r2, [r2, #24]
 800853a:	430a      	orrs	r2, r1
 800853c:	431a      	orrs	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008546:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a1b      	ldr	r3, [r3, #32]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d161      	bne.n	8008614 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a38      	ldr	r2, [pc, #224]	; (8008634 <HAL_I2S_Init+0x274>)
 8008554:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a37      	ldr	r2, [pc, #220]	; (8008638 <HAL_I2S_Init+0x278>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d101      	bne.n	8008564 <HAL_I2S_Init+0x1a4>
 8008560:	4b36      	ldr	r3, [pc, #216]	; (800863c <HAL_I2S_Init+0x27c>)
 8008562:	e001      	b.n	8008568 <HAL_I2S_Init+0x1a8>
 8008564:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008568:	69db      	ldr	r3, [r3, #28]
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	6812      	ldr	r2, [r2, #0]
 800856e:	4932      	ldr	r1, [pc, #200]	; (8008638 <HAL_I2S_Init+0x278>)
 8008570:	428a      	cmp	r2, r1
 8008572:	d101      	bne.n	8008578 <HAL_I2S_Init+0x1b8>
 8008574:	4a31      	ldr	r2, [pc, #196]	; (800863c <HAL_I2S_Init+0x27c>)
 8008576:	e001      	b.n	800857c <HAL_I2S_Init+0x1bc>
 8008578:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800857c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008580:	f023 030f 	bic.w	r3, r3, #15
 8008584:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a2b      	ldr	r2, [pc, #172]	; (8008638 <HAL_I2S_Init+0x278>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d101      	bne.n	8008594 <HAL_I2S_Init+0x1d4>
 8008590:	4b2a      	ldr	r3, [pc, #168]	; (800863c <HAL_I2S_Init+0x27c>)
 8008592:	e001      	b.n	8008598 <HAL_I2S_Init+0x1d8>
 8008594:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008598:	2202      	movs	r2, #2
 800859a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a25      	ldr	r2, [pc, #148]	; (8008638 <HAL_I2S_Init+0x278>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d101      	bne.n	80085aa <HAL_I2S_Init+0x1ea>
 80085a6:	4b25      	ldr	r3, [pc, #148]	; (800863c <HAL_I2S_Init+0x27c>)
 80085a8:	e001      	b.n	80085ae <HAL_I2S_Init+0x1ee>
 80085aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80085ae:	69db      	ldr	r3, [r3, #28]
 80085b0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085ba:	d003      	beq.n	80085c4 <HAL_I2S_Init+0x204>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d103      	bne.n	80085cc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80085c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085c8:	613b      	str	r3, [r7, #16]
 80085ca:	e001      	b.n	80085d0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80085cc:	2300      	movs	r3, #0
 80085ce:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80085da:	4313      	orrs	r3, r2
 80085dc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80085e4:	4313      	orrs	r3, r2
 80085e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80085ee:	4313      	orrs	r3, r2
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	897b      	ldrh	r3, [r7, #10]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80085fc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a0d      	ldr	r2, [pc, #52]	; (8008638 <HAL_I2S_Init+0x278>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d101      	bne.n	800860c <HAL_I2S_Init+0x24c>
 8008608:	4b0c      	ldr	r3, [pc, #48]	; (800863c <HAL_I2S_Init+0x27c>)
 800860a:	e001      	b.n	8008610 <HAL_I2S_Init+0x250>
 800860c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008610:	897a      	ldrh	r2, [r7, #10]
 8008612:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3720      	adds	r7, #32
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	0800874f 	.word	0x0800874f
 8008630:	cccccccd 	.word	0xcccccccd
 8008634:	08008865 	.word	0x08008865
 8008638:	40003800 	.word	0x40003800
 800863c:	40003400 	.word	0x40003400

08008640 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	4798      	blx	r3
}
 8008650:	bf00      	nop
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8008660:	bf00      	nop
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a0:	881a      	ldrh	r2, [r3, #0]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ac:	1c9a      	adds	r2, r3, #2
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	3b01      	subs	r3, #1
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10e      	bne.n	80086e8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	685a      	ldr	r2, [r3, #4]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80086d8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2201      	movs	r2, #1
 80086de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7ff ffb8 	bl	8008658 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80086e8:	bf00      	nop
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68da      	ldr	r2, [r3, #12]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008702:	b292      	uxth	r2, r2
 8008704:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870a:	1c9a      	adds	r2, r3, #2
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008714:	b29b      	uxth	r3, r3
 8008716:	3b01      	subs	r3, #1
 8008718:	b29a      	uxth	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008722:	b29b      	uxth	r3, r3
 8008724:	2b00      	cmp	r3, #0
 8008726:	d10e      	bne.n	8008746 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008736:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7ff ff93 	bl	800866c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008746:	bf00      	nop
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b086      	sub	sp, #24
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b04      	cmp	r3, #4
 8008768:	d13a      	bne.n	80087e0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	f003 0301 	and.w	r3, r3, #1
 8008770:	2b01      	cmp	r3, #1
 8008772:	d109      	bne.n	8008788 <I2S_IRQHandler+0x3a>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800877e:	2b40      	cmp	r3, #64	; 0x40
 8008780:	d102      	bne.n	8008788 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f7ff ffb4 	bl	80086f0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800878e:	2b40      	cmp	r3, #64	; 0x40
 8008790:	d126      	bne.n	80087e0 <I2S_IRQHandler+0x92>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	f003 0320 	and.w	r3, r3, #32
 800879c:	2b20      	cmp	r3, #32
 800879e:	d11f      	bne.n	80087e0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80087ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80087b0:	2300      	movs	r3, #0
 80087b2:	613b      	str	r3, [r7, #16]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	613b      	str	r3, [r7, #16]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	613b      	str	r3, [r7, #16]
 80087c4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087d2:	f043 0202 	orr.w	r2, r3, #2
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7ff ff50 	bl	8008680 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	2b03      	cmp	r3, #3
 80087ea:	d136      	bne.n	800885a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	f003 0302 	and.w	r3, r3, #2
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d109      	bne.n	800880a <I2S_IRQHandler+0xbc>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008800:	2b80      	cmp	r3, #128	; 0x80
 8008802:	d102      	bne.n	800880a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f7ff ff45 	bl	8008694 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	f003 0308 	and.w	r3, r3, #8
 8008810:	2b08      	cmp	r3, #8
 8008812:	d122      	bne.n	800885a <I2S_IRQHandler+0x10c>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	f003 0320 	and.w	r3, r3, #32
 800881e:	2b20      	cmp	r3, #32
 8008820:	d11b      	bne.n	800885a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	685a      	ldr	r2, [r3, #4]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008830:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008832:	2300      	movs	r3, #0
 8008834:	60fb      	str	r3, [r7, #12]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	60fb      	str	r3, [r7, #12]
 800883e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800884c:	f043 0204 	orr.w	r2, r3, #4
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f7ff ff13 	bl	8008680 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800885a:	bf00      	nop
 800885c:	3718      	adds	r7, #24
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
	...

08008864 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b088      	sub	sp, #32
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a92      	ldr	r2, [pc, #584]	; (8008ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d101      	bne.n	8008882 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800887e:	4b92      	ldr	r3, [pc, #584]	; (8008ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008880:	e001      	b.n	8008886 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8008882:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a8b      	ldr	r2, [pc, #556]	; (8008ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d101      	bne.n	80088a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800889c:	4b8a      	ldr	r3, [pc, #552]	; (8008ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800889e:	e001      	b.n	80088a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80088a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088b0:	d004      	beq.n	80088bc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f040 8099 	bne.w	80089ee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	f003 0302 	and.w	r3, r3, #2
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d107      	bne.n	80088d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d002      	beq.n	80088d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f925 	bl	8008b20 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	f003 0301 	and.w	r3, r3, #1
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d107      	bne.n	80088f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d002      	beq.n	80088f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 f9c8 	bl	8008c80 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f6:	2b40      	cmp	r3, #64	; 0x40
 80088f8:	d13a      	bne.n	8008970 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	f003 0320 	and.w	r3, r3, #32
 8008900:	2b00      	cmp	r3, #0
 8008902:	d035      	beq.n	8008970 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a6e      	ldr	r2, [pc, #440]	; (8008ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d101      	bne.n	8008912 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800890e:	4b6e      	ldr	r3, [pc, #440]	; (8008ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008910:	e001      	b.n	8008916 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8008912:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008916:	685a      	ldr	r2, [r3, #4]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4969      	ldr	r1, [pc, #420]	; (8008ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800891e:	428b      	cmp	r3, r1
 8008920:	d101      	bne.n	8008926 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8008922:	4b69      	ldr	r3, [pc, #420]	; (8008ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008924:	e001      	b.n	800892a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8008926:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800892a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800892e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	685a      	ldr	r2, [r3, #4]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800893e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008940:	2300      	movs	r3, #0
 8008942:	60fb      	str	r3, [r7, #12]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	60fb      	str	r3, [r7, #12]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	60fb      	str	r3, [r7, #12]
 8008954:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008962:	f043 0202 	orr.w	r2, r3, #2
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7ff fe88 	bl	8008680 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	f003 0308 	and.w	r3, r3, #8
 8008976:	2b08      	cmp	r3, #8
 8008978:	f040 80c3 	bne.w	8008b02 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	f003 0320 	and.w	r3, r3, #32
 8008982:	2b00      	cmp	r3, #0
 8008984:	f000 80bd 	beq.w	8008b02 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	685a      	ldr	r2, [r3, #4]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008996:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a49      	ldr	r2, [pc, #292]	; (8008ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d101      	bne.n	80089a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80089a2:	4b49      	ldr	r3, [pc, #292]	; (8008ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80089a4:	e001      	b.n	80089aa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80089a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4944      	ldr	r1, [pc, #272]	; (8008ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80089b2:	428b      	cmp	r3, r1
 80089b4:	d101      	bne.n	80089ba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80089b6:	4b44      	ldr	r3, [pc, #272]	; (8008ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80089b8:	e001      	b.n	80089be <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80089ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80089be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80089c2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80089c4:	2300      	movs	r3, #0
 80089c6:	60bb      	str	r3, [r7, #8]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	60bb      	str	r3, [r7, #8]
 80089d0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089de:	f043 0204 	orr.w	r2, r3, #4
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f7ff fe4a 	bl	8008680 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80089ec:	e089      	b.n	8008b02 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	f003 0302 	and.w	r3, r3, #2
 80089f4:	2b02      	cmp	r3, #2
 80089f6:	d107      	bne.n	8008a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d002      	beq.n	8008a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f8be 	bl	8008b84 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	f003 0301 	and.w	r3, r3, #1
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d107      	bne.n	8008a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d002      	beq.n	8008a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 f8fd 	bl	8008c1c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a28:	2b40      	cmp	r3, #64	; 0x40
 8008a2a:	d12f      	bne.n	8008a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	f003 0320 	and.w	r3, r3, #32
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d02a      	beq.n	8008a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008a44:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a1e      	ldr	r2, [pc, #120]	; (8008ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d101      	bne.n	8008a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8008a50:	4b1d      	ldr	r3, [pc, #116]	; (8008ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008a52:	e001      	b.n	8008a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8008a54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008a58:	685a      	ldr	r2, [r3, #4]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4919      	ldr	r1, [pc, #100]	; (8008ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008a60:	428b      	cmp	r3, r1
 8008a62:	d101      	bne.n	8008a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8008a64:	4b18      	ldr	r3, [pc, #96]	; (8008ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008a66:	e001      	b.n	8008a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8008a68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008a6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008a70:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a7e:	f043 0202 	orr.w	r2, r3, #2
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f7ff fdfa 	bl	8008680 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	f003 0308 	and.w	r3, r3, #8
 8008a92:	2b08      	cmp	r3, #8
 8008a94:	d136      	bne.n	8008b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	f003 0320 	and.w	r3, r3, #32
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d031      	beq.n	8008b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a07      	ldr	r2, [pc, #28]	; (8008ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d101      	bne.n	8008aae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8008aaa:	4b07      	ldr	r3, [pc, #28]	; (8008ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008aac:	e001      	b.n	8008ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8008aae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4902      	ldr	r1, [pc, #8]	; (8008ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008aba:	428b      	cmp	r3, r1
 8008abc:	d106      	bne.n	8008acc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8008abe:	4b02      	ldr	r3, [pc, #8]	; (8008ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008ac0:	e006      	b.n	8008ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8008ac2:	bf00      	nop
 8008ac4:	40003800 	.word	0x40003800
 8008ac8:	40003400 	.word	0x40003400
 8008acc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ad0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008ad4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008ae4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008af2:	f043 0204 	orr.w	r2, r3, #4
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f7ff fdc0 	bl	8008680 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008b00:	e000      	b.n	8008b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008b02:	bf00      	nop
}
 8008b04:	bf00      	nop
 8008b06:	3720      	adds	r7, #32
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8008b14:	bf00      	nop
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2c:	1c99      	adds	r1, r3, #2
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	6251      	str	r1, [r2, #36]	; 0x24
 8008b32:	881a      	ldrh	r2, [r3, #0]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	3b01      	subs	r3, #1
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d113      	bne.n	8008b7a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	685a      	ldr	r2, [r3, #4]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008b60:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d106      	bne.n	8008b7a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f7ff ffc9 	bl	8008b0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008b7a:	bf00      	nop
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
	...

08008b84 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b90:	1c99      	adds	r1, r3, #2
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	6251      	str	r1, [r2, #36]	; 0x24
 8008b96:	8819      	ldrh	r1, [r3, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a1d      	ldr	r2, [pc, #116]	; (8008c14 <I2SEx_TxISR_I2SExt+0x90>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d101      	bne.n	8008ba6 <I2SEx_TxISR_I2SExt+0x22>
 8008ba2:	4b1d      	ldr	r3, [pc, #116]	; (8008c18 <I2SEx_TxISR_I2SExt+0x94>)
 8008ba4:	e001      	b.n	8008baa <I2SEx_TxISR_I2SExt+0x26>
 8008ba6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008baa:	460a      	mov	r2, r1
 8008bac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	b29a      	uxth	r2, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d121      	bne.n	8008c0a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a12      	ldr	r2, [pc, #72]	; (8008c14 <I2SEx_TxISR_I2SExt+0x90>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d101      	bne.n	8008bd4 <I2SEx_TxISR_I2SExt+0x50>
 8008bd0:	4b11      	ldr	r3, [pc, #68]	; (8008c18 <I2SEx_TxISR_I2SExt+0x94>)
 8008bd2:	e001      	b.n	8008bd8 <I2SEx_TxISR_I2SExt+0x54>
 8008bd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008bd8:	685a      	ldr	r2, [r3, #4]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	490d      	ldr	r1, [pc, #52]	; (8008c14 <I2SEx_TxISR_I2SExt+0x90>)
 8008be0:	428b      	cmp	r3, r1
 8008be2:	d101      	bne.n	8008be8 <I2SEx_TxISR_I2SExt+0x64>
 8008be4:	4b0c      	ldr	r3, [pc, #48]	; (8008c18 <I2SEx_TxISR_I2SExt+0x94>)
 8008be6:	e001      	b.n	8008bec <I2SEx_TxISR_I2SExt+0x68>
 8008be8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008bec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008bf0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d106      	bne.n	8008c0a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f7ff ff81 	bl	8008b0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008c0a:	bf00      	nop
 8008c0c:	3708      	adds	r7, #8
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	40003800 	.word	0x40003800
 8008c18:	40003400 	.word	0x40003400

08008c1c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68d8      	ldr	r0, [r3, #12]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2e:	1c99      	adds	r1, r3, #2
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	62d1      	str	r1, [r2, #44]	; 0x2c
 8008c34:	b282      	uxth	r2, r0
 8008c36:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	b29a      	uxth	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d113      	bne.n	8008c78 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	685a      	ldr	r2, [r3, #4]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008c5e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d106      	bne.n	8008c78 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f7ff ff4a 	bl	8008b0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008c78:	bf00      	nop
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a20      	ldr	r2, [pc, #128]	; (8008d10 <I2SEx_RxISR_I2SExt+0x90>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d101      	bne.n	8008c96 <I2SEx_RxISR_I2SExt+0x16>
 8008c92:	4b20      	ldr	r3, [pc, #128]	; (8008d14 <I2SEx_RxISR_I2SExt+0x94>)
 8008c94:	e001      	b.n	8008c9a <I2SEx_RxISR_I2SExt+0x1a>
 8008c96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008c9a:	68d8      	ldr	r0, [r3, #12]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca0:	1c99      	adds	r1, r3, #2
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8008ca6:	b282      	uxth	r2, r0
 8008ca8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d121      	bne.n	8008d06 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a12      	ldr	r2, [pc, #72]	; (8008d10 <I2SEx_RxISR_I2SExt+0x90>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d101      	bne.n	8008cd0 <I2SEx_RxISR_I2SExt+0x50>
 8008ccc:	4b11      	ldr	r3, [pc, #68]	; (8008d14 <I2SEx_RxISR_I2SExt+0x94>)
 8008cce:	e001      	b.n	8008cd4 <I2SEx_RxISR_I2SExt+0x54>
 8008cd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008cd4:	685a      	ldr	r2, [r3, #4]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	490d      	ldr	r1, [pc, #52]	; (8008d10 <I2SEx_RxISR_I2SExt+0x90>)
 8008cdc:	428b      	cmp	r3, r1
 8008cde:	d101      	bne.n	8008ce4 <I2SEx_RxISR_I2SExt+0x64>
 8008ce0:	4b0c      	ldr	r3, [pc, #48]	; (8008d14 <I2SEx_RxISR_I2SExt+0x94>)
 8008ce2:	e001      	b.n	8008ce8 <I2SEx_RxISR_I2SExt+0x68>
 8008ce4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ce8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008cec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d106      	bne.n	8008d06 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7ff ff03 	bl	8008b0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008d06:	bf00      	nop
 8008d08:	3708      	adds	r7, #8
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	40003800 	.word	0x40003800
 8008d14:	40003400 	.word	0x40003400

08008d18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d1a:	b08f      	sub	sp, #60	; 0x3c
 8008d1c:	af0a      	add	r7, sp, #40	; 0x28
 8008d1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d101      	bne.n	8008d2a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e10f      	b.n	8008f4a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d106      	bne.n	8008d4a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f7f8 fc7f 	bl	8001648 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2203      	movs	r2, #3
 8008d4e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d102      	bne.n	8008d64 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f001 fc4a 	bl	800a602 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	603b      	str	r3, [r7, #0]
 8008d74:	687e      	ldr	r6, [r7, #4]
 8008d76:	466d      	mov	r5, sp
 8008d78:	f106 0410 	add.w	r4, r6, #16
 8008d7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008d88:	e885 0003 	stmia.w	r5, {r0, r1}
 8008d8c:	1d33      	adds	r3, r6, #4
 8008d8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d90:	6838      	ldr	r0, [r7, #0]
 8008d92:	f001 fbd5 	bl	800a540 <USB_CoreInit>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d005      	beq.n	8008da8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2202      	movs	r2, #2
 8008da0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	e0d0      	b.n	8008f4a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2100      	movs	r1, #0
 8008dae:	4618      	mov	r0, r3
 8008db0:	f001 fc38 	bl	800a624 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008db4:	2300      	movs	r3, #0
 8008db6:	73fb      	strb	r3, [r7, #15]
 8008db8:	e04a      	b.n	8008e50 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008dba:	7bfa      	ldrb	r2, [r7, #15]
 8008dbc:	6879      	ldr	r1, [r7, #4]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	00db      	lsls	r3, r3, #3
 8008dc2:	4413      	add	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	440b      	add	r3, r1
 8008dc8:	333d      	adds	r3, #61	; 0x3d
 8008dca:	2201      	movs	r2, #1
 8008dcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008dce:	7bfa      	ldrb	r2, [r7, #15]
 8008dd0:	6879      	ldr	r1, [r7, #4]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	00db      	lsls	r3, r3, #3
 8008dd6:	4413      	add	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	440b      	add	r3, r1
 8008ddc:	333c      	adds	r3, #60	; 0x3c
 8008dde:	7bfa      	ldrb	r2, [r7, #15]
 8008de0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008de2:	7bfa      	ldrb	r2, [r7, #15]
 8008de4:	7bfb      	ldrb	r3, [r7, #15]
 8008de6:	b298      	uxth	r0, r3
 8008de8:	6879      	ldr	r1, [r7, #4]
 8008dea:	4613      	mov	r3, r2
 8008dec:	00db      	lsls	r3, r3, #3
 8008dee:	4413      	add	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	440b      	add	r3, r1
 8008df4:	3344      	adds	r3, #68	; 0x44
 8008df6:	4602      	mov	r2, r0
 8008df8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008dfa:	7bfa      	ldrb	r2, [r7, #15]
 8008dfc:	6879      	ldr	r1, [r7, #4]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	00db      	lsls	r3, r3, #3
 8008e02:	4413      	add	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	440b      	add	r3, r1
 8008e08:	3340      	adds	r3, #64	; 0x40
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008e0e:	7bfa      	ldrb	r2, [r7, #15]
 8008e10:	6879      	ldr	r1, [r7, #4]
 8008e12:	4613      	mov	r3, r2
 8008e14:	00db      	lsls	r3, r3, #3
 8008e16:	4413      	add	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	440b      	add	r3, r1
 8008e1c:	3348      	adds	r3, #72	; 0x48
 8008e1e:	2200      	movs	r2, #0
 8008e20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008e22:	7bfa      	ldrb	r2, [r7, #15]
 8008e24:	6879      	ldr	r1, [r7, #4]
 8008e26:	4613      	mov	r3, r2
 8008e28:	00db      	lsls	r3, r3, #3
 8008e2a:	4413      	add	r3, r2
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	440b      	add	r3, r1
 8008e30:	334c      	adds	r3, #76	; 0x4c
 8008e32:	2200      	movs	r2, #0
 8008e34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008e36:	7bfa      	ldrb	r2, [r7, #15]
 8008e38:	6879      	ldr	r1, [r7, #4]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	00db      	lsls	r3, r3, #3
 8008e3e:	4413      	add	r3, r2
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	440b      	add	r3, r1
 8008e44:	3354      	adds	r3, #84	; 0x54
 8008e46:	2200      	movs	r2, #0
 8008e48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e4a:	7bfb      	ldrb	r3, [r7, #15]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	73fb      	strb	r3, [r7, #15]
 8008e50:	7bfa      	ldrb	r2, [r7, #15]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d3af      	bcc.n	8008dba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	73fb      	strb	r3, [r7, #15]
 8008e5e:	e044      	b.n	8008eea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008e60:	7bfa      	ldrb	r2, [r7, #15]
 8008e62:	6879      	ldr	r1, [r7, #4]
 8008e64:	4613      	mov	r3, r2
 8008e66:	00db      	lsls	r3, r3, #3
 8008e68:	4413      	add	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	440b      	add	r3, r1
 8008e6e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008e72:	2200      	movs	r2, #0
 8008e74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008e76:	7bfa      	ldrb	r2, [r7, #15]
 8008e78:	6879      	ldr	r1, [r7, #4]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	00db      	lsls	r3, r3, #3
 8008e7e:	4413      	add	r3, r2
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	440b      	add	r3, r1
 8008e84:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008e88:	7bfa      	ldrb	r2, [r7, #15]
 8008e8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008e8c:	7bfa      	ldrb	r2, [r7, #15]
 8008e8e:	6879      	ldr	r1, [r7, #4]
 8008e90:	4613      	mov	r3, r2
 8008e92:	00db      	lsls	r3, r3, #3
 8008e94:	4413      	add	r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	440b      	add	r3, r1
 8008e9a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008ea2:	7bfa      	ldrb	r2, [r7, #15]
 8008ea4:	6879      	ldr	r1, [r7, #4]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	00db      	lsls	r3, r3, #3
 8008eaa:	4413      	add	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	440b      	add	r3, r1
 8008eb0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008eb8:	7bfa      	ldrb	r2, [r7, #15]
 8008eba:	6879      	ldr	r1, [r7, #4]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	00db      	lsls	r3, r3, #3
 8008ec0:	4413      	add	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	440b      	add	r3, r1
 8008ec6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008eca:	2200      	movs	r2, #0
 8008ecc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008ece:	7bfa      	ldrb	r2, [r7, #15]
 8008ed0:	6879      	ldr	r1, [r7, #4]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	00db      	lsls	r3, r3, #3
 8008ed6:	4413      	add	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	440b      	add	r3, r1
 8008edc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ee4:	7bfb      	ldrb	r3, [r7, #15]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	73fb      	strb	r3, [r7, #15]
 8008eea:	7bfa      	ldrb	r2, [r7, #15]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d3b5      	bcc.n	8008e60 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	603b      	str	r3, [r7, #0]
 8008efa:	687e      	ldr	r6, [r7, #4]
 8008efc:	466d      	mov	r5, sp
 8008efe:	f106 0410 	add.w	r4, r6, #16
 8008f02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008f04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008f06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008f08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008f0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008f0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008f12:	1d33      	adds	r3, r6, #4
 8008f14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f16:	6838      	ldr	r0, [r7, #0]
 8008f18:	f001 fbd0 	bl	800a6bc <USB_DevInit>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d005      	beq.n	8008f2e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2202      	movs	r2, #2
 8008f26:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e00d      	b.n	8008f4a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f001 fd9b 	bl	800aa7e <USB_DevDisconnect>

  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008f54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d101      	bne.n	8008f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	e267      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 0301 	and.w	r3, r3, #1
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d075      	beq.n	800905e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008f72:	4b88      	ldr	r3, [pc, #544]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	f003 030c 	and.w	r3, r3, #12
 8008f7a:	2b04      	cmp	r3, #4
 8008f7c:	d00c      	beq.n	8008f98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f7e:	4b85      	ldr	r3, [pc, #532]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008f86:	2b08      	cmp	r3, #8
 8008f88:	d112      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f8a:	4b82      	ldr	r3, [pc, #520]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f96:	d10b      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f98:	4b7e      	ldr	r3, [pc, #504]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d05b      	beq.n	800905c <HAL_RCC_OscConfig+0x108>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d157      	bne.n	800905c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e242      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fb8:	d106      	bne.n	8008fc8 <HAL_RCC_OscConfig+0x74>
 8008fba:	4b76      	ldr	r3, [pc, #472]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a75      	ldr	r2, [pc, #468]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 8008fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fc4:	6013      	str	r3, [r2, #0]
 8008fc6:	e01d      	b.n	8009004 <HAL_RCC_OscConfig+0xb0>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008fd0:	d10c      	bne.n	8008fec <HAL_RCC_OscConfig+0x98>
 8008fd2:	4b70      	ldr	r3, [pc, #448]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a6f      	ldr	r2, [pc, #444]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 8008fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008fdc:	6013      	str	r3, [r2, #0]
 8008fde:	4b6d      	ldr	r3, [pc, #436]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a6c      	ldr	r2, [pc, #432]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 8008fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fe8:	6013      	str	r3, [r2, #0]
 8008fea:	e00b      	b.n	8009004 <HAL_RCC_OscConfig+0xb0>
 8008fec:	4b69      	ldr	r3, [pc, #420]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a68      	ldr	r2, [pc, #416]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 8008ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ff6:	6013      	str	r3, [r2, #0]
 8008ff8:	4b66      	ldr	r3, [pc, #408]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a65      	ldr	r2, [pc, #404]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 8008ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d013      	beq.n	8009034 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800900c:	f7fe fbf2 	bl	80077f4 <HAL_GetTick>
 8009010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009012:	e008      	b.n	8009026 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009014:	f7fe fbee 	bl	80077f4 <HAL_GetTick>
 8009018:	4602      	mov	r2, r0
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	2b64      	cmp	r3, #100	; 0x64
 8009020:	d901      	bls.n	8009026 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009022:	2303      	movs	r3, #3
 8009024:	e207      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009026:	4b5b      	ldr	r3, [pc, #364]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800902e:	2b00      	cmp	r3, #0
 8009030:	d0f0      	beq.n	8009014 <HAL_RCC_OscConfig+0xc0>
 8009032:	e014      	b.n	800905e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009034:	f7fe fbde 	bl	80077f4 <HAL_GetTick>
 8009038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800903a:	e008      	b.n	800904e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800903c:	f7fe fbda 	bl	80077f4 <HAL_GetTick>
 8009040:	4602      	mov	r2, r0
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	2b64      	cmp	r3, #100	; 0x64
 8009048:	d901      	bls.n	800904e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	e1f3      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800904e:	4b51      	ldr	r3, [pc, #324]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1f0      	bne.n	800903c <HAL_RCC_OscConfig+0xe8>
 800905a:	e000      	b.n	800905e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800905c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 0302 	and.w	r3, r3, #2
 8009066:	2b00      	cmp	r3, #0
 8009068:	d063      	beq.n	8009132 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800906a:	4b4a      	ldr	r3, [pc, #296]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	f003 030c 	and.w	r3, r3, #12
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00b      	beq.n	800908e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009076:	4b47      	ldr	r3, [pc, #284]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800907e:	2b08      	cmp	r3, #8
 8009080:	d11c      	bne.n	80090bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009082:	4b44      	ldr	r3, [pc, #272]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800908a:	2b00      	cmp	r3, #0
 800908c:	d116      	bne.n	80090bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800908e:	4b41      	ldr	r3, [pc, #260]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 0302 	and.w	r3, r3, #2
 8009096:	2b00      	cmp	r3, #0
 8009098:	d005      	beq.n	80090a6 <HAL_RCC_OscConfig+0x152>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d001      	beq.n	80090a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e1c7      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090a6:	4b3b      	ldr	r3, [pc, #236]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	00db      	lsls	r3, r3, #3
 80090b4:	4937      	ldr	r1, [pc, #220]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 80090b6:	4313      	orrs	r3, r2
 80090b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090ba:	e03a      	b.n	8009132 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d020      	beq.n	8009106 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80090c4:	4b34      	ldr	r3, [pc, #208]	; (8009198 <HAL_RCC_OscConfig+0x244>)
 80090c6:	2201      	movs	r2, #1
 80090c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090ca:	f7fe fb93 	bl	80077f4 <HAL_GetTick>
 80090ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090d0:	e008      	b.n	80090e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80090d2:	f7fe fb8f 	bl	80077f4 <HAL_GetTick>
 80090d6:	4602      	mov	r2, r0
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	1ad3      	subs	r3, r2, r3
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d901      	bls.n	80090e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80090e0:	2303      	movs	r3, #3
 80090e2:	e1a8      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090e4:	4b2b      	ldr	r3, [pc, #172]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f003 0302 	and.w	r3, r3, #2
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d0f0      	beq.n	80090d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090f0:	4b28      	ldr	r3, [pc, #160]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	691b      	ldr	r3, [r3, #16]
 80090fc:	00db      	lsls	r3, r3, #3
 80090fe:	4925      	ldr	r1, [pc, #148]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 8009100:	4313      	orrs	r3, r2
 8009102:	600b      	str	r3, [r1, #0]
 8009104:	e015      	b.n	8009132 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009106:	4b24      	ldr	r3, [pc, #144]	; (8009198 <HAL_RCC_OscConfig+0x244>)
 8009108:	2200      	movs	r2, #0
 800910a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800910c:	f7fe fb72 	bl	80077f4 <HAL_GetTick>
 8009110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009112:	e008      	b.n	8009126 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009114:	f7fe fb6e 	bl	80077f4 <HAL_GetTick>
 8009118:	4602      	mov	r2, r0
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	2b02      	cmp	r3, #2
 8009120:	d901      	bls.n	8009126 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009122:	2303      	movs	r3, #3
 8009124:	e187      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009126:	4b1b      	ldr	r3, [pc, #108]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 0302 	and.w	r3, r3, #2
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1f0      	bne.n	8009114 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 0308 	and.w	r3, r3, #8
 800913a:	2b00      	cmp	r3, #0
 800913c:	d036      	beq.n	80091ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	695b      	ldr	r3, [r3, #20]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d016      	beq.n	8009174 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009146:	4b15      	ldr	r3, [pc, #84]	; (800919c <HAL_RCC_OscConfig+0x248>)
 8009148:	2201      	movs	r2, #1
 800914a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800914c:	f7fe fb52 	bl	80077f4 <HAL_GetTick>
 8009150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009152:	e008      	b.n	8009166 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009154:	f7fe fb4e 	bl	80077f4 <HAL_GetTick>
 8009158:	4602      	mov	r2, r0
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	2b02      	cmp	r3, #2
 8009160:	d901      	bls.n	8009166 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	e167      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009166:	4b0b      	ldr	r3, [pc, #44]	; (8009194 <HAL_RCC_OscConfig+0x240>)
 8009168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800916a:	f003 0302 	and.w	r3, r3, #2
 800916e:	2b00      	cmp	r3, #0
 8009170:	d0f0      	beq.n	8009154 <HAL_RCC_OscConfig+0x200>
 8009172:	e01b      	b.n	80091ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009174:	4b09      	ldr	r3, [pc, #36]	; (800919c <HAL_RCC_OscConfig+0x248>)
 8009176:	2200      	movs	r2, #0
 8009178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800917a:	f7fe fb3b 	bl	80077f4 <HAL_GetTick>
 800917e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009180:	e00e      	b.n	80091a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009182:	f7fe fb37 	bl	80077f4 <HAL_GetTick>
 8009186:	4602      	mov	r2, r0
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	1ad3      	subs	r3, r2, r3
 800918c:	2b02      	cmp	r3, #2
 800918e:	d907      	bls.n	80091a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009190:	2303      	movs	r3, #3
 8009192:	e150      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
 8009194:	40023800 	.word	0x40023800
 8009198:	42470000 	.word	0x42470000
 800919c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091a0:	4b88      	ldr	r3, [pc, #544]	; (80093c4 <HAL_RCC_OscConfig+0x470>)
 80091a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091a4:	f003 0302 	and.w	r3, r3, #2
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1ea      	bne.n	8009182 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 0304 	and.w	r3, r3, #4
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f000 8097 	beq.w	80092e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091ba:	2300      	movs	r3, #0
 80091bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091be:	4b81      	ldr	r3, [pc, #516]	; (80093c4 <HAL_RCC_OscConfig+0x470>)
 80091c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d10f      	bne.n	80091ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091ca:	2300      	movs	r3, #0
 80091cc:	60bb      	str	r3, [r7, #8]
 80091ce:	4b7d      	ldr	r3, [pc, #500]	; (80093c4 <HAL_RCC_OscConfig+0x470>)
 80091d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d2:	4a7c      	ldr	r2, [pc, #496]	; (80093c4 <HAL_RCC_OscConfig+0x470>)
 80091d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091d8:	6413      	str	r3, [r2, #64]	; 0x40
 80091da:	4b7a      	ldr	r3, [pc, #488]	; (80093c4 <HAL_RCC_OscConfig+0x470>)
 80091dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091e2:	60bb      	str	r3, [r7, #8]
 80091e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80091e6:	2301      	movs	r3, #1
 80091e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091ea:	4b77      	ldr	r3, [pc, #476]	; (80093c8 <HAL_RCC_OscConfig+0x474>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d118      	bne.n	8009228 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80091f6:	4b74      	ldr	r3, [pc, #464]	; (80093c8 <HAL_RCC_OscConfig+0x474>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a73      	ldr	r2, [pc, #460]	; (80093c8 <HAL_RCC_OscConfig+0x474>)
 80091fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009202:	f7fe faf7 	bl	80077f4 <HAL_GetTick>
 8009206:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009208:	e008      	b.n	800921c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800920a:	f7fe faf3 	bl	80077f4 <HAL_GetTick>
 800920e:	4602      	mov	r2, r0
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	2b02      	cmp	r3, #2
 8009216:	d901      	bls.n	800921c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009218:	2303      	movs	r3, #3
 800921a:	e10c      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800921c:	4b6a      	ldr	r3, [pc, #424]	; (80093c8 <HAL_RCC_OscConfig+0x474>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009224:	2b00      	cmp	r3, #0
 8009226:	d0f0      	beq.n	800920a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d106      	bne.n	800923e <HAL_RCC_OscConfig+0x2ea>
 8009230:	4b64      	ldr	r3, [pc, #400]	; (80093c4 <HAL_RCC_OscConfig+0x470>)
 8009232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009234:	4a63      	ldr	r2, [pc, #396]	; (80093c4 <HAL_RCC_OscConfig+0x470>)
 8009236:	f043 0301 	orr.w	r3, r3, #1
 800923a:	6713      	str	r3, [r2, #112]	; 0x70
 800923c:	e01c      	b.n	8009278 <HAL_RCC_OscConfig+0x324>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	2b05      	cmp	r3, #5
 8009244:	d10c      	bne.n	8009260 <HAL_RCC_OscConfig+0x30c>
 8009246:	4b5f      	ldr	r3, [pc, #380]	; (80093c4 <HAL_RCC_OscConfig+0x470>)
 8009248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800924a:	4a5e      	ldr	r2, [pc, #376]	; (80093c4 <HAL_RCC_OscConfig+0x470>)
 800924c:	f043 0304 	orr.w	r3, r3, #4
 8009250:	6713      	str	r3, [r2, #112]	; 0x70
 8009252:	4b5c      	ldr	r3, [pc, #368]	; (80093c4 <HAL_RCC_OscConfig+0x470>)
 8009254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009256:	4a5b      	ldr	r2, [pc, #364]	; (80093c4 <HAL_RCC_OscConfig+0x470>)
 8009258:	f043 0301 	orr.w	r3, r3, #1
 800925c:	6713      	str	r3, [r2, #112]	; 0x70
 800925e:	e00b      	b.n	8009278 <HAL_RCC_OscConfig+0x324>
 8009260:	4b58      	ldr	r3, [pc, #352]	; (80093c4 <HAL_RCC_OscConfig+0x470>)
 8009262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009264:	4a57      	ldr	r2, [pc, #348]	; (80093c4 <HAL_RCC_OscConfig+0x470>)
 8009266:	f023 0301 	bic.w	r3, r3, #1
 800926a:	6713      	str	r3, [r2, #112]	; 0x70
 800926c:	4b55      	ldr	r3, [pc, #340]	; (80093c4 <HAL_RCC_OscConfig+0x470>)
 800926e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009270:	4a54      	ldr	r2, [pc, #336]	; (80093c4 <HAL_RCC_OscConfig+0x470>)
 8009272:	f023 0304 	bic.w	r3, r3, #4
 8009276:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d015      	beq.n	80092ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009280:	f7fe fab8 	bl	80077f4 <HAL_GetTick>
 8009284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009286:	e00a      	b.n	800929e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009288:	f7fe fab4 	bl	80077f4 <HAL_GetTick>
 800928c:	4602      	mov	r2, r0
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	f241 3288 	movw	r2, #5000	; 0x1388
 8009296:	4293      	cmp	r3, r2
 8009298:	d901      	bls.n	800929e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800929a:	2303      	movs	r3, #3
 800929c:	e0cb      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800929e:	4b49      	ldr	r3, [pc, #292]	; (80093c4 <HAL_RCC_OscConfig+0x470>)
 80092a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a2:	f003 0302 	and.w	r3, r3, #2
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d0ee      	beq.n	8009288 <HAL_RCC_OscConfig+0x334>
 80092aa:	e014      	b.n	80092d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80092ac:	f7fe faa2 	bl	80077f4 <HAL_GetTick>
 80092b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092b2:	e00a      	b.n	80092ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092b4:	f7fe fa9e 	bl	80077f4 <HAL_GetTick>
 80092b8:	4602      	mov	r2, r0
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	f241 3288 	movw	r2, #5000	; 0x1388
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d901      	bls.n	80092ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80092c6:	2303      	movs	r3, #3
 80092c8:	e0b5      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092ca:	4b3e      	ldr	r3, [pc, #248]	; (80093c4 <HAL_RCC_OscConfig+0x470>)
 80092cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ce:	f003 0302 	and.w	r3, r3, #2
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1ee      	bne.n	80092b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80092d6:	7dfb      	ldrb	r3, [r7, #23]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d105      	bne.n	80092e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092dc:	4b39      	ldr	r3, [pc, #228]	; (80093c4 <HAL_RCC_OscConfig+0x470>)
 80092de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e0:	4a38      	ldr	r2, [pc, #224]	; (80093c4 <HAL_RCC_OscConfig+0x470>)
 80092e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	699b      	ldr	r3, [r3, #24]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f000 80a1 	beq.w	8009434 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80092f2:	4b34      	ldr	r3, [pc, #208]	; (80093c4 <HAL_RCC_OscConfig+0x470>)
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	f003 030c 	and.w	r3, r3, #12
 80092fa:	2b08      	cmp	r3, #8
 80092fc:	d05c      	beq.n	80093b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	2b02      	cmp	r3, #2
 8009304:	d141      	bne.n	800938a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009306:	4b31      	ldr	r3, [pc, #196]	; (80093cc <HAL_RCC_OscConfig+0x478>)
 8009308:	2200      	movs	r2, #0
 800930a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800930c:	f7fe fa72 	bl	80077f4 <HAL_GetTick>
 8009310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009312:	e008      	b.n	8009326 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009314:	f7fe fa6e 	bl	80077f4 <HAL_GetTick>
 8009318:	4602      	mov	r2, r0
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	2b02      	cmp	r3, #2
 8009320:	d901      	bls.n	8009326 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009322:	2303      	movs	r3, #3
 8009324:	e087      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009326:	4b27      	ldr	r3, [pc, #156]	; (80093c4 <HAL_RCC_OscConfig+0x470>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1f0      	bne.n	8009314 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	69da      	ldr	r2, [r3, #28]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a1b      	ldr	r3, [r3, #32]
 800933a:	431a      	orrs	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009340:	019b      	lsls	r3, r3, #6
 8009342:	431a      	orrs	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009348:	085b      	lsrs	r3, r3, #1
 800934a:	3b01      	subs	r3, #1
 800934c:	041b      	lsls	r3, r3, #16
 800934e:	431a      	orrs	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009354:	061b      	lsls	r3, r3, #24
 8009356:	491b      	ldr	r1, [pc, #108]	; (80093c4 <HAL_RCC_OscConfig+0x470>)
 8009358:	4313      	orrs	r3, r2
 800935a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800935c:	4b1b      	ldr	r3, [pc, #108]	; (80093cc <HAL_RCC_OscConfig+0x478>)
 800935e:	2201      	movs	r2, #1
 8009360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009362:	f7fe fa47 	bl	80077f4 <HAL_GetTick>
 8009366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009368:	e008      	b.n	800937c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800936a:	f7fe fa43 	bl	80077f4 <HAL_GetTick>
 800936e:	4602      	mov	r2, r0
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	2b02      	cmp	r3, #2
 8009376:	d901      	bls.n	800937c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009378:	2303      	movs	r3, #3
 800937a:	e05c      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800937c:	4b11      	ldr	r3, [pc, #68]	; (80093c4 <HAL_RCC_OscConfig+0x470>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009384:	2b00      	cmp	r3, #0
 8009386:	d0f0      	beq.n	800936a <HAL_RCC_OscConfig+0x416>
 8009388:	e054      	b.n	8009434 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800938a:	4b10      	ldr	r3, [pc, #64]	; (80093cc <HAL_RCC_OscConfig+0x478>)
 800938c:	2200      	movs	r2, #0
 800938e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009390:	f7fe fa30 	bl	80077f4 <HAL_GetTick>
 8009394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009396:	e008      	b.n	80093aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009398:	f7fe fa2c 	bl	80077f4 <HAL_GetTick>
 800939c:	4602      	mov	r2, r0
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d901      	bls.n	80093aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80093a6:	2303      	movs	r3, #3
 80093a8:	e045      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093aa:	4b06      	ldr	r3, [pc, #24]	; (80093c4 <HAL_RCC_OscConfig+0x470>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1f0      	bne.n	8009398 <HAL_RCC_OscConfig+0x444>
 80093b6:	e03d      	b.n	8009434 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	699b      	ldr	r3, [r3, #24]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d107      	bne.n	80093d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e038      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
 80093c4:	40023800 	.word	0x40023800
 80093c8:	40007000 	.word	0x40007000
 80093cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80093d0:	4b1b      	ldr	r3, [pc, #108]	; (8009440 <HAL_RCC_OscConfig+0x4ec>)
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d028      	beq.n	8009430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d121      	bne.n	8009430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d11a      	bne.n	8009430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009400:	4013      	ands	r3, r2
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009406:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009408:	4293      	cmp	r3, r2
 800940a:	d111      	bne.n	8009430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009416:	085b      	lsrs	r3, r3, #1
 8009418:	3b01      	subs	r3, #1
 800941a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800941c:	429a      	cmp	r2, r3
 800941e:	d107      	bne.n	8009430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800942c:	429a      	cmp	r2, r3
 800942e:	d001      	beq.n	8009434 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	e000      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3718      	adds	r7, #24
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	40023800 	.word	0x40023800

08009444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d101      	bne.n	8009458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	e0cc      	b.n	80095f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009458:	4b68      	ldr	r3, [pc, #416]	; (80095fc <HAL_RCC_ClockConfig+0x1b8>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0307 	and.w	r3, r3, #7
 8009460:	683a      	ldr	r2, [r7, #0]
 8009462:	429a      	cmp	r2, r3
 8009464:	d90c      	bls.n	8009480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009466:	4b65      	ldr	r3, [pc, #404]	; (80095fc <HAL_RCC_ClockConfig+0x1b8>)
 8009468:	683a      	ldr	r2, [r7, #0]
 800946a:	b2d2      	uxtb	r2, r2
 800946c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800946e:	4b63      	ldr	r3, [pc, #396]	; (80095fc <HAL_RCC_ClockConfig+0x1b8>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f003 0307 	and.w	r3, r3, #7
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	429a      	cmp	r2, r3
 800947a:	d001      	beq.n	8009480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	e0b8      	b.n	80095f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f003 0302 	and.w	r3, r3, #2
 8009488:	2b00      	cmp	r3, #0
 800948a:	d020      	beq.n	80094ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 0304 	and.w	r3, r3, #4
 8009494:	2b00      	cmp	r3, #0
 8009496:	d005      	beq.n	80094a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009498:	4b59      	ldr	r3, [pc, #356]	; (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	4a58      	ldr	r2, [pc, #352]	; (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 800949e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80094a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 0308 	and.w	r3, r3, #8
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d005      	beq.n	80094bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80094b0:	4b53      	ldr	r3, [pc, #332]	; (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	4a52      	ldr	r2, [pc, #328]	; (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 80094b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80094ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094bc:	4b50      	ldr	r3, [pc, #320]	; (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	494d      	ldr	r1, [pc, #308]	; (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 80094ca:	4313      	orrs	r3, r2
 80094cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 0301 	and.w	r3, r3, #1
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d044      	beq.n	8009564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d107      	bne.n	80094f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094e2:	4b47      	ldr	r3, [pc, #284]	; (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d119      	bne.n	8009522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094ee:	2301      	movs	r3, #1
 80094f0:	e07f      	b.n	80095f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d003      	beq.n	8009502 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80094fe:	2b03      	cmp	r3, #3
 8009500:	d107      	bne.n	8009512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009502:	4b3f      	ldr	r3, [pc, #252]	; (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800950a:	2b00      	cmp	r3, #0
 800950c:	d109      	bne.n	8009522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	e06f      	b.n	80095f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009512:	4b3b      	ldr	r3, [pc, #236]	; (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f003 0302 	and.w	r3, r3, #2
 800951a:	2b00      	cmp	r3, #0
 800951c:	d101      	bne.n	8009522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	e067      	b.n	80095f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009522:	4b37      	ldr	r3, [pc, #220]	; (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	f023 0203 	bic.w	r2, r3, #3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	4934      	ldr	r1, [pc, #208]	; (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 8009530:	4313      	orrs	r3, r2
 8009532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009534:	f7fe f95e 	bl	80077f4 <HAL_GetTick>
 8009538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800953a:	e00a      	b.n	8009552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800953c:	f7fe f95a 	bl	80077f4 <HAL_GetTick>
 8009540:	4602      	mov	r2, r0
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	1ad3      	subs	r3, r2, r3
 8009546:	f241 3288 	movw	r2, #5000	; 0x1388
 800954a:	4293      	cmp	r3, r2
 800954c:	d901      	bls.n	8009552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800954e:	2303      	movs	r3, #3
 8009550:	e04f      	b.n	80095f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009552:	4b2b      	ldr	r3, [pc, #172]	; (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	f003 020c 	and.w	r2, r3, #12
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	429a      	cmp	r2, r3
 8009562:	d1eb      	bne.n	800953c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009564:	4b25      	ldr	r3, [pc, #148]	; (80095fc <HAL_RCC_ClockConfig+0x1b8>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 0307 	and.w	r3, r3, #7
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	429a      	cmp	r2, r3
 8009570:	d20c      	bcs.n	800958c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009572:	4b22      	ldr	r3, [pc, #136]	; (80095fc <HAL_RCC_ClockConfig+0x1b8>)
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	b2d2      	uxtb	r2, r2
 8009578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800957a:	4b20      	ldr	r3, [pc, #128]	; (80095fc <HAL_RCC_ClockConfig+0x1b8>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f003 0307 	and.w	r3, r3, #7
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	429a      	cmp	r2, r3
 8009586:	d001      	beq.n	800958c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	e032      	b.n	80095f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 0304 	and.w	r3, r3, #4
 8009594:	2b00      	cmp	r3, #0
 8009596:	d008      	beq.n	80095aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009598:	4b19      	ldr	r3, [pc, #100]	; (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	4916      	ldr	r1, [pc, #88]	; (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 80095a6:	4313      	orrs	r3, r2
 80095a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f003 0308 	and.w	r3, r3, #8
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d009      	beq.n	80095ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80095b6:	4b12      	ldr	r3, [pc, #72]	; (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	691b      	ldr	r3, [r3, #16]
 80095c2:	00db      	lsls	r3, r3, #3
 80095c4:	490e      	ldr	r1, [pc, #56]	; (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 80095c6:	4313      	orrs	r3, r2
 80095c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80095ca:	f000 f821 	bl	8009610 <HAL_RCC_GetSysClockFreq>
 80095ce:	4602      	mov	r2, r0
 80095d0:	4b0b      	ldr	r3, [pc, #44]	; (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	091b      	lsrs	r3, r3, #4
 80095d6:	f003 030f 	and.w	r3, r3, #15
 80095da:	490a      	ldr	r1, [pc, #40]	; (8009604 <HAL_RCC_ClockConfig+0x1c0>)
 80095dc:	5ccb      	ldrb	r3, [r1, r3]
 80095de:	fa22 f303 	lsr.w	r3, r2, r3
 80095e2:	4a09      	ldr	r2, [pc, #36]	; (8009608 <HAL_RCC_ClockConfig+0x1c4>)
 80095e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80095e6:	4b09      	ldr	r3, [pc, #36]	; (800960c <HAL_RCC_ClockConfig+0x1c8>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7fe f8be 	bl	800776c <HAL_InitTick>

  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	40023c00 	.word	0x40023c00
 8009600:	40023800 	.word	0x40023800
 8009604:	0800de80 	.word	0x0800de80
 8009608:	2000240c 	.word	0x2000240c
 800960c:	2000244c 	.word	0x2000244c

08009610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009614:	b094      	sub	sp, #80	; 0x50
 8009616:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009618:	2300      	movs	r3, #0
 800961a:	647b      	str	r3, [r7, #68]	; 0x44
 800961c:	2300      	movs	r3, #0
 800961e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009620:	2300      	movs	r3, #0
 8009622:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009624:	2300      	movs	r3, #0
 8009626:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009628:	4b79      	ldr	r3, [pc, #484]	; (8009810 <HAL_RCC_GetSysClockFreq+0x200>)
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	f003 030c 	and.w	r3, r3, #12
 8009630:	2b08      	cmp	r3, #8
 8009632:	d00d      	beq.n	8009650 <HAL_RCC_GetSysClockFreq+0x40>
 8009634:	2b08      	cmp	r3, #8
 8009636:	f200 80e1 	bhi.w	80097fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800963a:	2b00      	cmp	r3, #0
 800963c:	d002      	beq.n	8009644 <HAL_RCC_GetSysClockFreq+0x34>
 800963e:	2b04      	cmp	r3, #4
 8009640:	d003      	beq.n	800964a <HAL_RCC_GetSysClockFreq+0x3a>
 8009642:	e0db      	b.n	80097fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009644:	4b73      	ldr	r3, [pc, #460]	; (8009814 <HAL_RCC_GetSysClockFreq+0x204>)
 8009646:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009648:	e0db      	b.n	8009802 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800964a:	4b72      	ldr	r3, [pc, #456]	; (8009814 <HAL_RCC_GetSysClockFreq+0x204>)
 800964c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800964e:	e0d8      	b.n	8009802 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009650:	4b6f      	ldr	r3, [pc, #444]	; (8009810 <HAL_RCC_GetSysClockFreq+0x200>)
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009658:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800965a:	4b6d      	ldr	r3, [pc, #436]	; (8009810 <HAL_RCC_GetSysClockFreq+0x200>)
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d063      	beq.n	800972e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009666:	4b6a      	ldr	r3, [pc, #424]	; (8009810 <HAL_RCC_GetSysClockFreq+0x200>)
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	099b      	lsrs	r3, r3, #6
 800966c:	2200      	movs	r2, #0
 800966e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009670:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009678:	633b      	str	r3, [r7, #48]	; 0x30
 800967a:	2300      	movs	r3, #0
 800967c:	637b      	str	r3, [r7, #52]	; 0x34
 800967e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009682:	4622      	mov	r2, r4
 8009684:	462b      	mov	r3, r5
 8009686:	f04f 0000 	mov.w	r0, #0
 800968a:	f04f 0100 	mov.w	r1, #0
 800968e:	0159      	lsls	r1, r3, #5
 8009690:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009694:	0150      	lsls	r0, r2, #5
 8009696:	4602      	mov	r2, r0
 8009698:	460b      	mov	r3, r1
 800969a:	4621      	mov	r1, r4
 800969c:	1a51      	subs	r1, r2, r1
 800969e:	6139      	str	r1, [r7, #16]
 80096a0:	4629      	mov	r1, r5
 80096a2:	eb63 0301 	sbc.w	r3, r3, r1
 80096a6:	617b      	str	r3, [r7, #20]
 80096a8:	f04f 0200 	mov.w	r2, #0
 80096ac:	f04f 0300 	mov.w	r3, #0
 80096b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80096b4:	4659      	mov	r1, fp
 80096b6:	018b      	lsls	r3, r1, #6
 80096b8:	4651      	mov	r1, sl
 80096ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80096be:	4651      	mov	r1, sl
 80096c0:	018a      	lsls	r2, r1, #6
 80096c2:	4651      	mov	r1, sl
 80096c4:	ebb2 0801 	subs.w	r8, r2, r1
 80096c8:	4659      	mov	r1, fp
 80096ca:	eb63 0901 	sbc.w	r9, r3, r1
 80096ce:	f04f 0200 	mov.w	r2, #0
 80096d2:	f04f 0300 	mov.w	r3, #0
 80096d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80096da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80096de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80096e2:	4690      	mov	r8, r2
 80096e4:	4699      	mov	r9, r3
 80096e6:	4623      	mov	r3, r4
 80096e8:	eb18 0303 	adds.w	r3, r8, r3
 80096ec:	60bb      	str	r3, [r7, #8]
 80096ee:	462b      	mov	r3, r5
 80096f0:	eb49 0303 	adc.w	r3, r9, r3
 80096f4:	60fb      	str	r3, [r7, #12]
 80096f6:	f04f 0200 	mov.w	r2, #0
 80096fa:	f04f 0300 	mov.w	r3, #0
 80096fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009702:	4629      	mov	r1, r5
 8009704:	028b      	lsls	r3, r1, #10
 8009706:	4621      	mov	r1, r4
 8009708:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800970c:	4621      	mov	r1, r4
 800970e:	028a      	lsls	r2, r1, #10
 8009710:	4610      	mov	r0, r2
 8009712:	4619      	mov	r1, r3
 8009714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009716:	2200      	movs	r2, #0
 8009718:	62bb      	str	r3, [r7, #40]	; 0x28
 800971a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800971c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009720:	f7f6 fd62 	bl	80001e8 <__aeabi_uldivmod>
 8009724:	4602      	mov	r2, r0
 8009726:	460b      	mov	r3, r1
 8009728:	4613      	mov	r3, r2
 800972a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800972c:	e058      	b.n	80097e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800972e:	4b38      	ldr	r3, [pc, #224]	; (8009810 <HAL_RCC_GetSysClockFreq+0x200>)
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	099b      	lsrs	r3, r3, #6
 8009734:	2200      	movs	r2, #0
 8009736:	4618      	mov	r0, r3
 8009738:	4611      	mov	r1, r2
 800973a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800973e:	623b      	str	r3, [r7, #32]
 8009740:	2300      	movs	r3, #0
 8009742:	627b      	str	r3, [r7, #36]	; 0x24
 8009744:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009748:	4642      	mov	r2, r8
 800974a:	464b      	mov	r3, r9
 800974c:	f04f 0000 	mov.w	r0, #0
 8009750:	f04f 0100 	mov.w	r1, #0
 8009754:	0159      	lsls	r1, r3, #5
 8009756:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800975a:	0150      	lsls	r0, r2, #5
 800975c:	4602      	mov	r2, r0
 800975e:	460b      	mov	r3, r1
 8009760:	4641      	mov	r1, r8
 8009762:	ebb2 0a01 	subs.w	sl, r2, r1
 8009766:	4649      	mov	r1, r9
 8009768:	eb63 0b01 	sbc.w	fp, r3, r1
 800976c:	f04f 0200 	mov.w	r2, #0
 8009770:	f04f 0300 	mov.w	r3, #0
 8009774:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009778:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800977c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009780:	ebb2 040a 	subs.w	r4, r2, sl
 8009784:	eb63 050b 	sbc.w	r5, r3, fp
 8009788:	f04f 0200 	mov.w	r2, #0
 800978c:	f04f 0300 	mov.w	r3, #0
 8009790:	00eb      	lsls	r3, r5, #3
 8009792:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009796:	00e2      	lsls	r2, r4, #3
 8009798:	4614      	mov	r4, r2
 800979a:	461d      	mov	r5, r3
 800979c:	4643      	mov	r3, r8
 800979e:	18e3      	adds	r3, r4, r3
 80097a0:	603b      	str	r3, [r7, #0]
 80097a2:	464b      	mov	r3, r9
 80097a4:	eb45 0303 	adc.w	r3, r5, r3
 80097a8:	607b      	str	r3, [r7, #4]
 80097aa:	f04f 0200 	mov.w	r2, #0
 80097ae:	f04f 0300 	mov.w	r3, #0
 80097b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80097b6:	4629      	mov	r1, r5
 80097b8:	028b      	lsls	r3, r1, #10
 80097ba:	4621      	mov	r1, r4
 80097bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80097c0:	4621      	mov	r1, r4
 80097c2:	028a      	lsls	r2, r1, #10
 80097c4:	4610      	mov	r0, r2
 80097c6:	4619      	mov	r1, r3
 80097c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097ca:	2200      	movs	r2, #0
 80097cc:	61bb      	str	r3, [r7, #24]
 80097ce:	61fa      	str	r2, [r7, #28]
 80097d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80097d4:	f7f6 fd08 	bl	80001e8 <__aeabi_uldivmod>
 80097d8:	4602      	mov	r2, r0
 80097da:	460b      	mov	r3, r1
 80097dc:	4613      	mov	r3, r2
 80097de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80097e0:	4b0b      	ldr	r3, [pc, #44]	; (8009810 <HAL_RCC_GetSysClockFreq+0x200>)
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	0c1b      	lsrs	r3, r3, #16
 80097e6:	f003 0303 	and.w	r3, r3, #3
 80097ea:	3301      	adds	r3, #1
 80097ec:	005b      	lsls	r3, r3, #1
 80097ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80097f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80097f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80097f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80097fa:	e002      	b.n	8009802 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80097fc:	4b05      	ldr	r3, [pc, #20]	; (8009814 <HAL_RCC_GetSysClockFreq+0x204>)
 80097fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009800:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009804:	4618      	mov	r0, r3
 8009806:	3750      	adds	r7, #80	; 0x50
 8009808:	46bd      	mov	sp, r7
 800980a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800980e:	bf00      	nop
 8009810:	40023800 	.word	0x40023800
 8009814:	00f42400 	.word	0x00f42400

08009818 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b086      	sub	sp, #24
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009820:	2300      	movs	r3, #0
 8009822:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009824:	2300      	movs	r3, #0
 8009826:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f003 0301 	and.w	r3, r3, #1
 8009830:	2b00      	cmp	r3, #0
 8009832:	d105      	bne.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800983c:	2b00      	cmp	r3, #0
 800983e:	d038      	beq.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009840:	4b68      	ldr	r3, [pc, #416]	; (80099e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009842:	2200      	movs	r2, #0
 8009844:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009846:	f7fd ffd5 	bl	80077f4 <HAL_GetTick>
 800984a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800984c:	e008      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800984e:	f7fd ffd1 	bl	80077f4 <HAL_GetTick>
 8009852:	4602      	mov	r2, r0
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	2b02      	cmp	r3, #2
 800985a:	d901      	bls.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800985c:	2303      	movs	r3, #3
 800985e:	e0bd      	b.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009860:	4b61      	ldr	r3, [pc, #388]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009868:	2b00      	cmp	r3, #0
 800986a:	d1f0      	bne.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	685a      	ldr	r2, [r3, #4]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	019b      	lsls	r3, r3, #6
 8009876:	431a      	orrs	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	071b      	lsls	r3, r3, #28
 800987e:	495a      	ldr	r1, [pc, #360]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009880:	4313      	orrs	r3, r2
 8009882:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009886:	4b57      	ldr	r3, [pc, #348]	; (80099e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009888:	2201      	movs	r2, #1
 800988a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800988c:	f7fd ffb2 	bl	80077f4 <HAL_GetTick>
 8009890:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009892:	e008      	b.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009894:	f7fd ffae 	bl	80077f4 <HAL_GetTick>
 8009898:	4602      	mov	r2, r0
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	1ad3      	subs	r3, r2, r3
 800989e:	2b02      	cmp	r3, #2
 80098a0:	d901      	bls.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80098a2:	2303      	movs	r3, #3
 80098a4:	e09a      	b.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80098a6:	4b50      	ldr	r3, [pc, #320]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d0f0      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f003 0302 	and.w	r3, r3, #2
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f000 8083 	beq.w	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80098c0:	2300      	movs	r3, #0
 80098c2:	60fb      	str	r3, [r7, #12]
 80098c4:	4b48      	ldr	r3, [pc, #288]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c8:	4a47      	ldr	r2, [pc, #284]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098ce:	6413      	str	r3, [r2, #64]	; 0x40
 80098d0:	4b45      	ldr	r3, [pc, #276]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098d8:	60fb      	str	r3, [r7, #12]
 80098da:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80098dc:	4b43      	ldr	r3, [pc, #268]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a42      	ldr	r2, [pc, #264]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80098e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098e6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80098e8:	f7fd ff84 	bl	80077f4 <HAL_GetTick>
 80098ec:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80098ee:	e008      	b.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80098f0:	f7fd ff80 	bl	80077f4 <HAL_GetTick>
 80098f4:	4602      	mov	r2, r0
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d901      	bls.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80098fe:	2303      	movs	r3, #3
 8009900:	e06c      	b.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009902:	4b3a      	ldr	r3, [pc, #232]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800990a:	2b00      	cmp	r3, #0
 800990c:	d0f0      	beq.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800990e:	4b36      	ldr	r3, [pc, #216]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009916:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d02f      	beq.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	429a      	cmp	r2, r3
 800992a:	d028      	beq.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800992c:	4b2e      	ldr	r3, [pc, #184]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800992e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009934:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009936:	4b2e      	ldr	r3, [pc, #184]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009938:	2201      	movs	r2, #1
 800993a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800993c:	4b2c      	ldr	r3, [pc, #176]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800993e:	2200      	movs	r2, #0
 8009940:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009942:	4a29      	ldr	r2, [pc, #164]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009948:	4b27      	ldr	r3, [pc, #156]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800994a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800994c:	f003 0301 	and.w	r3, r3, #1
 8009950:	2b01      	cmp	r3, #1
 8009952:	d114      	bne.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009954:	f7fd ff4e 	bl	80077f4 <HAL_GetTick>
 8009958:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800995a:	e00a      	b.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800995c:	f7fd ff4a 	bl	80077f4 <HAL_GetTick>
 8009960:	4602      	mov	r2, r0
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	1ad3      	subs	r3, r2, r3
 8009966:	f241 3288 	movw	r2, #5000	; 0x1388
 800996a:	4293      	cmp	r3, r2
 800996c:	d901      	bls.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800996e:	2303      	movs	r3, #3
 8009970:	e034      	b.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009972:	4b1d      	ldr	r3, [pc, #116]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009976:	f003 0302 	and.w	r3, r3, #2
 800997a:	2b00      	cmp	r3, #0
 800997c:	d0ee      	beq.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800998a:	d10d      	bne.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800998c:	4b16      	ldr	r3, [pc, #88]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	691b      	ldr	r3, [r3, #16]
 8009998:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800999c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099a0:	4911      	ldr	r1, [pc, #68]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099a2:	4313      	orrs	r3, r2
 80099a4:	608b      	str	r3, [r1, #8]
 80099a6:	e005      	b.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80099a8:	4b0f      	ldr	r3, [pc, #60]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	4a0e      	ldr	r2, [pc, #56]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80099b2:	6093      	str	r3, [r2, #8]
 80099b4:	4b0c      	ldr	r3, [pc, #48]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099c0:	4909      	ldr	r1, [pc, #36]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099c2:	4313      	orrs	r3, r2
 80099c4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f003 0308 	and.w	r3, r3, #8
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d003      	beq.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	7d1a      	ldrb	r2, [r3, #20]
 80099d6:	4b07      	ldr	r3, [pc, #28]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80099d8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3718      	adds	r7, #24
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	42470068 	.word	0x42470068
 80099e8:	40023800 	.word	0x40023800
 80099ec:	40007000 	.word	0x40007000
 80099f0:	42470e40 	.word	0x42470e40
 80099f4:	424711e0 	.word	0x424711e0

080099f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b087      	sub	sp, #28
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8009a00:	2300      	movs	r3, #0
 8009a02:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8009a04:	2300      	movs	r3, #0
 8009a06:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d140      	bne.n	8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8009a16:	4b24      	ldr	r3, [pc, #144]	; (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a1e:	60fb      	str	r3, [r7, #12]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d005      	beq.n	8009a32 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d131      	bne.n	8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8009a2c:	4b1f      	ldr	r3, [pc, #124]	; (8009aac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8009a2e:	617b      	str	r3, [r7, #20]
          break;
 8009a30:	e031      	b.n	8009a96 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009a32:	4b1d      	ldr	r3, [pc, #116]	; (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a3e:	d109      	bne.n	8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8009a40:	4b19      	ldr	r3, [pc, #100]	; (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a4a:	4a19      	ldr	r2, [pc, #100]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8009a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a50:	613b      	str	r3, [r7, #16]
 8009a52:	e008      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8009a54:	4b14      	ldr	r3, [pc, #80]	; (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a5e:	4a14      	ldr	r2, [pc, #80]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8009a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a64:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8009a66:	4b10      	ldr	r3, [pc, #64]	; (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a6c:	099b      	lsrs	r3, r3, #6
 8009a6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	fb02 f303 	mul.w	r3, r2, r3
 8009a78:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8009a7a:	4b0b      	ldr	r3, [pc, #44]	; (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a80:	0f1b      	lsrs	r3, r3, #28
 8009a82:	f003 0307 	and.w	r3, r3, #7
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a8c:	617b      	str	r3, [r7, #20]
          break;
 8009a8e:	e002      	b.n	8009a96 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8009a90:	2300      	movs	r3, #0
 8009a92:	617b      	str	r3, [r7, #20]
          break;
 8009a94:	bf00      	nop
        }
      }
      break;
 8009a96:	bf00      	nop
    }
  }
  return frequency;
 8009a98:	697b      	ldr	r3, [r7, #20]
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	371c      	adds	r7, #28
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop
 8009aa8:	40023800 	.word	0x40023800
 8009aac:	00bb8000 	.word	0x00bb8000
 8009ab0:	00f42400 	.word	0x00f42400

08009ab4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d101      	bne.n	8009ac6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e041      	b.n	8009b4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d106      	bne.n	8009ae0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f7f7 fc2c 	bl	8001338 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	3304      	adds	r3, #4
 8009af0:	4619      	mov	r1, r3
 8009af2:	4610      	mov	r0, r2
 8009af4:	f000 fa10 	bl	8009f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b082      	sub	sp, #8
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d101      	bne.n	8009b64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e041      	b.n	8009be8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d106      	bne.n	8009b7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 f839 	bl	8009bf0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2202      	movs	r2, #2
 8009b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	3304      	adds	r3, #4
 8009b8e:	4619      	mov	r1, r3
 8009b90:	4610      	mov	r0, r2
 8009b92:	f000 f9c1 	bl	8009f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2201      	movs	r2, #1
 8009baa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2201      	movs	r2, #1
 8009be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009bf8:	bf00      	nop
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b086      	sub	sp, #24
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c10:	2300      	movs	r3, #0
 8009c12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d101      	bne.n	8009c22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009c1e:	2302      	movs	r3, #2
 8009c20:	e0ae      	b.n	8009d80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2b0c      	cmp	r3, #12
 8009c2e:	f200 809f 	bhi.w	8009d70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009c32:	a201      	add	r2, pc, #4	; (adr r2, 8009c38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c38:	08009c6d 	.word	0x08009c6d
 8009c3c:	08009d71 	.word	0x08009d71
 8009c40:	08009d71 	.word	0x08009d71
 8009c44:	08009d71 	.word	0x08009d71
 8009c48:	08009cad 	.word	0x08009cad
 8009c4c:	08009d71 	.word	0x08009d71
 8009c50:	08009d71 	.word	0x08009d71
 8009c54:	08009d71 	.word	0x08009d71
 8009c58:	08009cef 	.word	0x08009cef
 8009c5c:	08009d71 	.word	0x08009d71
 8009c60:	08009d71 	.word	0x08009d71
 8009c64:	08009d71 	.word	0x08009d71
 8009c68:	08009d2f 	.word	0x08009d2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	68b9      	ldr	r1, [r7, #8]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 f9d0 	bl	800a018 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	699a      	ldr	r2, [r3, #24]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f042 0208 	orr.w	r2, r2, #8
 8009c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	699a      	ldr	r2, [r3, #24]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f022 0204 	bic.w	r2, r2, #4
 8009c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	6999      	ldr	r1, [r3, #24]
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	691a      	ldr	r2, [r3, #16]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	430a      	orrs	r2, r1
 8009ca8:	619a      	str	r2, [r3, #24]
      break;
 8009caa:	e064      	b.n	8009d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	68b9      	ldr	r1, [r7, #8]
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f000 fa16 	bl	800a0e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	699a      	ldr	r2, [r3, #24]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	699a      	ldr	r2, [r3, #24]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	6999      	ldr	r1, [r3, #24]
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	691b      	ldr	r3, [r3, #16]
 8009ce2:	021a      	lsls	r2, r3, #8
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	430a      	orrs	r2, r1
 8009cea:	619a      	str	r2, [r3, #24]
      break;
 8009cec:	e043      	b.n	8009d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	68b9      	ldr	r1, [r7, #8]
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f000 fa61 	bl	800a1bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	69da      	ldr	r2, [r3, #28]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f042 0208 	orr.w	r2, r2, #8
 8009d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	69da      	ldr	r2, [r3, #28]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f022 0204 	bic.w	r2, r2, #4
 8009d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	69d9      	ldr	r1, [r3, #28]
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	691a      	ldr	r2, [r3, #16]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	430a      	orrs	r2, r1
 8009d2a:	61da      	str	r2, [r3, #28]
      break;
 8009d2c:	e023      	b.n	8009d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68b9      	ldr	r1, [r7, #8]
 8009d34:	4618      	mov	r0, r3
 8009d36:	f000 faab 	bl	800a290 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	69da      	ldr	r2, [r3, #28]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	69da      	ldr	r2, [r3, #28]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	69d9      	ldr	r1, [r3, #28]
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	691b      	ldr	r3, [r3, #16]
 8009d64:	021a      	lsls	r2, r3, #8
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	430a      	orrs	r2, r1
 8009d6c:	61da      	str	r2, [r3, #28]
      break;
 8009d6e:	e002      	b.n	8009d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	75fb      	strb	r3, [r7, #23]
      break;
 8009d74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3718      	adds	r7, #24
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d92:	2300      	movs	r3, #0
 8009d94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d101      	bne.n	8009da4 <HAL_TIM_ConfigClockSource+0x1c>
 8009da0:	2302      	movs	r3, #2
 8009da2:	e0b4      	b.n	8009f0e <HAL_TIM_ConfigClockSource+0x186>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2202      	movs	r2, #2
 8009db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009dc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009dca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68ba      	ldr	r2, [r7, #8]
 8009dd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ddc:	d03e      	beq.n	8009e5c <HAL_TIM_ConfigClockSource+0xd4>
 8009dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009de2:	f200 8087 	bhi.w	8009ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8009de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dea:	f000 8086 	beq.w	8009efa <HAL_TIM_ConfigClockSource+0x172>
 8009dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009df2:	d87f      	bhi.n	8009ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8009df4:	2b70      	cmp	r3, #112	; 0x70
 8009df6:	d01a      	beq.n	8009e2e <HAL_TIM_ConfigClockSource+0xa6>
 8009df8:	2b70      	cmp	r3, #112	; 0x70
 8009dfa:	d87b      	bhi.n	8009ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8009dfc:	2b60      	cmp	r3, #96	; 0x60
 8009dfe:	d050      	beq.n	8009ea2 <HAL_TIM_ConfigClockSource+0x11a>
 8009e00:	2b60      	cmp	r3, #96	; 0x60
 8009e02:	d877      	bhi.n	8009ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8009e04:	2b50      	cmp	r3, #80	; 0x50
 8009e06:	d03c      	beq.n	8009e82 <HAL_TIM_ConfigClockSource+0xfa>
 8009e08:	2b50      	cmp	r3, #80	; 0x50
 8009e0a:	d873      	bhi.n	8009ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8009e0c:	2b40      	cmp	r3, #64	; 0x40
 8009e0e:	d058      	beq.n	8009ec2 <HAL_TIM_ConfigClockSource+0x13a>
 8009e10:	2b40      	cmp	r3, #64	; 0x40
 8009e12:	d86f      	bhi.n	8009ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8009e14:	2b30      	cmp	r3, #48	; 0x30
 8009e16:	d064      	beq.n	8009ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8009e18:	2b30      	cmp	r3, #48	; 0x30
 8009e1a:	d86b      	bhi.n	8009ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8009e1c:	2b20      	cmp	r3, #32
 8009e1e:	d060      	beq.n	8009ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8009e20:	2b20      	cmp	r3, #32
 8009e22:	d867      	bhi.n	8009ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d05c      	beq.n	8009ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8009e28:	2b10      	cmp	r3, #16
 8009e2a:	d05a      	beq.n	8009ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8009e2c:	e062      	b.n	8009ef4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6818      	ldr	r0, [r3, #0]
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	6899      	ldr	r1, [r3, #8]
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	685a      	ldr	r2, [r3, #4]
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	f000 faf1 	bl	800a424 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009e50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	609a      	str	r2, [r3, #8]
      break;
 8009e5a:	e04f      	b.n	8009efc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6818      	ldr	r0, [r3, #0]
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	6899      	ldr	r1, [r3, #8]
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	685a      	ldr	r2, [r3, #4]
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	f000 fada 	bl	800a424 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	689a      	ldr	r2, [r3, #8]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e7e:	609a      	str	r2, [r3, #8]
      break;
 8009e80:	e03c      	b.n	8009efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6818      	ldr	r0, [r3, #0]
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	6859      	ldr	r1, [r3, #4]
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	461a      	mov	r2, r3
 8009e90:	f000 fa4e 	bl	800a330 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2150      	movs	r1, #80	; 0x50
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f000 faa7 	bl	800a3ee <TIM_ITRx_SetConfig>
      break;
 8009ea0:	e02c      	b.n	8009efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6818      	ldr	r0, [r3, #0]
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	6859      	ldr	r1, [r3, #4]
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	461a      	mov	r2, r3
 8009eb0:	f000 fa6d 	bl	800a38e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2160      	movs	r1, #96	; 0x60
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f000 fa97 	bl	800a3ee <TIM_ITRx_SetConfig>
      break;
 8009ec0:	e01c      	b.n	8009efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6818      	ldr	r0, [r3, #0]
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	6859      	ldr	r1, [r3, #4]
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	f000 fa2e 	bl	800a330 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2140      	movs	r1, #64	; 0x40
 8009eda:	4618      	mov	r0, r3
 8009edc:	f000 fa87 	bl	800a3ee <TIM_ITRx_SetConfig>
      break;
 8009ee0:	e00c      	b.n	8009efc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4619      	mov	r1, r3
 8009eec:	4610      	mov	r0, r2
 8009eee:	f000 fa7e 	bl	800a3ee <TIM_ITRx_SetConfig>
      break;
 8009ef2:	e003      	b.n	8009efc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ef8:	e000      	b.n	8009efc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009efa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
	...

08009f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4a34      	ldr	r2, [pc, #208]	; (8009ffc <TIM_Base_SetConfig+0xe4>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d00f      	beq.n	8009f50 <TIM_Base_SetConfig+0x38>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f36:	d00b      	beq.n	8009f50 <TIM_Base_SetConfig+0x38>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	4a31      	ldr	r2, [pc, #196]	; (800a000 <TIM_Base_SetConfig+0xe8>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d007      	beq.n	8009f50 <TIM_Base_SetConfig+0x38>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	4a30      	ldr	r2, [pc, #192]	; (800a004 <TIM_Base_SetConfig+0xec>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d003      	beq.n	8009f50 <TIM_Base_SetConfig+0x38>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	4a2f      	ldr	r2, [pc, #188]	; (800a008 <TIM_Base_SetConfig+0xf0>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d108      	bne.n	8009f62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a25      	ldr	r2, [pc, #148]	; (8009ffc <TIM_Base_SetConfig+0xe4>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d01b      	beq.n	8009fa2 <TIM_Base_SetConfig+0x8a>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f70:	d017      	beq.n	8009fa2 <TIM_Base_SetConfig+0x8a>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a22      	ldr	r2, [pc, #136]	; (800a000 <TIM_Base_SetConfig+0xe8>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d013      	beq.n	8009fa2 <TIM_Base_SetConfig+0x8a>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a21      	ldr	r2, [pc, #132]	; (800a004 <TIM_Base_SetConfig+0xec>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d00f      	beq.n	8009fa2 <TIM_Base_SetConfig+0x8a>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a20      	ldr	r2, [pc, #128]	; (800a008 <TIM_Base_SetConfig+0xf0>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d00b      	beq.n	8009fa2 <TIM_Base_SetConfig+0x8a>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a1f      	ldr	r2, [pc, #124]	; (800a00c <TIM_Base_SetConfig+0xf4>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d007      	beq.n	8009fa2 <TIM_Base_SetConfig+0x8a>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a1e      	ldr	r2, [pc, #120]	; (800a010 <TIM_Base_SetConfig+0xf8>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d003      	beq.n	8009fa2 <TIM_Base_SetConfig+0x8a>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4a1d      	ldr	r2, [pc, #116]	; (800a014 <TIM_Base_SetConfig+0xfc>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d108      	bne.n	8009fb4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	68fa      	ldr	r2, [r7, #12]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	695b      	ldr	r3, [r3, #20]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	689a      	ldr	r2, [r3, #8]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4a08      	ldr	r2, [pc, #32]	; (8009ffc <TIM_Base_SetConfig+0xe4>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d103      	bne.n	8009fe8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	691a      	ldr	r2, [r3, #16]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	615a      	str	r2, [r3, #20]
}
 8009fee:	bf00      	nop
 8009ff0:	3714      	adds	r7, #20
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	40010000 	.word	0x40010000
 800a000:	40000400 	.word	0x40000400
 800a004:	40000800 	.word	0x40000800
 800a008:	40000c00 	.word	0x40000c00
 800a00c:	40014000 	.word	0x40014000
 800a010:	40014400 	.word	0x40014400
 800a014:	40014800 	.word	0x40014800

0800a018 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a018:	b480      	push	{r7}
 800a01a:	b087      	sub	sp, #28
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a1b      	ldr	r3, [r3, #32]
 800a026:	f023 0201 	bic.w	r2, r3, #1
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a1b      	ldr	r3, [r3, #32]
 800a032:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	699b      	ldr	r3, [r3, #24]
 800a03e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f023 0303 	bic.w	r3, r3, #3
 800a04e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	68fa      	ldr	r2, [r7, #12]
 800a056:	4313      	orrs	r3, r2
 800a058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	f023 0302 	bic.w	r3, r3, #2
 800a060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	697a      	ldr	r2, [r7, #20]
 800a068:	4313      	orrs	r3, r2
 800a06a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4a1c      	ldr	r2, [pc, #112]	; (800a0e0 <TIM_OC1_SetConfig+0xc8>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d10c      	bne.n	800a08e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	f023 0308 	bic.w	r3, r3, #8
 800a07a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	697a      	ldr	r2, [r7, #20]
 800a082:	4313      	orrs	r3, r2
 800a084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	f023 0304 	bic.w	r3, r3, #4
 800a08c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4a13      	ldr	r2, [pc, #76]	; (800a0e0 <TIM_OC1_SetConfig+0xc8>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d111      	bne.n	800a0ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a09c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	695b      	ldr	r3, [r3, #20]
 800a0aa:	693a      	ldr	r2, [r7, #16]
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	699b      	ldr	r3, [r3, #24]
 800a0b4:	693a      	ldr	r2, [r7, #16]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	693a      	ldr	r2, [r7, #16]
 800a0be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	68fa      	ldr	r2, [r7, #12]
 800a0c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	685a      	ldr	r2, [r3, #4]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	697a      	ldr	r2, [r7, #20]
 800a0d2:	621a      	str	r2, [r3, #32]
}
 800a0d4:	bf00      	nop
 800a0d6:	371c      	adds	r7, #28
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr
 800a0e0:	40010000 	.word	0x40010000

0800a0e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b087      	sub	sp, #28
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6a1b      	ldr	r3, [r3, #32]
 800a0f2:	f023 0210 	bic.w	r2, r3, #16
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a1b      	ldr	r3, [r3, #32]
 800a0fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	699b      	ldr	r3, [r3, #24]
 800a10a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a11a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	021b      	lsls	r3, r3, #8
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	4313      	orrs	r3, r2
 800a126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	f023 0320 	bic.w	r3, r3, #32
 800a12e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	011b      	lsls	r3, r3, #4
 800a136:	697a      	ldr	r2, [r7, #20]
 800a138:	4313      	orrs	r3, r2
 800a13a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a1e      	ldr	r2, [pc, #120]	; (800a1b8 <TIM_OC2_SetConfig+0xd4>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d10d      	bne.n	800a160 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a14a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	011b      	lsls	r3, r3, #4
 800a152:	697a      	ldr	r2, [r7, #20]
 800a154:	4313      	orrs	r3, r2
 800a156:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a15e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4a15      	ldr	r2, [pc, #84]	; (800a1b8 <TIM_OC2_SetConfig+0xd4>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d113      	bne.n	800a190 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a16e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a176:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	695b      	ldr	r3, [r3, #20]
 800a17c:	009b      	lsls	r3, r3, #2
 800a17e:	693a      	ldr	r2, [r7, #16]
 800a180:	4313      	orrs	r3, r2
 800a182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	699b      	ldr	r3, [r3, #24]
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	693a      	ldr	r2, [r7, #16]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	693a      	ldr	r2, [r7, #16]
 800a194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	68fa      	ldr	r2, [r7, #12]
 800a19a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	685a      	ldr	r2, [r3, #4]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	697a      	ldr	r2, [r7, #20]
 800a1a8:	621a      	str	r2, [r3, #32]
}
 800a1aa:	bf00      	nop
 800a1ac:	371c      	adds	r7, #28
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	40010000 	.word	0x40010000

0800a1bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b087      	sub	sp, #28
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a1b      	ldr	r3, [r3, #32]
 800a1ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a1b      	ldr	r3, [r3, #32]
 800a1d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	69db      	ldr	r3, [r3, #28]
 800a1e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f023 0303 	bic.w	r3, r3, #3
 800a1f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	021b      	lsls	r3, r3, #8
 800a20c:	697a      	ldr	r2, [r7, #20]
 800a20e:	4313      	orrs	r3, r2
 800a210:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4a1d      	ldr	r2, [pc, #116]	; (800a28c <TIM_OC3_SetConfig+0xd0>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d10d      	bne.n	800a236 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a220:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	021b      	lsls	r3, r3, #8
 800a228:	697a      	ldr	r2, [r7, #20]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4a14      	ldr	r2, [pc, #80]	; (800a28c <TIM_OC3_SetConfig+0xd0>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d113      	bne.n	800a266 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a24c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	695b      	ldr	r3, [r3, #20]
 800a252:	011b      	lsls	r3, r3, #4
 800a254:	693a      	ldr	r2, [r7, #16]
 800a256:	4313      	orrs	r3, r2
 800a258:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	699b      	ldr	r3, [r3, #24]
 800a25e:	011b      	lsls	r3, r3, #4
 800a260:	693a      	ldr	r2, [r7, #16]
 800a262:	4313      	orrs	r3, r2
 800a264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	693a      	ldr	r2, [r7, #16]
 800a26a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	68fa      	ldr	r2, [r7, #12]
 800a270:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	685a      	ldr	r2, [r3, #4]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	697a      	ldr	r2, [r7, #20]
 800a27e:	621a      	str	r2, [r3, #32]
}
 800a280:	bf00      	nop
 800a282:	371c      	adds	r7, #28
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr
 800a28c:	40010000 	.word	0x40010000

0800a290 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a290:	b480      	push	{r7}
 800a292:	b087      	sub	sp, #28
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a1b      	ldr	r3, [r3, #32]
 800a29e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a1b      	ldr	r3, [r3, #32]
 800a2aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	69db      	ldr	r3, [r3, #28]
 800a2b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	021b      	lsls	r3, r3, #8
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	031b      	lsls	r3, r3, #12
 800a2e2:	693a      	ldr	r2, [r7, #16]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4a10      	ldr	r2, [pc, #64]	; (800a32c <TIM_OC4_SetConfig+0x9c>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d109      	bne.n	800a304 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a2f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	695b      	ldr	r3, [r3, #20]
 800a2fc:	019b      	lsls	r3, r3, #6
 800a2fe:	697a      	ldr	r2, [r7, #20]
 800a300:	4313      	orrs	r3, r2
 800a302:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	697a      	ldr	r2, [r7, #20]
 800a308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	685a      	ldr	r2, [r3, #4]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	693a      	ldr	r2, [r7, #16]
 800a31c:	621a      	str	r2, [r3, #32]
}
 800a31e:	bf00      	nop
 800a320:	371c      	adds	r7, #28
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	40010000 	.word	0x40010000

0800a330 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a330:	b480      	push	{r7}
 800a332:	b087      	sub	sp, #28
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6a1b      	ldr	r3, [r3, #32]
 800a340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	f023 0201 	bic.w	r2, r3, #1
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	699b      	ldr	r3, [r3, #24]
 800a352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a35a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	011b      	lsls	r3, r3, #4
 800a360:	693a      	ldr	r2, [r7, #16]
 800a362:	4313      	orrs	r3, r2
 800a364:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	f023 030a 	bic.w	r3, r3, #10
 800a36c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a36e:	697a      	ldr	r2, [r7, #20]
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	4313      	orrs	r3, r2
 800a374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	693a      	ldr	r2, [r7, #16]
 800a37a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	697a      	ldr	r2, [r7, #20]
 800a380:	621a      	str	r2, [r3, #32]
}
 800a382:	bf00      	nop
 800a384:	371c      	adds	r7, #28
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr

0800a38e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a38e:	b480      	push	{r7}
 800a390:	b087      	sub	sp, #28
 800a392:	af00      	add	r7, sp, #0
 800a394:	60f8      	str	r0, [r7, #12]
 800a396:	60b9      	str	r1, [r7, #8]
 800a398:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6a1b      	ldr	r3, [r3, #32]
 800a39e:	f023 0210 	bic.w	r2, r3, #16
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	699b      	ldr	r3, [r3, #24]
 800a3aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6a1b      	ldr	r3, [r3, #32]
 800a3b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	031b      	lsls	r3, r3, #12
 800a3be:	697a      	ldr	r2, [r7, #20]
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a3ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	011b      	lsls	r3, r3, #4
 800a3d0:	693a      	ldr	r2, [r7, #16]
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	697a      	ldr	r2, [r7, #20]
 800a3da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	693a      	ldr	r2, [r7, #16]
 800a3e0:	621a      	str	r2, [r3, #32]
}
 800a3e2:	bf00      	nop
 800a3e4:	371c      	adds	r7, #28
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr

0800a3ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a3ee:	b480      	push	{r7}
 800a3f0:	b085      	sub	sp, #20
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
 800a3f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a404:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a406:	683a      	ldr	r2, [r7, #0]
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	f043 0307 	orr.w	r3, r3, #7
 800a410:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	68fa      	ldr	r2, [r7, #12]
 800a416:	609a      	str	r2, [r3, #8]
}
 800a418:	bf00      	nop
 800a41a:	3714      	adds	r7, #20
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a424:	b480      	push	{r7}
 800a426:	b087      	sub	sp, #28
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	607a      	str	r2, [r7, #4]
 800a430:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a43e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	021a      	lsls	r2, r3, #8
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	431a      	orrs	r2, r3
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	697a      	ldr	r2, [r7, #20]
 800a44e:	4313      	orrs	r3, r2
 800a450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	697a      	ldr	r2, [r7, #20]
 800a456:	609a      	str	r2, [r3, #8]
}
 800a458:	bf00      	nop
 800a45a:	371c      	adds	r7, #28
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a474:	2b01      	cmp	r3, #1
 800a476:	d101      	bne.n	800a47c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a478:	2302      	movs	r3, #2
 800a47a:	e050      	b.n	800a51e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2202      	movs	r2, #2
 800a488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a1c      	ldr	r2, [pc, #112]	; (800a52c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d018      	beq.n	800a4f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4c8:	d013      	beq.n	800a4f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a18      	ldr	r2, [pc, #96]	; (800a530 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d00e      	beq.n	800a4f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a16      	ldr	r2, [pc, #88]	; (800a534 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d009      	beq.n	800a4f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4a15      	ldr	r2, [pc, #84]	; (800a538 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d004      	beq.n	800a4f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a13      	ldr	r2, [pc, #76]	; (800a53c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d10c      	bne.n	800a50c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	68ba      	ldr	r2, [r7, #8]
 800a500:	4313      	orrs	r3, r2
 800a502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	68ba      	ldr	r2, [r7, #8]
 800a50a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2201      	movs	r2, #1
 800a510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a51c:	2300      	movs	r3, #0
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3714      	adds	r7, #20
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	40010000 	.word	0x40010000
 800a530:	40000400 	.word	0x40000400
 800a534:	40000800 	.word	0x40000800
 800a538:	40000c00 	.word	0x40000c00
 800a53c:	40014000 	.word	0x40014000

0800a540 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a540:	b084      	sub	sp, #16
 800a542:	b580      	push	{r7, lr}
 800a544:	b084      	sub	sp, #16
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
 800a54a:	f107 001c 	add.w	r0, r7, #28
 800a54e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a554:	2b01      	cmp	r3, #1
 800a556:	d122      	bne.n	800a59e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a55c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a56c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a582:	2b01      	cmp	r3, #1
 800a584:	d105      	bne.n	800a592 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 faa2 	bl	800aadc <USB_CoreReset>
 800a598:	4603      	mov	r3, r0
 800a59a:	73fb      	strb	r3, [r7, #15]
 800a59c:	e01a      	b.n	800a5d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 fa96 	bl	800aadc <USB_CoreReset>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a5b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d106      	bne.n	800a5c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	639a      	str	r2, [r3, #56]	; 0x38
 800a5c6:	e005      	b.n	800a5d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d10b      	bne.n	800a5f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	689b      	ldr	r3, [r3, #8]
 800a5de:	f043 0206 	orr.w	r2, r3, #6
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	f043 0220 	orr.w	r2, r3, #32
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3710      	adds	r7, #16
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5fe:	b004      	add	sp, #16
 800a600:	4770      	bx	lr

0800a602 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a602:	b480      	push	{r7}
 800a604:	b083      	sub	sp, #12
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	f023 0201 	bic.w	r2, r3, #1
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a616:	2300      	movs	r3, #0
}
 800a618:	4618      	mov	r0, r3
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	460b      	mov	r3, r1
 800a62e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a630:	2300      	movs	r3, #0
 800a632:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a640:	78fb      	ldrb	r3, [r7, #3]
 800a642:	2b01      	cmp	r3, #1
 800a644:	d115      	bne.n	800a672 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a652:	2001      	movs	r0, #1
 800a654:	f7fd f8da 	bl	800780c <HAL_Delay>
      ms++;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	3301      	adds	r3, #1
 800a65c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 fa2e 	bl	800aac0 <USB_GetMode>
 800a664:	4603      	mov	r3, r0
 800a666:	2b01      	cmp	r3, #1
 800a668:	d01e      	beq.n	800a6a8 <USB_SetCurrentMode+0x84>
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2b31      	cmp	r3, #49	; 0x31
 800a66e:	d9f0      	bls.n	800a652 <USB_SetCurrentMode+0x2e>
 800a670:	e01a      	b.n	800a6a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a672:	78fb      	ldrb	r3, [r7, #3]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d115      	bne.n	800a6a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a684:	2001      	movs	r0, #1
 800a686:	f7fd f8c1 	bl	800780c <HAL_Delay>
      ms++;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	3301      	adds	r3, #1
 800a68e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 fa15 	bl	800aac0 <USB_GetMode>
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d005      	beq.n	800a6a8 <USB_SetCurrentMode+0x84>
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2b31      	cmp	r3, #49	; 0x31
 800a6a0:	d9f0      	bls.n	800a684 <USB_SetCurrentMode+0x60>
 800a6a2:	e001      	b.n	800a6a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e005      	b.n	800a6b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2b32      	cmp	r3, #50	; 0x32
 800a6ac:	d101      	bne.n	800a6b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e000      	b.n	800a6b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a6bc:	b084      	sub	sp, #16
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b086      	sub	sp, #24
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
 800a6c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a6ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	613b      	str	r3, [r7, #16]
 800a6da:	e009      	b.n	800a6f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	3340      	adds	r3, #64	; 0x40
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	4413      	add	r3, r2
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	613b      	str	r3, [r7, #16]
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	2b0e      	cmp	r3, #14
 800a6f4:	d9f2      	bls.n	800a6dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a6f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d11c      	bne.n	800a736 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a70a:	f043 0302 	orr.w	r3, r3, #2
 800a70e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a714:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a720:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a72c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	639a      	str	r2, [r3, #56]	; 0x38
 800a734:	e00b      	b.n	800a74e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a73a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a746:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a754:	461a      	mov	r2, r3
 800a756:	2300      	movs	r3, #0
 800a758:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a760:	4619      	mov	r1, r3
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a768:	461a      	mov	r2, r3
 800a76a:	680b      	ldr	r3, [r1, #0]
 800a76c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a770:	2b01      	cmp	r3, #1
 800a772:	d10c      	bne.n	800a78e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a776:	2b00      	cmp	r3, #0
 800a778:	d104      	bne.n	800a784 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a77a:	2100      	movs	r1, #0
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 f965 	bl	800aa4c <USB_SetDevSpeed>
 800a782:	e008      	b.n	800a796 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a784:	2101      	movs	r1, #1
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 f960 	bl	800aa4c <USB_SetDevSpeed>
 800a78c:	e003      	b.n	800a796 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a78e:	2103      	movs	r1, #3
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 f95b 	bl	800aa4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a796:	2110      	movs	r1, #16
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 f8f3 	bl	800a984 <USB_FlushTxFifo>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d001      	beq.n	800a7a8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 f91f 	bl	800a9ec <USB_FlushRxFifo>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d001      	beq.n	800a7b8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7be:	461a      	mov	r2, r3
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	2300      	movs	r3, #0
 800a7da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7dc:	2300      	movs	r3, #0
 800a7de:	613b      	str	r3, [r7, #16]
 800a7e0:	e043      	b.n	800a86a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	015a      	lsls	r2, r3, #5
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7f8:	d118      	bne.n	800a82c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d10a      	bne.n	800a816 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	015a      	lsls	r2, r3, #5
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	4413      	add	r3, r2
 800a808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a80c:	461a      	mov	r2, r3
 800a80e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a812:	6013      	str	r3, [r2, #0]
 800a814:	e013      	b.n	800a83e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	015a      	lsls	r2, r3, #5
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	4413      	add	r3, r2
 800a81e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a822:	461a      	mov	r2, r3
 800a824:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a828:	6013      	str	r3, [r2, #0]
 800a82a:	e008      	b.n	800a83e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	015a      	lsls	r2, r3, #5
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	4413      	add	r3, r2
 800a834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a838:	461a      	mov	r2, r3
 800a83a:	2300      	movs	r3, #0
 800a83c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	015a      	lsls	r2, r3, #5
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	4413      	add	r3, r2
 800a846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a84a:	461a      	mov	r2, r3
 800a84c:	2300      	movs	r3, #0
 800a84e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	015a      	lsls	r2, r3, #5
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	4413      	add	r3, r2
 800a858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a85c:	461a      	mov	r2, r3
 800a85e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a862:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	3301      	adds	r3, #1
 800a868:	613b      	str	r3, [r7, #16]
 800a86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86c:	693a      	ldr	r2, [r7, #16]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d3b7      	bcc.n	800a7e2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a872:	2300      	movs	r3, #0
 800a874:	613b      	str	r3, [r7, #16]
 800a876:	e043      	b.n	800a900 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	015a      	lsls	r2, r3, #5
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	4413      	add	r3, r2
 800a880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a88a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a88e:	d118      	bne.n	800a8c2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d10a      	bne.n	800a8ac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	015a      	lsls	r2, r3, #5
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	4413      	add	r3, r2
 800a89e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a8a8:	6013      	str	r3, [r2, #0]
 800a8aa:	e013      	b.n	800a8d4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	015a      	lsls	r2, r3, #5
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a8be:	6013      	str	r3, [r2, #0]
 800a8c0:	e008      	b.n	800a8d4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	015a      	lsls	r2, r3, #5
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	015a      	lsls	r2, r3, #5
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	4413      	add	r3, r2
 800a8dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	015a      	lsls	r2, r3, #5
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a8f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	613b      	str	r3, [r7, #16]
 800a900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a902:	693a      	ldr	r2, [r7, #16]
 800a904:	429a      	cmp	r2, r3
 800a906:	d3b7      	bcc.n	800a878 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a916:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a91a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a928:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d105      	bne.n	800a93c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	699b      	ldr	r3, [r3, #24]
 800a934:	f043 0210 	orr.w	r2, r3, #16
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	699a      	ldr	r2, [r3, #24]
 800a940:	4b0f      	ldr	r3, [pc, #60]	; (800a980 <USB_DevInit+0x2c4>)
 800a942:	4313      	orrs	r3, r2
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d005      	beq.n	800a95a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	699b      	ldr	r3, [r3, #24]
 800a952:	f043 0208 	orr.w	r2, r3, #8
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a95a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d107      	bne.n	800a970 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	699b      	ldr	r3, [r3, #24]
 800a964:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a968:	f043 0304 	orr.w	r3, r3, #4
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a970:	7dfb      	ldrb	r3, [r7, #23]
}
 800a972:	4618      	mov	r0, r3
 800a974:	3718      	adds	r7, #24
 800a976:	46bd      	mov	sp, r7
 800a978:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a97c:	b004      	add	sp, #16
 800a97e:	4770      	bx	lr
 800a980:	803c3800 	.word	0x803c3800

0800a984 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a98e:	2300      	movs	r3, #0
 800a990:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	3301      	adds	r3, #1
 800a996:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	4a13      	ldr	r2, [pc, #76]	; (800a9e8 <USB_FlushTxFifo+0x64>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d901      	bls.n	800a9a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a9a0:	2303      	movs	r3, #3
 800a9a2:	e01b      	b.n	800a9dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	daf2      	bge.n	800a992 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	019b      	lsls	r3, r3, #6
 800a9b4:	f043 0220 	orr.w	r2, r3, #32
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	4a08      	ldr	r2, [pc, #32]	; (800a9e8 <USB_FlushTxFifo+0x64>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d901      	bls.n	800a9ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a9ca:	2303      	movs	r3, #3
 800a9cc:	e006      	b.n	800a9dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	f003 0320 	and.w	r3, r3, #32
 800a9d6:	2b20      	cmp	r3, #32
 800a9d8:	d0f0      	beq.n	800a9bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a9da:	2300      	movs	r3, #0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3714      	adds	r7, #20
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr
 800a9e8:	00030d40 	.word	0x00030d40

0800a9ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	4a11      	ldr	r2, [pc, #68]	; (800aa48 <USB_FlushRxFifo+0x5c>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d901      	bls.n	800aa0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800aa06:	2303      	movs	r3, #3
 800aa08:	e018      	b.n	800aa3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	691b      	ldr	r3, [r3, #16]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	daf2      	bge.n	800a9f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800aa12:	2300      	movs	r3, #0
 800aa14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2210      	movs	r2, #16
 800aa1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	3301      	adds	r3, #1
 800aa20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	4a08      	ldr	r2, [pc, #32]	; (800aa48 <USB_FlushRxFifo+0x5c>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d901      	bls.n	800aa2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800aa2a:	2303      	movs	r3, #3
 800aa2c:	e006      	b.n	800aa3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	691b      	ldr	r3, [r3, #16]
 800aa32:	f003 0310 	and.w	r3, r3, #16
 800aa36:	2b10      	cmp	r3, #16
 800aa38:	d0f0      	beq.n	800aa1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3714      	adds	r7, #20
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr
 800aa48:	00030d40 	.word	0x00030d40

0800aa4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	460b      	mov	r3, r1
 800aa56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	78fb      	ldrb	r3, [r7, #3]
 800aa66:	68f9      	ldr	r1, [r7, #12]
 800aa68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3714      	adds	r7, #20
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr

0800aa7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aa7e:	b480      	push	{r7}
 800aa80:	b085      	sub	sp, #20
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa98:	f023 0303 	bic.w	r3, r3, #3
 800aa9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aaac:	f043 0302 	orr.w	r3, r3, #2
 800aab0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aab2:	2300      	movs	r3, #0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3714      	adds	r7, #20
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	695b      	ldr	r3, [r3, #20]
 800aacc:	f003 0301 	and.w	r3, r3, #1
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aae4:	2300      	movs	r3, #0
 800aae6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	3301      	adds	r3, #1
 800aaec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	4a13      	ldr	r2, [pc, #76]	; (800ab40 <USB_CoreReset+0x64>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d901      	bls.n	800aafa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	e01b      	b.n	800ab32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	daf2      	bge.n	800aae8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab02:	2300      	movs	r3, #0
 800ab04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	691b      	ldr	r3, [r3, #16]
 800ab0a:	f043 0201 	orr.w	r2, r3, #1
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	3301      	adds	r3, #1
 800ab16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	4a09      	ldr	r2, [pc, #36]	; (800ab40 <USB_CoreReset+0x64>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d901      	bls.n	800ab24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ab20:	2303      	movs	r3, #3
 800ab22:	e006      	b.n	800ab32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	f003 0301 	and.w	r3, r3, #1
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d0f0      	beq.n	800ab12 <USB_CoreReset+0x36>

  return HAL_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3714      	adds	r7, #20
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	00030d40 	.word	0x00030d40

0800ab44 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 800ab48:	4b10      	ldr	r3, [pc, #64]	; (800ab8c <MX_PDM2PCM_Init+0x48>)
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_LE;
 800ab4e:	4b0f      	ldr	r3, [pc, #60]	; (800ab8c <MX_PDM2PCM_Init+0x48>)
 800ab50:	2200      	movs	r2, #0
 800ab52:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 800ab54:	4b0d      	ldr	r3, [pc, #52]	; (800ab8c <MX_PDM2PCM_Init+0x48>)
 800ab56:	4a0e      	ldr	r2, [pc, #56]	; (800ab90 <MX_PDM2PCM_Init+0x4c>)
 800ab58:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800ab5a:	4b0c      	ldr	r3, [pc, #48]	; (800ab8c <MX_PDM2PCM_Init+0x48>)
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 800ab60:	4b0a      	ldr	r3, [pc, #40]	; (800ab8c <MX_PDM2PCM_Init+0x48>)
 800ab62:	2201      	movs	r2, #1
 800ab64:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800ab66:	4809      	ldr	r0, [pc, #36]	; (800ab8c <MX_PDM2PCM_Init+0x48>)
 800ab68:	f001 fd66 	bl	800c638 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800ab6c:	4b09      	ldr	r3, [pc, #36]	; (800ab94 <MX_PDM2PCM_Init+0x50>)
 800ab6e:	2202      	movs	r2, #2
 800ab70:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 1024;
 800ab72:	4b08      	ldr	r3, [pc, #32]	; (800ab94 <MX_PDM2PCM_Init+0x50>)
 800ab74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ab78:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 800ab7a:	4b06      	ldr	r3, [pc, #24]	; (800ab94 <MX_PDM2PCM_Init+0x50>)
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800ab80:	4904      	ldr	r1, [pc, #16]	; (800ab94 <MX_PDM2PCM_Init+0x50>)
 800ab82:	4802      	ldr	r0, [pc, #8]	; (800ab8c <MX_PDM2PCM_Init+0x48>)
 800ab84:	f001 fde2 	bl	800c74c <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800ab88:	bf00      	nop
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	2000315c 	.word	0x2000315c
 800ab90:	7d70a3d6 	.word	0x7d70a3d6
 800ab94:	200031a8 	.word	0x200031a8

0800ab98 <D16_GENERIC>:
 800ab98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab9c:	b089      	sub	sp, #36	; 0x24
 800ab9e:	68d4      	ldr	r4, [r2, #12]
 800aba0:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800aba2:	6993      	ldr	r3, [r2, #24]
 800aba4:	9407      	str	r4, [sp, #28]
 800aba6:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800aba8:	9306      	str	r3, [sp, #24]
 800abaa:	9402      	str	r4, [sp, #8]
 800abac:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800abb0:	f8d2 b014 	ldr.w	fp, [r2, #20]
 800abb4:	69d3      	ldr	r3, [r2, #28]
 800abb6:	6896      	ldr	r6, [r2, #8]
 800abb8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800abba:	9103      	str	r1, [sp, #12]
 800abbc:	2d00      	cmp	r5, #0
 800abbe:	d066      	beq.n	800ac8e <D16_GENERIC+0xf6>
 800abc0:	f004 0510 	and.w	r5, r4, #16
 800abc4:	f004 0420 	and.w	r4, r4, #32
 800abc8:	9504      	str	r5, [sp, #16]
 800abca:	4938      	ldr	r1, [pc, #224]	; (800acac <D16_GENERIC+0x114>)
 800abcc:	9405      	str	r4, [sp, #20]
 800abce:	f04f 0e00 	mov.w	lr, #0
 800abd2:	4635      	mov	r5, r6
 800abd4:	e04f      	b.n	800ac76 <D16_GENERIC+0xde>
 800abd6:	5d87      	ldrb	r7, [r0, r6]
 800abd8:	7804      	ldrb	r4, [r0, #0]
 800abda:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800abde:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 800abe2:	b2e6      	uxtb	r6, r4
 800abe4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800abe8:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800abec:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800abf0:	4433      	add	r3, r6
 800abf2:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800abf6:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800abfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abfe:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800ac02:	0aa3      	lsrs	r3, r4, #10
 800ac04:	4c2a      	ldr	r4, [pc, #168]	; (800acb0 <D16_GENERIC+0x118>)
 800ac06:	fb26 5404 	smlad	r4, r6, r4, r5
 800ac0a:	4d2a      	ldr	r5, [pc, #168]	; (800acb4 <D16_GENERIC+0x11c>)
 800ac0c:	fb26 f505 	smuad	r5, r6, r5
 800ac10:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800ac14:	eb04 080a 	add.w	r8, r4, sl
 800ac18:	eba8 080b 	sub.w	r8, r8, fp
 800ac1c:	4646      	mov	r6, r8
 800ac1e:	17f7      	asrs	r7, r6, #31
 800ac20:	e9cd 6700 	strd	r6, r7, [sp]
 800ac24:	9e04      	ldr	r6, [sp, #16]
 800ac26:	f10e 0c01 	add.w	ip, lr, #1
 800ac2a:	b16e      	cbz	r6, 800ac48 <D16_GENERIC+0xb0>
 800ac2c:	6a16      	ldr	r6, [r2, #32]
 800ac2e:	9f01      	ldr	r7, [sp, #4]
 800ac30:	fba8 8906 	umull	r8, r9, r8, r6
 800ac34:	fb06 9907 	mla	r9, r6, r7, r9
 800ac38:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800ac3c:	f149 0900 	adc.w	r9, r9, #0
 800ac40:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800ac44:	46a3      	mov	fp, r4
 800ac46:	4654      	mov	r4, sl
 800ac48:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800ac4a:	9f02      	ldr	r7, [sp, #8]
 800ac4c:	0424      	lsls	r4, r4, #16
 800ac4e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800ac52:	f04f 0900 	mov.w	r9, #0
 800ac56:	fb0e fe06 	mul.w	lr, lr, r6
 800ac5a:	fbc7 8904 	smlal	r8, r9, r7, r4
 800ac5e:	9e03      	ldr	r6, [sp, #12]
 800ac60:	464f      	mov	r7, r9
 800ac62:	10bc      	asrs	r4, r7, #2
 800ac64:	f304 040f 	ssat	r4, #16, r4
 800ac68:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 800ac6c:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800ac6e:	fa1f fe8c 	uxth.w	lr, ip
 800ac72:	4574      	cmp	r4, lr
 800ac74:	d90a      	bls.n	800ac8c <D16_GENERIC+0xf4>
 800ac76:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800ac78:	2c01      	cmp	r4, #1
 800ac7a:	b2e6      	uxtb	r6, r4
 800ac7c:	d1ab      	bne.n	800abd6 <D16_GENERIC+0x3e>
 800ac7e:	9e05      	ldr	r6, [sp, #20]
 800ac80:	f850 4b02 	ldr.w	r4, [r0], #2
 800ac84:	2e00      	cmp	r6, #0
 800ac86:	d0ac      	beq.n	800abe2 <D16_GENERIC+0x4a>
 800ac88:	ba64      	rev16	r4, r4
 800ac8a:	e7aa      	b.n	800abe2 <D16_GENERIC+0x4a>
 800ac8c:	462e      	mov	r6, r5
 800ac8e:	9907      	ldr	r1, [sp, #28]
 800ac90:	61d3      	str	r3, [r2, #28]
 800ac92:	9b06      	ldr	r3, [sp, #24]
 800ac94:	6096      	str	r6, [r2, #8]
 800ac96:	2000      	movs	r0, #0
 800ac98:	60d1      	str	r1, [r2, #12]
 800ac9a:	f8c2 a010 	str.w	sl, [r2, #16]
 800ac9e:	f8c2 b014 	str.w	fp, [r2, #20]
 800aca2:	6193      	str	r3, [r2, #24]
 800aca4:	b009      	add	sp, #36	; 0x24
 800aca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acaa:	bf00      	nop
 800acac:	20000000 	.word	0x20000000
 800acb0:	00030001 	.word	0x00030001
 800acb4:	00010003 	.word	0x00010003

0800acb8 <D24_GENERIC>:
 800acb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acbc:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800acbe:	6993      	ldr	r3, [r2, #24]
 800acc0:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800acc2:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800acc6:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800acca:	6894      	ldr	r4, [r2, #8]
 800accc:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800acd0:	b089      	sub	sp, #36	; 0x24
 800acd2:	9307      	str	r3, [sp, #28]
 800acd4:	9503      	str	r5, [sp, #12]
 800acd6:	69d3      	ldr	r3, [r2, #28]
 800acd8:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800acda:	9104      	str	r1, [sp, #16]
 800acdc:	2e00      	cmp	r6, #0
 800acde:	f000 8096 	beq.w	800ae0e <D24_GENERIC+0x156>
 800ace2:	f005 0610 	and.w	r6, r5, #16
 800ace6:	f005 0520 	and.w	r5, r5, #32
 800acea:	4954      	ldr	r1, [pc, #336]	; (800ae3c <D24_GENERIC+0x184>)
 800acec:	9605      	str	r6, [sp, #20]
 800acee:	9506      	str	r5, [sp, #24]
 800acf0:	f04f 0e00 	mov.w	lr, #0
 800acf4:	f8cd 9008 	str.w	r9, [sp, #8]
 800acf8:	e06a      	b.n	800add0 <D24_GENERIC+0x118>
 800acfa:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800acfe:	f810 8007 	ldrb.w	r8, [r0, r7]
 800ad02:	f890 c000 	ldrb.w	ip, [r0]
 800ad06:	042d      	lsls	r5, r5, #16
 800ad08:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800ad0c:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 800ad10:	44ac      	add	ip, r5
 800ad12:	4438      	add	r0, r7
 800ad14:	fa5f f68c 	uxtb.w	r6, ip
 800ad18:	f3cc 2507 	ubfx	r5, ip, #8, #8
 800ad1c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800ad20:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 800ad24:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ad28:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800ad2c:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800ad30:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 800ad34:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800ad38:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ad3c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800ad40:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800ad44:	4d3e      	ldr	r5, [pc, #248]	; (800ae40 <D24_GENERIC+0x188>)
 800ad46:	fb26 b705 	smlad	r7, r6, r5, fp
 800ad4a:	4d3e      	ldr	r5, [pc, #248]	; (800ae44 <D24_GENERIC+0x18c>)
 800ad4c:	fb26 4b05 	smlad	fp, r6, r5, r4
 800ad50:	f3c3 0409 	ubfx	r4, r3, #0, #10
 800ad54:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 800ad58:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 800ad5c:	2401      	movs	r4, #1
 800ad5e:	fb26 f604 	smuad	r6, r6, r4
 800ad62:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800ad66:	9f02      	ldr	r7, [sp, #8]
 800ad68:	eb0e 0c04 	add.w	ip, lr, r4
 800ad6c:	eb08 0406 	add.w	r4, r8, r6
 800ad70:	eb05 060a 	add.w	r6, r5, sl
 800ad74:	1bf6      	subs	r6, r6, r7
 800ad76:	4637      	mov	r7, r6
 800ad78:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800ad7c:	e9cd 7800 	strd	r7, r8, [sp]
 800ad80:	9f05      	ldr	r7, [sp, #20]
 800ad82:	b177      	cbz	r7, 800ada2 <D24_GENERIC+0xea>
 800ad84:	f8d2 8020 	ldr.w	r8, [r2, #32]
 800ad88:	9502      	str	r5, [sp, #8]
 800ad8a:	fba6 9a08 	umull	r9, sl, r6, r8
 800ad8e:	9e01      	ldr	r6, [sp, #4]
 800ad90:	fb08 aa06 	mla	sl, r8, r6, sl
 800ad94:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 800ad98:	f14a 0700 	adc.w	r7, sl, #0
 800ad9c:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 800ada0:	4655      	mov	r5, sl
 800ada2:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800ada4:	9f03      	ldr	r7, [sp, #12]
 800ada6:	03ad      	lsls	r5, r5, #14
 800ada8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800adac:	f04f 0900 	mov.w	r9, #0
 800adb0:	fb0e fe06 	mul.w	lr, lr, r6
 800adb4:	fbc7 8905 	smlal	r8, r9, r7, r5
 800adb8:	9e04      	ldr	r6, [sp, #16]
 800adba:	464f      	mov	r7, r9
 800adbc:	10bd      	asrs	r5, r7, #2
 800adbe:	f305 050f 	ssat	r5, #16, r5
 800adc2:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 800adc6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800adc8:	fa1f fe8c 	uxth.w	lr, ip
 800adcc:	4575      	cmp	r5, lr
 800adce:	d91c      	bls.n	800ae0a <D24_GENERIC+0x152>
 800add0:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800add2:	b2ef      	uxtb	r7, r5
 800add4:	2d01      	cmp	r5, #1
 800add6:	b23e      	sxth	r6, r7
 800add8:	d18f      	bne.n	800acfa <D24_GENERIC+0x42>
 800adda:	9d06      	ldr	r5, [sp, #24]
 800addc:	b15d      	cbz	r5, 800adf6 <D24_GENERIC+0x13e>
 800adde:	f01e 0f01 	tst.w	lr, #1
 800ade2:	d122      	bne.n	800ae2a <D24_GENERIC+0x172>
 800ade4:	7805      	ldrb	r5, [r0, #0]
 800ade6:	78c7      	ldrb	r7, [r0, #3]
 800ade8:	7846      	ldrb	r6, [r0, #1]
 800adea:	022d      	lsls	r5, r5, #8
 800adec:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800adf0:	44b4      	add	ip, r6
 800adf2:	3002      	adds	r0, #2
 800adf4:	e78e      	b.n	800ad14 <D24_GENERIC+0x5c>
 800adf6:	7846      	ldrb	r6, [r0, #1]
 800adf8:	f890 c002 	ldrb.w	ip, [r0, #2]
 800adfc:	f810 5b03 	ldrb.w	r5, [r0], #3
 800ae00:	0236      	lsls	r6, r6, #8
 800ae02:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 800ae06:	44ac      	add	ip, r5
 800ae08:	e784      	b.n	800ad14 <D24_GENERIC+0x5c>
 800ae0a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800ae0e:	61d3      	str	r3, [r2, #28]
 800ae10:	9b07      	ldr	r3, [sp, #28]
 800ae12:	6094      	str	r4, [r2, #8]
 800ae14:	2000      	movs	r0, #0
 800ae16:	f8c2 b00c 	str.w	fp, [r2, #12]
 800ae1a:	f8c2 a010 	str.w	sl, [r2, #16]
 800ae1e:	f8c2 9014 	str.w	r9, [r2, #20]
 800ae22:	6193      	str	r3, [r2, #24]
 800ae24:	b009      	add	sp, #36	; 0x24
 800ae26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae2a:	78c5      	ldrb	r5, [r0, #3]
 800ae2c:	7887      	ldrb	r7, [r0, #2]
 800ae2e:	f810 6b04 	ldrb.w	r6, [r0], #4
 800ae32:	022d      	lsls	r5, r5, #8
 800ae34:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800ae38:	44b4      	add	ip, r6
 800ae3a:	e76b      	b.n	800ad14 <D24_GENERIC+0x5c>
 800ae3c:	20000000 	.word	0x20000000
 800ae40:	00030001 	.word	0x00030001
 800ae44:	00060007 	.word	0x00060007

0800ae48 <D32_GENERIC>:
 800ae48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae4c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800ae4e:	6993      	ldr	r3, [r2, #24]
 800ae50:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800ae52:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800ae56:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800ae5a:	69d6      	ldr	r6, [r2, #28]
 800ae5c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800ae60:	b089      	sub	sp, #36	; 0x24
 800ae62:	9307      	str	r3, [sp, #28]
 800ae64:	9403      	str	r4, [sp, #12]
 800ae66:	6893      	ldr	r3, [r2, #8]
 800ae68:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800ae6a:	9104      	str	r1, [sp, #16]
 800ae6c:	2d00      	cmp	r5, #0
 800ae6e:	f000 809f 	beq.w	800afb0 <D32_GENERIC+0x168>
 800ae72:	f004 0510 	and.w	r5, r4, #16
 800ae76:	f004 0420 	and.w	r4, r4, #32
 800ae7a:	9505      	str	r5, [sp, #20]
 800ae7c:	4953      	ldr	r1, [pc, #332]	; (800afcc <D32_GENERIC+0x184>)
 800ae7e:	9406      	str	r4, [sp, #24]
 800ae80:	f04f 0c00 	mov.w	ip, #0
 800ae84:	f8cd 9008 	str.w	r9, [sp, #8]
 800ae88:	461d      	mov	r5, r3
 800ae8a:	4617      	mov	r7, r2
 800ae8c:	e077      	b.n	800af7e <D32_GENERIC+0x136>
 800ae8e:	f818 3003 	ldrb.w	r3, [r8, r3]
 800ae92:	f810 800e 	ldrb.w	r8, [r0, lr]
 800ae96:	f810 e002 	ldrb.w	lr, [r0, r2]
 800ae9a:	7800      	ldrb	r0, [r0, #0]
 800ae9c:	041b      	lsls	r3, r3, #16
 800ae9e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800aea2:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800aea6:	4403      	add	r3, r0
 800aea8:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800aeac:	b2dc      	uxtb	r4, r3
 800aeae:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800aeb2:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800aeb6:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800aeba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800aebe:	0e1b      	lsrs	r3, r3, #24
 800aec0:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 800aec4:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 800aec8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800aecc:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800aed0:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 800aed4:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 800aed8:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800aedc:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800aee0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800aee4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800aee8:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 800aeec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aef0:	4b37      	ldr	r3, [pc, #220]	; (800afd0 <D32_GENERIC+0x188>)
 800aef2:	fb22 b403 	smlad	r4, r2, r3, fp
 800aef6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800aefa:	fb2e 4803 	smlad	r8, lr, r3, r4
 800aefe:	4b35      	ldr	r3, [pc, #212]	; (800afd4 <D32_GENERIC+0x18c>)
 800af00:	fb22 5503 	smlad	r5, r2, r3, r5
 800af04:	4b34      	ldr	r3, [pc, #208]	; (800afd8 <D32_GENERIC+0x190>)
 800af06:	fb2e 5b03 	smlad	fp, lr, r3, r5
 800af0a:	2301      	movs	r3, #1
 800af0c:	fb22 f203 	smuad	r2, r2, r3
 800af10:	4b32      	ldr	r3, [pc, #200]	; (800afdc <D32_GENERIC+0x194>)
 800af12:	fb2e 2503 	smlad	r5, lr, r3, r2
 800af16:	9b02      	ldr	r3, [sp, #8]
 800af18:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 800af1c:	eb04 080a 	add.w	r8, r4, sl
 800af20:	eba8 0803 	sub.w	r8, r8, r3
 800af24:	4642      	mov	r2, r8
 800af26:	17d3      	asrs	r3, r2, #31
 800af28:	e9cd 2300 	strd	r2, r3, [sp]
 800af2c:	9b05      	ldr	r3, [sp, #20]
 800af2e:	f10c 0e01 	add.w	lr, ip, #1
 800af32:	b16b      	cbz	r3, 800af50 <D32_GENERIC+0x108>
 800af34:	6a3a      	ldr	r2, [r7, #32]
 800af36:	9b01      	ldr	r3, [sp, #4]
 800af38:	9402      	str	r4, [sp, #8]
 800af3a:	fba8 8902 	umull	r8, r9, r8, r2
 800af3e:	fb02 9903 	mla	r9, r2, r3, r9
 800af42:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800af46:	f149 0900 	adc.w	r9, r9, #0
 800af4a:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800af4e:	4654      	mov	r4, sl
 800af50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af52:	9a04      	ldr	r2, [sp, #16]
 800af54:	fb0c fc03 	mul.w	ip, ip, r3
 800af58:	9b03      	ldr	r3, [sp, #12]
 800af5a:	0364      	lsls	r4, r4, #13
 800af5c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800af60:	f04f 0900 	mov.w	r9, #0
 800af64:	fbc3 8904 	smlal	r8, r9, r3, r4
 800af68:	464b      	mov	r3, r9
 800af6a:	109b      	asrs	r3, r3, #2
 800af6c:	f303 030f 	ssat	r3, #16, r3
 800af70:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 800af74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800af76:	fa1f fc8e 	uxth.w	ip, lr
 800af7a:	4563      	cmp	r3, ip
 800af7c:	d914      	bls.n	800afa8 <D32_GENERIC+0x160>
 800af7e:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800af80:	b2e2      	uxtb	r2, r4
 800af82:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 800af86:	eb00 080e 	add.w	r8, r0, lr
 800af8a:	4253      	negs	r3, r2
 800af8c:	2c01      	cmp	r4, #1
 800af8e:	eb08 0403 	add.w	r4, r8, r3
 800af92:	f47f af7c 	bne.w	800ae8e <D32_GENERIC+0x46>
 800af96:	1d02      	adds	r2, r0, #4
 800af98:	6803      	ldr	r3, [r0, #0]
 800af9a:	9806      	ldr	r0, [sp, #24]
 800af9c:	b110      	cbz	r0, 800afa4 <D32_GENERIC+0x15c>
 800af9e:	ba5b      	rev16	r3, r3
 800afa0:	4610      	mov	r0, r2
 800afa2:	e783      	b.n	800aeac <D32_GENERIC+0x64>
 800afa4:	4610      	mov	r0, r2
 800afa6:	e781      	b.n	800aeac <D32_GENERIC+0x64>
 800afa8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800afac:	462b      	mov	r3, r5
 800afae:	463a      	mov	r2, r7
 800afb0:	6093      	str	r3, [r2, #8]
 800afb2:	9b07      	ldr	r3, [sp, #28]
 800afb4:	f8c2 b00c 	str.w	fp, [r2, #12]
 800afb8:	2000      	movs	r0, #0
 800afba:	61d6      	str	r6, [r2, #28]
 800afbc:	f8c2 a010 	str.w	sl, [r2, #16]
 800afc0:	f8c2 9014 	str.w	r9, [r2, #20]
 800afc4:	6193      	str	r3, [r2, #24]
 800afc6:	b009      	add	sp, #36	; 0x24
 800afc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afcc:	20000000 	.word	0x20000000
 800afd0:	00060003 	.word	0x00060003
 800afd4:	000a000c 	.word	0x000a000c
 800afd8:	000c000a 	.word	0x000c000a
 800afdc:	00030006 	.word	0x00030006

0800afe0 <D48_GENERIC>:
 800afe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe4:	b089      	sub	sp, #36	; 0x24
 800afe6:	6953      	ldr	r3, [r2, #20]
 800afe8:	68d4      	ldr	r4, [r2, #12]
 800afea:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800afec:	9302      	str	r3, [sp, #8]
 800afee:	9400      	str	r4, [sp, #0]
 800aff0:	6993      	ldr	r3, [r2, #24]
 800aff2:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800aff4:	9307      	str	r3, [sp, #28]
 800aff6:	9403      	str	r4, [sp, #12]
 800aff8:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800affc:	69d6      	ldr	r6, [r2, #28]
 800affe:	6893      	ldr	r3, [r2, #8]
 800b000:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800b002:	9104      	str	r1, [sp, #16]
 800b004:	2d00      	cmp	r5, #0
 800b006:	f000 80c5 	beq.w	800b194 <D48_GENERIC+0x1b4>
 800b00a:	f004 0510 	and.w	r5, r4, #16
 800b00e:	f004 0420 	and.w	r4, r4, #32
 800b012:	4967      	ldr	r1, [pc, #412]	; (800b1b0 <D48_GENERIC+0x1d0>)
 800b014:	9505      	str	r5, [sp, #20]
 800b016:	9406      	str	r4, [sp, #24]
 800b018:	f04f 0c00 	mov.w	ip, #0
 800b01c:	4657      	mov	r7, sl
 800b01e:	9301      	str	r3, [sp, #4]
 800b020:	e09c      	b.n	800b15c <D48_GENERIC+0x17c>
 800b022:	f81b 4005 	ldrb.w	r4, [fp, r5]
 800b026:	f810 b009 	ldrb.w	fp, [r0, r9]
 800b02a:	f81a 9009 	ldrb.w	r9, [sl, r9]
 800b02e:	f810 a00e 	ldrb.w	sl, [r0, lr]
 800b032:	7800      	ldrb	r0, [r0, #0]
 800b034:	0424      	lsls	r4, r4, #16
 800b036:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800b03a:	f818 4005 	ldrb.w	r4, [r8, r5]
 800b03e:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 800b042:	44a8      	add	r8, r5
 800b044:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 800b048:	eb0b 0500 	add.w	r5, fp, r0
 800b04c:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 800b050:	fa5f f885 	uxtb.w	r8, r5
 800b054:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 800b058:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 800b05c:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 800b060:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 800b064:	0e2d      	lsrs	r5, r5, #24
 800b066:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800b06a:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 800b06e:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 800b072:	b2e6      	uxtb	r6, r4
 800b074:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 800b078:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800b07c:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 800b080:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800b084:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 800b088:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 800b08c:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800b090:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 800b094:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b098:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b09c:	f3c6 0909 	ubfx	r9, r6, #0, #10
 800b0a0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b0a4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b0a8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b0ac:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 800b0b0:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 800b0b4:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 800b0b8:	4c3e      	ldr	r4, [pc, #248]	; (800b1b4 <D48_GENERIC+0x1d4>)
 800b0ba:	9d00      	ldr	r5, [sp, #0]
 800b0bc:	fb2a 5404 	smlad	r4, sl, r4, r5
 800b0c0:	4d3d      	ldr	r5, [pc, #244]	; (800b1b8 <D48_GENERIC+0x1d8>)
 800b0c2:	fb28 4405 	smlad	r4, r8, r5, r4
 800b0c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b0ca:	fb2e 4b03 	smlad	fp, lr, r3, r4
 800b0ce:	4c3b      	ldr	r4, [pc, #236]	; (800b1bc <D48_GENERIC+0x1dc>)
 800b0d0:	9b01      	ldr	r3, [sp, #4]
 800b0d2:	fb2a 3304 	smlad	r3, sl, r4, r3
 800b0d6:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800b0da:	fb28 3304 	smlad	r3, r8, r4, r3
 800b0de:	4c38      	ldr	r4, [pc, #224]	; (800b1c0 <D48_GENERIC+0x1e0>)
 800b0e0:	fb2e 3304 	smlad	r3, lr, r4, r3
 800b0e4:	2501      	movs	r5, #1
 800b0e6:	9300      	str	r3, [sp, #0]
 800b0e8:	fb2a fa05 	smuad	sl, sl, r5
 800b0ec:	4b35      	ldr	r3, [pc, #212]	; (800b1c4 <D48_GENERIC+0x1e4>)
 800b0ee:	fb28 a803 	smlad	r8, r8, r3, sl
 800b0f2:	4b35      	ldr	r3, [pc, #212]	; (800b1c8 <D48_GENERIC+0x1e8>)
 800b0f4:	fb2e 8303 	smlad	r3, lr, r3, r8
 800b0f8:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 800b0fc:	9301      	str	r3, [sp, #4]
 800b0fe:	9b02      	ldr	r3, [sp, #8]
 800b100:	eb04 0807 	add.w	r8, r4, r7
 800b104:	eba8 0803 	sub.w	r8, r8, r3
 800b108:	9b05      	ldr	r3, [sp, #20]
 800b10a:	4465      	add	r5, ip
 800b10c:	ea4f 7be8 	mov.w	fp, r8, asr #31
 800b110:	b163      	cbz	r3, 800b12c <D48_GENERIC+0x14c>
 800b112:	6a17      	ldr	r7, [r2, #32]
 800b114:	9402      	str	r4, [sp, #8]
 800b116:	fba8 8907 	umull	r8, r9, r8, r7
 800b11a:	fb07 990b 	mla	r9, r7, fp, r9
 800b11e:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800b122:	f149 0900 	adc.w	r9, r9, #0
 800b126:	ea4f 0749 	mov.w	r7, r9, lsl #1
 800b12a:	463c      	mov	r4, r7
 800b12c:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 800b130:	9b03      	ldr	r3, [sp, #12]
 800b132:	02e4      	lsls	r4, r4, #11
 800b134:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800b138:	f04f 0900 	mov.w	r9, #0
 800b13c:	fb0c fc0e 	mul.w	ip, ip, lr
 800b140:	fbc3 8904 	smlal	r8, r9, r3, r4
 800b144:	9b04      	ldr	r3, [sp, #16]
 800b146:	ea4f 04a9 	mov.w	r4, r9, asr #2
 800b14a:	f304 040f 	ssat	r4, #16, r4
 800b14e:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 800b152:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b154:	fa1f fc85 	uxth.w	ip, r5
 800b158:	4564      	cmp	r4, ip
 800b15a:	d919      	bls.n	800b190 <D48_GENERIC+0x1b0>
 800b15c:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800b15e:	fa5f fe84 	uxtb.w	lr, r4
 800b162:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 800b166:	f1ce 0500 	rsb	r5, lr, #0
 800b16a:	eb00 0b09 	add.w	fp, r0, r9
 800b16e:	eb0b 0a05 	add.w	sl, fp, r5
 800b172:	2c01      	cmp	r4, #1
 800b174:	eb0a 0809 	add.w	r8, sl, r9
 800b178:	f47f af53 	bne.w	800b022 <D48_GENERIC+0x42>
 800b17c:	9b06      	ldr	r3, [sp, #24]
 800b17e:	6805      	ldr	r5, [r0, #0]
 800b180:	6844      	ldr	r4, [r0, #4]
 800b182:	3006      	adds	r0, #6
 800b184:	2b00      	cmp	r3, #0
 800b186:	f43f af63 	beq.w	800b050 <D48_GENERIC+0x70>
 800b18a:	ba6d      	rev16	r5, r5
 800b18c:	ba64      	rev16	r4, r4
 800b18e:	e75f      	b.n	800b050 <D48_GENERIC+0x70>
 800b190:	9b01      	ldr	r3, [sp, #4]
 800b192:	46ba      	mov	sl, r7
 800b194:	6093      	str	r3, [r2, #8]
 800b196:	9b00      	ldr	r3, [sp, #0]
 800b198:	60d3      	str	r3, [r2, #12]
 800b19a:	9b02      	ldr	r3, [sp, #8]
 800b19c:	6153      	str	r3, [r2, #20]
 800b19e:	9b07      	ldr	r3, [sp, #28]
 800b1a0:	61d6      	str	r6, [r2, #28]
 800b1a2:	2000      	movs	r0, #0
 800b1a4:	f8c2 a010 	str.w	sl, [r2, #16]
 800b1a8:	6193      	str	r3, [r2, #24]
 800b1aa:	b009      	add	sp, #36	; 0x24
 800b1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b0:	20000000 	.word	0x20000000
 800b1b4:	000f000a 	.word	0x000f000a
 800b1b8:	00060003 	.word	0x00060003
 800b1bc:	00150019 	.word	0x00150019
 800b1c0:	00190015 	.word	0x00190015
 800b1c4:	00030006 	.word	0x00030006
 800b1c8:	000a000f 	.word	0x000a000f

0800b1cc <D64_GENERIC>:
 800b1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d0:	b089      	sub	sp, #36	; 0x24
 800b1d2:	6913      	ldr	r3, [r2, #16]
 800b1d4:	6895      	ldr	r5, [r2, #8]
 800b1d6:	9303      	str	r3, [sp, #12]
 800b1d8:	9501      	str	r5, [sp, #4]
 800b1da:	6953      	ldr	r3, [r2, #20]
 800b1dc:	68d5      	ldr	r5, [r2, #12]
 800b1de:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b1e0:	9304      	str	r3, [sp, #16]
 800b1e2:	9500      	str	r5, [sp, #0]
 800b1e4:	6993      	ldr	r3, [r2, #24]
 800b1e6:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800b1e8:	9307      	str	r3, [sp, #28]
 800b1ea:	9505      	str	r5, [sp, #20]
 800b1ec:	69d3      	ldr	r3, [r2, #28]
 800b1ee:	9106      	str	r1, [sp, #24]
 800b1f0:	2c00      	cmp	r4, #0
 800b1f2:	f000 80d9 	beq.w	800b3a8 <D64_GENERIC+0x1dc>
 800b1f6:	6a11      	ldr	r1, [r2, #32]
 800b1f8:	9102      	str	r1, [sp, #8]
 800b1fa:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 800b3e8 <D64_GENERIC+0x21c>
 800b1fe:	f04f 0c00 	mov.w	ip, #0
 800b202:	4681      	mov	r9, r0
 800b204:	e0c1      	b.n	800b38a <D64_GENERIC+0x1be>
 800b206:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800b20a:	4274      	negs	r4, r6
 800b20c:	eb09 0708 	add.w	r7, r9, r8
 800b210:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 800b214:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 800b218:	5d38      	ldrb	r0, [r7, r4]
 800b21a:	5d29      	ldrb	r1, [r5, r4]
 800b21c:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 800b220:	f819 a008 	ldrb.w	sl, [r9, r8]
 800b224:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 800b228:	f899 7000 	ldrb.w	r7, [r9]
 800b22c:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 800b230:	4425      	add	r5, r4
 800b232:	0409      	lsls	r1, r1, #16
 800b234:	0400      	lsls	r0, r0, #16
 800b236:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800b23a:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800b23e:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 800b242:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 800b246:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800b24a:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800b24e:	4459      	add	r1, fp
 800b250:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 800b254:	4438      	add	r0, r7
 800b256:	b2c5      	uxtb	r5, r0
 800b258:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800b25c:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 800b260:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 800b264:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800b268:	0e00      	lsrs	r0, r0, #24
 800b26a:	eb03 0806 	add.w	r8, r3, r6
 800b26e:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 800b272:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 800b276:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800b27a:	b2c8      	uxtb	r0, r1
 800b27c:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800b280:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800b284:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 800b288:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 800b28c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800b290:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800b294:	0e09      	lsrs	r1, r1, #24
 800b296:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800b29a:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 800b29e:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800b2a2:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800b2a6:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800b2aa:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800b2ae:	f3ca 0309 	ubfx	r3, sl, #0, #10
 800b2b2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b2b6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b2ba:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b2be:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800b2c2:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b2c6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b2ca:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b2ce:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800b2d2:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800b2d6:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800b2da:	0a8b      	lsrs	r3, r1, #10
 800b2dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800b2e0:	4939      	ldr	r1, [pc, #228]	; (800b3c8 <D64_GENERIC+0x1fc>)
 800b2e2:	9c00      	ldr	r4, [sp, #0]
 800b2e4:	fb28 4101 	smlad	r1, r8, r1, r4
 800b2e8:	4c38      	ldr	r4, [pc, #224]	; (800b3cc <D64_GENERIC+0x200>)
 800b2ea:	fb27 1104 	smlad	r1, r7, r4, r1
 800b2ee:	4c38      	ldr	r4, [pc, #224]	; (800b3d0 <D64_GENERIC+0x204>)
 800b2f0:	fb20 1104 	smlad	r1, r0, r4, r1
 800b2f4:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800b2f8:	fb2a 1106 	smlad	r1, sl, r6, r1
 800b2fc:	4c35      	ldr	r4, [pc, #212]	; (800b3d4 <D64_GENERIC+0x208>)
 800b2fe:	9d01      	ldr	r5, [sp, #4]
 800b300:	fb28 5404 	smlad	r4, r8, r4, r5
 800b304:	4d33      	ldr	r5, [pc, #204]	; (800b3d4 <D64_GENERIC+0x208>)
 800b306:	fb2a 4415 	smladx	r4, sl, r5, r4
 800b30a:	4d33      	ldr	r5, [pc, #204]	; (800b3d8 <D64_GENERIC+0x20c>)
 800b30c:	fb27 4405 	smlad	r4, r7, r5, r4
 800b310:	fb20 4415 	smladx	r4, r0, r5, r4
 800b314:	2501      	movs	r5, #1
 800b316:	9400      	str	r4, [sp, #0]
 800b318:	fb28 f805 	smuad	r8, r8, r5
 800b31c:	4c2f      	ldr	r4, [pc, #188]	; (800b3dc <D64_GENERIC+0x210>)
 800b31e:	fb27 8704 	smlad	r7, r7, r4, r8
 800b322:	4c2f      	ldr	r4, [pc, #188]	; (800b3e0 <D64_GENERIC+0x214>)
 800b324:	fb20 7004 	smlad	r0, r0, r4, r7
 800b328:	4c2e      	ldr	r4, [pc, #184]	; (800b3e4 <D64_GENERIC+0x218>)
 800b32a:	fb2a 0004 	smlad	r0, sl, r4, r0
 800b32e:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 800b332:	9902      	ldr	r1, [sp, #8]
 800b334:	9001      	str	r0, [sp, #4]
 800b336:	b189      	cbz	r1, 800b35c <D64_GENERIC+0x190>
 800b338:	9803      	ldr	r0, [sp, #12]
 800b33a:	9c04      	ldr	r4, [sp, #16]
 800b33c:	9604      	str	r6, [sp, #16]
 800b33e:	4430      	add	r0, r6
 800b340:	1b00      	subs	r0, r0, r4
 800b342:	17c5      	asrs	r5, r0, #31
 800b344:	460f      	mov	r7, r1
 800b346:	fba0 0101 	umull	r0, r1, r0, r1
 800b34a:	fb07 1105 	mla	r1, r7, r5, r1
 800b34e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800b352:	f141 0100 	adc.w	r1, r1, #0
 800b356:	0049      	lsls	r1, r1, #1
 800b358:	9103      	str	r1, [sp, #12]
 800b35a:	460e      	mov	r6, r1
 800b35c:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 800b35e:	9905      	ldr	r1, [sp, #20]
 800b360:	9806      	ldr	r0, [sp, #24]
 800b362:	02b6      	lsls	r6, r6, #10
 800b364:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800b368:	f04f 0800 	mov.w	r8, #0
 800b36c:	fb0c f404 	mul.w	r4, ip, r4
 800b370:	fbc1 7806 	smlal	r7, r8, r1, r6
 800b374:	4641      	mov	r1, r8
 800b376:	1089      	asrs	r1, r1, #2
 800b378:	f301 010f 	ssat	r1, #16, r1
 800b37c:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 800b380:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800b382:	f10c 0c01 	add.w	ip, ip, #1
 800b386:	4561      	cmp	r1, ip
 800b388:	dd0e      	ble.n	800b3a8 <D64_GENERIC+0x1dc>
 800b38a:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 800b38c:	2e01      	cmp	r6, #1
 800b38e:	f47f af3a 	bne.w	800b206 <D64_GENERIC+0x3a>
 800b392:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800b394:	06b4      	lsls	r4, r6, #26
 800b396:	e899 0003 	ldmia.w	r9, {r0, r1}
 800b39a:	f109 0908 	add.w	r9, r9, #8
 800b39e:	f57f af5a 	bpl.w	800b256 <D64_GENERIC+0x8a>
 800b3a2:	ba40      	rev16	r0, r0
 800b3a4:	ba49      	rev16	r1, r1
 800b3a6:	e756      	b.n	800b256 <D64_GENERIC+0x8a>
 800b3a8:	61d3      	str	r3, [r2, #28]
 800b3aa:	9b03      	ldr	r3, [sp, #12]
 800b3ac:	9901      	ldr	r1, [sp, #4]
 800b3ae:	6113      	str	r3, [r2, #16]
 800b3b0:	9b04      	ldr	r3, [sp, #16]
 800b3b2:	6091      	str	r1, [r2, #8]
 800b3b4:	6153      	str	r3, [r2, #20]
 800b3b6:	9900      	ldr	r1, [sp, #0]
 800b3b8:	9b07      	ldr	r3, [sp, #28]
 800b3ba:	60d1      	str	r1, [r2, #12]
 800b3bc:	2000      	movs	r0, #0
 800b3be:	6193      	str	r3, [r2, #24]
 800b3c0:	b009      	add	sp, #36	; 0x24
 800b3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c6:	bf00      	nop
 800b3c8:	001c0015 	.word	0x001c0015
 800b3cc:	000f000a 	.word	0x000f000a
 800b3d0:	00060003 	.word	0x00060003
 800b3d4:	0024002a 	.word	0x0024002a
 800b3d8:	002e0030 	.word	0x002e0030
 800b3dc:	00030006 	.word	0x00030006
 800b3e0:	000a000f 	.word	0x000a000f
 800b3e4:	0015001c 	.word	0x0015001c
 800b3e8:	20000000 	.word	0x20000000

0800b3ec <D80_GENERIC>:
 800b3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f0:	b08b      	sub	sp, #44	; 0x2c
 800b3f2:	6914      	ldr	r4, [r2, #16]
 800b3f4:	9404      	str	r4, [sp, #16]
 800b3f6:	6954      	ldr	r4, [r2, #20]
 800b3f8:	9405      	str	r4, [sp, #20]
 800b3fa:	6994      	ldr	r4, [r2, #24]
 800b3fc:	9409      	str	r4, [sp, #36]	; 0x24
 800b3fe:	6894      	ldr	r4, [r2, #8]
 800b400:	9402      	str	r4, [sp, #8]
 800b402:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b404:	68d4      	ldr	r4, [r2, #12]
 800b406:	9401      	str	r4, [sp, #4]
 800b408:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800b40a:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 800b40e:	9406      	str	r4, [sp, #24]
 800b410:	9107      	str	r1, [sp, #28]
 800b412:	2b00      	cmp	r3, #0
 800b414:	f000 810f 	beq.w	800b636 <D80_GENERIC+0x24a>
 800b418:	6a13      	ldr	r3, [r2, #32]
 800b41a:	9308      	str	r3, [sp, #32]
 800b41c:	2300      	movs	r3, #0
 800b41e:	9200      	str	r2, [sp, #0]
 800b420:	f8df 9264 	ldr.w	r9, [pc, #612]	; 800b688 <D80_GENERIC+0x29c>
 800b424:	f8cd b00c 	str.w	fp, [sp, #12]
 800b428:	461a      	mov	r2, r3
 800b42a:	e0ed      	b.n	800b608 <D80_GENERIC+0x21c>
 800b42c:	fa5f fc8c 	uxtb.w	ip, ip
 800b430:	fa0f f48c 	sxth.w	r4, ip
 800b434:	0066      	lsls	r6, r4, #1
 800b436:	eb06 0804 	add.w	r8, r6, r4
 800b43a:	f1cc 0500 	rsb	r5, ip, #0
 800b43e:	eb00 0108 	add.w	r1, r0, r8
 800b442:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800b446:	194b      	adds	r3, r1, r5
 800b448:	5d49      	ldrb	r1, [r1, r5]
 800b44a:	f810 a008 	ldrb.w	sl, [r0, r8]
 800b44e:	f813 b004 	ldrb.w	fp, [r3, r4]
 800b452:	f810 c00c 	ldrb.w	ip, [r0, ip]
 800b456:	f890 8000 	ldrb.w	r8, [r0]
 800b45a:	eb03 0e04 	add.w	lr, r3, r4
 800b45e:	eb0e 0705 	add.w	r7, lr, r5
 800b462:	0409      	lsls	r1, r1, #16
 800b464:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800b468:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800b46c:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800b470:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 800b474:	eb0a 0004 	add.w	r0, sl, r4
 800b478:	041b      	lsls	r3, r3, #16
 800b47a:	f81a a004 	ldrb.w	sl, [sl, r4]
 800b47e:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 800b482:	5d44      	ldrb	r4, [r0, r5]
 800b484:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800b488:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800b48c:	4428      	add	r0, r5
 800b48e:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800b492:	4441      	add	r1, r8
 800b494:	4430      	add	r0, r6
 800b496:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800b49a:	441f      	add	r7, r3
 800b49c:	b2cd      	uxtb	r5, r1
 800b49e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800b4a2:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800b4a6:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 800b4aa:	9b03      	ldr	r3, [sp, #12]
 800b4ac:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800b4b0:	0e09      	lsrs	r1, r1, #24
 800b4b2:	4433      	add	r3, r6
 800b4b4:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 800b4b8:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 800b4bc:	b2fd      	uxtb	r5, r7
 800b4be:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 800b4c2:	469b      	mov	fp, r3
 800b4c4:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800b4c8:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 800b4cc:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 800b4d0:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 800b4d4:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800b4d8:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 800b4dc:	0e3b      	lsrs	r3, r7, #24
 800b4de:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800b4e2:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 800b4e6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b4ea:	fa5f fe84 	uxtb.w	lr, r4
 800b4ee:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 800b4f2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800b4f6:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800b4fa:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 800b4fe:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 800b502:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800b506:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 800b50a:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800b50e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b512:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b516:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800b51a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b51e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b522:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b526:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800b52a:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800b52e:	f3c4 0109 	ubfx	r1, r4, #0, #10
 800b532:	0aa3      	lsrs	r3, r4, #10
 800b534:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b538:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b53c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b540:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 800b544:	9303      	str	r3, [sp, #12]
 800b546:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 800b54a:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 800b54e:	4b42      	ldr	r3, [pc, #264]	; (800b658 <D80_GENERIC+0x26c>)
 800b550:	9901      	ldr	r1, [sp, #4]
 800b552:	fb2b 1303 	smlad	r3, fp, r3, r1
 800b556:	4941      	ldr	r1, [pc, #260]	; (800b65c <D80_GENERIC+0x270>)
 800b558:	fb28 3301 	smlad	r3, r8, r1, r3
 800b55c:	4940      	ldr	r1, [pc, #256]	; (800b660 <D80_GENERIC+0x274>)
 800b55e:	fb2c 3301 	smlad	r3, ip, r1, r3
 800b562:	4940      	ldr	r1, [pc, #256]	; (800b664 <D80_GENERIC+0x278>)
 800b564:	fb27 3301 	smlad	r3, r7, r1, r3
 800b568:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b56c:	fb2e 3301 	smlad	r3, lr, r1, r3
 800b570:	493d      	ldr	r1, [pc, #244]	; (800b668 <D80_GENERIC+0x27c>)
 800b572:	9c02      	ldr	r4, [sp, #8]
 800b574:	fb2b 4401 	smlad	r4, fp, r1, r4
 800b578:	493c      	ldr	r1, [pc, #240]	; (800b66c <D80_GENERIC+0x280>)
 800b57a:	fb28 4401 	smlad	r4, r8, r1, r4
 800b57e:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 800b582:	fb2c 4101 	smlad	r1, ip, r1, r4
 800b586:	4c3a      	ldr	r4, [pc, #232]	; (800b670 <D80_GENERIC+0x284>)
 800b588:	fb27 1104 	smlad	r1, r7, r4, r1
 800b58c:	4c39      	ldr	r4, [pc, #228]	; (800b674 <D80_GENERIC+0x288>)
 800b58e:	fb2e 1104 	smlad	r1, lr, r4, r1
 800b592:	9101      	str	r1, [sp, #4]
 800b594:	2101      	movs	r1, #1
 800b596:	fb2b fb01 	smuad	fp, fp, r1
 800b59a:	4937      	ldr	r1, [pc, #220]	; (800b678 <D80_GENERIC+0x28c>)
 800b59c:	fb28 b801 	smlad	r8, r8, r1, fp
 800b5a0:	4d36      	ldr	r5, [pc, #216]	; (800b67c <D80_GENERIC+0x290>)
 800b5a2:	fb2c 8c05 	smlad	ip, ip, r5, r8
 800b5a6:	4d36      	ldr	r5, [pc, #216]	; (800b680 <D80_GENERIC+0x294>)
 800b5a8:	fb27 c705 	smlad	r7, r7, r5, ip
 800b5ac:	4d35      	ldr	r5, [pc, #212]	; (800b684 <D80_GENERIC+0x298>)
 800b5ae:	fb2e 7105 	smlad	r1, lr, r5, r7
 800b5b2:	9102      	str	r1, [sp, #8]
 800b5b4:	9908      	ldr	r1, [sp, #32]
 800b5b6:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800b5ba:	b181      	cbz	r1, 800b5de <D80_GENERIC+0x1f2>
 800b5bc:	9c04      	ldr	r4, [sp, #16]
 800b5be:	9d05      	ldr	r5, [sp, #20]
 800b5c0:	9305      	str	r3, [sp, #20]
 800b5c2:	441c      	add	r4, r3
 800b5c4:	1b64      	subs	r4, r4, r5
 800b5c6:	17e7      	asrs	r7, r4, #31
 800b5c8:	fba4 4501 	umull	r4, r5, r4, r1
 800b5cc:	fb01 5507 	mla	r5, r1, r7, r5
 800b5d0:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800b5d4:	f145 0500 	adc.w	r5, r5, #0
 800b5d8:	0069      	lsls	r1, r5, #1
 800b5da:	9104      	str	r1, [sp, #16]
 800b5dc:	460b      	mov	r3, r1
 800b5de:	9e00      	ldr	r6, [sp, #0]
 800b5e0:	9f06      	ldr	r7, [sp, #24]
 800b5e2:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 800b5e4:	025b      	lsls	r3, r3, #9
 800b5e6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b5ea:	2500      	movs	r5, #0
 800b5ec:	fb02 f101 	mul.w	r1, r2, r1
 800b5f0:	fbc7 4503 	smlal	r4, r5, r7, r3
 800b5f4:	9c07      	ldr	r4, [sp, #28]
 800b5f6:	10ab      	asrs	r3, r5, #2
 800b5f8:	f303 030f 	ssat	r3, #16, r3
 800b5fc:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 800b600:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800b602:	3201      	adds	r2, #1
 800b604:	4293      	cmp	r3, r2
 800b606:	dd13      	ble.n	800b630 <D80_GENERIC+0x244>
 800b608:	9b00      	ldr	r3, [sp, #0]
 800b60a:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 800b60e:	f1bc 0f01 	cmp.w	ip, #1
 800b612:	f47f af0b 	bne.w	800b42c <D80_GENERIC+0x40>
 800b616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b618:	6884      	ldr	r4, [r0, #8]
 800b61a:	069b      	lsls	r3, r3, #26
 800b61c:	e890 0082 	ldmia.w	r0, {r1, r7}
 800b620:	f100 000a 	add.w	r0, r0, #10
 800b624:	f57f af3a 	bpl.w	800b49c <D80_GENERIC+0xb0>
 800b628:	ba49      	rev16	r1, r1
 800b62a:	ba7f      	rev16	r7, r7
 800b62c:	ba64      	rev16	r4, r4
 800b62e:	e735      	b.n	800b49c <D80_GENERIC+0xb0>
 800b630:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b634:	4632      	mov	r2, r6
 800b636:	9b02      	ldr	r3, [sp, #8]
 800b638:	6093      	str	r3, [r2, #8]
 800b63a:	9b01      	ldr	r3, [sp, #4]
 800b63c:	60d3      	str	r3, [r2, #12]
 800b63e:	9b04      	ldr	r3, [sp, #16]
 800b640:	6113      	str	r3, [r2, #16]
 800b642:	9b05      	ldr	r3, [sp, #20]
 800b644:	6153      	str	r3, [r2, #20]
 800b646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b648:	f8c2 b01c 	str.w	fp, [r2, #28]
 800b64c:	2000      	movs	r0, #0
 800b64e:	6193      	str	r3, [r2, #24]
 800b650:	b00b      	add	sp, #44	; 0x2c
 800b652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b656:	bf00      	nop
 800b658:	002d0024 	.word	0x002d0024
 800b65c:	001c0015 	.word	0x001c0015
 800b660:	000f000a 	.word	0x000f000a
 800b664:	00060003 	.word	0x00060003
 800b668:	0037003f 	.word	0x0037003f
 800b66c:	00450049 	.word	0x00450049
 800b670:	00490045 	.word	0x00490045
 800b674:	003f0037 	.word	0x003f0037
 800b678:	00030006 	.word	0x00030006
 800b67c:	000a000f 	.word	0x000a000f
 800b680:	0015001c 	.word	0x0015001c
 800b684:	0024002d 	.word	0x0024002d
 800b688:	20000000 	.word	0x20000000

0800b68c <D128_GENERIC>:
 800b68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b690:	b093      	sub	sp, #76	; 0x4c
 800b692:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b694:	9005      	str	r0, [sp, #20]
 800b696:	4610      	mov	r0, r2
 800b698:	9201      	str	r2, [sp, #4]
 800b69a:	6912      	ldr	r2, [r2, #16]
 800b69c:	920c      	str	r2, [sp, #48]	; 0x30
 800b69e:	4602      	mov	r2, r0
 800b6a0:	6940      	ldr	r0, [r0, #20]
 800b6a2:	900d      	str	r0, [sp, #52]	; 0x34
 800b6a4:	4610      	mov	r0, r2
 800b6a6:	4614      	mov	r4, r2
 800b6a8:	6992      	ldr	r2, [r2, #24]
 800b6aa:	9211      	str	r2, [sp, #68]	; 0x44
 800b6ac:	69c2      	ldr	r2, [r0, #28]
 800b6ae:	9202      	str	r2, [sp, #8]
 800b6b0:	68e2      	ldr	r2, [r4, #12]
 800b6b2:	6880      	ldr	r0, [r0, #8]
 800b6b4:	9203      	str	r2, [sp, #12]
 800b6b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b6b8:	9004      	str	r0, [sp, #16]
 800b6ba:	920e      	str	r2, [sp, #56]	; 0x38
 800b6bc:	910f      	str	r1, [sp, #60]	; 0x3c
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	f000 819b 	beq.w	800b9fa <D128_GENERIC+0x36e>
 800b6c4:	6a23      	ldr	r3, [r4, #32]
 800b6c6:	9310      	str	r3, [sp, #64]	; 0x40
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 800ba74 <D128_GENERIC+0x3e8>
 800b6ce:	9306      	str	r3, [sp, #24]
 800b6d0:	e17a      	b.n	800b9c8 <D128_GENERIC+0x33c>
 800b6d2:	b2d2      	uxtb	r2, r2
 800b6d4:	9d05      	ldr	r5, [sp, #20]
 800b6d6:	b214      	sxth	r4, r2
 800b6d8:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 800b6dc:	4250      	negs	r0, r2
 800b6de:	eb05 010a 	add.w	r1, r5, sl
 800b6e2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b6e6:	eb01 0800 	add.w	r8, r1, r0
 800b6ea:	eb0b 0c04 	add.w	ip, fp, r4
 800b6ee:	eb08 070c 	add.w	r7, r8, ip
 800b6f2:	183b      	adds	r3, r7, r0
 800b6f4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800b6f8:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 800b6fc:	eb0e 0604 	add.w	r6, lr, r4
 800b700:	9307      	str	r3, [sp, #28]
 800b702:	1833      	adds	r3, r6, r0
 800b704:	9305      	str	r3, [sp, #20]
 800b706:	462b      	mov	r3, r5
 800b708:	f815 a00a 	ldrb.w	sl, [r5, sl]
 800b70c:	f8cd a020 	str.w	sl, [sp, #32]
 800b710:	f818 a00c 	ldrb.w	sl, [r8, ip]
 800b714:	f813 c002 	ldrb.w	ip, [r3, r2]
 800b718:	f81e 8004 	ldrb.w	r8, [lr, r4]
 800b71c:	5c3a      	ldrb	r2, [r7, r0]
 800b71e:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 800b722:	781f      	ldrb	r7, [r3, #0]
 800b724:	9b07      	ldr	r3, [sp, #28]
 800b726:	9d05      	ldr	r5, [sp, #20]
 800b728:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 800b72c:	5c09      	ldrb	r1, [r1, r0]
 800b72e:	9709      	str	r7, [sp, #36]	; 0x24
 800b730:	9307      	str	r3, [sp, #28]
 800b732:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800b736:	5c33      	ldrb	r3, [r6, r0]
 800b738:	0412      	lsls	r2, r2, #16
 800b73a:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 800b73e:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 800b742:	9d08      	ldr	r5, [sp, #32]
 800b744:	eb06 0a04 	add.w	sl, r6, r4
 800b748:	0409      	lsls	r1, r1, #16
 800b74a:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 800b74e:	f81a 5000 	ldrb.w	r5, [sl, r0]
 800b752:	5d36      	ldrb	r6, [r6, r4]
 800b754:	9c05      	ldr	r4, [sp, #20]
 800b756:	042d      	lsls	r5, r5, #16
 800b758:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 800b75c:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800b760:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 800b764:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 800b768:	eb0a 0c00 	add.w	ip, sl, r0
 800b76c:	041b      	lsls	r3, r3, #16
 800b76e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800b772:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 800b776:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 800b77a:	9d07      	ldr	r5, [sp, #28]
 800b77c:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800b780:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 800b784:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b786:	4458      	add	r0, fp
 800b788:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 800b78c:	9005      	str	r0, [sp, #20]
 800b78e:	4439      	add	r1, r7
 800b790:	442a      	add	r2, r5
 800b792:	44b2      	add	sl, r6
 800b794:	1918      	adds	r0, r3, r4
 800b796:	b2cb      	uxtb	r3, r1
 800b798:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800b79c:	9e02      	ldr	r6, [sp, #8]
 800b79e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b7a2:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800b7a6:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800b7aa:	441e      	add	r6, r3
 800b7ac:	0e09      	lsrs	r1, r1, #24
 800b7ae:	4633      	mov	r3, r6
 800b7b0:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800b7b4:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 800b7b8:	b2d4      	uxtb	r4, r2
 800b7ba:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800b7be:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800b7c2:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 800b7c6:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800b7ca:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b7ce:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800b7d2:	0e12      	lsrs	r2, r2, #24
 800b7d4:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800b7d8:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 800b7dc:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800b7e0:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800b7e4:	9702      	str	r7, [sp, #8]
 800b7e6:	b2c2      	uxtb	r2, r0
 800b7e8:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800b7ec:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 800b7f0:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 800b7f4:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800b7f8:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800b7fc:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800b800:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800b804:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800b808:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 800b80c:	0e00      	lsrs	r0, r0, #24
 800b80e:	fa5f f68a 	uxtb.w	r6, sl
 800b812:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b816:	9309      	str	r3, [sp, #36]	; 0x24
 800b818:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800b81c:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 800b820:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800b824:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800b828:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b82c:	950a      	str	r5, [sp, #40]	; 0x28
 800b82e:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800b832:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800b836:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800b83a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b83e:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800b842:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b846:	920b      	str	r2, [sp, #44]	; 0x2c
 800b848:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800b84c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b84e:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800b852:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b856:	9307      	str	r3, [sp, #28]
 800b858:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800b85c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800b860:	9b02      	ldr	r3, [sp, #8]
 800b862:	f8cd c008 	str.w	ip, [sp, #8]
 800b866:	4694      	mov	ip, r2
 800b868:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b86a:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 800b86e:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800b872:	9a02      	ldr	r2, [sp, #8]
 800b874:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b878:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800b87c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b880:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b882:	f8cd a020 	str.w	sl, [sp, #32]
 800b886:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b88a:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800b88e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b892:	9b07      	ldr	r3, [sp, #28]
 800b894:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b898:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800b89c:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 800b8a0:	9a08      	ldr	r2, [sp, #32]
 800b8a2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b8a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8aa:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800b8ae:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b8b2:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 800b8b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800b8ba:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b8be:	0a96      	lsrs	r6, r2, #10
 800b8c0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b8c4:	9602      	str	r6, [sp, #8]
 800b8c6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800b8ca:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800b8ce:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 800b8d2:	4e53      	ldr	r6, [pc, #332]	; (800ba20 <D128_GENERIC+0x394>)
 800b8d4:	9f03      	ldr	r7, [sp, #12]
 800b8d6:	fb2c 7606 	smlad	r6, ip, r6, r7
 800b8da:	4f52      	ldr	r7, [pc, #328]	; (800ba24 <D128_GENERIC+0x398>)
 800b8dc:	fb2a 6607 	smlad	r6, sl, r7, r6
 800b8e0:	4f51      	ldr	r7, [pc, #324]	; (800ba28 <D128_GENERIC+0x39c>)
 800b8e2:	fb21 6607 	smlad	r6, r1, r7, r6
 800b8e6:	4f51      	ldr	r7, [pc, #324]	; (800ba2c <D128_GENERIC+0x3a0>)
 800b8e8:	fb24 6607 	smlad	r6, r4, r7, r6
 800b8ec:	4f50      	ldr	r7, [pc, #320]	; (800ba30 <D128_GENERIC+0x3a4>)
 800b8ee:	fb28 6607 	smlad	r6, r8, r7, r6
 800b8f2:	4f50      	ldr	r7, [pc, #320]	; (800ba34 <D128_GENERIC+0x3a8>)
 800b8f4:	fb20 6607 	smlad	r6, r0, r7, r6
 800b8f8:	4f4f      	ldr	r7, [pc, #316]	; (800ba38 <D128_GENERIC+0x3ac>)
 800b8fa:	fb23 6607 	smlad	r6, r3, r7, r6
 800b8fe:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800b902:	fb25 6607 	smlad	r6, r5, r7, r6
 800b906:	4f4d      	ldr	r7, [pc, #308]	; (800ba3c <D128_GENERIC+0x3b0>)
 800b908:	9a04      	ldr	r2, [sp, #16]
 800b90a:	fb2c 2e07 	smlad	lr, ip, r7, r2
 800b90e:	4a4c      	ldr	r2, [pc, #304]	; (800ba40 <D128_GENERIC+0x3b4>)
 800b910:	fb2a ee02 	smlad	lr, sl, r2, lr
 800b914:	4f4b      	ldr	r7, [pc, #300]	; (800ba44 <D128_GENERIC+0x3b8>)
 800b916:	fb21 ee07 	smlad	lr, r1, r7, lr
 800b91a:	4f4b      	ldr	r7, [pc, #300]	; (800ba48 <D128_GENERIC+0x3bc>)
 800b91c:	fb24 ee07 	smlad	lr, r4, r7, lr
 800b920:	4f4a      	ldr	r7, [pc, #296]	; (800ba4c <D128_GENERIC+0x3c0>)
 800b922:	fb28 ee07 	smlad	lr, r8, r7, lr
 800b926:	4f4a      	ldr	r7, [pc, #296]	; (800ba50 <D128_GENERIC+0x3c4>)
 800b928:	fb20 ee07 	smlad	lr, r0, r7, lr
 800b92c:	4f49      	ldr	r7, [pc, #292]	; (800ba54 <D128_GENERIC+0x3c8>)
 800b92e:	fb23 e707 	smlad	r7, r3, r7, lr
 800b932:	f8df e144 	ldr.w	lr, [pc, #324]	; 800ba78 <D128_GENERIC+0x3ec>
 800b936:	fb25 720e 	smlad	r2, r5, lr, r7
 800b93a:	f04f 0b01 	mov.w	fp, #1
 800b93e:	9203      	str	r2, [sp, #12]
 800b940:	fb2c fb0b 	smuad	fp, ip, fp
 800b944:	4f44      	ldr	r7, [pc, #272]	; (800ba58 <D128_GENERIC+0x3cc>)
 800b946:	fb2a ba07 	smlad	sl, sl, r7, fp
 800b94a:	4f44      	ldr	r7, [pc, #272]	; (800ba5c <D128_GENERIC+0x3d0>)
 800b94c:	fb21 aa07 	smlad	sl, r1, r7, sl
 800b950:	4f43      	ldr	r7, [pc, #268]	; (800ba60 <D128_GENERIC+0x3d4>)
 800b952:	fb24 aa07 	smlad	sl, r4, r7, sl
 800b956:	4f43      	ldr	r7, [pc, #268]	; (800ba64 <D128_GENERIC+0x3d8>)
 800b958:	fb28 a707 	smlad	r7, r8, r7, sl
 800b95c:	4a42      	ldr	r2, [pc, #264]	; (800ba68 <D128_GENERIC+0x3dc>)
 800b95e:	fb20 7702 	smlad	r7, r0, r2, r7
 800b962:	4a42      	ldr	r2, [pc, #264]	; (800ba6c <D128_GENERIC+0x3e0>)
 800b964:	fb23 7702 	smlad	r7, r3, r2, r7
 800b968:	4b41      	ldr	r3, [pc, #260]	; (800ba70 <D128_GENERIC+0x3e4>)
 800b96a:	fb25 7303 	smlad	r3, r5, r3, r7
 800b96e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b970:	9304      	str	r3, [sp, #16]
 800b972:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800b976:	b185      	cbz	r5, 800b99a <D128_GENERIC+0x30e>
 800b978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b97a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b97c:	960d      	str	r6, [sp, #52]	; 0x34
 800b97e:	4432      	add	r2, r6
 800b980:	1a52      	subs	r2, r2, r1
 800b982:	17d1      	asrs	r1, r2, #31
 800b984:	fba2 2305 	umull	r2, r3, r2, r5
 800b988:	fb05 3301 	mla	r3, r5, r1, r3
 800b98c:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800b990:	f143 0300 	adc.w	r3, r3, #0
 800b994:	005b      	lsls	r3, r3, #1
 800b996:	930c      	str	r3, [sp, #48]	; 0x30
 800b998:	461e      	mov	r6, r3
 800b99a:	9801      	ldr	r0, [sp, #4]
 800b99c:	9c06      	ldr	r4, [sp, #24]
 800b99e:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800b9a0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b9a2:	01f6      	lsls	r6, r6, #7
 800b9a4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	fbc5 2306 	smlal	r2, r3, r5, r6
 800b9ae:	fb04 f101 	mul.w	r1, r4, r1
 800b9b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b9b4:	109b      	asrs	r3, r3, #2
 800b9b6:	f303 030f 	ssat	r3, #16, r3
 800b9ba:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800b9be:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800b9c0:	1c62      	adds	r2, r4, #1
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	9206      	str	r2, [sp, #24]
 800b9c6:	dd18      	ble.n	800b9fa <D128_GENERIC+0x36e>
 800b9c8:	9b01      	ldr	r3, [sp, #4]
 800b9ca:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b9cc:	2a01      	cmp	r2, #1
 800b9ce:	f47f ae80 	bne.w	800b6d2 <D128_GENERIC+0x46>
 800b9d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9d4:	9d05      	ldr	r5, [sp, #20]
 800b9d6:	069b      	lsls	r3, r3, #26
 800b9d8:	6829      	ldr	r1, [r5, #0]
 800b9da:	686a      	ldr	r2, [r5, #4]
 800b9dc:	68a8      	ldr	r0, [r5, #8]
 800b9de:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800b9e2:	f105 0410 	add.w	r4, r5, #16
 800b9e6:	d506      	bpl.n	800b9f6 <D128_GENERIC+0x36a>
 800b9e8:	ba49      	rev16	r1, r1
 800b9ea:	ba52      	rev16	r2, r2
 800b9ec:	ba40      	rev16	r0, r0
 800b9ee:	fa9a fa9a 	rev16.w	sl, sl
 800b9f2:	9405      	str	r4, [sp, #20]
 800b9f4:	e6cf      	b.n	800b796 <D128_GENERIC+0x10a>
 800b9f6:	9405      	str	r4, [sp, #20]
 800b9f8:	e6cd      	b.n	800b796 <D128_GENERIC+0x10a>
 800b9fa:	9a01      	ldr	r2, [sp, #4]
 800b9fc:	9904      	ldr	r1, [sp, #16]
 800b9fe:	6091      	str	r1, [r2, #8]
 800ba00:	9903      	ldr	r1, [sp, #12]
 800ba02:	60d1      	str	r1, [r2, #12]
 800ba04:	9b02      	ldr	r3, [sp, #8]
 800ba06:	61d3      	str	r3, [r2, #28]
 800ba08:	4611      	mov	r1, r2
 800ba0a:	4613      	mov	r3, r2
 800ba0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba0e:	610a      	str	r2, [r1, #16]
 800ba10:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ba12:	6159      	str	r1, [r3, #20]
 800ba14:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ba16:	6199      	str	r1, [r3, #24]
 800ba18:	2000      	movs	r0, #0
 800ba1a:	b013      	add	sp, #76	; 0x4c
 800ba1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba20:	00780069 	.word	0x00780069
 800ba24:	005b004e 	.word	0x005b004e
 800ba28:	00420037 	.word	0x00420037
 800ba2c:	002d0024 	.word	0x002d0024
 800ba30:	001c0015 	.word	0x001c0015
 800ba34:	000f000a 	.word	0x000f000a
 800ba38:	00060003 	.word	0x00060003
 800ba3c:	00880096 	.word	0x00880096
 800ba40:	00a200ac 	.word	0x00a200ac
 800ba44:	00b400ba 	.word	0x00b400ba
 800ba48:	00be00c0 	.word	0x00be00c0
 800ba4c:	00c000be 	.word	0x00c000be
 800ba50:	00ba00b4 	.word	0x00ba00b4
 800ba54:	00ac00a2 	.word	0x00ac00a2
 800ba58:	00030006 	.word	0x00030006
 800ba5c:	000a000f 	.word	0x000a000f
 800ba60:	0015001c 	.word	0x0015001c
 800ba64:	0024002d 	.word	0x0024002d
 800ba68:	00370042 	.word	0x00370042
 800ba6c:	004e005b 	.word	0x004e005b
 800ba70:	00690078 	.word	0x00690078
 800ba74:	20000000 	.word	0x20000000
 800ba78:	00960088 	.word	0x00960088

0800ba7c <D16_1CH_HTONS_VOL_HP>:
 800ba7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba80:	4691      	mov	r9, r2
 800ba82:	b083      	sub	sp, #12
 800ba84:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800ba86:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800ba8a:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800ba8e:	9300      	str	r3, [sp, #0]
 800ba90:	4680      	mov	r8, r0
 800ba92:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800ba96:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ba9a:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ba9e:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800baa2:	9401      	str	r4, [sp, #4]
 800baa4:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800baa8:	f8d9 e020 	ldr.w	lr, [r9, #32]
 800baac:	2a00      	cmp	r2, #0
 800baae:	d04e      	beq.n	800bb4e <D16_1CH_HTONS_VOL_HP+0xd2>
 800bab0:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800bb5c <D16_1CH_HTONS_VOL_HP+0xe0>
 800bab4:	1e8c      	subs	r4, r1, #2
 800bab6:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800baba:	f858 2b02 	ldr.w	r2, [r8], #2
 800babe:	ba52      	rev16	r2, r2
 800bac0:	b2d6      	uxtb	r6, r2
 800bac2:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800bac6:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800baca:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800bace:	4413      	add	r3, r2
 800bad0:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 800bad4:	f3c2 0109 	ubfx	r1, r2, #0, #10
 800bad8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800badc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800bae0:	0a93      	lsrs	r3, r2, #10
 800bae2:	4a1c      	ldr	r2, [pc, #112]	; (800bb54 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800bae4:	fb21 5202 	smlad	r2, r1, r2, r5
 800bae8:	4d1b      	ldr	r5, [pc, #108]	; (800bb58 <D16_1CH_HTONS_VOL_HP+0xdc>)
 800baea:	fb21 f505 	smuad	r5, r1, r5
 800baee:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800baf2:	4410      	add	r0, r2
 800baf4:	1bc0      	subs	r0, r0, r7
 800baf6:	17c7      	asrs	r7, r0, #31
 800baf8:	fba0 010e 	umull	r0, r1, r0, lr
 800bafc:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800bb00:	fb0e 1107 	mla	r1, lr, r7, r1
 800bb04:	f141 0100 	adc.w	r1, r1, #0
 800bb08:	0448      	lsls	r0, r1, #17
 800bb0a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bb0e:	2700      	movs	r7, #0
 800bb10:	fbc0 670a 	smlal	r6, r7, r0, sl
 800bb14:	45d8      	cmp	r8, fp
 800bb16:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800bb1a:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800bb1e:	4617      	mov	r7, r2
 800bb20:	f301 010f 	ssat	r1, #16, r1
 800bb24:	f824 1f02 	strh.w	r1, [r4, #2]!
 800bb28:	d1c7      	bne.n	800baba <D16_1CH_HTONS_VOL_HP+0x3e>
 800bb2a:	9901      	ldr	r1, [sp, #4]
 800bb2c:	f8c9 301c 	str.w	r3, [r9, #28]
 800bb30:	9b00      	ldr	r3, [sp, #0]
 800bb32:	f8c9 0010 	str.w	r0, [r9, #16]
 800bb36:	2000      	movs	r0, #0
 800bb38:	f8c9 5008 	str.w	r5, [r9, #8]
 800bb3c:	f8c9 100c 	str.w	r1, [r9, #12]
 800bb40:	f8c9 2014 	str.w	r2, [r9, #20]
 800bb44:	f8c9 3018 	str.w	r3, [r9, #24]
 800bb48:	b003      	add	sp, #12
 800bb4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb4e:	463a      	mov	r2, r7
 800bb50:	4621      	mov	r1, r4
 800bb52:	e7eb      	b.n	800bb2c <D16_1CH_HTONS_VOL_HP+0xb0>
 800bb54:	00030001 	.word	0x00030001
 800bb58:	00010003 	.word	0x00010003
 800bb5c:	20000000 	.word	0x20000000

0800bb60 <D24_1CH_HTONS_VOL_HP>:
 800bb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb64:	b089      	sub	sp, #36	; 0x24
 800bb66:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800bb68:	6996      	ldr	r6, [r2, #24]
 800bb6a:	9304      	str	r3, [sp, #16]
 800bb6c:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800bb6e:	9207      	str	r2, [sp, #28]
 800bb70:	6915      	ldr	r5, [r2, #16]
 800bb72:	6954      	ldr	r4, [r2, #20]
 800bb74:	9606      	str	r6, [sp, #24]
 800bb76:	6893      	ldr	r3, [r2, #8]
 800bb78:	69d6      	ldr	r6, [r2, #28]
 800bb7a:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800bb7e:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800bb82:	9a04      	ldr	r2, [sp, #16]
 800bb84:	9705      	str	r7, [sp, #20]
 800bb86:	2a00      	cmp	r2, #0
 800bb88:	d07e      	beq.n	800bc88 <D24_1CH_HTONS_VOL_HP+0x128>
 800bb8a:	f1a1 0b02 	sub.w	fp, r1, #2
 800bb8e:	2700      	movs	r7, #0
 800bb90:	46a8      	mov	r8, r5
 800bb92:	f8cd b004 	str.w	fp, [sp, #4]
 800bb96:	4655      	mov	r5, sl
 800bb98:	46e3      	mov	fp, ip
 800bb9a:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 800bc94 <D24_1CH_HTONS_VOL_HP+0x134>
 800bb9e:	46ba      	mov	sl, r7
 800bba0:	469c      	mov	ip, r3
 800bba2:	e055      	b.n	800bc50 <D24_1CH_HTONS_VOL_HP+0xf0>
 800bba4:	7802      	ldrb	r2, [r0, #0]
 800bba6:	78c3      	ldrb	r3, [r0, #3]
 800bba8:	7841      	ldrb	r1, [r0, #1]
 800bbaa:	0212      	lsls	r2, r2, #8
 800bbac:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800bbb0:	440b      	add	r3, r1
 800bbb2:	3002      	adds	r0, #2
 800bbb4:	b2d9      	uxtb	r1, r3
 800bbb6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800bbba:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800bbbe:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 800bbc2:	0c1b      	lsrs	r3, r3, #16
 800bbc4:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800bbc8:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800bbcc:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 800bbd0:	f3c7 0309 	ubfx	r3, r7, #0, #10
 800bbd4:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800bbd8:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800bbdc:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800bbe0:	4a2a      	ldr	r2, [pc, #168]	; (800bc8c <D24_1CH_HTONS_VOL_HP+0x12c>)
 800bbe2:	fb23 b102 	smlad	r1, r3, r2, fp
 800bbe6:	4a2a      	ldr	r2, [pc, #168]	; (800bc90 <D24_1CH_HTONS_VOL_HP+0x130>)
 800bbe8:	fb23 cb02 	smlad	fp, r3, r2, ip
 800bbec:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 800bbf0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800bbf4:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	fb23 f702 	smuad	r7, r3, r2
 800bbfe:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 800bc02:	eb01 0208 	add.w	r2, r1, r8
 800bc06:	1b12      	subs	r2, r2, r4
 800bc08:	17d4      	asrs	r4, r2, #31
 800bc0a:	fba2 2305 	umull	r2, r3, r2, r5
 800bc0e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800bc12:	fb05 3304 	mla	r3, r5, r4, r3
 800bc16:	f143 0300 	adc.w	r3, r3, #0
 800bc1a:	9c05      	ldr	r4, [sp, #20]
 800bc1c:	03da      	lsls	r2, r3, #15
 800bc1e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800bc22:	f04f 0900 	mov.w	r9, #0
 800bc26:	fbc4 8902 	smlal	r8, r9, r4, r2
 800bc2a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800bc2e:	9a01      	ldr	r2, [sp, #4]
 800bc30:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800bc34:	9b03      	ldr	r3, [sp, #12]
 800bc36:	109b      	asrs	r3, r3, #2
 800bc38:	f303 030f 	ssat	r3, #16, r3
 800bc3c:	f822 3f02 	strh.w	r3, [r2, #2]!
 800bc40:	9b04      	ldr	r3, [sp, #16]
 800bc42:	9201      	str	r2, [sp, #4]
 800bc44:	f10a 0a01 	add.w	sl, sl, #1
 800bc48:	459a      	cmp	sl, r3
 800bc4a:	44bc      	add	ip, r7
 800bc4c:	460c      	mov	r4, r1
 800bc4e:	d00b      	beq.n	800bc68 <D24_1CH_HTONS_VOL_HP+0x108>
 800bc50:	f01a 0f01 	tst.w	sl, #1
 800bc54:	d0a6      	beq.n	800bba4 <D24_1CH_HTONS_VOL_HP+0x44>
 800bc56:	78c2      	ldrb	r2, [r0, #3]
 800bc58:	7883      	ldrb	r3, [r0, #2]
 800bc5a:	f810 1b04 	ldrb.w	r1, [r0], #4
 800bc5e:	0212      	lsls	r2, r2, #8
 800bc60:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800bc64:	440b      	add	r3, r1
 800bc66:	e7a5      	b.n	800bbb4 <D24_1CH_HTONS_VOL_HP+0x54>
 800bc68:	4663      	mov	r3, ip
 800bc6a:	4645      	mov	r5, r8
 800bc6c:	46dc      	mov	ip, fp
 800bc6e:	9807      	ldr	r0, [sp, #28]
 800bc70:	6141      	str	r1, [r0, #20]
 800bc72:	9906      	ldr	r1, [sp, #24]
 800bc74:	6083      	str	r3, [r0, #8]
 800bc76:	f8c0 c00c 	str.w	ip, [r0, #12]
 800bc7a:	61c6      	str	r6, [r0, #28]
 800bc7c:	6105      	str	r5, [r0, #16]
 800bc7e:	6181      	str	r1, [r0, #24]
 800bc80:	2000      	movs	r0, #0
 800bc82:	b009      	add	sp, #36	; 0x24
 800bc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc88:	4621      	mov	r1, r4
 800bc8a:	e7f0      	b.n	800bc6e <D24_1CH_HTONS_VOL_HP+0x10e>
 800bc8c:	00030001 	.word	0x00030001
 800bc90:	00060007 	.word	0x00060007
 800bc94:	20000000 	.word	0x20000000

0800bc98 <D32_1CH_HTONS_VOL_HP>:
 800bc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc9c:	4692      	mov	sl, r2
 800bc9e:	b087      	sub	sp, #28
 800bca0:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800bca2:	f8da 3018 	ldr.w	r3, [sl, #24]
 800bca6:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800bcaa:	9304      	str	r3, [sp, #16]
 800bcac:	f8da 4010 	ldr.w	r4, [sl, #16]
 800bcb0:	f8da 8014 	ldr.w	r8, [sl, #20]
 800bcb4:	f8da 601c 	ldr.w	r6, [sl, #28]
 800bcb8:	f8da 3008 	ldr.w	r3, [sl, #8]
 800bcbc:	f8da e00c 	ldr.w	lr, [sl, #12]
 800bcc0:	9501      	str	r5, [sp, #4]
 800bcc2:	f8da c020 	ldr.w	ip, [sl, #32]
 800bcc6:	2a00      	cmp	r2, #0
 800bcc8:	d07b      	beq.n	800bdc2 <D32_1CH_HTONS_VOL_HP+0x12a>
 800bcca:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800bcce:	4f3e      	ldr	r7, [pc, #248]	; (800bdc8 <D32_1CH_HTONS_VOL_HP+0x130>)
 800bcd0:	f8cd c00c 	str.w	ip, [sp, #12]
 800bcd4:	9202      	str	r2, [sp, #8]
 800bcd6:	460d      	mov	r5, r1
 800bcd8:	46a1      	mov	r9, r4
 800bcda:	4684      	mov	ip, r0
 800bcdc:	f8cd a014 	str.w	sl, [sp, #20]
 800bce0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bce4:	ba49      	rev16	r1, r1
 800bce6:	b2c8      	uxtb	r0, r1
 800bce8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800bcec:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 800bcf0:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800bcf4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800bcf8:	0e09      	lsrs	r1, r1, #24
 800bcfa:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800bcfe:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 800bd02:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800bd06:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800bd0a:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800bd0e:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 800bd12:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bd16:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800bd1a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800bd1e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800bd22:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800bd26:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800bd2a:	4a28      	ldr	r2, [pc, #160]	; (800bdcc <D32_1CH_HTONS_VOL_HP+0x134>)
 800bd2c:	fb20 e202 	smlad	r2, r0, r2, lr
 800bd30:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800bd34:	fb2a 2101 	smlad	r1, sl, r1, r2
 800bd38:	4a25      	ldr	r2, [pc, #148]	; (800bdd0 <D32_1CH_HTONS_VOL_HP+0x138>)
 800bd3a:	fb20 3302 	smlad	r3, r0, r2, r3
 800bd3e:	4a25      	ldr	r2, [pc, #148]	; (800bdd4 <D32_1CH_HTONS_VOL_HP+0x13c>)
 800bd40:	fb2a 3e02 	smlad	lr, sl, r2, r3
 800bd44:	2301      	movs	r3, #1
 800bd46:	fb20 f003 	smuad	r0, r0, r3
 800bd4a:	4b23      	ldr	r3, [pc, #140]	; (800bdd8 <D32_1CH_HTONS_VOL_HP+0x140>)
 800bd4c:	fb2a 0303 	smlad	r3, sl, r3, r0
 800bd50:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 800bd54:	9c03      	ldr	r4, [sp, #12]
 800bd56:	eb02 0009 	add.w	r0, r2, r9
 800bd5a:	eba0 0008 	sub.w	r0, r0, r8
 800bd5e:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800bd62:	fba0 0104 	umull	r0, r1, r0, r4
 800bd66:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800bd6a:	fb04 110b 	mla	r1, r4, fp, r1
 800bd6e:	f141 0100 	adc.w	r1, r1, #0
 800bd72:	9c01      	ldr	r4, [sp, #4]
 800bd74:	0388      	lsls	r0, r1, #14
 800bd76:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800bd7a:	f04f 0900 	mov.w	r9, #0
 800bd7e:	fbc0 8904 	smlal	r8, r9, r0, r4
 800bd82:	ea4f 00a9 	mov.w	r0, r9, asr #2
 800bd86:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800bd8a:	f300 000f 	ssat	r0, #16, r0
 800bd8e:	9902      	ldr	r1, [sp, #8]
 800bd90:	f825 0b02 	strh.w	r0, [r5], #2
 800bd94:	428d      	cmp	r5, r1
 800bd96:	4690      	mov	r8, r2
 800bd98:	d1a2      	bne.n	800bce0 <D32_1CH_HTONS_VOL_HP+0x48>
 800bd9a:	f8dd a014 	ldr.w	sl, [sp, #20]
 800bd9e:	464c      	mov	r4, r9
 800bda0:	f8ca 3008 	str.w	r3, [sl, #8]
 800bda4:	9b04      	ldr	r3, [sp, #16]
 800bda6:	f8ca e00c 	str.w	lr, [sl, #12]
 800bdaa:	2000      	movs	r0, #0
 800bdac:	f8ca 601c 	str.w	r6, [sl, #28]
 800bdb0:	f8ca 4010 	str.w	r4, [sl, #16]
 800bdb4:	f8ca 2014 	str.w	r2, [sl, #20]
 800bdb8:	f8ca 3018 	str.w	r3, [sl, #24]
 800bdbc:	b007      	add	sp, #28
 800bdbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc2:	4642      	mov	r2, r8
 800bdc4:	e7ec      	b.n	800bda0 <D32_1CH_HTONS_VOL_HP+0x108>
 800bdc6:	bf00      	nop
 800bdc8:	20000000 	.word	0x20000000
 800bdcc:	00060003 	.word	0x00060003
 800bdd0:	000a000c 	.word	0x000a000c
 800bdd4:	000c000a 	.word	0x000c000a
 800bdd8:	00030006 	.word	0x00030006

0800bddc <D48_1CH_HTONS_VOL_HP>:
 800bddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde0:	4613      	mov	r3, r2
 800bde2:	461c      	mov	r4, r3
 800bde4:	b087      	sub	sp, #28
 800bde6:	4625      	mov	r5, r4
 800bde8:	4626      	mov	r6, r4
 800bdea:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800bdec:	9205      	str	r2, [sp, #20]
 800bdee:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800bdf0:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800bdf4:	9501      	str	r5, [sp, #4]
 800bdf6:	4680      	mov	r8, r0
 800bdf8:	6a35      	ldr	r5, [r6, #32]
 800bdfa:	6918      	ldr	r0, [r3, #16]
 800bdfc:	699b      	ldr	r3, [r3, #24]
 800bdfe:	9304      	str	r3, [sp, #16]
 800be00:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800be04:	68a3      	ldr	r3, [r4, #8]
 800be06:	9502      	str	r5, [sp, #8]
 800be08:	68e4      	ldr	r4, [r4, #12]
 800be0a:	2a00      	cmp	r2, #0
 800be0c:	f000 808c 	beq.w	800bf28 <D48_1CH_HTONS_VOL_HP+0x14c>
 800be10:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800be14:	4d45      	ldr	r5, [pc, #276]	; (800bf2c <D48_1CH_HTONS_VOL_HP+0x150>)
 800be16:	9203      	str	r2, [sp, #12]
 800be18:	468c      	mov	ip, r1
 800be1a:	e898 0044 	ldmia.w	r8, {r2, r6}
 800be1e:	f108 0806 	add.w	r8, r8, #6
 800be22:	ba52      	rev16	r2, r2
 800be24:	ba76      	rev16	r6, r6
 800be26:	b2d7      	uxtb	r7, r2
 800be28:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800be2c:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 800be30:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800be34:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800be38:	0e12      	lsrs	r2, r2, #24
 800be3a:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800be3e:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800be42:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800be46:	fa5f fb86 	uxtb.w	fp, r6
 800be4a:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800be4e:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 800be52:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800be56:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800be5a:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800be5e:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800be62:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800be66:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800be6a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800be6e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800be72:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800be76:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800be7a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800be7e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800be82:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800be86:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800be8a:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800be8e:	4a28      	ldr	r2, [pc, #160]	; (800bf30 <D48_1CH_HTONS_VOL_HP+0x154>)
 800be90:	fb2a 4202 	smlad	r2, sl, r2, r4
 800be94:	4927      	ldr	r1, [pc, #156]	; (800bf34 <D48_1CH_HTONS_VOL_HP+0x158>)
 800be96:	fb27 2201 	smlad	r2, r7, r1, r2
 800be9a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800be9e:	fb26 2201 	smlad	r2, r6, r1, r2
 800bea2:	4925      	ldr	r1, [pc, #148]	; (800bf38 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800bea4:	fb2a 3401 	smlad	r4, sl, r1, r3
 800bea8:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800beac:	fb27 4403 	smlad	r4, r7, r3, r4
 800beb0:	4b22      	ldr	r3, [pc, #136]	; (800bf3c <D48_1CH_HTONS_VOL_HP+0x160>)
 800beb2:	fb26 4403 	smlad	r4, r6, r3, r4
 800beb6:	2101      	movs	r1, #1
 800beb8:	fb2a fa01 	smuad	sl, sl, r1
 800bebc:	4b20      	ldr	r3, [pc, #128]	; (800bf40 <D48_1CH_HTONS_VOL_HP+0x164>)
 800bebe:	fb27 a703 	smlad	r7, r7, r3, sl
 800bec2:	4b20      	ldr	r3, [pc, #128]	; (800bf44 <D48_1CH_HTONS_VOL_HP+0x168>)
 800bec4:	fb26 7303 	smlad	r3, r6, r3, r7
 800bec8:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 800becc:	9e02      	ldr	r6, [sp, #8]
 800bece:	9f01      	ldr	r7, [sp, #4]
 800bed0:	4410      	add	r0, r2
 800bed2:	eba0 0009 	sub.w	r0, r0, r9
 800bed6:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800beda:	fba0 0106 	umull	r0, r1, r0, r6
 800bede:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800bee2:	fb06 110a 	mla	r1, r6, sl, r1
 800bee6:	f141 0100 	adc.w	r1, r1, #0
 800beea:	0308      	lsls	r0, r1, #12
 800beec:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800bef0:	f04f 0a00 	mov.w	sl, #0
 800bef4:	fbc0 9a07 	smlal	r9, sl, r0, r7
 800bef8:	4657      	mov	r7, sl
 800befa:	10b8      	asrs	r0, r7, #2
 800befc:	f300 000f 	ssat	r0, #16, r0
 800bf00:	f82c 0b02 	strh.w	r0, [ip], #2
 800bf04:	0048      	lsls	r0, r1, #1
 800bf06:	9903      	ldr	r1, [sp, #12]
 800bf08:	458c      	cmp	ip, r1
 800bf0a:	4691      	mov	r9, r2
 800bf0c:	d185      	bne.n	800be1a <D48_1CH_HTONS_VOL_HP+0x3e>
 800bf0e:	9d05      	ldr	r5, [sp, #20]
 800bf10:	616a      	str	r2, [r5, #20]
 800bf12:	9a04      	ldr	r2, [sp, #16]
 800bf14:	6128      	str	r0, [r5, #16]
 800bf16:	2000      	movs	r0, #0
 800bf18:	60ab      	str	r3, [r5, #8]
 800bf1a:	60ec      	str	r4, [r5, #12]
 800bf1c:	f8c5 e01c 	str.w	lr, [r5, #28]
 800bf20:	61aa      	str	r2, [r5, #24]
 800bf22:	b007      	add	sp, #28
 800bf24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf28:	464a      	mov	r2, r9
 800bf2a:	e7f0      	b.n	800bf0e <D48_1CH_HTONS_VOL_HP+0x132>
 800bf2c:	20000000 	.word	0x20000000
 800bf30:	000f000a 	.word	0x000f000a
 800bf34:	00060003 	.word	0x00060003
 800bf38:	00150019 	.word	0x00150019
 800bf3c:	00190015 	.word	0x00190015
 800bf40:	00030006 	.word	0x00030006
 800bf44:	000a000f 	.word	0x000a000f

0800bf48 <D64_1CH_HTONS_VOL_HP>:
 800bf48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf4c:	b089      	sub	sp, #36	; 0x24
 800bf4e:	4614      	mov	r4, r2
 800bf50:	9207      	str	r2, [sp, #28]
 800bf52:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800bf54:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800bf58:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800bf5c:	6992      	ldr	r2, [r2, #24]
 800bf5e:	9206      	str	r2, [sp, #24]
 800bf60:	68e2      	ldr	r2, [r4, #12]
 800bf62:	9201      	str	r2, [sp, #4]
 800bf64:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bf66:	9203      	str	r2, [sp, #12]
 800bf68:	6a22      	ldr	r2, [r4, #32]
 800bf6a:	69e5      	ldr	r5, [r4, #28]
 800bf6c:	68a6      	ldr	r6, [r4, #8]
 800bf6e:	9204      	str	r2, [sp, #16]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	f000 80b0 	beq.w	800c0d6 <D64_1CH_HTONS_VOL_HP+0x18e>
 800bf76:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800bf7a:	4f58      	ldr	r7, [pc, #352]	; (800c0dc <D64_1CH_HTONS_VOL_HP+0x194>)
 800bf7c:	9305      	str	r3, [sp, #20]
 800bf7e:	9102      	str	r1, [sp, #8]
 800bf80:	f850 2b08 	ldr.w	r2, [r0], #8
 800bf84:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800bf88:	ba52      	rev16	r2, r2
 800bf8a:	fa93 f993 	rev16.w	r9, r3
 800bf8e:	b2d4      	uxtb	r4, r2
 800bf90:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800bf94:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 800bf98:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800bf9c:	9901      	ldr	r1, [sp, #4]
 800bf9e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800bfa2:	0e12      	lsrs	r2, r2, #24
 800bfa4:	44ab      	add	fp, r5
 800bfa6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800bfaa:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800bfae:	fa5f f289 	uxtb.w	r2, r9
 800bfb2:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800bfb6:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800bfba:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800bfbe:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800bfc2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800bfc6:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800bfca:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800bfce:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800bfd2:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800bfd6:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800bfda:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 800bfde:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800bfe2:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800bfe6:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800bfea:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800bfee:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800bff2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800bff6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bffa:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800bffe:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 800c002:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c006:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800c00a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c00e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800c012:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800c016:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c01a:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800c01e:	4b30      	ldr	r3, [pc, #192]	; (800c0e0 <D64_1CH_HTONS_VOL_HP+0x198>)
 800c020:	fb2b 1303 	smlad	r3, fp, r3, r1
 800c024:	492f      	ldr	r1, [pc, #188]	; (800c0e4 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800c026:	fb24 3301 	smlad	r3, r4, r1, r3
 800c02a:	492f      	ldr	r1, [pc, #188]	; (800c0e8 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800c02c:	fb22 3301 	smlad	r3, r2, r1, r3
 800c030:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800c034:	fb2e 390a 	smlad	r9, lr, sl, r3
 800c038:	4b2c      	ldr	r3, [pc, #176]	; (800c0ec <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800c03a:	fb2b 6603 	smlad	r6, fp, r3, r6
 800c03e:	fb2e 6613 	smladx	r6, lr, r3, r6
 800c042:	4b2b      	ldr	r3, [pc, #172]	; (800c0f0 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800c044:	fb24 6603 	smlad	r6, r4, r3, r6
 800c048:	fb22 6313 	smladx	r3, r2, r3, r6
 800c04c:	f04f 0a01 	mov.w	sl, #1
 800c050:	9301      	str	r3, [sp, #4]
 800c052:	fb2b fb0a 	smuad	fp, fp, sl
 800c056:	4b27      	ldr	r3, [pc, #156]	; (800c0f4 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 800c058:	fb24 ba03 	smlad	sl, r4, r3, fp
 800c05c:	4b26      	ldr	r3, [pc, #152]	; (800c0f8 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800c05e:	fb22 a203 	smlad	r2, r2, r3, sl
 800c062:	4b26      	ldr	r3, [pc, #152]	; (800c0fc <D64_1CH_HTONS_VOL_HP+0x1b4>)
 800c064:	fb2e 2603 	smlad	r6, lr, r3, r2
 800c068:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 800c06c:	eb0a 020c 	add.w	r2, sl, ip
 800c070:	9c04      	ldr	r4, [sp, #16]
 800c072:	9903      	ldr	r1, [sp, #12]
 800c074:	eba2 0208 	sub.w	r2, r2, r8
 800c078:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800c07c:	fba2 2304 	umull	r2, r3, r2, r4
 800c080:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800c084:	fb04 3309 	mla	r3, r4, r9, r3
 800c088:	f143 0300 	adc.w	r3, r3, #0
 800c08c:	02da      	lsls	r2, r3, #11
 800c08e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800c092:	f04f 0900 	mov.w	r9, #0
 800c096:	fbc1 8902 	smlal	r8, r9, r1, r2
 800c09a:	9902      	ldr	r1, [sp, #8]
 800c09c:	ea4f 02a9 	mov.w	r2, r9, asr #2
 800c0a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800c0a4:	f302 020f 	ssat	r2, #16, r2
 800c0a8:	9b05      	ldr	r3, [sp, #20]
 800c0aa:	f821 2b02 	strh.w	r2, [r1], #2
 800c0ae:	4299      	cmp	r1, r3
 800c0b0:	9102      	str	r1, [sp, #8]
 800c0b2:	46d0      	mov	r8, sl
 800c0b4:	f47f af64 	bne.w	800bf80 <D64_1CH_HTONS_VOL_HP+0x38>
 800c0b8:	9a07      	ldr	r2, [sp, #28]
 800c0ba:	9901      	ldr	r1, [sp, #4]
 800c0bc:	60d1      	str	r1, [r2, #12]
 800c0be:	9906      	ldr	r1, [sp, #24]
 800c0c0:	6096      	str	r6, [r2, #8]
 800c0c2:	2000      	movs	r0, #0
 800c0c4:	61d5      	str	r5, [r2, #28]
 800c0c6:	f8c2 c010 	str.w	ip, [r2, #16]
 800c0ca:	f8c2 a014 	str.w	sl, [r2, #20]
 800c0ce:	6191      	str	r1, [r2, #24]
 800c0d0:	b009      	add	sp, #36	; 0x24
 800c0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0d6:	46c2      	mov	sl, r8
 800c0d8:	4622      	mov	r2, r4
 800c0da:	e7ee      	b.n	800c0ba <D64_1CH_HTONS_VOL_HP+0x172>
 800c0dc:	20000000 	.word	0x20000000
 800c0e0:	001c0015 	.word	0x001c0015
 800c0e4:	000f000a 	.word	0x000f000a
 800c0e8:	00060003 	.word	0x00060003
 800c0ec:	0024002a 	.word	0x0024002a
 800c0f0:	002e0030 	.word	0x002e0030
 800c0f4:	00030006 	.word	0x00030006
 800c0f8:	000a000f 	.word	0x000a000f
 800c0fc:	0015001c 	.word	0x0015001c

0800c100 <D80_1CH_HTONS_VOL_HP>:
 800c100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c104:	4613      	mov	r3, r2
 800c106:	b089      	sub	sp, #36	; 0x24
 800c108:	4686      	mov	lr, r0
 800c10a:	6918      	ldr	r0, [r3, #16]
 800c10c:	9000      	str	r0, [sp, #0]
 800c10e:	4618      	mov	r0, r3
 800c110:	461c      	mov	r4, r3
 800c112:	695b      	ldr	r3, [r3, #20]
 800c114:	9302      	str	r3, [sp, #8]
 800c116:	6983      	ldr	r3, [r0, #24]
 800c118:	9306      	str	r3, [sp, #24]
 800c11a:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800c11e:	69c3      	ldr	r3, [r0, #28]
 800c120:	68c0      	ldr	r0, [r0, #12]
 800c122:	9207      	str	r2, [sp, #28]
 800c124:	9001      	str	r0, [sp, #4]
 800c126:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800c128:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800c12a:	9003      	str	r0, [sp, #12]
 800c12c:	6a20      	ldr	r0, [r4, #32]
 800c12e:	9004      	str	r0, [sp, #16]
 800c130:	2a00      	cmp	r2, #0
 800c132:	f000 80d2 	beq.w	800c2da <D80_1CH_HTONS_VOL_HP+0x1da>
 800c136:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800c13a:	4869      	ldr	r0, [pc, #420]	; (800c2e0 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800c13c:	9205      	str	r2, [sp, #20]
 800c13e:	461c      	mov	r4, r3
 800c140:	f8de 5000 	ldr.w	r5, [lr]
 800c144:	f8de 2004 	ldr.w	r2, [lr, #4]
 800c148:	f8de 3008 	ldr.w	r3, [lr, #8]
 800c14c:	f10e 0e0a 	add.w	lr, lr, #10
 800c150:	ba6d      	rev16	r5, r5
 800c152:	ba52      	rev16	r2, r2
 800c154:	fa93 fb93 	rev16.w	fp, r3
 800c158:	b2ee      	uxtb	r6, r5
 800c15a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800c15e:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800c162:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800c166:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800c16a:	eb04 0a07 	add.w	sl, r4, r7
 800c16e:	0e2d      	lsrs	r5, r5, #24
 800c170:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 800c174:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800c178:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800c17c:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 800c180:	b2d5      	uxtb	r5, r2
 800c182:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800c186:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800c18a:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800c18e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800c192:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800c196:	0e12      	lsrs	r2, r2, #24
 800c198:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 800c19c:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 800c1a0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800c1a4:	fa5f f48b 	uxtb.w	r4, fp
 800c1a8:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800c1ac:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800c1b0:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800c1b4:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800c1b8:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800c1bc:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800c1c0:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800c1c4:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 800c1c8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c1cc:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800c1d0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c1d4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c1d8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800c1dc:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c1e0:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 800c1e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c1e8:	f3cb 0609 	ubfx	r6, fp, #0, #10
 800c1ec:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c1f0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c1f4:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800c1f8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800c1fc:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 800c200:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800c204:	ea4f 249b 	mov.w	r4, fp, lsr #10
 800c208:	4d36      	ldr	r5, [pc, #216]	; (800c2e4 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800c20a:	9f01      	ldr	r7, [sp, #4]
 800c20c:	fb23 7505 	smlad	r5, r3, r5, r7
 800c210:	4f35      	ldr	r7, [pc, #212]	; (800c2e8 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800c212:	fb29 5507 	smlad	r5, r9, r7, r5
 800c216:	4f35      	ldr	r7, [pc, #212]	; (800c2ec <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800c218:	fb28 5507 	smlad	r5, r8, r7, r5
 800c21c:	4f34      	ldr	r7, [pc, #208]	; (800c2f0 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800c21e:	fb22 5507 	smlad	r5, r2, r7, r5
 800c222:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800c226:	fb26 5b0a 	smlad	fp, r6, sl, r5
 800c22a:	4d32      	ldr	r5, [pc, #200]	; (800c2f4 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800c22c:	fb23 cc05 	smlad	ip, r3, r5, ip
 800c230:	4d31      	ldr	r5, [pc, #196]	; (800c2f8 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800c232:	fb29 cc05 	smlad	ip, r9, r5, ip
 800c236:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800c23a:	fb28 c505 	smlad	r5, r8, r5, ip
 800c23e:	4f2f      	ldr	r7, [pc, #188]	; (800c2fc <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800c240:	fb22 5507 	smlad	r5, r2, r7, r5
 800c244:	4f2e      	ldr	r7, [pc, #184]	; (800c300 <D80_1CH_HTONS_VOL_HP+0x200>)
 800c246:	fb26 5507 	smlad	r5, r6, r7, r5
 800c24a:	f04f 0a01 	mov.w	sl, #1
 800c24e:	9501      	str	r5, [sp, #4]
 800c250:	fb23 fa0a 	smuad	sl, r3, sl
 800c254:	4b2b      	ldr	r3, [pc, #172]	; (800c304 <D80_1CH_HTONS_VOL_HP+0x204>)
 800c256:	fb29 a903 	smlad	r9, r9, r3, sl
 800c25a:	4d2b      	ldr	r5, [pc, #172]	; (800c308 <D80_1CH_HTONS_VOL_HP+0x208>)
 800c25c:	fb28 9805 	smlad	r8, r8, r5, r9
 800c260:	4d2a      	ldr	r5, [pc, #168]	; (800c30c <D80_1CH_HTONS_VOL_HP+0x20c>)
 800c262:	fb22 8205 	smlad	r2, r2, r5, r8
 800c266:	4b2a      	ldr	r3, [pc, #168]	; (800c310 <D80_1CH_HTONS_VOL_HP+0x210>)
 800c268:	fb26 2c03 	smlad	ip, r6, r3, r2
 800c26c:	9b00      	ldr	r3, [sp, #0]
 800c26e:	9d04      	ldr	r5, [sp, #16]
 800c270:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 800c274:	4453      	add	r3, sl
 800c276:	461a      	mov	r2, r3
 800c278:	9b02      	ldr	r3, [sp, #8]
 800c27a:	f8cd a008 	str.w	sl, [sp, #8]
 800c27e:	1ad2      	subs	r2, r2, r3
 800c280:	17d7      	asrs	r7, r2, #31
 800c282:	fba2 2305 	umull	r2, r3, r2, r5
 800c286:	fb05 3307 	mla	r3, r5, r7, r3
 800c28a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800c28e:	f143 0300 	adc.w	r3, r3, #0
 800c292:	9d03      	ldr	r5, [sp, #12]
 800c294:	029a      	lsls	r2, r3, #10
 800c296:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c29a:	2700      	movs	r7, #0
 800c29c:	005b      	lsls	r3, r3, #1
 800c29e:	fbc5 6702 	smlal	r6, r7, r5, r2
 800c2a2:	10ba      	asrs	r2, r7, #2
 800c2a4:	9300      	str	r3, [sp, #0]
 800c2a6:	f302 020f 	ssat	r2, #16, r2
 800c2aa:	9b05      	ldr	r3, [sp, #20]
 800c2ac:	f821 2b02 	strh.w	r2, [r1], #2
 800c2b0:	4299      	cmp	r1, r3
 800c2b2:	f47f af45 	bne.w	800c140 <D80_1CH_HTONS_VOL_HP+0x40>
 800c2b6:	4623      	mov	r3, r4
 800c2b8:	9907      	ldr	r1, [sp, #28]
 800c2ba:	9801      	ldr	r0, [sp, #4]
 800c2bc:	60c8      	str	r0, [r1, #12]
 800c2be:	9a00      	ldr	r2, [sp, #0]
 800c2c0:	f8c1 c008 	str.w	ip, [r1, #8]
 800c2c4:	4608      	mov	r0, r1
 800c2c6:	61cb      	str	r3, [r1, #28]
 800c2c8:	610a      	str	r2, [r1, #16]
 800c2ca:	f8c1 a014 	str.w	sl, [r1, #20]
 800c2ce:	9906      	ldr	r1, [sp, #24]
 800c2d0:	6181      	str	r1, [r0, #24]
 800c2d2:	2000      	movs	r0, #0
 800c2d4:	b009      	add	sp, #36	; 0x24
 800c2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2da:	f8dd a008 	ldr.w	sl, [sp, #8]
 800c2de:	e7eb      	b.n	800c2b8 <D80_1CH_HTONS_VOL_HP+0x1b8>
 800c2e0:	20000000 	.word	0x20000000
 800c2e4:	002d0024 	.word	0x002d0024
 800c2e8:	001c0015 	.word	0x001c0015
 800c2ec:	000f000a 	.word	0x000f000a
 800c2f0:	00060003 	.word	0x00060003
 800c2f4:	0037003f 	.word	0x0037003f
 800c2f8:	00450049 	.word	0x00450049
 800c2fc:	00490045 	.word	0x00490045
 800c300:	003f0037 	.word	0x003f0037
 800c304:	00030006 	.word	0x00030006
 800c308:	000a000f 	.word	0x000a000f
 800c30c:	0015001c 	.word	0x0015001c
 800c310:	0024002d 	.word	0x0024002d

0800c314 <D128_1CH_HTONS_VOL_HP>:
 800c314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c318:	b093      	sub	sp, #76	; 0x4c
 800c31a:	4614      	mov	r4, r2
 800c31c:	9211      	str	r2, [sp, #68]	; 0x44
 800c31e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800c320:	6912      	ldr	r2, [r2, #16]
 800c322:	9203      	str	r2, [sp, #12]
 800c324:	4622      	mov	r2, r4
 800c326:	4615      	mov	r5, r2
 800c328:	6964      	ldr	r4, [r4, #20]
 800c32a:	9406      	str	r4, [sp, #24]
 800c32c:	4614      	mov	r4, r2
 800c32e:	6992      	ldr	r2, [r2, #24]
 800c330:	9210      	str	r2, [sp, #64]	; 0x40
 800c332:	68ea      	ldr	r2, [r5, #12]
 800c334:	9204      	str	r2, [sp, #16]
 800c336:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800c338:	69e6      	ldr	r6, [r4, #28]
 800c33a:	920d      	str	r2, [sp, #52]	; 0x34
 800c33c:	68a4      	ldr	r4, [r4, #8]
 800c33e:	6a2a      	ldr	r2, [r5, #32]
 800c340:	9405      	str	r4, [sp, #20]
 800c342:	920e      	str	r2, [sp, #56]	; 0x38
 800c344:	2b00      	cmp	r3, #0
 800c346:	f000 8145 	beq.w	800c5d4 <D128_1CH_HTONS_VOL_HP+0x2c0>
 800c34a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800c34e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c350:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 800c630 <D128_1CH_HTONS_VOL_HP+0x31c>
 800c354:	9107      	str	r1, [sp, #28]
 800c356:	f100 0310 	add.w	r3, r0, #16
 800c35a:	4699      	mov	r9, r3
 800c35c:	f1a9 0110 	sub.w	r1, r9, #16
 800c360:	c90e      	ldmia	r1, {r1, r2, r3}
 800c362:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800c366:	ba49      	rev16	r1, r1
 800c368:	ba52      	rev16	r2, r2
 800c36a:	ba5b      	rev16	r3, r3
 800c36c:	fa90 fa90 	rev16.w	sl, r0
 800c370:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800c374:	b2cc      	uxtb	r4, r1
 800c376:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800c37a:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800c37e:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800c382:	0e09      	lsrs	r1, r1, #24
 800c384:	4426      	add	r6, r4
 800c386:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800c38a:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800c38e:	b2d0      	uxtb	r0, r2
 800c390:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800c394:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 800c398:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800c39c:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800c3a0:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800c3a4:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800c3a8:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800c3ac:	0e12      	lsrs	r2, r2, #24
 800c3ae:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800c3b2:	9701      	str	r7, [sp, #4]
 800c3b4:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800c3b8:	4627      	mov	r7, r4
 800c3ba:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800c3be:	9702      	str	r7, [sp, #8]
 800c3c0:	b2da      	uxtb	r2, r3
 800c3c2:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800c3c6:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800c3ca:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800c3ce:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800c3d2:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800c3d6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c3da:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800c3de:	0e1b      	lsrs	r3, r3, #24
 800c3e0:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800c3e4:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c3e8:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800c3ec:	fa5f f38a 	uxtb.w	r3, sl
 800c3f0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c3f4:	960a      	str	r6, [sp, #40]	; 0x28
 800c3f6:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800c3fa:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800c3fe:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c402:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800c406:	950b      	str	r5, [sp, #44]	; 0x2c
 800c408:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800c40c:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800c410:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800c414:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800c418:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800c41c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800c420:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800c424:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800c428:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800c42c:	9308      	str	r3, [sp, #32]
 800c42e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800c432:	9b01      	ldr	r3, [sp, #4]
 800c434:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800c438:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c43c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800c440:	9b02      	ldr	r3, [sp, #8]
 800c442:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c446:	9302      	str	r3, [sp, #8]
 800c448:	9b08      	ldr	r3, [sp, #32]
 800c44a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c44e:	9308      	str	r3, [sp, #32]
 800c450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c452:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c456:	950c      	str	r5, [sp, #48]	; 0x30
 800c458:	461d      	mov	r5, r3
 800c45a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c45c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800c460:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c464:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800c468:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800c46c:	9301      	str	r3, [sp, #4]
 800c46e:	9b02      	ldr	r3, [sp, #8]
 800c470:	9202      	str	r2, [sp, #8]
 800c472:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c474:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c476:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800c47a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800c47e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800c482:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c486:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800c48a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c48e:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800c492:	9b08      	ldr	r3, [sp, #32]
 800c494:	9f01      	ldr	r7, [sp, #4]
 800c496:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800c49a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800c49e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c4a2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c4a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800c4aa:	46be      	mov	lr, r7
 800c4ac:	0a96      	lsrs	r6, r2, #10
 800c4ae:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800c4b2:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800c4b6:	4f49      	ldr	r7, [pc, #292]	; (800c5dc <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800c4b8:	9a04      	ldr	r2, [sp, #16]
 800c4ba:	fb2e 2e07 	smlad	lr, lr, r7, r2
 800c4be:	4a48      	ldr	r2, [pc, #288]	; (800c5e0 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800c4c0:	fb2a ee02 	smlad	lr, sl, r2, lr
 800c4c4:	4a47      	ldr	r2, [pc, #284]	; (800c5e4 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800c4c6:	fb21 ee02 	smlad	lr, r1, r2, lr
 800c4ca:	4a47      	ldr	r2, [pc, #284]	; (800c5e8 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800c4cc:	fb24 ee02 	smlad	lr, r4, r2, lr
 800c4d0:	4a46      	ldr	r2, [pc, #280]	; (800c5ec <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800c4d2:	9f02      	ldr	r7, [sp, #8]
 800c4d4:	fb27 ee02 	smlad	lr, r7, r2, lr
 800c4d8:	4a45      	ldr	r2, [pc, #276]	; (800c5f0 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800c4da:	fb20 ee02 	smlad	lr, r0, r2, lr
 800c4de:	4a45      	ldr	r2, [pc, #276]	; (800c5f4 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800c4e0:	fb23 e702 	smlad	r7, r3, r2, lr
 800c4e4:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800c4e8:	fb25 7e0e 	smlad	lr, r5, lr, r7
 800c4ec:	9f01      	ldr	r7, [sp, #4]
 800c4ee:	4a42      	ldr	r2, [pc, #264]	; (800c5f8 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 800c4f0:	46bc      	mov	ip, r7
 800c4f2:	9f05      	ldr	r7, [sp, #20]
 800c4f4:	fb2c 7c02 	smlad	ip, ip, r2, r7
 800c4f8:	4a40      	ldr	r2, [pc, #256]	; (800c5fc <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800c4fa:	fb2a cc02 	smlad	ip, sl, r2, ip
 800c4fe:	4f40      	ldr	r7, [pc, #256]	; (800c600 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 800c500:	fb21 cc07 	smlad	ip, r1, r7, ip
 800c504:	4f3f      	ldr	r7, [pc, #252]	; (800c604 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800c506:	fb24 cc07 	smlad	ip, r4, r7, ip
 800c50a:	4f3f      	ldr	r7, [pc, #252]	; (800c608 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800c50c:	9a02      	ldr	r2, [sp, #8]
 800c50e:	fb22 cc07 	smlad	ip, r2, r7, ip
 800c512:	4f3e      	ldr	r7, [pc, #248]	; (800c60c <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800c514:	fb20 cc07 	smlad	ip, r0, r7, ip
 800c518:	4f3d      	ldr	r7, [pc, #244]	; (800c610 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800c51a:	fb23 c707 	smlad	r7, r3, r7, ip
 800c51e:	f8df c114 	ldr.w	ip, [pc, #276]	; 800c634 <D128_1CH_HTONS_VOL_HP+0x320>
 800c522:	fb25 720c 	smlad	r2, r5, ip, r7
 800c526:	f04f 0b01 	mov.w	fp, #1
 800c52a:	9204      	str	r2, [sp, #16]
 800c52c:	9f01      	ldr	r7, [sp, #4]
 800c52e:	fb27 fb0b 	smuad	fp, r7, fp
 800c532:	4f38      	ldr	r7, [pc, #224]	; (800c614 <D128_1CH_HTONS_VOL_HP+0x300>)
 800c534:	fb2a ba07 	smlad	sl, sl, r7, fp
 800c538:	4f37      	ldr	r7, [pc, #220]	; (800c618 <D128_1CH_HTONS_VOL_HP+0x304>)
 800c53a:	fb21 aa07 	smlad	sl, r1, r7, sl
 800c53e:	4f37      	ldr	r7, [pc, #220]	; (800c61c <D128_1CH_HTONS_VOL_HP+0x308>)
 800c540:	fb24 aa07 	smlad	sl, r4, r7, sl
 800c544:	4f36      	ldr	r7, [pc, #216]	; (800c620 <D128_1CH_HTONS_VOL_HP+0x30c>)
 800c546:	9a02      	ldr	r2, [sp, #8]
 800c548:	fb22 a707 	smlad	r7, r2, r7, sl
 800c54c:	4a35      	ldr	r2, [pc, #212]	; (800c624 <D128_1CH_HTONS_VOL_HP+0x310>)
 800c54e:	fb20 7702 	smlad	r7, r0, r2, r7
 800c552:	4a35      	ldr	r2, [pc, #212]	; (800c628 <D128_1CH_HTONS_VOL_HP+0x314>)
 800c554:	fb23 7702 	smlad	r7, r3, r2, r7
 800c558:	4b34      	ldr	r3, [pc, #208]	; (800c62c <D128_1CH_HTONS_VOL_HP+0x318>)
 800c55a:	fb25 7303 	smlad	r3, r5, r3, r7
 800c55e:	9305      	str	r3, [sp, #20]
 800c560:	9b03      	ldr	r3, [sp, #12]
 800c562:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800c564:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800c568:	4473      	add	r3, lr
 800c56a:	461a      	mov	r2, r3
 800c56c:	9b06      	ldr	r3, [sp, #24]
 800c56e:	f8cd e018 	str.w	lr, [sp, #24]
 800c572:	1ad2      	subs	r2, r2, r3
 800c574:	17d1      	asrs	r1, r2, #31
 800c576:	fba2 2304 	umull	r2, r3, r2, r4
 800c57a:	fb04 3301 	mla	r3, r4, r1, r3
 800c57e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800c582:	f143 0300 	adc.w	r3, r3, #0
 800c586:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800c588:	021a      	lsls	r2, r3, #8
 800c58a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c58e:	2100      	movs	r1, #0
 800c590:	fbc4 0102 	smlal	r0, r1, r4, r2
 800c594:	108a      	asrs	r2, r1, #2
 800c596:	9907      	ldr	r1, [sp, #28]
 800c598:	f302 020f 	ssat	r2, #16, r2
 800c59c:	005b      	lsls	r3, r3, #1
 800c59e:	f821 2b02 	strh.w	r2, [r1], #2
 800c5a2:	9303      	str	r3, [sp, #12]
 800c5a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c5a6:	9107      	str	r1, [sp, #28]
 800c5a8:	4299      	cmp	r1, r3
 800c5aa:	f109 0910 	add.w	r9, r9, #16
 800c5ae:	f47f aed5 	bne.w	800c35c <D128_1CH_HTONS_VOL_HP+0x48>
 800c5b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c5b4:	9905      	ldr	r1, [sp, #20]
 800c5b6:	6091      	str	r1, [r2, #8]
 800c5b8:	9904      	ldr	r1, [sp, #16]
 800c5ba:	60d1      	str	r1, [r2, #12]
 800c5bc:	4613      	mov	r3, r2
 800c5be:	61d6      	str	r6, [r2, #28]
 800c5c0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c5c2:	9a03      	ldr	r2, [sp, #12]
 800c5c4:	611a      	str	r2, [r3, #16]
 800c5c6:	2000      	movs	r0, #0
 800c5c8:	f8c3 e014 	str.w	lr, [r3, #20]
 800c5cc:	6199      	str	r1, [r3, #24]
 800c5ce:	b013      	add	sp, #76	; 0x4c
 800c5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d4:	f8dd e018 	ldr.w	lr, [sp, #24]
 800c5d8:	e7eb      	b.n	800c5b2 <D128_1CH_HTONS_VOL_HP+0x29e>
 800c5da:	bf00      	nop
 800c5dc:	00780069 	.word	0x00780069
 800c5e0:	005b004e 	.word	0x005b004e
 800c5e4:	00420037 	.word	0x00420037
 800c5e8:	002d0024 	.word	0x002d0024
 800c5ec:	001c0015 	.word	0x001c0015
 800c5f0:	000f000a 	.word	0x000f000a
 800c5f4:	00060003 	.word	0x00060003
 800c5f8:	00880096 	.word	0x00880096
 800c5fc:	00a200ac 	.word	0x00a200ac
 800c600:	00b400ba 	.word	0x00b400ba
 800c604:	00be00c0 	.word	0x00be00c0
 800c608:	00c000be 	.word	0x00c000be
 800c60c:	00ba00b4 	.word	0x00ba00b4
 800c610:	00ac00a2 	.word	0x00ac00a2
 800c614:	00030006 	.word	0x00030006
 800c618:	000a000f 	.word	0x000a000f
 800c61c:	0015001c 	.word	0x0015001c
 800c620:	0024002d 	.word	0x0024002d
 800c624:	00370042 	.word	0x00370042
 800c628:	004e005b 	.word	0x004e005b
 800c62c:	00690078 	.word	0x00690078
 800c630:	20000000 	.word	0x20000000
 800c634:	00960088 	.word	0x00960088

0800c638 <PDM_Filter_Init>:
 800c638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c63a:	2240      	movs	r2, #64	; 0x40
 800c63c:	4604      	mov	r4, r0
 800c63e:	2100      	movs	r1, #0
 800c640:	300c      	adds	r0, #12
 800c642:	f000 fa05 	bl	800ca50 <memset>
 800c646:	493b      	ldr	r1, [pc, #236]	; (800c734 <PDM_Filter_Init+0xfc>)
 800c648:	483b      	ldr	r0, [pc, #236]	; (800c738 <PDM_Filter_Init+0x100>)
 800c64a:	f000 f971 	bl	800c930 <CRC_Lock>
 800c64e:	8822      	ldrh	r2, [r4, #0]
 800c650:	8963      	ldrh	r3, [r4, #10]
 800c652:	4938      	ldr	r1, [pc, #224]	; (800c734 <PDM_Filter_Init+0xfc>)
 800c654:	8925      	ldrh	r5, [r4, #8]
 800c656:	86a3      	strh	r3, [r4, #52]	; 0x34
 800c658:	2801      	cmp	r0, #1
 800c65a:	f04f 0300 	mov.w	r3, #0
 800c65e:	bf18      	it	ne
 800c660:	2100      	movne	r1, #0
 800c662:	2a01      	cmp	r2, #1
 800c664:	6461      	str	r1, [r4, #68]	; 0x44
 800c666:	86e5      	strh	r5, [r4, #54]	; 0x36
 800c668:	61a3      	str	r3, [r4, #24]
 800c66a:	6123      	str	r3, [r4, #16]
 800c66c:	6163      	str	r3, [r4, #20]
 800c66e:	60e3      	str	r3, [r4, #12]
 800c670:	6263      	str	r3, [r4, #36]	; 0x24
 800c672:	61e3      	str	r3, [r4, #28]
 800c674:	6223      	str	r3, [r4, #32]
 800c676:	6423      	str	r3, [r4, #64]	; 0x40
 800c678:	d918      	bls.n	800c6ac <PDM_Filter_Init+0x74>
 800c67a:	2003      	movs	r0, #3
 800c67c:	2302      	movs	r3, #2
 800c67e:	8862      	ldrh	r2, [r4, #2]
 800c680:	2a01      	cmp	r2, #1
 800c682:	d91d      	bls.n	800c6c0 <PDM_Filter_Init+0x88>
 800c684:	2140      	movs	r1, #64	; 0x40
 800c686:	2300      	movs	r3, #0
 800c688:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c68a:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800c68e:	6862      	ldr	r2, [r4, #4]
 800c690:	bf04      	itt	eq
 800c692:	6421      	streq	r1, [r4, #64]	; 0x40
 800c694:	460b      	moveq	r3, r1
 800c696:	b11a      	cbz	r2, 800c6a0 <PDM_Filter_Init+0x68>
 800c698:	f043 0310 	orr.w	r3, r3, #16
 800c69c:	6423      	str	r3, [r4, #64]	; 0x40
 800c69e:	62e2      	str	r2, [r4, #44]	; 0x2c
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	8722      	strh	r2, [r4, #56]	; 0x38
 800c6a4:	b908      	cbnz	r0, 800c6aa <PDM_Filter_Init+0x72>
 800c6a6:	3380      	adds	r3, #128	; 0x80
 800c6a8:	6423      	str	r3, [r4, #64]	; 0x40
 800c6aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6ac:	4d23      	ldr	r5, [pc, #140]	; (800c73c <PDM_Filter_Init+0x104>)
 800c6ae:	d010      	beq.n	800c6d2 <PDM_Filter_Init+0x9a>
 800c6b0:	782a      	ldrb	r2, [r5, #0]
 800c6b2:	2a01      	cmp	r2, #1
 800c6b4:	d027      	beq.n	800c706 <PDM_Filter_Init+0xce>
 800c6b6:	8862      	ldrh	r2, [r4, #2]
 800c6b8:	2a01      	cmp	r2, #1
 800c6ba:	f04f 0001 	mov.w	r0, #1
 800c6be:	d8e1      	bhi.n	800c684 <PDM_Filter_Init+0x4c>
 800c6c0:	d001      	beq.n	800c6c6 <PDM_Filter_Init+0x8e>
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	e7de      	b.n	800c684 <PDM_Filter_Init+0x4c>
 800c6c6:	2220      	movs	r2, #32
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	6422      	str	r2, [r4, #64]	; 0x40
 800c6cc:	4613      	mov	r3, r2
 800c6ce:	2160      	movs	r1, #96	; 0x60
 800c6d0:	e7da      	b.n	800c688 <PDM_Filter_Init+0x50>
 800c6d2:	7829      	ldrb	r1, [r5, #0]
 800c6d4:	2900      	cmp	r1, #0
 800c6d6:	d1ee      	bne.n	800c6b6 <PDM_Filter_Init+0x7e>
 800c6d8:	4919      	ldr	r1, [pc, #100]	; (800c740 <PDM_Filter_Init+0x108>)
 800c6da:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800c748 <PDM_Filter_Init+0x110>
 800c6de:	4f19      	ldr	r7, [pc, #100]	; (800c744 <PDM_Filter_Init+0x10c>)
 800c6e0:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800c6e4:	684a      	ldr	r2, [r1, #4]
 800c6e6:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800c6ea:	ea02 0007 	and.w	r0, r2, r7
 800c6ee:	4303      	orrs	r3, r0
 800c6f0:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800c6f4:	4413      	add	r3, r2
 800c6f6:	f841 3f04 	str.w	r3, [r1, #4]!
 800c6fa:	428e      	cmp	r6, r1
 800c6fc:	d1f2      	bne.n	800c6e4 <PDM_Filter_Init+0xac>
 800c6fe:	2001      	movs	r0, #1
 800c700:	7028      	strb	r0, [r5, #0]
 800c702:	2300      	movs	r3, #0
 800c704:	e7bb      	b.n	800c67e <PDM_Filter_Init+0x46>
 800c706:	490e      	ldr	r1, [pc, #56]	; (800c740 <PDM_Filter_Init+0x108>)
 800c708:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800c748 <PDM_Filter_Init+0x110>
 800c70c:	4f0d      	ldr	r7, [pc, #52]	; (800c744 <PDM_Filter_Init+0x10c>)
 800c70e:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800c712:	684a      	ldr	r2, [r1, #4]
 800c714:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800c718:	ea02 0007 	and.w	r0, r2, r7
 800c71c:	4303      	orrs	r3, r0
 800c71e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800c722:	4413      	add	r3, r2
 800c724:	f841 3f04 	str.w	r3, [r1, #4]!
 800c728:	428e      	cmp	r6, r1
 800c72a:	d1f2      	bne.n	800c712 <PDM_Filter_Init+0xda>
 800c72c:	2300      	movs	r3, #0
 800c72e:	702b      	strb	r3, [r5, #0]
 800c730:	e7c1      	b.n	800c6b6 <PDM_Filter_Init+0x7e>
 800c732:	bf00      	nop
 800c734:	b5e8b5cd 	.word	0xb5e8b5cd
 800c738:	f407a5c2 	.word	0xf407a5c2
 800c73c:	200024d4 	.word	0x200024d4
 800c740:	1ffffffc 	.word	0x1ffffffc
 800c744:	000ffc00 	.word	0x000ffc00
 800c748:	3ff00000 	.word	0x3ff00000

0800c74c <PDM_Filter_setConfig>:
 800c74c:	4b66      	ldr	r3, [pc, #408]	; (800c8e8 <PDM_Filter_setConfig+0x19c>)
 800c74e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c750:	429a      	cmp	r2, r3
 800c752:	d001      	beq.n	800c758 <PDM_Filter_setConfig+0xc>
 800c754:	2004      	movs	r0, #4
 800c756:	4770      	bx	lr
 800c758:	b530      	push	{r4, r5, lr}
 800c75a:	880a      	ldrh	r2, [r1, #0]
 800c75c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c75e:	ed2d 8b04 	vpush	{d8-d9}
 800c762:	4604      	mov	r4, r0
 800c764:	460d      	mov	r5, r1
 800c766:	1e51      	subs	r1, r2, #1
 800c768:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 800c76c:	2906      	cmp	r1, #6
 800c76e:	b083      	sub	sp, #12
 800c770:	6420      	str	r0, [r4, #64]	; 0x40
 800c772:	d91a      	bls.n	800c7aa <PDM_Filter_setConfig+0x5e>
 800c774:	2008      	movs	r0, #8
 800c776:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800c77a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800c77e:	4299      	cmp	r1, r3
 800c780:	d07e      	beq.n	800c880 <PDM_Filter_setConfig+0x134>
 800c782:	f113 0f0c 	cmn.w	r3, #12
 800c786:	da2a      	bge.n	800c7de <PDM_Filter_setConfig+0x92>
 800c788:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800c78c:	3040      	adds	r0, #64	; 0x40
 800c78e:	80ab      	strh	r3, [r5, #4]
 800c790:	8622      	strh	r2, [r4, #48]	; 0x30
 800c792:	886b      	ldrh	r3, [r5, #2]
 800c794:	8663      	strh	r3, [r4, #50]	; 0x32
 800c796:	b920      	cbnz	r0, 800c7a2 <PDM_Filter_setConfig+0x56>
 800c798:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c79a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c79e:	6423      	str	r3, [r4, #64]	; 0x40
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	b003      	add	sp, #12
 800c7a4:	ecbd 8b04 	vpop	{d8-d9}
 800c7a8:	bd30      	pop	{r4, r5, pc}
 800c7aa:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800c7ac:	4291      	cmp	r1, r2
 800c7ae:	d06c      	beq.n	800c88a <PDM_Filter_setConfig+0x13e>
 800c7b0:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800c7b4:	f023 0301 	bic.w	r3, r3, #1
 800c7b8:	4313      	orrs	r3, r2
 800c7ba:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800c7be:	6423      	str	r3, [r4, #64]	; 0x40
 800c7c0:	2970      	cmp	r1, #112	; 0x70
 800c7c2:	f003 030f 	and.w	r3, r3, #15
 800c7c6:	f103 33ff 	add.w	r3, r3, #4294967295
 800c7ca:	d066      	beq.n	800c89a <PDM_Filter_setConfig+0x14e>
 800c7cc:	2b06      	cmp	r3, #6
 800c7ce:	f200 8089 	bhi.w	800c8e4 <PDM_Filter_setConfig+0x198>
 800c7d2:	e8df f003 	tbb	[pc, r3]
 800c7d6:	4f52      	.short	0x4f52
 800c7d8:	3d43494c 	.word	0x3d43494c
 800c7dc:	46          	.byte	0x46
 800c7dd:	00          	.byte	0x00
 800c7de:	2b33      	cmp	r3, #51	; 0x33
 800c7e0:	dc32      	bgt.n	800c848 <PDM_Filter_setConfig+0xfc>
 800c7e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c7e4:	f002 020f 	and.w	r2, r2, #15
 800c7e8:	3a01      	subs	r2, #1
 800c7ea:	2a06      	cmp	r2, #6
 800c7ec:	d872      	bhi.n	800c8d4 <PDM_Filter_setConfig+0x188>
 800c7ee:	493f      	ldr	r1, [pc, #252]	; (800c8ec <PDM_Filter_setConfig+0x1a0>)
 800c7f0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c7f4:	ed92 9a00 	vldr	s18, [r2]
 800c7f8:	ed92 8a07 	vldr	s16, [r2, #28]
 800c7fc:	9001      	str	r0, [sp, #4]
 800c7fe:	ee07 3a90 	vmov	s15, r3
 800c802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c806:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800c80a:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800c80e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800c812:	f000 fea5 	bl	800d560 <powf>
 800c816:	eddf 0a36 	vldr	s1, [pc, #216]	; 800c8f0 <PDM_Filter_setConfig+0x1a4>
 800c81a:	eef0 8a40 	vmov.f32	s17, s0
 800c81e:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800c822:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800c826:	f000 fe9b 	bl	800d560 <powf>
 800c82a:	ee28 8a28 	vmul.f32	s16, s16, s17
 800c82e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c832:	f000 fe71 	bl	800d518 <roundf>
 800c836:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800c83a:	88ab      	ldrh	r3, [r5, #4]
 800c83c:	882a      	ldrh	r2, [r5, #0]
 800c83e:	9801      	ldr	r0, [sp, #4]
 800c840:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800c844:	8723      	strh	r3, [r4, #56]	; 0x38
 800c846:	e7a3      	b.n	800c790 <PDM_Filter_setConfig+0x44>
 800c848:	2333      	movs	r3, #51	; 0x33
 800c84a:	3040      	adds	r0, #64	; 0x40
 800c84c:	80ab      	strh	r3, [r5, #4]
 800c84e:	e79f      	b.n	800c790 <PDM_Filter_setConfig+0x44>
 800c850:	4b28      	ldr	r3, [pc, #160]	; (800c8f4 <PDM_Filter_setConfig+0x1a8>)
 800c852:	64a3      	str	r3, [r4, #72]	; 0x48
 800c854:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800c858:	2000      	movs	r0, #0
 800c85a:	e792      	b.n	800c782 <PDM_Filter_setConfig+0x36>
 800c85c:	4b26      	ldr	r3, [pc, #152]	; (800c8f8 <PDM_Filter_setConfig+0x1ac>)
 800c85e:	64a3      	str	r3, [r4, #72]	; 0x48
 800c860:	e7f8      	b.n	800c854 <PDM_Filter_setConfig+0x108>
 800c862:	4b26      	ldr	r3, [pc, #152]	; (800c8fc <PDM_Filter_setConfig+0x1b0>)
 800c864:	64a3      	str	r3, [r4, #72]	; 0x48
 800c866:	e7f5      	b.n	800c854 <PDM_Filter_setConfig+0x108>
 800c868:	4b25      	ldr	r3, [pc, #148]	; (800c900 <PDM_Filter_setConfig+0x1b4>)
 800c86a:	64a3      	str	r3, [r4, #72]	; 0x48
 800c86c:	e7f2      	b.n	800c854 <PDM_Filter_setConfig+0x108>
 800c86e:	4b25      	ldr	r3, [pc, #148]	; (800c904 <PDM_Filter_setConfig+0x1b8>)
 800c870:	64a3      	str	r3, [r4, #72]	; 0x48
 800c872:	e7ef      	b.n	800c854 <PDM_Filter_setConfig+0x108>
 800c874:	4b24      	ldr	r3, [pc, #144]	; (800c908 <PDM_Filter_setConfig+0x1bc>)
 800c876:	64a3      	str	r3, [r4, #72]	; 0x48
 800c878:	e7ec      	b.n	800c854 <PDM_Filter_setConfig+0x108>
 800c87a:	4b24      	ldr	r3, [pc, #144]	; (800c90c <PDM_Filter_setConfig+0x1c0>)
 800c87c:	64a3      	str	r3, [r4, #72]	; 0x48
 800c87e:	e7e9      	b.n	800c854 <PDM_Filter_setConfig+0x108>
 800c880:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800c882:	4291      	cmp	r1, r2
 800c884:	f47f af7d 	bne.w	800c782 <PDM_Filter_setConfig+0x36>
 800c888:	e783      	b.n	800c792 <PDM_Filter_setConfig+0x46>
 800c88a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800c88e:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800c892:	4299      	cmp	r1, r3
 800c894:	d023      	beq.n	800c8de <PDM_Filter_setConfig+0x192>
 800c896:	2000      	movs	r0, #0
 800c898:	e773      	b.n	800c782 <PDM_Filter_setConfig+0x36>
 800c89a:	2b06      	cmp	r3, #6
 800c89c:	d822      	bhi.n	800c8e4 <PDM_Filter_setConfig+0x198>
 800c89e:	e8df f003 	tbb	[pc, r3]
 800c8a2:	1316      	.short	0x1316
 800c8a4:	070a0d10 	.word	0x070a0d10
 800c8a8:	04          	.byte	0x04
 800c8a9:	00          	.byte	0x00
 800c8aa:	4b19      	ldr	r3, [pc, #100]	; (800c910 <PDM_Filter_setConfig+0x1c4>)
 800c8ac:	64a3      	str	r3, [r4, #72]	; 0x48
 800c8ae:	e7d1      	b.n	800c854 <PDM_Filter_setConfig+0x108>
 800c8b0:	4b18      	ldr	r3, [pc, #96]	; (800c914 <PDM_Filter_setConfig+0x1c8>)
 800c8b2:	64a3      	str	r3, [r4, #72]	; 0x48
 800c8b4:	e7ce      	b.n	800c854 <PDM_Filter_setConfig+0x108>
 800c8b6:	4b18      	ldr	r3, [pc, #96]	; (800c918 <PDM_Filter_setConfig+0x1cc>)
 800c8b8:	64a3      	str	r3, [r4, #72]	; 0x48
 800c8ba:	e7cb      	b.n	800c854 <PDM_Filter_setConfig+0x108>
 800c8bc:	4b17      	ldr	r3, [pc, #92]	; (800c91c <PDM_Filter_setConfig+0x1d0>)
 800c8be:	64a3      	str	r3, [r4, #72]	; 0x48
 800c8c0:	e7c8      	b.n	800c854 <PDM_Filter_setConfig+0x108>
 800c8c2:	4b17      	ldr	r3, [pc, #92]	; (800c920 <PDM_Filter_setConfig+0x1d4>)
 800c8c4:	64a3      	str	r3, [r4, #72]	; 0x48
 800c8c6:	e7c5      	b.n	800c854 <PDM_Filter_setConfig+0x108>
 800c8c8:	4b16      	ldr	r3, [pc, #88]	; (800c924 <PDM_Filter_setConfig+0x1d8>)
 800c8ca:	64a3      	str	r3, [r4, #72]	; 0x48
 800c8cc:	e7c2      	b.n	800c854 <PDM_Filter_setConfig+0x108>
 800c8ce:	4b16      	ldr	r3, [pc, #88]	; (800c928 <PDM_Filter_setConfig+0x1dc>)
 800c8d0:	64a3      	str	r3, [r4, #72]	; 0x48
 800c8d2:	e7bf      	b.n	800c854 <PDM_Filter_setConfig+0x108>
 800c8d4:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800c92c <PDM_Filter_setConfig+0x1e0>
 800c8d8:	eeb0 9a48 	vmov.f32	s18, s16
 800c8dc:	e78e      	b.n	800c7fc <PDM_Filter_setConfig+0xb0>
 800c8de:	886b      	ldrh	r3, [r5, #2]
 800c8e0:	8663      	strh	r3, [r4, #50]	; 0x32
 800c8e2:	e759      	b.n	800c798 <PDM_Filter_setConfig+0x4c>
 800c8e4:	2000      	movs	r0, #0
 800c8e6:	e746      	b.n	800c776 <PDM_Filter_setConfig+0x2a>
 800c8e8:	b5e8b5cd 	.word	0xb5e8b5cd
 800c8ec:	0800de48 	.word	0x0800de48
 800c8f0:	42000000 	.word	0x42000000
 800c8f4:	0800acb9 	.word	0x0800acb9
 800c8f8:	0800ab99 	.word	0x0800ab99
 800c8fc:	0800ae49 	.word	0x0800ae49
 800c900:	0800b68d 	.word	0x0800b68d
 800c904:	0800b3ed 	.word	0x0800b3ed
 800c908:	0800b1cd 	.word	0x0800b1cd
 800c90c:	0800afe1 	.word	0x0800afe1
 800c910:	0800bc99 	.word	0x0800bc99
 800c914:	0800bb61 	.word	0x0800bb61
 800c918:	0800ba7d 	.word	0x0800ba7d
 800c91c:	0800c315 	.word	0x0800c315
 800c920:	0800c101 	.word	0x0800c101
 800c924:	0800bf49 	.word	0x0800bf49
 800c928:	0800bddd 	.word	0x0800bddd
 800c92c:	00000000 	.word	0x00000000

0800c930 <CRC_Lock>:
 800c930:	4a17      	ldr	r2, [pc, #92]	; (800c990 <CRC_Lock+0x60>)
 800c932:	6813      	ldr	r3, [r2, #0]
 800c934:	b410      	push	{r4}
 800c936:	f023 0301 	bic.w	r3, r3, #1
 800c93a:	4c16      	ldr	r4, [pc, #88]	; (800c994 <CRC_Lock+0x64>)
 800c93c:	6013      	str	r3, [r2, #0]
 800c93e:	6823      	ldr	r3, [r4, #0]
 800c940:	b933      	cbnz	r3, 800c950 <CRC_Lock+0x20>
 800c942:	4b15      	ldr	r3, [pc, #84]	; (800c998 <CRC_Lock+0x68>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c94a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c94e:	d00f      	beq.n	800c970 <CRC_Lock+0x40>
 800c950:	4a12      	ldr	r2, [pc, #72]	; (800c99c <CRC_Lock+0x6c>)
 800c952:	2301      	movs	r3, #1
 800c954:	6013      	str	r3, [r2, #0]
 800c956:	6813      	ldr	r3, [r2, #0]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d1fc      	bne.n	800c956 <CRC_Lock+0x26>
 800c95c:	4b10      	ldr	r3, [pc, #64]	; (800c9a0 <CRC_Lock+0x70>)
 800c95e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c962:	6018      	str	r0, [r3, #0]
 800c964:	6818      	ldr	r0, [r3, #0]
 800c966:	1a08      	subs	r0, r1, r0
 800c968:	fab0 f080 	clz	r0, r0
 800c96c:	0940      	lsrs	r0, r0, #5
 800c96e:	4770      	bx	lr
 800c970:	4a0c      	ldr	r2, [pc, #48]	; (800c9a4 <CRC_Lock+0x74>)
 800c972:	2301      	movs	r3, #1
 800c974:	6013      	str	r3, [r2, #0]
 800c976:	6813      	ldr	r3, [r2, #0]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d1fc      	bne.n	800c976 <CRC_Lock+0x46>
 800c97c:	4b0a      	ldr	r3, [pc, #40]	; (800c9a8 <CRC_Lock+0x78>)
 800c97e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c982:	6018      	str	r0, [r3, #0]
 800c984:	6818      	ldr	r0, [r3, #0]
 800c986:	1a40      	subs	r0, r0, r1
 800c988:	fab0 f080 	clz	r0, r0
 800c98c:	0940      	lsrs	r0, r0, #5
 800c98e:	4770      	bx	lr
 800c990:	e0002000 	.word	0xe0002000
 800c994:	e0042000 	.word	0xe0042000
 800c998:	5c001000 	.word	0x5c001000
 800c99c:	40023008 	.word	0x40023008
 800c9a0:	40023000 	.word	0x40023000
 800c9a4:	58024c08 	.word	0x58024c08
 800c9a8:	58024c00 	.word	0x58024c00

0800c9ac <__errno>:
 800c9ac:	4b01      	ldr	r3, [pc, #4]	; (800c9b4 <__errno+0x8>)
 800c9ae:	6818      	ldr	r0, [r3, #0]
 800c9b0:	4770      	bx	lr
 800c9b2:	bf00      	nop
 800c9b4:	20002454 	.word	0x20002454

0800c9b8 <__libc_init_array>:
 800c9b8:	b570      	push	{r4, r5, r6, lr}
 800c9ba:	4d0d      	ldr	r5, [pc, #52]	; (800c9f0 <__libc_init_array+0x38>)
 800c9bc:	4c0d      	ldr	r4, [pc, #52]	; (800c9f4 <__libc_init_array+0x3c>)
 800c9be:	1b64      	subs	r4, r4, r5
 800c9c0:	10a4      	asrs	r4, r4, #2
 800c9c2:	2600      	movs	r6, #0
 800c9c4:	42a6      	cmp	r6, r4
 800c9c6:	d109      	bne.n	800c9dc <__libc_init_array+0x24>
 800c9c8:	4d0b      	ldr	r5, [pc, #44]	; (800c9f8 <__libc_init_array+0x40>)
 800c9ca:	4c0c      	ldr	r4, [pc, #48]	; (800c9fc <__libc_init_array+0x44>)
 800c9cc:	f001 f99a 	bl	800dd04 <_init>
 800c9d0:	1b64      	subs	r4, r4, r5
 800c9d2:	10a4      	asrs	r4, r4, #2
 800c9d4:	2600      	movs	r6, #0
 800c9d6:	42a6      	cmp	r6, r4
 800c9d8:	d105      	bne.n	800c9e6 <__libc_init_array+0x2e>
 800c9da:	bd70      	pop	{r4, r5, r6, pc}
 800c9dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9e0:	4798      	blx	r3
 800c9e2:	3601      	adds	r6, #1
 800c9e4:	e7ee      	b.n	800c9c4 <__libc_init_array+0xc>
 800c9e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9ea:	4798      	blx	r3
 800c9ec:	3601      	adds	r6, #1
 800c9ee:	e7f2      	b.n	800c9d6 <__libc_init_array+0x1e>
 800c9f0:	0800dffc 	.word	0x0800dffc
 800c9f4:	0800dffc 	.word	0x0800dffc
 800c9f8:	0800dffc 	.word	0x0800dffc
 800c9fc:	0800e000 	.word	0x0800e000

0800ca00 <memcpy>:
 800ca00:	440a      	add	r2, r1
 800ca02:	4291      	cmp	r1, r2
 800ca04:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca08:	d100      	bne.n	800ca0c <memcpy+0xc>
 800ca0a:	4770      	bx	lr
 800ca0c:	b510      	push	{r4, lr}
 800ca0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca16:	4291      	cmp	r1, r2
 800ca18:	d1f9      	bne.n	800ca0e <memcpy+0xe>
 800ca1a:	bd10      	pop	{r4, pc}

0800ca1c <memmove>:
 800ca1c:	4288      	cmp	r0, r1
 800ca1e:	b510      	push	{r4, lr}
 800ca20:	eb01 0402 	add.w	r4, r1, r2
 800ca24:	d902      	bls.n	800ca2c <memmove+0x10>
 800ca26:	4284      	cmp	r4, r0
 800ca28:	4623      	mov	r3, r4
 800ca2a:	d807      	bhi.n	800ca3c <memmove+0x20>
 800ca2c:	1e43      	subs	r3, r0, #1
 800ca2e:	42a1      	cmp	r1, r4
 800ca30:	d008      	beq.n	800ca44 <memmove+0x28>
 800ca32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca3a:	e7f8      	b.n	800ca2e <memmove+0x12>
 800ca3c:	4402      	add	r2, r0
 800ca3e:	4601      	mov	r1, r0
 800ca40:	428a      	cmp	r2, r1
 800ca42:	d100      	bne.n	800ca46 <memmove+0x2a>
 800ca44:	bd10      	pop	{r4, pc}
 800ca46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca4e:	e7f7      	b.n	800ca40 <memmove+0x24>

0800ca50 <memset>:
 800ca50:	4402      	add	r2, r0
 800ca52:	4603      	mov	r3, r0
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d100      	bne.n	800ca5a <memset+0xa>
 800ca58:	4770      	bx	lr
 800ca5a:	f803 1b01 	strb.w	r1, [r3], #1
 800ca5e:	e7f9      	b.n	800ca54 <memset+0x4>

0800ca60 <putchar>:
 800ca60:	4b09      	ldr	r3, [pc, #36]	; (800ca88 <putchar+0x28>)
 800ca62:	b513      	push	{r0, r1, r4, lr}
 800ca64:	681c      	ldr	r4, [r3, #0]
 800ca66:	4601      	mov	r1, r0
 800ca68:	b134      	cbz	r4, 800ca78 <putchar+0x18>
 800ca6a:	69a3      	ldr	r3, [r4, #24]
 800ca6c:	b923      	cbnz	r3, 800ca78 <putchar+0x18>
 800ca6e:	9001      	str	r0, [sp, #4]
 800ca70:	4620      	mov	r0, r4
 800ca72:	f000 fa5b 	bl	800cf2c <__sinit>
 800ca76:	9901      	ldr	r1, [sp, #4]
 800ca78:	68a2      	ldr	r2, [r4, #8]
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	b002      	add	sp, #8
 800ca7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca82:	f000 bc39 	b.w	800d2f8 <_putc_r>
 800ca86:	bf00      	nop
 800ca88:	20002454 	.word	0x20002454

0800ca8c <_puts_r>:
 800ca8c:	b570      	push	{r4, r5, r6, lr}
 800ca8e:	460e      	mov	r6, r1
 800ca90:	4605      	mov	r5, r0
 800ca92:	b118      	cbz	r0, 800ca9c <_puts_r+0x10>
 800ca94:	6983      	ldr	r3, [r0, #24]
 800ca96:	b90b      	cbnz	r3, 800ca9c <_puts_r+0x10>
 800ca98:	f000 fa48 	bl	800cf2c <__sinit>
 800ca9c:	69ab      	ldr	r3, [r5, #24]
 800ca9e:	68ac      	ldr	r4, [r5, #8]
 800caa0:	b913      	cbnz	r3, 800caa8 <_puts_r+0x1c>
 800caa2:	4628      	mov	r0, r5
 800caa4:	f000 fa42 	bl	800cf2c <__sinit>
 800caa8:	4b2c      	ldr	r3, [pc, #176]	; (800cb5c <_puts_r+0xd0>)
 800caaa:	429c      	cmp	r4, r3
 800caac:	d120      	bne.n	800caf0 <_puts_r+0x64>
 800caae:	686c      	ldr	r4, [r5, #4]
 800cab0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cab2:	07db      	lsls	r3, r3, #31
 800cab4:	d405      	bmi.n	800cac2 <_puts_r+0x36>
 800cab6:	89a3      	ldrh	r3, [r4, #12]
 800cab8:	0598      	lsls	r0, r3, #22
 800caba:	d402      	bmi.n	800cac2 <_puts_r+0x36>
 800cabc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cabe:	f000 fad3 	bl	800d068 <__retarget_lock_acquire_recursive>
 800cac2:	89a3      	ldrh	r3, [r4, #12]
 800cac4:	0719      	lsls	r1, r3, #28
 800cac6:	d51d      	bpl.n	800cb04 <_puts_r+0x78>
 800cac8:	6923      	ldr	r3, [r4, #16]
 800caca:	b1db      	cbz	r3, 800cb04 <_puts_r+0x78>
 800cacc:	3e01      	subs	r6, #1
 800cace:	68a3      	ldr	r3, [r4, #8]
 800cad0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cad4:	3b01      	subs	r3, #1
 800cad6:	60a3      	str	r3, [r4, #8]
 800cad8:	bb39      	cbnz	r1, 800cb2a <_puts_r+0x9e>
 800cada:	2b00      	cmp	r3, #0
 800cadc:	da38      	bge.n	800cb50 <_puts_r+0xc4>
 800cade:	4622      	mov	r2, r4
 800cae0:	210a      	movs	r1, #10
 800cae2:	4628      	mov	r0, r5
 800cae4:	f000 f848 	bl	800cb78 <__swbuf_r>
 800cae8:	3001      	adds	r0, #1
 800caea:	d011      	beq.n	800cb10 <_puts_r+0x84>
 800caec:	250a      	movs	r5, #10
 800caee:	e011      	b.n	800cb14 <_puts_r+0x88>
 800caf0:	4b1b      	ldr	r3, [pc, #108]	; (800cb60 <_puts_r+0xd4>)
 800caf2:	429c      	cmp	r4, r3
 800caf4:	d101      	bne.n	800cafa <_puts_r+0x6e>
 800caf6:	68ac      	ldr	r4, [r5, #8]
 800caf8:	e7da      	b.n	800cab0 <_puts_r+0x24>
 800cafa:	4b1a      	ldr	r3, [pc, #104]	; (800cb64 <_puts_r+0xd8>)
 800cafc:	429c      	cmp	r4, r3
 800cafe:	bf08      	it	eq
 800cb00:	68ec      	ldreq	r4, [r5, #12]
 800cb02:	e7d5      	b.n	800cab0 <_puts_r+0x24>
 800cb04:	4621      	mov	r1, r4
 800cb06:	4628      	mov	r0, r5
 800cb08:	f000 f888 	bl	800cc1c <__swsetup_r>
 800cb0c:	2800      	cmp	r0, #0
 800cb0e:	d0dd      	beq.n	800cacc <_puts_r+0x40>
 800cb10:	f04f 35ff 	mov.w	r5, #4294967295
 800cb14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb16:	07da      	lsls	r2, r3, #31
 800cb18:	d405      	bmi.n	800cb26 <_puts_r+0x9a>
 800cb1a:	89a3      	ldrh	r3, [r4, #12]
 800cb1c:	059b      	lsls	r3, r3, #22
 800cb1e:	d402      	bmi.n	800cb26 <_puts_r+0x9a>
 800cb20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb22:	f000 faa2 	bl	800d06a <__retarget_lock_release_recursive>
 800cb26:	4628      	mov	r0, r5
 800cb28:	bd70      	pop	{r4, r5, r6, pc}
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	da04      	bge.n	800cb38 <_puts_r+0xac>
 800cb2e:	69a2      	ldr	r2, [r4, #24]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	dc06      	bgt.n	800cb42 <_puts_r+0xb6>
 800cb34:	290a      	cmp	r1, #10
 800cb36:	d004      	beq.n	800cb42 <_puts_r+0xb6>
 800cb38:	6823      	ldr	r3, [r4, #0]
 800cb3a:	1c5a      	adds	r2, r3, #1
 800cb3c:	6022      	str	r2, [r4, #0]
 800cb3e:	7019      	strb	r1, [r3, #0]
 800cb40:	e7c5      	b.n	800cace <_puts_r+0x42>
 800cb42:	4622      	mov	r2, r4
 800cb44:	4628      	mov	r0, r5
 800cb46:	f000 f817 	bl	800cb78 <__swbuf_r>
 800cb4a:	3001      	adds	r0, #1
 800cb4c:	d1bf      	bne.n	800cace <_puts_r+0x42>
 800cb4e:	e7df      	b.n	800cb10 <_puts_r+0x84>
 800cb50:	6823      	ldr	r3, [r4, #0]
 800cb52:	250a      	movs	r5, #10
 800cb54:	1c5a      	adds	r2, r3, #1
 800cb56:	6022      	str	r2, [r4, #0]
 800cb58:	701d      	strb	r5, [r3, #0]
 800cb5a:	e7db      	b.n	800cb14 <_puts_r+0x88>
 800cb5c:	0800df9c 	.word	0x0800df9c
 800cb60:	0800dfbc 	.word	0x0800dfbc
 800cb64:	0800df7c 	.word	0x0800df7c

0800cb68 <puts>:
 800cb68:	4b02      	ldr	r3, [pc, #8]	; (800cb74 <puts+0xc>)
 800cb6a:	4601      	mov	r1, r0
 800cb6c:	6818      	ldr	r0, [r3, #0]
 800cb6e:	f7ff bf8d 	b.w	800ca8c <_puts_r>
 800cb72:	bf00      	nop
 800cb74:	20002454 	.word	0x20002454

0800cb78 <__swbuf_r>:
 800cb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb7a:	460e      	mov	r6, r1
 800cb7c:	4614      	mov	r4, r2
 800cb7e:	4605      	mov	r5, r0
 800cb80:	b118      	cbz	r0, 800cb8a <__swbuf_r+0x12>
 800cb82:	6983      	ldr	r3, [r0, #24]
 800cb84:	b90b      	cbnz	r3, 800cb8a <__swbuf_r+0x12>
 800cb86:	f000 f9d1 	bl	800cf2c <__sinit>
 800cb8a:	4b21      	ldr	r3, [pc, #132]	; (800cc10 <__swbuf_r+0x98>)
 800cb8c:	429c      	cmp	r4, r3
 800cb8e:	d12b      	bne.n	800cbe8 <__swbuf_r+0x70>
 800cb90:	686c      	ldr	r4, [r5, #4]
 800cb92:	69a3      	ldr	r3, [r4, #24]
 800cb94:	60a3      	str	r3, [r4, #8]
 800cb96:	89a3      	ldrh	r3, [r4, #12]
 800cb98:	071a      	lsls	r2, r3, #28
 800cb9a:	d52f      	bpl.n	800cbfc <__swbuf_r+0x84>
 800cb9c:	6923      	ldr	r3, [r4, #16]
 800cb9e:	b36b      	cbz	r3, 800cbfc <__swbuf_r+0x84>
 800cba0:	6923      	ldr	r3, [r4, #16]
 800cba2:	6820      	ldr	r0, [r4, #0]
 800cba4:	1ac0      	subs	r0, r0, r3
 800cba6:	6963      	ldr	r3, [r4, #20]
 800cba8:	b2f6      	uxtb	r6, r6
 800cbaa:	4283      	cmp	r3, r0
 800cbac:	4637      	mov	r7, r6
 800cbae:	dc04      	bgt.n	800cbba <__swbuf_r+0x42>
 800cbb0:	4621      	mov	r1, r4
 800cbb2:	4628      	mov	r0, r5
 800cbb4:	f000 f926 	bl	800ce04 <_fflush_r>
 800cbb8:	bb30      	cbnz	r0, 800cc08 <__swbuf_r+0x90>
 800cbba:	68a3      	ldr	r3, [r4, #8]
 800cbbc:	3b01      	subs	r3, #1
 800cbbe:	60a3      	str	r3, [r4, #8]
 800cbc0:	6823      	ldr	r3, [r4, #0]
 800cbc2:	1c5a      	adds	r2, r3, #1
 800cbc4:	6022      	str	r2, [r4, #0]
 800cbc6:	701e      	strb	r6, [r3, #0]
 800cbc8:	6963      	ldr	r3, [r4, #20]
 800cbca:	3001      	adds	r0, #1
 800cbcc:	4283      	cmp	r3, r0
 800cbce:	d004      	beq.n	800cbda <__swbuf_r+0x62>
 800cbd0:	89a3      	ldrh	r3, [r4, #12]
 800cbd2:	07db      	lsls	r3, r3, #31
 800cbd4:	d506      	bpl.n	800cbe4 <__swbuf_r+0x6c>
 800cbd6:	2e0a      	cmp	r6, #10
 800cbd8:	d104      	bne.n	800cbe4 <__swbuf_r+0x6c>
 800cbda:	4621      	mov	r1, r4
 800cbdc:	4628      	mov	r0, r5
 800cbde:	f000 f911 	bl	800ce04 <_fflush_r>
 800cbe2:	b988      	cbnz	r0, 800cc08 <__swbuf_r+0x90>
 800cbe4:	4638      	mov	r0, r7
 800cbe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbe8:	4b0a      	ldr	r3, [pc, #40]	; (800cc14 <__swbuf_r+0x9c>)
 800cbea:	429c      	cmp	r4, r3
 800cbec:	d101      	bne.n	800cbf2 <__swbuf_r+0x7a>
 800cbee:	68ac      	ldr	r4, [r5, #8]
 800cbf0:	e7cf      	b.n	800cb92 <__swbuf_r+0x1a>
 800cbf2:	4b09      	ldr	r3, [pc, #36]	; (800cc18 <__swbuf_r+0xa0>)
 800cbf4:	429c      	cmp	r4, r3
 800cbf6:	bf08      	it	eq
 800cbf8:	68ec      	ldreq	r4, [r5, #12]
 800cbfa:	e7ca      	b.n	800cb92 <__swbuf_r+0x1a>
 800cbfc:	4621      	mov	r1, r4
 800cbfe:	4628      	mov	r0, r5
 800cc00:	f000 f80c 	bl	800cc1c <__swsetup_r>
 800cc04:	2800      	cmp	r0, #0
 800cc06:	d0cb      	beq.n	800cba0 <__swbuf_r+0x28>
 800cc08:	f04f 37ff 	mov.w	r7, #4294967295
 800cc0c:	e7ea      	b.n	800cbe4 <__swbuf_r+0x6c>
 800cc0e:	bf00      	nop
 800cc10:	0800df9c 	.word	0x0800df9c
 800cc14:	0800dfbc 	.word	0x0800dfbc
 800cc18:	0800df7c 	.word	0x0800df7c

0800cc1c <__swsetup_r>:
 800cc1c:	4b32      	ldr	r3, [pc, #200]	; (800cce8 <__swsetup_r+0xcc>)
 800cc1e:	b570      	push	{r4, r5, r6, lr}
 800cc20:	681d      	ldr	r5, [r3, #0]
 800cc22:	4606      	mov	r6, r0
 800cc24:	460c      	mov	r4, r1
 800cc26:	b125      	cbz	r5, 800cc32 <__swsetup_r+0x16>
 800cc28:	69ab      	ldr	r3, [r5, #24]
 800cc2a:	b913      	cbnz	r3, 800cc32 <__swsetup_r+0x16>
 800cc2c:	4628      	mov	r0, r5
 800cc2e:	f000 f97d 	bl	800cf2c <__sinit>
 800cc32:	4b2e      	ldr	r3, [pc, #184]	; (800ccec <__swsetup_r+0xd0>)
 800cc34:	429c      	cmp	r4, r3
 800cc36:	d10f      	bne.n	800cc58 <__swsetup_r+0x3c>
 800cc38:	686c      	ldr	r4, [r5, #4]
 800cc3a:	89a3      	ldrh	r3, [r4, #12]
 800cc3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc40:	0719      	lsls	r1, r3, #28
 800cc42:	d42c      	bmi.n	800cc9e <__swsetup_r+0x82>
 800cc44:	06dd      	lsls	r5, r3, #27
 800cc46:	d411      	bmi.n	800cc6c <__swsetup_r+0x50>
 800cc48:	2309      	movs	r3, #9
 800cc4a:	6033      	str	r3, [r6, #0]
 800cc4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cc50:	81a3      	strh	r3, [r4, #12]
 800cc52:	f04f 30ff 	mov.w	r0, #4294967295
 800cc56:	e03e      	b.n	800ccd6 <__swsetup_r+0xba>
 800cc58:	4b25      	ldr	r3, [pc, #148]	; (800ccf0 <__swsetup_r+0xd4>)
 800cc5a:	429c      	cmp	r4, r3
 800cc5c:	d101      	bne.n	800cc62 <__swsetup_r+0x46>
 800cc5e:	68ac      	ldr	r4, [r5, #8]
 800cc60:	e7eb      	b.n	800cc3a <__swsetup_r+0x1e>
 800cc62:	4b24      	ldr	r3, [pc, #144]	; (800ccf4 <__swsetup_r+0xd8>)
 800cc64:	429c      	cmp	r4, r3
 800cc66:	bf08      	it	eq
 800cc68:	68ec      	ldreq	r4, [r5, #12]
 800cc6a:	e7e6      	b.n	800cc3a <__swsetup_r+0x1e>
 800cc6c:	0758      	lsls	r0, r3, #29
 800cc6e:	d512      	bpl.n	800cc96 <__swsetup_r+0x7a>
 800cc70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc72:	b141      	cbz	r1, 800cc86 <__swsetup_r+0x6a>
 800cc74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc78:	4299      	cmp	r1, r3
 800cc7a:	d002      	beq.n	800cc82 <__swsetup_r+0x66>
 800cc7c:	4630      	mov	r0, r6
 800cc7e:	f000 fa5b 	bl	800d138 <_free_r>
 800cc82:	2300      	movs	r3, #0
 800cc84:	6363      	str	r3, [r4, #52]	; 0x34
 800cc86:	89a3      	ldrh	r3, [r4, #12]
 800cc88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cc8c:	81a3      	strh	r3, [r4, #12]
 800cc8e:	2300      	movs	r3, #0
 800cc90:	6063      	str	r3, [r4, #4]
 800cc92:	6923      	ldr	r3, [r4, #16]
 800cc94:	6023      	str	r3, [r4, #0]
 800cc96:	89a3      	ldrh	r3, [r4, #12]
 800cc98:	f043 0308 	orr.w	r3, r3, #8
 800cc9c:	81a3      	strh	r3, [r4, #12]
 800cc9e:	6923      	ldr	r3, [r4, #16]
 800cca0:	b94b      	cbnz	r3, 800ccb6 <__swsetup_r+0x9a>
 800cca2:	89a3      	ldrh	r3, [r4, #12]
 800cca4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccac:	d003      	beq.n	800ccb6 <__swsetup_r+0x9a>
 800ccae:	4621      	mov	r1, r4
 800ccb0:	4630      	mov	r0, r6
 800ccb2:	f000 fa01 	bl	800d0b8 <__smakebuf_r>
 800ccb6:	89a0      	ldrh	r0, [r4, #12]
 800ccb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ccbc:	f010 0301 	ands.w	r3, r0, #1
 800ccc0:	d00a      	beq.n	800ccd8 <__swsetup_r+0xbc>
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	60a3      	str	r3, [r4, #8]
 800ccc6:	6963      	ldr	r3, [r4, #20]
 800ccc8:	425b      	negs	r3, r3
 800ccca:	61a3      	str	r3, [r4, #24]
 800cccc:	6923      	ldr	r3, [r4, #16]
 800ccce:	b943      	cbnz	r3, 800cce2 <__swsetup_r+0xc6>
 800ccd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ccd4:	d1ba      	bne.n	800cc4c <__swsetup_r+0x30>
 800ccd6:	bd70      	pop	{r4, r5, r6, pc}
 800ccd8:	0781      	lsls	r1, r0, #30
 800ccda:	bf58      	it	pl
 800ccdc:	6963      	ldrpl	r3, [r4, #20]
 800ccde:	60a3      	str	r3, [r4, #8]
 800cce0:	e7f4      	b.n	800cccc <__swsetup_r+0xb0>
 800cce2:	2000      	movs	r0, #0
 800cce4:	e7f7      	b.n	800ccd6 <__swsetup_r+0xba>
 800cce6:	bf00      	nop
 800cce8:	20002454 	.word	0x20002454
 800ccec:	0800df9c 	.word	0x0800df9c
 800ccf0:	0800dfbc 	.word	0x0800dfbc
 800ccf4:	0800df7c 	.word	0x0800df7c

0800ccf8 <__sflush_r>:
 800ccf8:	898a      	ldrh	r2, [r1, #12]
 800ccfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccfe:	4605      	mov	r5, r0
 800cd00:	0710      	lsls	r0, r2, #28
 800cd02:	460c      	mov	r4, r1
 800cd04:	d458      	bmi.n	800cdb8 <__sflush_r+0xc0>
 800cd06:	684b      	ldr	r3, [r1, #4]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	dc05      	bgt.n	800cd18 <__sflush_r+0x20>
 800cd0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	dc02      	bgt.n	800cd18 <__sflush_r+0x20>
 800cd12:	2000      	movs	r0, #0
 800cd14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd1a:	2e00      	cmp	r6, #0
 800cd1c:	d0f9      	beq.n	800cd12 <__sflush_r+0x1a>
 800cd1e:	2300      	movs	r3, #0
 800cd20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cd24:	682f      	ldr	r7, [r5, #0]
 800cd26:	602b      	str	r3, [r5, #0]
 800cd28:	d032      	beq.n	800cd90 <__sflush_r+0x98>
 800cd2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd2c:	89a3      	ldrh	r3, [r4, #12]
 800cd2e:	075a      	lsls	r2, r3, #29
 800cd30:	d505      	bpl.n	800cd3e <__sflush_r+0x46>
 800cd32:	6863      	ldr	r3, [r4, #4]
 800cd34:	1ac0      	subs	r0, r0, r3
 800cd36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd38:	b10b      	cbz	r3, 800cd3e <__sflush_r+0x46>
 800cd3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd3c:	1ac0      	subs	r0, r0, r3
 800cd3e:	2300      	movs	r3, #0
 800cd40:	4602      	mov	r2, r0
 800cd42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd44:	6a21      	ldr	r1, [r4, #32]
 800cd46:	4628      	mov	r0, r5
 800cd48:	47b0      	blx	r6
 800cd4a:	1c43      	adds	r3, r0, #1
 800cd4c:	89a3      	ldrh	r3, [r4, #12]
 800cd4e:	d106      	bne.n	800cd5e <__sflush_r+0x66>
 800cd50:	6829      	ldr	r1, [r5, #0]
 800cd52:	291d      	cmp	r1, #29
 800cd54:	d82c      	bhi.n	800cdb0 <__sflush_r+0xb8>
 800cd56:	4a2a      	ldr	r2, [pc, #168]	; (800ce00 <__sflush_r+0x108>)
 800cd58:	40ca      	lsrs	r2, r1
 800cd5a:	07d6      	lsls	r6, r2, #31
 800cd5c:	d528      	bpl.n	800cdb0 <__sflush_r+0xb8>
 800cd5e:	2200      	movs	r2, #0
 800cd60:	6062      	str	r2, [r4, #4]
 800cd62:	04d9      	lsls	r1, r3, #19
 800cd64:	6922      	ldr	r2, [r4, #16]
 800cd66:	6022      	str	r2, [r4, #0]
 800cd68:	d504      	bpl.n	800cd74 <__sflush_r+0x7c>
 800cd6a:	1c42      	adds	r2, r0, #1
 800cd6c:	d101      	bne.n	800cd72 <__sflush_r+0x7a>
 800cd6e:	682b      	ldr	r3, [r5, #0]
 800cd70:	b903      	cbnz	r3, 800cd74 <__sflush_r+0x7c>
 800cd72:	6560      	str	r0, [r4, #84]	; 0x54
 800cd74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd76:	602f      	str	r7, [r5, #0]
 800cd78:	2900      	cmp	r1, #0
 800cd7a:	d0ca      	beq.n	800cd12 <__sflush_r+0x1a>
 800cd7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd80:	4299      	cmp	r1, r3
 800cd82:	d002      	beq.n	800cd8a <__sflush_r+0x92>
 800cd84:	4628      	mov	r0, r5
 800cd86:	f000 f9d7 	bl	800d138 <_free_r>
 800cd8a:	2000      	movs	r0, #0
 800cd8c:	6360      	str	r0, [r4, #52]	; 0x34
 800cd8e:	e7c1      	b.n	800cd14 <__sflush_r+0x1c>
 800cd90:	6a21      	ldr	r1, [r4, #32]
 800cd92:	2301      	movs	r3, #1
 800cd94:	4628      	mov	r0, r5
 800cd96:	47b0      	blx	r6
 800cd98:	1c41      	adds	r1, r0, #1
 800cd9a:	d1c7      	bne.n	800cd2c <__sflush_r+0x34>
 800cd9c:	682b      	ldr	r3, [r5, #0]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d0c4      	beq.n	800cd2c <__sflush_r+0x34>
 800cda2:	2b1d      	cmp	r3, #29
 800cda4:	d001      	beq.n	800cdaa <__sflush_r+0xb2>
 800cda6:	2b16      	cmp	r3, #22
 800cda8:	d101      	bne.n	800cdae <__sflush_r+0xb6>
 800cdaa:	602f      	str	r7, [r5, #0]
 800cdac:	e7b1      	b.n	800cd12 <__sflush_r+0x1a>
 800cdae:	89a3      	ldrh	r3, [r4, #12]
 800cdb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdb4:	81a3      	strh	r3, [r4, #12]
 800cdb6:	e7ad      	b.n	800cd14 <__sflush_r+0x1c>
 800cdb8:	690f      	ldr	r7, [r1, #16]
 800cdba:	2f00      	cmp	r7, #0
 800cdbc:	d0a9      	beq.n	800cd12 <__sflush_r+0x1a>
 800cdbe:	0793      	lsls	r3, r2, #30
 800cdc0:	680e      	ldr	r6, [r1, #0]
 800cdc2:	bf08      	it	eq
 800cdc4:	694b      	ldreq	r3, [r1, #20]
 800cdc6:	600f      	str	r7, [r1, #0]
 800cdc8:	bf18      	it	ne
 800cdca:	2300      	movne	r3, #0
 800cdcc:	eba6 0807 	sub.w	r8, r6, r7
 800cdd0:	608b      	str	r3, [r1, #8]
 800cdd2:	f1b8 0f00 	cmp.w	r8, #0
 800cdd6:	dd9c      	ble.n	800cd12 <__sflush_r+0x1a>
 800cdd8:	6a21      	ldr	r1, [r4, #32]
 800cdda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cddc:	4643      	mov	r3, r8
 800cdde:	463a      	mov	r2, r7
 800cde0:	4628      	mov	r0, r5
 800cde2:	47b0      	blx	r6
 800cde4:	2800      	cmp	r0, #0
 800cde6:	dc06      	bgt.n	800cdf6 <__sflush_r+0xfe>
 800cde8:	89a3      	ldrh	r3, [r4, #12]
 800cdea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdee:	81a3      	strh	r3, [r4, #12]
 800cdf0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf4:	e78e      	b.n	800cd14 <__sflush_r+0x1c>
 800cdf6:	4407      	add	r7, r0
 800cdf8:	eba8 0800 	sub.w	r8, r8, r0
 800cdfc:	e7e9      	b.n	800cdd2 <__sflush_r+0xda>
 800cdfe:	bf00      	nop
 800ce00:	20400001 	.word	0x20400001

0800ce04 <_fflush_r>:
 800ce04:	b538      	push	{r3, r4, r5, lr}
 800ce06:	690b      	ldr	r3, [r1, #16]
 800ce08:	4605      	mov	r5, r0
 800ce0a:	460c      	mov	r4, r1
 800ce0c:	b913      	cbnz	r3, 800ce14 <_fflush_r+0x10>
 800ce0e:	2500      	movs	r5, #0
 800ce10:	4628      	mov	r0, r5
 800ce12:	bd38      	pop	{r3, r4, r5, pc}
 800ce14:	b118      	cbz	r0, 800ce1e <_fflush_r+0x1a>
 800ce16:	6983      	ldr	r3, [r0, #24]
 800ce18:	b90b      	cbnz	r3, 800ce1e <_fflush_r+0x1a>
 800ce1a:	f000 f887 	bl	800cf2c <__sinit>
 800ce1e:	4b14      	ldr	r3, [pc, #80]	; (800ce70 <_fflush_r+0x6c>)
 800ce20:	429c      	cmp	r4, r3
 800ce22:	d11b      	bne.n	800ce5c <_fflush_r+0x58>
 800ce24:	686c      	ldr	r4, [r5, #4]
 800ce26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d0ef      	beq.n	800ce0e <_fflush_r+0xa>
 800ce2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ce30:	07d0      	lsls	r0, r2, #31
 800ce32:	d404      	bmi.n	800ce3e <_fflush_r+0x3a>
 800ce34:	0599      	lsls	r1, r3, #22
 800ce36:	d402      	bmi.n	800ce3e <_fflush_r+0x3a>
 800ce38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce3a:	f000 f915 	bl	800d068 <__retarget_lock_acquire_recursive>
 800ce3e:	4628      	mov	r0, r5
 800ce40:	4621      	mov	r1, r4
 800ce42:	f7ff ff59 	bl	800ccf8 <__sflush_r>
 800ce46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce48:	07da      	lsls	r2, r3, #31
 800ce4a:	4605      	mov	r5, r0
 800ce4c:	d4e0      	bmi.n	800ce10 <_fflush_r+0xc>
 800ce4e:	89a3      	ldrh	r3, [r4, #12]
 800ce50:	059b      	lsls	r3, r3, #22
 800ce52:	d4dd      	bmi.n	800ce10 <_fflush_r+0xc>
 800ce54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce56:	f000 f908 	bl	800d06a <__retarget_lock_release_recursive>
 800ce5a:	e7d9      	b.n	800ce10 <_fflush_r+0xc>
 800ce5c:	4b05      	ldr	r3, [pc, #20]	; (800ce74 <_fflush_r+0x70>)
 800ce5e:	429c      	cmp	r4, r3
 800ce60:	d101      	bne.n	800ce66 <_fflush_r+0x62>
 800ce62:	68ac      	ldr	r4, [r5, #8]
 800ce64:	e7df      	b.n	800ce26 <_fflush_r+0x22>
 800ce66:	4b04      	ldr	r3, [pc, #16]	; (800ce78 <_fflush_r+0x74>)
 800ce68:	429c      	cmp	r4, r3
 800ce6a:	bf08      	it	eq
 800ce6c:	68ec      	ldreq	r4, [r5, #12]
 800ce6e:	e7da      	b.n	800ce26 <_fflush_r+0x22>
 800ce70:	0800df9c 	.word	0x0800df9c
 800ce74:	0800dfbc 	.word	0x0800dfbc
 800ce78:	0800df7c 	.word	0x0800df7c

0800ce7c <std>:
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	b510      	push	{r4, lr}
 800ce80:	4604      	mov	r4, r0
 800ce82:	e9c0 3300 	strd	r3, r3, [r0]
 800ce86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce8a:	6083      	str	r3, [r0, #8]
 800ce8c:	8181      	strh	r1, [r0, #12]
 800ce8e:	6643      	str	r3, [r0, #100]	; 0x64
 800ce90:	81c2      	strh	r2, [r0, #14]
 800ce92:	6183      	str	r3, [r0, #24]
 800ce94:	4619      	mov	r1, r3
 800ce96:	2208      	movs	r2, #8
 800ce98:	305c      	adds	r0, #92	; 0x5c
 800ce9a:	f7ff fdd9 	bl	800ca50 <memset>
 800ce9e:	4b05      	ldr	r3, [pc, #20]	; (800ceb4 <std+0x38>)
 800cea0:	6263      	str	r3, [r4, #36]	; 0x24
 800cea2:	4b05      	ldr	r3, [pc, #20]	; (800ceb8 <std+0x3c>)
 800cea4:	62a3      	str	r3, [r4, #40]	; 0x28
 800cea6:	4b05      	ldr	r3, [pc, #20]	; (800cebc <std+0x40>)
 800cea8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ceaa:	4b05      	ldr	r3, [pc, #20]	; (800cec0 <std+0x44>)
 800ceac:	6224      	str	r4, [r4, #32]
 800ceae:	6323      	str	r3, [r4, #48]	; 0x30
 800ceb0:	bd10      	pop	{r4, pc}
 800ceb2:	bf00      	nop
 800ceb4:	0800d3a9 	.word	0x0800d3a9
 800ceb8:	0800d3cb 	.word	0x0800d3cb
 800cebc:	0800d403 	.word	0x0800d403
 800cec0:	0800d427 	.word	0x0800d427

0800cec4 <_cleanup_r>:
 800cec4:	4901      	ldr	r1, [pc, #4]	; (800cecc <_cleanup_r+0x8>)
 800cec6:	f000 b8af 	b.w	800d028 <_fwalk_reent>
 800ceca:	bf00      	nop
 800cecc:	0800ce05 	.word	0x0800ce05

0800ced0 <__sfmoreglue>:
 800ced0:	b570      	push	{r4, r5, r6, lr}
 800ced2:	2268      	movs	r2, #104	; 0x68
 800ced4:	1e4d      	subs	r5, r1, #1
 800ced6:	4355      	muls	r5, r2
 800ced8:	460e      	mov	r6, r1
 800ceda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cede:	f000 f997 	bl	800d210 <_malloc_r>
 800cee2:	4604      	mov	r4, r0
 800cee4:	b140      	cbz	r0, 800cef8 <__sfmoreglue+0x28>
 800cee6:	2100      	movs	r1, #0
 800cee8:	e9c0 1600 	strd	r1, r6, [r0]
 800ceec:	300c      	adds	r0, #12
 800ceee:	60a0      	str	r0, [r4, #8]
 800cef0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cef4:	f7ff fdac 	bl	800ca50 <memset>
 800cef8:	4620      	mov	r0, r4
 800cefa:	bd70      	pop	{r4, r5, r6, pc}

0800cefc <__sfp_lock_acquire>:
 800cefc:	4801      	ldr	r0, [pc, #4]	; (800cf04 <__sfp_lock_acquire+0x8>)
 800cefe:	f000 b8b3 	b.w	800d068 <__retarget_lock_acquire_recursive>
 800cf02:	bf00      	nop
 800cf04:	200031af 	.word	0x200031af

0800cf08 <__sfp_lock_release>:
 800cf08:	4801      	ldr	r0, [pc, #4]	; (800cf10 <__sfp_lock_release+0x8>)
 800cf0a:	f000 b8ae 	b.w	800d06a <__retarget_lock_release_recursive>
 800cf0e:	bf00      	nop
 800cf10:	200031af 	.word	0x200031af

0800cf14 <__sinit_lock_acquire>:
 800cf14:	4801      	ldr	r0, [pc, #4]	; (800cf1c <__sinit_lock_acquire+0x8>)
 800cf16:	f000 b8a7 	b.w	800d068 <__retarget_lock_acquire_recursive>
 800cf1a:	bf00      	nop
 800cf1c:	200031b0 	.word	0x200031b0

0800cf20 <__sinit_lock_release>:
 800cf20:	4801      	ldr	r0, [pc, #4]	; (800cf28 <__sinit_lock_release+0x8>)
 800cf22:	f000 b8a2 	b.w	800d06a <__retarget_lock_release_recursive>
 800cf26:	bf00      	nop
 800cf28:	200031b0 	.word	0x200031b0

0800cf2c <__sinit>:
 800cf2c:	b510      	push	{r4, lr}
 800cf2e:	4604      	mov	r4, r0
 800cf30:	f7ff fff0 	bl	800cf14 <__sinit_lock_acquire>
 800cf34:	69a3      	ldr	r3, [r4, #24]
 800cf36:	b11b      	cbz	r3, 800cf40 <__sinit+0x14>
 800cf38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf3c:	f7ff bff0 	b.w	800cf20 <__sinit_lock_release>
 800cf40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cf44:	6523      	str	r3, [r4, #80]	; 0x50
 800cf46:	4b13      	ldr	r3, [pc, #76]	; (800cf94 <__sinit+0x68>)
 800cf48:	4a13      	ldr	r2, [pc, #76]	; (800cf98 <__sinit+0x6c>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	62a2      	str	r2, [r4, #40]	; 0x28
 800cf4e:	42a3      	cmp	r3, r4
 800cf50:	bf04      	itt	eq
 800cf52:	2301      	moveq	r3, #1
 800cf54:	61a3      	streq	r3, [r4, #24]
 800cf56:	4620      	mov	r0, r4
 800cf58:	f000 f820 	bl	800cf9c <__sfp>
 800cf5c:	6060      	str	r0, [r4, #4]
 800cf5e:	4620      	mov	r0, r4
 800cf60:	f000 f81c 	bl	800cf9c <__sfp>
 800cf64:	60a0      	str	r0, [r4, #8]
 800cf66:	4620      	mov	r0, r4
 800cf68:	f000 f818 	bl	800cf9c <__sfp>
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	60e0      	str	r0, [r4, #12]
 800cf70:	2104      	movs	r1, #4
 800cf72:	6860      	ldr	r0, [r4, #4]
 800cf74:	f7ff ff82 	bl	800ce7c <std>
 800cf78:	68a0      	ldr	r0, [r4, #8]
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	2109      	movs	r1, #9
 800cf7e:	f7ff ff7d 	bl	800ce7c <std>
 800cf82:	68e0      	ldr	r0, [r4, #12]
 800cf84:	2202      	movs	r2, #2
 800cf86:	2112      	movs	r1, #18
 800cf88:	f7ff ff78 	bl	800ce7c <std>
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	61a3      	str	r3, [r4, #24]
 800cf90:	e7d2      	b.n	800cf38 <__sinit+0xc>
 800cf92:	bf00      	nop
 800cf94:	0800df78 	.word	0x0800df78
 800cf98:	0800cec5 	.word	0x0800cec5

0800cf9c <__sfp>:
 800cf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf9e:	4607      	mov	r7, r0
 800cfa0:	f7ff ffac 	bl	800cefc <__sfp_lock_acquire>
 800cfa4:	4b1e      	ldr	r3, [pc, #120]	; (800d020 <__sfp+0x84>)
 800cfa6:	681e      	ldr	r6, [r3, #0]
 800cfa8:	69b3      	ldr	r3, [r6, #24]
 800cfaa:	b913      	cbnz	r3, 800cfb2 <__sfp+0x16>
 800cfac:	4630      	mov	r0, r6
 800cfae:	f7ff ffbd 	bl	800cf2c <__sinit>
 800cfb2:	3648      	adds	r6, #72	; 0x48
 800cfb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cfb8:	3b01      	subs	r3, #1
 800cfba:	d503      	bpl.n	800cfc4 <__sfp+0x28>
 800cfbc:	6833      	ldr	r3, [r6, #0]
 800cfbe:	b30b      	cbz	r3, 800d004 <__sfp+0x68>
 800cfc0:	6836      	ldr	r6, [r6, #0]
 800cfc2:	e7f7      	b.n	800cfb4 <__sfp+0x18>
 800cfc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cfc8:	b9d5      	cbnz	r5, 800d000 <__sfp+0x64>
 800cfca:	4b16      	ldr	r3, [pc, #88]	; (800d024 <__sfp+0x88>)
 800cfcc:	60e3      	str	r3, [r4, #12]
 800cfce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cfd2:	6665      	str	r5, [r4, #100]	; 0x64
 800cfd4:	f000 f847 	bl	800d066 <__retarget_lock_init_recursive>
 800cfd8:	f7ff ff96 	bl	800cf08 <__sfp_lock_release>
 800cfdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cfe0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cfe4:	6025      	str	r5, [r4, #0]
 800cfe6:	61a5      	str	r5, [r4, #24]
 800cfe8:	2208      	movs	r2, #8
 800cfea:	4629      	mov	r1, r5
 800cfec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cff0:	f7ff fd2e 	bl	800ca50 <memset>
 800cff4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cff8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cffc:	4620      	mov	r0, r4
 800cffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d000:	3468      	adds	r4, #104	; 0x68
 800d002:	e7d9      	b.n	800cfb8 <__sfp+0x1c>
 800d004:	2104      	movs	r1, #4
 800d006:	4638      	mov	r0, r7
 800d008:	f7ff ff62 	bl	800ced0 <__sfmoreglue>
 800d00c:	4604      	mov	r4, r0
 800d00e:	6030      	str	r0, [r6, #0]
 800d010:	2800      	cmp	r0, #0
 800d012:	d1d5      	bne.n	800cfc0 <__sfp+0x24>
 800d014:	f7ff ff78 	bl	800cf08 <__sfp_lock_release>
 800d018:	230c      	movs	r3, #12
 800d01a:	603b      	str	r3, [r7, #0]
 800d01c:	e7ee      	b.n	800cffc <__sfp+0x60>
 800d01e:	bf00      	nop
 800d020:	0800df78 	.word	0x0800df78
 800d024:	ffff0001 	.word	0xffff0001

0800d028 <_fwalk_reent>:
 800d028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d02c:	4606      	mov	r6, r0
 800d02e:	4688      	mov	r8, r1
 800d030:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d034:	2700      	movs	r7, #0
 800d036:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d03a:	f1b9 0901 	subs.w	r9, r9, #1
 800d03e:	d505      	bpl.n	800d04c <_fwalk_reent+0x24>
 800d040:	6824      	ldr	r4, [r4, #0]
 800d042:	2c00      	cmp	r4, #0
 800d044:	d1f7      	bne.n	800d036 <_fwalk_reent+0xe>
 800d046:	4638      	mov	r0, r7
 800d048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d04c:	89ab      	ldrh	r3, [r5, #12]
 800d04e:	2b01      	cmp	r3, #1
 800d050:	d907      	bls.n	800d062 <_fwalk_reent+0x3a>
 800d052:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d056:	3301      	adds	r3, #1
 800d058:	d003      	beq.n	800d062 <_fwalk_reent+0x3a>
 800d05a:	4629      	mov	r1, r5
 800d05c:	4630      	mov	r0, r6
 800d05e:	47c0      	blx	r8
 800d060:	4307      	orrs	r7, r0
 800d062:	3568      	adds	r5, #104	; 0x68
 800d064:	e7e9      	b.n	800d03a <_fwalk_reent+0x12>

0800d066 <__retarget_lock_init_recursive>:
 800d066:	4770      	bx	lr

0800d068 <__retarget_lock_acquire_recursive>:
 800d068:	4770      	bx	lr

0800d06a <__retarget_lock_release_recursive>:
 800d06a:	4770      	bx	lr

0800d06c <__swhatbuf_r>:
 800d06c:	b570      	push	{r4, r5, r6, lr}
 800d06e:	460e      	mov	r6, r1
 800d070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d074:	2900      	cmp	r1, #0
 800d076:	b096      	sub	sp, #88	; 0x58
 800d078:	4614      	mov	r4, r2
 800d07a:	461d      	mov	r5, r3
 800d07c:	da08      	bge.n	800d090 <__swhatbuf_r+0x24>
 800d07e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d082:	2200      	movs	r2, #0
 800d084:	602a      	str	r2, [r5, #0]
 800d086:	061a      	lsls	r2, r3, #24
 800d088:	d410      	bmi.n	800d0ac <__swhatbuf_r+0x40>
 800d08a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d08e:	e00e      	b.n	800d0ae <__swhatbuf_r+0x42>
 800d090:	466a      	mov	r2, sp
 800d092:	f000 f9ef 	bl	800d474 <_fstat_r>
 800d096:	2800      	cmp	r0, #0
 800d098:	dbf1      	blt.n	800d07e <__swhatbuf_r+0x12>
 800d09a:	9a01      	ldr	r2, [sp, #4]
 800d09c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d0a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d0a4:	425a      	negs	r2, r3
 800d0a6:	415a      	adcs	r2, r3
 800d0a8:	602a      	str	r2, [r5, #0]
 800d0aa:	e7ee      	b.n	800d08a <__swhatbuf_r+0x1e>
 800d0ac:	2340      	movs	r3, #64	; 0x40
 800d0ae:	2000      	movs	r0, #0
 800d0b0:	6023      	str	r3, [r4, #0]
 800d0b2:	b016      	add	sp, #88	; 0x58
 800d0b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d0b8 <__smakebuf_r>:
 800d0b8:	898b      	ldrh	r3, [r1, #12]
 800d0ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d0bc:	079d      	lsls	r5, r3, #30
 800d0be:	4606      	mov	r6, r0
 800d0c0:	460c      	mov	r4, r1
 800d0c2:	d507      	bpl.n	800d0d4 <__smakebuf_r+0x1c>
 800d0c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d0c8:	6023      	str	r3, [r4, #0]
 800d0ca:	6123      	str	r3, [r4, #16]
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	6163      	str	r3, [r4, #20]
 800d0d0:	b002      	add	sp, #8
 800d0d2:	bd70      	pop	{r4, r5, r6, pc}
 800d0d4:	ab01      	add	r3, sp, #4
 800d0d6:	466a      	mov	r2, sp
 800d0d8:	f7ff ffc8 	bl	800d06c <__swhatbuf_r>
 800d0dc:	9900      	ldr	r1, [sp, #0]
 800d0de:	4605      	mov	r5, r0
 800d0e0:	4630      	mov	r0, r6
 800d0e2:	f000 f895 	bl	800d210 <_malloc_r>
 800d0e6:	b948      	cbnz	r0, 800d0fc <__smakebuf_r+0x44>
 800d0e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0ec:	059a      	lsls	r2, r3, #22
 800d0ee:	d4ef      	bmi.n	800d0d0 <__smakebuf_r+0x18>
 800d0f0:	f023 0303 	bic.w	r3, r3, #3
 800d0f4:	f043 0302 	orr.w	r3, r3, #2
 800d0f8:	81a3      	strh	r3, [r4, #12]
 800d0fa:	e7e3      	b.n	800d0c4 <__smakebuf_r+0xc>
 800d0fc:	4b0d      	ldr	r3, [pc, #52]	; (800d134 <__smakebuf_r+0x7c>)
 800d0fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800d100:	89a3      	ldrh	r3, [r4, #12]
 800d102:	6020      	str	r0, [r4, #0]
 800d104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d108:	81a3      	strh	r3, [r4, #12]
 800d10a:	9b00      	ldr	r3, [sp, #0]
 800d10c:	6163      	str	r3, [r4, #20]
 800d10e:	9b01      	ldr	r3, [sp, #4]
 800d110:	6120      	str	r0, [r4, #16]
 800d112:	b15b      	cbz	r3, 800d12c <__smakebuf_r+0x74>
 800d114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d118:	4630      	mov	r0, r6
 800d11a:	f000 f9bd 	bl	800d498 <_isatty_r>
 800d11e:	b128      	cbz	r0, 800d12c <__smakebuf_r+0x74>
 800d120:	89a3      	ldrh	r3, [r4, #12]
 800d122:	f023 0303 	bic.w	r3, r3, #3
 800d126:	f043 0301 	orr.w	r3, r3, #1
 800d12a:	81a3      	strh	r3, [r4, #12]
 800d12c:	89a0      	ldrh	r0, [r4, #12]
 800d12e:	4305      	orrs	r5, r0
 800d130:	81a5      	strh	r5, [r4, #12]
 800d132:	e7cd      	b.n	800d0d0 <__smakebuf_r+0x18>
 800d134:	0800cec5 	.word	0x0800cec5

0800d138 <_free_r>:
 800d138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d13a:	2900      	cmp	r1, #0
 800d13c:	d044      	beq.n	800d1c8 <_free_r+0x90>
 800d13e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d142:	9001      	str	r0, [sp, #4]
 800d144:	2b00      	cmp	r3, #0
 800d146:	f1a1 0404 	sub.w	r4, r1, #4
 800d14a:	bfb8      	it	lt
 800d14c:	18e4      	addlt	r4, r4, r3
 800d14e:	f000 f9c5 	bl	800d4dc <__malloc_lock>
 800d152:	4a1e      	ldr	r2, [pc, #120]	; (800d1cc <_free_r+0x94>)
 800d154:	9801      	ldr	r0, [sp, #4]
 800d156:	6813      	ldr	r3, [r2, #0]
 800d158:	b933      	cbnz	r3, 800d168 <_free_r+0x30>
 800d15a:	6063      	str	r3, [r4, #4]
 800d15c:	6014      	str	r4, [r2, #0]
 800d15e:	b003      	add	sp, #12
 800d160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d164:	f000 b9c0 	b.w	800d4e8 <__malloc_unlock>
 800d168:	42a3      	cmp	r3, r4
 800d16a:	d908      	bls.n	800d17e <_free_r+0x46>
 800d16c:	6825      	ldr	r5, [r4, #0]
 800d16e:	1961      	adds	r1, r4, r5
 800d170:	428b      	cmp	r3, r1
 800d172:	bf01      	itttt	eq
 800d174:	6819      	ldreq	r1, [r3, #0]
 800d176:	685b      	ldreq	r3, [r3, #4]
 800d178:	1949      	addeq	r1, r1, r5
 800d17a:	6021      	streq	r1, [r4, #0]
 800d17c:	e7ed      	b.n	800d15a <_free_r+0x22>
 800d17e:	461a      	mov	r2, r3
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	b10b      	cbz	r3, 800d188 <_free_r+0x50>
 800d184:	42a3      	cmp	r3, r4
 800d186:	d9fa      	bls.n	800d17e <_free_r+0x46>
 800d188:	6811      	ldr	r1, [r2, #0]
 800d18a:	1855      	adds	r5, r2, r1
 800d18c:	42a5      	cmp	r5, r4
 800d18e:	d10b      	bne.n	800d1a8 <_free_r+0x70>
 800d190:	6824      	ldr	r4, [r4, #0]
 800d192:	4421      	add	r1, r4
 800d194:	1854      	adds	r4, r2, r1
 800d196:	42a3      	cmp	r3, r4
 800d198:	6011      	str	r1, [r2, #0]
 800d19a:	d1e0      	bne.n	800d15e <_free_r+0x26>
 800d19c:	681c      	ldr	r4, [r3, #0]
 800d19e:	685b      	ldr	r3, [r3, #4]
 800d1a0:	6053      	str	r3, [r2, #4]
 800d1a2:	4421      	add	r1, r4
 800d1a4:	6011      	str	r1, [r2, #0]
 800d1a6:	e7da      	b.n	800d15e <_free_r+0x26>
 800d1a8:	d902      	bls.n	800d1b0 <_free_r+0x78>
 800d1aa:	230c      	movs	r3, #12
 800d1ac:	6003      	str	r3, [r0, #0]
 800d1ae:	e7d6      	b.n	800d15e <_free_r+0x26>
 800d1b0:	6825      	ldr	r5, [r4, #0]
 800d1b2:	1961      	adds	r1, r4, r5
 800d1b4:	428b      	cmp	r3, r1
 800d1b6:	bf04      	itt	eq
 800d1b8:	6819      	ldreq	r1, [r3, #0]
 800d1ba:	685b      	ldreq	r3, [r3, #4]
 800d1bc:	6063      	str	r3, [r4, #4]
 800d1be:	bf04      	itt	eq
 800d1c0:	1949      	addeq	r1, r1, r5
 800d1c2:	6021      	streq	r1, [r4, #0]
 800d1c4:	6054      	str	r4, [r2, #4]
 800d1c6:	e7ca      	b.n	800d15e <_free_r+0x26>
 800d1c8:	b003      	add	sp, #12
 800d1ca:	bd30      	pop	{r4, r5, pc}
 800d1cc:	200031b4 	.word	0x200031b4

0800d1d0 <sbrk_aligned>:
 800d1d0:	b570      	push	{r4, r5, r6, lr}
 800d1d2:	4e0e      	ldr	r6, [pc, #56]	; (800d20c <sbrk_aligned+0x3c>)
 800d1d4:	460c      	mov	r4, r1
 800d1d6:	6831      	ldr	r1, [r6, #0]
 800d1d8:	4605      	mov	r5, r0
 800d1da:	b911      	cbnz	r1, 800d1e2 <sbrk_aligned+0x12>
 800d1dc:	f000 f8d4 	bl	800d388 <_sbrk_r>
 800d1e0:	6030      	str	r0, [r6, #0]
 800d1e2:	4621      	mov	r1, r4
 800d1e4:	4628      	mov	r0, r5
 800d1e6:	f000 f8cf 	bl	800d388 <_sbrk_r>
 800d1ea:	1c43      	adds	r3, r0, #1
 800d1ec:	d00a      	beq.n	800d204 <sbrk_aligned+0x34>
 800d1ee:	1cc4      	adds	r4, r0, #3
 800d1f0:	f024 0403 	bic.w	r4, r4, #3
 800d1f4:	42a0      	cmp	r0, r4
 800d1f6:	d007      	beq.n	800d208 <sbrk_aligned+0x38>
 800d1f8:	1a21      	subs	r1, r4, r0
 800d1fa:	4628      	mov	r0, r5
 800d1fc:	f000 f8c4 	bl	800d388 <_sbrk_r>
 800d200:	3001      	adds	r0, #1
 800d202:	d101      	bne.n	800d208 <sbrk_aligned+0x38>
 800d204:	f04f 34ff 	mov.w	r4, #4294967295
 800d208:	4620      	mov	r0, r4
 800d20a:	bd70      	pop	{r4, r5, r6, pc}
 800d20c:	200031b8 	.word	0x200031b8

0800d210 <_malloc_r>:
 800d210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d214:	1ccd      	adds	r5, r1, #3
 800d216:	f025 0503 	bic.w	r5, r5, #3
 800d21a:	3508      	adds	r5, #8
 800d21c:	2d0c      	cmp	r5, #12
 800d21e:	bf38      	it	cc
 800d220:	250c      	movcc	r5, #12
 800d222:	2d00      	cmp	r5, #0
 800d224:	4607      	mov	r7, r0
 800d226:	db01      	blt.n	800d22c <_malloc_r+0x1c>
 800d228:	42a9      	cmp	r1, r5
 800d22a:	d905      	bls.n	800d238 <_malloc_r+0x28>
 800d22c:	230c      	movs	r3, #12
 800d22e:	603b      	str	r3, [r7, #0]
 800d230:	2600      	movs	r6, #0
 800d232:	4630      	mov	r0, r6
 800d234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d238:	4e2e      	ldr	r6, [pc, #184]	; (800d2f4 <_malloc_r+0xe4>)
 800d23a:	f000 f94f 	bl	800d4dc <__malloc_lock>
 800d23e:	6833      	ldr	r3, [r6, #0]
 800d240:	461c      	mov	r4, r3
 800d242:	bb34      	cbnz	r4, 800d292 <_malloc_r+0x82>
 800d244:	4629      	mov	r1, r5
 800d246:	4638      	mov	r0, r7
 800d248:	f7ff ffc2 	bl	800d1d0 <sbrk_aligned>
 800d24c:	1c43      	adds	r3, r0, #1
 800d24e:	4604      	mov	r4, r0
 800d250:	d14d      	bne.n	800d2ee <_malloc_r+0xde>
 800d252:	6834      	ldr	r4, [r6, #0]
 800d254:	4626      	mov	r6, r4
 800d256:	2e00      	cmp	r6, #0
 800d258:	d140      	bne.n	800d2dc <_malloc_r+0xcc>
 800d25a:	6823      	ldr	r3, [r4, #0]
 800d25c:	4631      	mov	r1, r6
 800d25e:	4638      	mov	r0, r7
 800d260:	eb04 0803 	add.w	r8, r4, r3
 800d264:	f000 f890 	bl	800d388 <_sbrk_r>
 800d268:	4580      	cmp	r8, r0
 800d26a:	d13a      	bne.n	800d2e2 <_malloc_r+0xd2>
 800d26c:	6821      	ldr	r1, [r4, #0]
 800d26e:	3503      	adds	r5, #3
 800d270:	1a6d      	subs	r5, r5, r1
 800d272:	f025 0503 	bic.w	r5, r5, #3
 800d276:	3508      	adds	r5, #8
 800d278:	2d0c      	cmp	r5, #12
 800d27a:	bf38      	it	cc
 800d27c:	250c      	movcc	r5, #12
 800d27e:	4629      	mov	r1, r5
 800d280:	4638      	mov	r0, r7
 800d282:	f7ff ffa5 	bl	800d1d0 <sbrk_aligned>
 800d286:	3001      	adds	r0, #1
 800d288:	d02b      	beq.n	800d2e2 <_malloc_r+0xd2>
 800d28a:	6823      	ldr	r3, [r4, #0]
 800d28c:	442b      	add	r3, r5
 800d28e:	6023      	str	r3, [r4, #0]
 800d290:	e00e      	b.n	800d2b0 <_malloc_r+0xa0>
 800d292:	6822      	ldr	r2, [r4, #0]
 800d294:	1b52      	subs	r2, r2, r5
 800d296:	d41e      	bmi.n	800d2d6 <_malloc_r+0xc6>
 800d298:	2a0b      	cmp	r2, #11
 800d29a:	d916      	bls.n	800d2ca <_malloc_r+0xba>
 800d29c:	1961      	adds	r1, r4, r5
 800d29e:	42a3      	cmp	r3, r4
 800d2a0:	6025      	str	r5, [r4, #0]
 800d2a2:	bf18      	it	ne
 800d2a4:	6059      	strne	r1, [r3, #4]
 800d2a6:	6863      	ldr	r3, [r4, #4]
 800d2a8:	bf08      	it	eq
 800d2aa:	6031      	streq	r1, [r6, #0]
 800d2ac:	5162      	str	r2, [r4, r5]
 800d2ae:	604b      	str	r3, [r1, #4]
 800d2b0:	4638      	mov	r0, r7
 800d2b2:	f104 060b 	add.w	r6, r4, #11
 800d2b6:	f000 f917 	bl	800d4e8 <__malloc_unlock>
 800d2ba:	f026 0607 	bic.w	r6, r6, #7
 800d2be:	1d23      	adds	r3, r4, #4
 800d2c0:	1af2      	subs	r2, r6, r3
 800d2c2:	d0b6      	beq.n	800d232 <_malloc_r+0x22>
 800d2c4:	1b9b      	subs	r3, r3, r6
 800d2c6:	50a3      	str	r3, [r4, r2]
 800d2c8:	e7b3      	b.n	800d232 <_malloc_r+0x22>
 800d2ca:	6862      	ldr	r2, [r4, #4]
 800d2cc:	42a3      	cmp	r3, r4
 800d2ce:	bf0c      	ite	eq
 800d2d0:	6032      	streq	r2, [r6, #0]
 800d2d2:	605a      	strne	r2, [r3, #4]
 800d2d4:	e7ec      	b.n	800d2b0 <_malloc_r+0xa0>
 800d2d6:	4623      	mov	r3, r4
 800d2d8:	6864      	ldr	r4, [r4, #4]
 800d2da:	e7b2      	b.n	800d242 <_malloc_r+0x32>
 800d2dc:	4634      	mov	r4, r6
 800d2de:	6876      	ldr	r6, [r6, #4]
 800d2e0:	e7b9      	b.n	800d256 <_malloc_r+0x46>
 800d2e2:	230c      	movs	r3, #12
 800d2e4:	603b      	str	r3, [r7, #0]
 800d2e6:	4638      	mov	r0, r7
 800d2e8:	f000 f8fe 	bl	800d4e8 <__malloc_unlock>
 800d2ec:	e7a1      	b.n	800d232 <_malloc_r+0x22>
 800d2ee:	6025      	str	r5, [r4, #0]
 800d2f0:	e7de      	b.n	800d2b0 <_malloc_r+0xa0>
 800d2f2:	bf00      	nop
 800d2f4:	200031b4 	.word	0x200031b4

0800d2f8 <_putc_r>:
 800d2f8:	b570      	push	{r4, r5, r6, lr}
 800d2fa:	460d      	mov	r5, r1
 800d2fc:	4614      	mov	r4, r2
 800d2fe:	4606      	mov	r6, r0
 800d300:	b118      	cbz	r0, 800d30a <_putc_r+0x12>
 800d302:	6983      	ldr	r3, [r0, #24]
 800d304:	b90b      	cbnz	r3, 800d30a <_putc_r+0x12>
 800d306:	f7ff fe11 	bl	800cf2c <__sinit>
 800d30a:	4b1c      	ldr	r3, [pc, #112]	; (800d37c <_putc_r+0x84>)
 800d30c:	429c      	cmp	r4, r3
 800d30e:	d124      	bne.n	800d35a <_putc_r+0x62>
 800d310:	6874      	ldr	r4, [r6, #4]
 800d312:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d314:	07d8      	lsls	r0, r3, #31
 800d316:	d405      	bmi.n	800d324 <_putc_r+0x2c>
 800d318:	89a3      	ldrh	r3, [r4, #12]
 800d31a:	0599      	lsls	r1, r3, #22
 800d31c:	d402      	bmi.n	800d324 <_putc_r+0x2c>
 800d31e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d320:	f7ff fea2 	bl	800d068 <__retarget_lock_acquire_recursive>
 800d324:	68a3      	ldr	r3, [r4, #8]
 800d326:	3b01      	subs	r3, #1
 800d328:	2b00      	cmp	r3, #0
 800d32a:	60a3      	str	r3, [r4, #8]
 800d32c:	da05      	bge.n	800d33a <_putc_r+0x42>
 800d32e:	69a2      	ldr	r2, [r4, #24]
 800d330:	4293      	cmp	r3, r2
 800d332:	db1c      	blt.n	800d36e <_putc_r+0x76>
 800d334:	b2eb      	uxtb	r3, r5
 800d336:	2b0a      	cmp	r3, #10
 800d338:	d019      	beq.n	800d36e <_putc_r+0x76>
 800d33a:	6823      	ldr	r3, [r4, #0]
 800d33c:	1c5a      	adds	r2, r3, #1
 800d33e:	6022      	str	r2, [r4, #0]
 800d340:	701d      	strb	r5, [r3, #0]
 800d342:	b2ed      	uxtb	r5, r5
 800d344:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d346:	07da      	lsls	r2, r3, #31
 800d348:	d405      	bmi.n	800d356 <_putc_r+0x5e>
 800d34a:	89a3      	ldrh	r3, [r4, #12]
 800d34c:	059b      	lsls	r3, r3, #22
 800d34e:	d402      	bmi.n	800d356 <_putc_r+0x5e>
 800d350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d352:	f7ff fe8a 	bl	800d06a <__retarget_lock_release_recursive>
 800d356:	4628      	mov	r0, r5
 800d358:	bd70      	pop	{r4, r5, r6, pc}
 800d35a:	4b09      	ldr	r3, [pc, #36]	; (800d380 <_putc_r+0x88>)
 800d35c:	429c      	cmp	r4, r3
 800d35e:	d101      	bne.n	800d364 <_putc_r+0x6c>
 800d360:	68b4      	ldr	r4, [r6, #8]
 800d362:	e7d6      	b.n	800d312 <_putc_r+0x1a>
 800d364:	4b07      	ldr	r3, [pc, #28]	; (800d384 <_putc_r+0x8c>)
 800d366:	429c      	cmp	r4, r3
 800d368:	bf08      	it	eq
 800d36a:	68f4      	ldreq	r4, [r6, #12]
 800d36c:	e7d1      	b.n	800d312 <_putc_r+0x1a>
 800d36e:	4629      	mov	r1, r5
 800d370:	4622      	mov	r2, r4
 800d372:	4630      	mov	r0, r6
 800d374:	f7ff fc00 	bl	800cb78 <__swbuf_r>
 800d378:	4605      	mov	r5, r0
 800d37a:	e7e3      	b.n	800d344 <_putc_r+0x4c>
 800d37c:	0800df9c 	.word	0x0800df9c
 800d380:	0800dfbc 	.word	0x0800dfbc
 800d384:	0800df7c 	.word	0x0800df7c

0800d388 <_sbrk_r>:
 800d388:	b538      	push	{r3, r4, r5, lr}
 800d38a:	4d06      	ldr	r5, [pc, #24]	; (800d3a4 <_sbrk_r+0x1c>)
 800d38c:	2300      	movs	r3, #0
 800d38e:	4604      	mov	r4, r0
 800d390:	4608      	mov	r0, r1
 800d392:	602b      	str	r3, [r5, #0]
 800d394:	f7f3 fe08 	bl	8000fa8 <_sbrk>
 800d398:	1c43      	adds	r3, r0, #1
 800d39a:	d102      	bne.n	800d3a2 <_sbrk_r+0x1a>
 800d39c:	682b      	ldr	r3, [r5, #0]
 800d39e:	b103      	cbz	r3, 800d3a2 <_sbrk_r+0x1a>
 800d3a0:	6023      	str	r3, [r4, #0]
 800d3a2:	bd38      	pop	{r3, r4, r5, pc}
 800d3a4:	200031bc 	.word	0x200031bc

0800d3a8 <__sread>:
 800d3a8:	b510      	push	{r4, lr}
 800d3aa:	460c      	mov	r4, r1
 800d3ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3b0:	f000 f8a0 	bl	800d4f4 <_read_r>
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	bfab      	itete	ge
 800d3b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d3ba:	89a3      	ldrhlt	r3, [r4, #12]
 800d3bc:	181b      	addge	r3, r3, r0
 800d3be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d3c2:	bfac      	ite	ge
 800d3c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d3c6:	81a3      	strhlt	r3, [r4, #12]
 800d3c8:	bd10      	pop	{r4, pc}

0800d3ca <__swrite>:
 800d3ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3ce:	461f      	mov	r7, r3
 800d3d0:	898b      	ldrh	r3, [r1, #12]
 800d3d2:	05db      	lsls	r3, r3, #23
 800d3d4:	4605      	mov	r5, r0
 800d3d6:	460c      	mov	r4, r1
 800d3d8:	4616      	mov	r6, r2
 800d3da:	d505      	bpl.n	800d3e8 <__swrite+0x1e>
 800d3dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3e0:	2302      	movs	r3, #2
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	f000 f868 	bl	800d4b8 <_lseek_r>
 800d3e8:	89a3      	ldrh	r3, [r4, #12]
 800d3ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3f2:	81a3      	strh	r3, [r4, #12]
 800d3f4:	4632      	mov	r2, r6
 800d3f6:	463b      	mov	r3, r7
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3fe:	f000 b817 	b.w	800d430 <_write_r>

0800d402 <__sseek>:
 800d402:	b510      	push	{r4, lr}
 800d404:	460c      	mov	r4, r1
 800d406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d40a:	f000 f855 	bl	800d4b8 <_lseek_r>
 800d40e:	1c43      	adds	r3, r0, #1
 800d410:	89a3      	ldrh	r3, [r4, #12]
 800d412:	bf15      	itete	ne
 800d414:	6560      	strne	r0, [r4, #84]	; 0x54
 800d416:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d41a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d41e:	81a3      	strheq	r3, [r4, #12]
 800d420:	bf18      	it	ne
 800d422:	81a3      	strhne	r3, [r4, #12]
 800d424:	bd10      	pop	{r4, pc}

0800d426 <__sclose>:
 800d426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d42a:	f000 b813 	b.w	800d454 <_close_r>
	...

0800d430 <_write_r>:
 800d430:	b538      	push	{r3, r4, r5, lr}
 800d432:	4d07      	ldr	r5, [pc, #28]	; (800d450 <_write_r+0x20>)
 800d434:	4604      	mov	r4, r0
 800d436:	4608      	mov	r0, r1
 800d438:	4611      	mov	r1, r2
 800d43a:	2200      	movs	r2, #0
 800d43c:	602a      	str	r2, [r5, #0]
 800d43e:	461a      	mov	r2, r3
 800d440:	f7f3 fd62 	bl	8000f08 <_write>
 800d444:	1c43      	adds	r3, r0, #1
 800d446:	d102      	bne.n	800d44e <_write_r+0x1e>
 800d448:	682b      	ldr	r3, [r5, #0]
 800d44a:	b103      	cbz	r3, 800d44e <_write_r+0x1e>
 800d44c:	6023      	str	r3, [r4, #0]
 800d44e:	bd38      	pop	{r3, r4, r5, pc}
 800d450:	200031bc 	.word	0x200031bc

0800d454 <_close_r>:
 800d454:	b538      	push	{r3, r4, r5, lr}
 800d456:	4d06      	ldr	r5, [pc, #24]	; (800d470 <_close_r+0x1c>)
 800d458:	2300      	movs	r3, #0
 800d45a:	4604      	mov	r4, r0
 800d45c:	4608      	mov	r0, r1
 800d45e:	602b      	str	r3, [r5, #0]
 800d460:	f7f3 fd6e 	bl	8000f40 <_close>
 800d464:	1c43      	adds	r3, r0, #1
 800d466:	d102      	bne.n	800d46e <_close_r+0x1a>
 800d468:	682b      	ldr	r3, [r5, #0]
 800d46a:	b103      	cbz	r3, 800d46e <_close_r+0x1a>
 800d46c:	6023      	str	r3, [r4, #0]
 800d46e:	bd38      	pop	{r3, r4, r5, pc}
 800d470:	200031bc 	.word	0x200031bc

0800d474 <_fstat_r>:
 800d474:	b538      	push	{r3, r4, r5, lr}
 800d476:	4d07      	ldr	r5, [pc, #28]	; (800d494 <_fstat_r+0x20>)
 800d478:	2300      	movs	r3, #0
 800d47a:	4604      	mov	r4, r0
 800d47c:	4608      	mov	r0, r1
 800d47e:	4611      	mov	r1, r2
 800d480:	602b      	str	r3, [r5, #0]
 800d482:	f7f3 fd69 	bl	8000f58 <_fstat>
 800d486:	1c43      	adds	r3, r0, #1
 800d488:	d102      	bne.n	800d490 <_fstat_r+0x1c>
 800d48a:	682b      	ldr	r3, [r5, #0]
 800d48c:	b103      	cbz	r3, 800d490 <_fstat_r+0x1c>
 800d48e:	6023      	str	r3, [r4, #0]
 800d490:	bd38      	pop	{r3, r4, r5, pc}
 800d492:	bf00      	nop
 800d494:	200031bc 	.word	0x200031bc

0800d498 <_isatty_r>:
 800d498:	b538      	push	{r3, r4, r5, lr}
 800d49a:	4d06      	ldr	r5, [pc, #24]	; (800d4b4 <_isatty_r+0x1c>)
 800d49c:	2300      	movs	r3, #0
 800d49e:	4604      	mov	r4, r0
 800d4a0:	4608      	mov	r0, r1
 800d4a2:	602b      	str	r3, [r5, #0]
 800d4a4:	f7f3 fd68 	bl	8000f78 <_isatty>
 800d4a8:	1c43      	adds	r3, r0, #1
 800d4aa:	d102      	bne.n	800d4b2 <_isatty_r+0x1a>
 800d4ac:	682b      	ldr	r3, [r5, #0]
 800d4ae:	b103      	cbz	r3, 800d4b2 <_isatty_r+0x1a>
 800d4b0:	6023      	str	r3, [r4, #0]
 800d4b2:	bd38      	pop	{r3, r4, r5, pc}
 800d4b4:	200031bc 	.word	0x200031bc

0800d4b8 <_lseek_r>:
 800d4b8:	b538      	push	{r3, r4, r5, lr}
 800d4ba:	4d07      	ldr	r5, [pc, #28]	; (800d4d8 <_lseek_r+0x20>)
 800d4bc:	4604      	mov	r4, r0
 800d4be:	4608      	mov	r0, r1
 800d4c0:	4611      	mov	r1, r2
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	602a      	str	r2, [r5, #0]
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	f7f3 fd61 	bl	8000f8e <_lseek>
 800d4cc:	1c43      	adds	r3, r0, #1
 800d4ce:	d102      	bne.n	800d4d6 <_lseek_r+0x1e>
 800d4d0:	682b      	ldr	r3, [r5, #0]
 800d4d2:	b103      	cbz	r3, 800d4d6 <_lseek_r+0x1e>
 800d4d4:	6023      	str	r3, [r4, #0]
 800d4d6:	bd38      	pop	{r3, r4, r5, pc}
 800d4d8:	200031bc 	.word	0x200031bc

0800d4dc <__malloc_lock>:
 800d4dc:	4801      	ldr	r0, [pc, #4]	; (800d4e4 <__malloc_lock+0x8>)
 800d4de:	f7ff bdc3 	b.w	800d068 <__retarget_lock_acquire_recursive>
 800d4e2:	bf00      	nop
 800d4e4:	200031ae 	.word	0x200031ae

0800d4e8 <__malloc_unlock>:
 800d4e8:	4801      	ldr	r0, [pc, #4]	; (800d4f0 <__malloc_unlock+0x8>)
 800d4ea:	f7ff bdbe 	b.w	800d06a <__retarget_lock_release_recursive>
 800d4ee:	bf00      	nop
 800d4f0:	200031ae 	.word	0x200031ae

0800d4f4 <_read_r>:
 800d4f4:	b538      	push	{r3, r4, r5, lr}
 800d4f6:	4d07      	ldr	r5, [pc, #28]	; (800d514 <_read_r+0x20>)
 800d4f8:	4604      	mov	r4, r0
 800d4fa:	4608      	mov	r0, r1
 800d4fc:	4611      	mov	r1, r2
 800d4fe:	2200      	movs	r2, #0
 800d500:	602a      	str	r2, [r5, #0]
 800d502:	461a      	mov	r2, r3
 800d504:	f7f3 fce3 	bl	8000ece <_read>
 800d508:	1c43      	adds	r3, r0, #1
 800d50a:	d102      	bne.n	800d512 <_read_r+0x1e>
 800d50c:	682b      	ldr	r3, [r5, #0]
 800d50e:	b103      	cbz	r3, 800d512 <_read_r+0x1e>
 800d510:	6023      	str	r3, [r4, #0]
 800d512:	bd38      	pop	{r3, r4, r5, pc}
 800d514:	200031bc 	.word	0x200031bc

0800d518 <roundf>:
 800d518:	ee10 0a10 	vmov	r0, s0
 800d51c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800d520:	3a7f      	subs	r2, #127	; 0x7f
 800d522:	2a16      	cmp	r2, #22
 800d524:	dc15      	bgt.n	800d552 <roundf+0x3a>
 800d526:	2a00      	cmp	r2, #0
 800d528:	da08      	bge.n	800d53c <roundf+0x24>
 800d52a:	3201      	adds	r2, #1
 800d52c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800d530:	d101      	bne.n	800d536 <roundf+0x1e>
 800d532:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800d536:	ee00 3a10 	vmov	s0, r3
 800d53a:	4770      	bx	lr
 800d53c:	4907      	ldr	r1, [pc, #28]	; (800d55c <roundf+0x44>)
 800d53e:	4111      	asrs	r1, r2
 800d540:	4208      	tst	r0, r1
 800d542:	d0fa      	beq.n	800d53a <roundf+0x22>
 800d544:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d548:	4113      	asrs	r3, r2
 800d54a:	4403      	add	r3, r0
 800d54c:	ea23 0301 	bic.w	r3, r3, r1
 800d550:	e7f1      	b.n	800d536 <roundf+0x1e>
 800d552:	2a80      	cmp	r2, #128	; 0x80
 800d554:	d1f1      	bne.n	800d53a <roundf+0x22>
 800d556:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d55a:	4770      	bx	lr
 800d55c:	007fffff 	.word	0x007fffff

0800d560 <powf>:
 800d560:	b508      	push	{r3, lr}
 800d562:	ed2d 8b04 	vpush	{d8-d9}
 800d566:	eeb0 8a60 	vmov.f32	s16, s1
 800d56a:	eeb0 9a40 	vmov.f32	s18, s0
 800d56e:	f000 f84f 	bl	800d610 <__ieee754_powf>
 800d572:	eeb4 8a48 	vcmp.f32	s16, s16
 800d576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d57a:	eef0 8a40 	vmov.f32	s17, s0
 800d57e:	d63e      	bvs.n	800d5fe <powf+0x9e>
 800d580:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800d584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d588:	d112      	bne.n	800d5b0 <powf+0x50>
 800d58a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d592:	d039      	beq.n	800d608 <powf+0xa8>
 800d594:	eeb0 0a48 	vmov.f32	s0, s16
 800d598:	f000 fb35 	bl	800dc06 <finitef>
 800d59c:	b378      	cbz	r0, 800d5fe <powf+0x9e>
 800d59e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5a6:	d52a      	bpl.n	800d5fe <powf+0x9e>
 800d5a8:	f7ff fa00 	bl	800c9ac <__errno>
 800d5ac:	2322      	movs	r3, #34	; 0x22
 800d5ae:	e014      	b.n	800d5da <powf+0x7a>
 800d5b0:	f000 fb29 	bl	800dc06 <finitef>
 800d5b4:	b998      	cbnz	r0, 800d5de <powf+0x7e>
 800d5b6:	eeb0 0a49 	vmov.f32	s0, s18
 800d5ba:	f000 fb24 	bl	800dc06 <finitef>
 800d5be:	b170      	cbz	r0, 800d5de <powf+0x7e>
 800d5c0:	eeb0 0a48 	vmov.f32	s0, s16
 800d5c4:	f000 fb1f 	bl	800dc06 <finitef>
 800d5c8:	b148      	cbz	r0, 800d5de <powf+0x7e>
 800d5ca:	eef4 8a68 	vcmp.f32	s17, s17
 800d5ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5d2:	d7e9      	bvc.n	800d5a8 <powf+0x48>
 800d5d4:	f7ff f9ea 	bl	800c9ac <__errno>
 800d5d8:	2321      	movs	r3, #33	; 0x21
 800d5da:	6003      	str	r3, [r0, #0]
 800d5dc:	e00f      	b.n	800d5fe <powf+0x9e>
 800d5de:	eef5 8a40 	vcmp.f32	s17, #0.0
 800d5e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5e6:	d10a      	bne.n	800d5fe <powf+0x9e>
 800d5e8:	eeb0 0a49 	vmov.f32	s0, s18
 800d5ec:	f000 fb0b 	bl	800dc06 <finitef>
 800d5f0:	b128      	cbz	r0, 800d5fe <powf+0x9e>
 800d5f2:	eeb0 0a48 	vmov.f32	s0, s16
 800d5f6:	f000 fb06 	bl	800dc06 <finitef>
 800d5fa:	2800      	cmp	r0, #0
 800d5fc:	d1d4      	bne.n	800d5a8 <powf+0x48>
 800d5fe:	eeb0 0a68 	vmov.f32	s0, s17
 800d602:	ecbd 8b04 	vpop	{d8-d9}
 800d606:	bd08      	pop	{r3, pc}
 800d608:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800d60c:	e7f7      	b.n	800d5fe <powf+0x9e>
	...

0800d610 <__ieee754_powf>:
 800d610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d614:	ee10 4a90 	vmov	r4, s1
 800d618:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800d61c:	ed2d 8b02 	vpush	{d8}
 800d620:	ee10 6a10 	vmov	r6, s0
 800d624:	eeb0 8a40 	vmov.f32	s16, s0
 800d628:	eef0 8a60 	vmov.f32	s17, s1
 800d62c:	d10c      	bne.n	800d648 <__ieee754_powf+0x38>
 800d62e:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800d632:	0076      	lsls	r6, r6, #1
 800d634:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800d638:	f240 8296 	bls.w	800db68 <__ieee754_powf+0x558>
 800d63c:	ee38 0a28 	vadd.f32	s0, s16, s17
 800d640:	ecbd 8b02 	vpop	{d8}
 800d644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d648:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800d64c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800d650:	dcf4      	bgt.n	800d63c <__ieee754_powf+0x2c>
 800d652:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800d656:	dd08      	ble.n	800d66a <__ieee754_powf+0x5a>
 800d658:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800d65c:	d1ee      	bne.n	800d63c <__ieee754_powf+0x2c>
 800d65e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800d662:	0064      	lsls	r4, r4, #1
 800d664:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800d668:	e7e6      	b.n	800d638 <__ieee754_powf+0x28>
 800d66a:	2e00      	cmp	r6, #0
 800d66c:	da20      	bge.n	800d6b0 <__ieee754_powf+0xa0>
 800d66e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800d672:	da2d      	bge.n	800d6d0 <__ieee754_powf+0xc0>
 800d674:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800d678:	f2c0 827f 	blt.w	800db7a <__ieee754_powf+0x56a>
 800d67c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800d680:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800d684:	fa48 f703 	asr.w	r7, r8, r3
 800d688:	fa07 f303 	lsl.w	r3, r7, r3
 800d68c:	4543      	cmp	r3, r8
 800d68e:	f040 8274 	bne.w	800db7a <__ieee754_powf+0x56a>
 800d692:	f007 0701 	and.w	r7, r7, #1
 800d696:	f1c7 0702 	rsb	r7, r7, #2
 800d69a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800d69e:	d11f      	bne.n	800d6e0 <__ieee754_powf+0xd0>
 800d6a0:	2c00      	cmp	r4, #0
 800d6a2:	f280 8267 	bge.w	800db74 <__ieee754_powf+0x564>
 800d6a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d6aa:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800d6ae:	e7c7      	b.n	800d640 <__ieee754_powf+0x30>
 800d6b0:	2700      	movs	r7, #0
 800d6b2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800d6b6:	d1f0      	bne.n	800d69a <__ieee754_powf+0x8a>
 800d6b8:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800d6bc:	f000 8254 	beq.w	800db68 <__ieee754_powf+0x558>
 800d6c0:	dd08      	ble.n	800d6d4 <__ieee754_powf+0xc4>
 800d6c2:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800d9cc <__ieee754_powf+0x3bc>
 800d6c6:	2c00      	cmp	r4, #0
 800d6c8:	bfa8      	it	ge
 800d6ca:	eeb0 0a68 	vmovge.f32	s0, s17
 800d6ce:	e7b7      	b.n	800d640 <__ieee754_powf+0x30>
 800d6d0:	2702      	movs	r7, #2
 800d6d2:	e7ee      	b.n	800d6b2 <__ieee754_powf+0xa2>
 800d6d4:	2c00      	cmp	r4, #0
 800d6d6:	f280 824a 	bge.w	800db6e <__ieee754_powf+0x55e>
 800d6da:	eeb1 0a68 	vneg.f32	s0, s17
 800d6de:	e7af      	b.n	800d640 <__ieee754_powf+0x30>
 800d6e0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800d6e4:	d102      	bne.n	800d6ec <__ieee754_powf+0xdc>
 800d6e6:	ee28 0a08 	vmul.f32	s0, s16, s16
 800d6ea:	e7a9      	b.n	800d640 <__ieee754_powf+0x30>
 800d6ec:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800d6f0:	eeb0 0a48 	vmov.f32	s0, s16
 800d6f4:	d107      	bne.n	800d706 <__ieee754_powf+0xf6>
 800d6f6:	2e00      	cmp	r6, #0
 800d6f8:	db05      	blt.n	800d706 <__ieee754_powf+0xf6>
 800d6fa:	ecbd 8b02 	vpop	{d8}
 800d6fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d702:	f000 ba53 	b.w	800dbac <__ieee754_sqrtf>
 800d706:	f000 fa77 	bl	800dbf8 <fabsf>
 800d70a:	b125      	cbz	r5, 800d716 <__ieee754_powf+0x106>
 800d70c:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800d710:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800d714:	d116      	bne.n	800d744 <__ieee754_powf+0x134>
 800d716:	2c00      	cmp	r4, #0
 800d718:	bfbc      	itt	lt
 800d71a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800d71e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800d722:	2e00      	cmp	r6, #0
 800d724:	da8c      	bge.n	800d640 <__ieee754_powf+0x30>
 800d726:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800d72a:	ea55 0307 	orrs.w	r3, r5, r7
 800d72e:	d104      	bne.n	800d73a <__ieee754_powf+0x12a>
 800d730:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d734:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d738:	e782      	b.n	800d640 <__ieee754_powf+0x30>
 800d73a:	2f01      	cmp	r7, #1
 800d73c:	d180      	bne.n	800d640 <__ieee754_powf+0x30>
 800d73e:	eeb1 0a40 	vneg.f32	s0, s0
 800d742:	e77d      	b.n	800d640 <__ieee754_powf+0x30>
 800d744:	0ff0      	lsrs	r0, r6, #31
 800d746:	3801      	subs	r0, #1
 800d748:	ea57 0300 	orrs.w	r3, r7, r0
 800d74c:	d104      	bne.n	800d758 <__ieee754_powf+0x148>
 800d74e:	ee38 8a48 	vsub.f32	s16, s16, s16
 800d752:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800d756:	e773      	b.n	800d640 <__ieee754_powf+0x30>
 800d758:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800d75c:	dd74      	ble.n	800d848 <__ieee754_powf+0x238>
 800d75e:	4b9c      	ldr	r3, [pc, #624]	; (800d9d0 <__ieee754_powf+0x3c0>)
 800d760:	429d      	cmp	r5, r3
 800d762:	dc08      	bgt.n	800d776 <__ieee754_powf+0x166>
 800d764:	2c00      	cmp	r4, #0
 800d766:	da0b      	bge.n	800d780 <__ieee754_powf+0x170>
 800d768:	2000      	movs	r0, #0
 800d76a:	ecbd 8b02 	vpop	{d8}
 800d76e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d772:	f000 ba3b 	b.w	800dbec <__math_oflowf>
 800d776:	4b97      	ldr	r3, [pc, #604]	; (800d9d4 <__ieee754_powf+0x3c4>)
 800d778:	429d      	cmp	r5, r3
 800d77a:	dd08      	ble.n	800d78e <__ieee754_powf+0x17e>
 800d77c:	2c00      	cmp	r4, #0
 800d77e:	dcf3      	bgt.n	800d768 <__ieee754_powf+0x158>
 800d780:	2000      	movs	r0, #0
 800d782:	ecbd 8b02 	vpop	{d8}
 800d786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d78a:	f000 ba29 	b.w	800dbe0 <__math_uflowf>
 800d78e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d792:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d796:	eddf 6a90 	vldr	s13, [pc, #576]	; 800d9d8 <__ieee754_powf+0x3c8>
 800d79a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800d79e:	eee0 6a67 	vfms.f32	s13, s0, s15
 800d7a2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d7a6:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800d7aa:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d7ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7b2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800d9dc <__ieee754_powf+0x3cc>
 800d7b6:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800d7ba:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800d9e0 <__ieee754_powf+0x3d0>
 800d7be:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d7c2:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800d9e4 <__ieee754_powf+0x3d4>
 800d7c6:	eef0 6a67 	vmov.f32	s13, s15
 800d7ca:	eee0 6a07 	vfma.f32	s13, s0, s14
 800d7ce:	ee16 3a90 	vmov	r3, s13
 800d7d2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d7d6:	f023 030f 	bic.w	r3, r3, #15
 800d7da:	ee00 3a90 	vmov	s1, r3
 800d7de:	eee0 0a47 	vfms.f32	s1, s0, s14
 800d7e2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d7e6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800d7ea:	f024 040f 	bic.w	r4, r4, #15
 800d7ee:	ee07 4a10 	vmov	s14, r4
 800d7f2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800d7f6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800d7fa:	ee07 3a90 	vmov	s15, r3
 800d7fe:	eee7 0a27 	vfma.f32	s1, s14, s15
 800d802:	3f01      	subs	r7, #1
 800d804:	ea57 0200 	orrs.w	r2, r7, r0
 800d808:	ee07 4a10 	vmov	s14, r4
 800d80c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d810:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800d814:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800d818:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800d81c:	ee17 4a10 	vmov	r4, s14
 800d820:	bf08      	it	eq
 800d822:	eeb0 8a40 	vmoveq.f32	s16, s0
 800d826:	2c00      	cmp	r4, #0
 800d828:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d82c:	f340 817e 	ble.w	800db2c <__ieee754_powf+0x51c>
 800d830:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800d834:	f340 80f8 	ble.w	800da28 <__ieee754_powf+0x418>
 800d838:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d840:	bf4c      	ite	mi
 800d842:	2001      	movmi	r0, #1
 800d844:	2000      	movpl	r0, #0
 800d846:	e790      	b.n	800d76a <__ieee754_powf+0x15a>
 800d848:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800d84c:	bf01      	itttt	eq
 800d84e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800d9e8 <__ieee754_powf+0x3d8>
 800d852:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800d856:	f06f 0217 	mvneq.w	r2, #23
 800d85a:	ee17 5a90 	vmoveq	r5, s15
 800d85e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800d862:	bf18      	it	ne
 800d864:	2200      	movne	r2, #0
 800d866:	3b7f      	subs	r3, #127	; 0x7f
 800d868:	4413      	add	r3, r2
 800d86a:	4a60      	ldr	r2, [pc, #384]	; (800d9ec <__ieee754_powf+0x3dc>)
 800d86c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800d870:	4295      	cmp	r5, r2
 800d872:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800d876:	dd06      	ble.n	800d886 <__ieee754_powf+0x276>
 800d878:	4a5d      	ldr	r2, [pc, #372]	; (800d9f0 <__ieee754_powf+0x3e0>)
 800d87a:	4295      	cmp	r5, r2
 800d87c:	f340 80a4 	ble.w	800d9c8 <__ieee754_powf+0x3b8>
 800d880:	3301      	adds	r3, #1
 800d882:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800d886:	2500      	movs	r5, #0
 800d888:	4a5a      	ldr	r2, [pc, #360]	; (800d9f4 <__ieee754_powf+0x3e4>)
 800d88a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800d88e:	ee07 1a90 	vmov	s15, r1
 800d892:	ed92 7a00 	vldr	s14, [r2]
 800d896:	4a58      	ldr	r2, [pc, #352]	; (800d9f8 <__ieee754_powf+0x3e8>)
 800d898:	ee37 6a27 	vadd.f32	s12, s14, s15
 800d89c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800d8a0:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800d8a4:	1049      	asrs	r1, r1, #1
 800d8a6:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800d8aa:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800d8ae:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800d8b2:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800d8b6:	ee06 1a10 	vmov	s12, r1
 800d8ba:	ee65 4a26 	vmul.f32	s9, s10, s13
 800d8be:	ee36 7a47 	vsub.f32	s14, s12, s14
 800d8c2:	ee14 6a90 	vmov	r6, s9
 800d8c6:	4016      	ands	r6, r2
 800d8c8:	ee05 6a90 	vmov	s11, r6
 800d8cc:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800d8d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d8d4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800d9fc <__ieee754_powf+0x3ec>
 800d8d8:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800d8dc:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800d8e0:	ee25 6a26 	vmul.f32	s12, s10, s13
 800d8e4:	eddf 6a46 	vldr	s13, [pc, #280]	; 800da00 <__ieee754_powf+0x3f0>
 800d8e8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800d8ec:	eddf 6a45 	vldr	s13, [pc, #276]	; 800da04 <__ieee754_powf+0x3f4>
 800d8f0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d8f4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800d9d8 <__ieee754_powf+0x3c8>
 800d8f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d8fc:	eddf 6a42 	vldr	s13, [pc, #264]	; 800da08 <__ieee754_powf+0x3f8>
 800d900:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d904:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800da0c <__ieee754_powf+0x3fc>
 800d908:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d90c:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800d910:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800d914:	ee66 6a86 	vmul.f32	s13, s13, s12
 800d918:	eee5 6a07 	vfma.f32	s13, s10, s14
 800d91c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800d920:	eef0 7a45 	vmov.f32	s15, s10
 800d924:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800d928:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d92c:	ee17 1a90 	vmov	r1, s15
 800d930:	4011      	ands	r1, r2
 800d932:	ee07 1a90 	vmov	s15, r1
 800d936:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800d93a:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800d93e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d942:	ee27 7a24 	vmul.f32	s14, s14, s9
 800d946:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d94a:	eeb0 6a47 	vmov.f32	s12, s14
 800d94e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800d952:	ee16 1a10 	vmov	r1, s12
 800d956:	4011      	ands	r1, r2
 800d958:	ee06 1a90 	vmov	s13, r1
 800d95c:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800d960:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800da10 <__ieee754_powf+0x400>
 800d964:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800da14 <__ieee754_powf+0x404>
 800d968:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d96c:	ee06 1a10 	vmov	s12, r1
 800d970:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d974:	eddf 7a28 	vldr	s15, [pc, #160]	; 800da18 <__ieee754_powf+0x408>
 800d978:	4928      	ldr	r1, [pc, #160]	; (800da1c <__ieee754_powf+0x40c>)
 800d97a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d97e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800d982:	edd1 7a00 	vldr	s15, [r1]
 800d986:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d98a:	ee07 3a90 	vmov	s15, r3
 800d98e:	4b24      	ldr	r3, [pc, #144]	; (800da20 <__ieee754_powf+0x410>)
 800d990:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d994:	eef0 7a47 	vmov.f32	s15, s14
 800d998:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d99c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800d9a0:	edd5 0a00 	vldr	s1, [r5]
 800d9a4:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d9a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9ac:	ee17 3a90 	vmov	r3, s15
 800d9b0:	4013      	ands	r3, r2
 800d9b2:	ee07 3a90 	vmov	s15, r3
 800d9b6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800d9ba:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800d9be:	eee6 6a65 	vfms.f32	s13, s12, s11
 800d9c2:	ee77 7a66 	vsub.f32	s15, s14, s13
 800d9c6:	e70e      	b.n	800d7e6 <__ieee754_powf+0x1d6>
 800d9c8:	2501      	movs	r5, #1
 800d9ca:	e75d      	b.n	800d888 <__ieee754_powf+0x278>
 800d9cc:	00000000 	.word	0x00000000
 800d9d0:	3f7ffff3 	.word	0x3f7ffff3
 800d9d4:	3f800007 	.word	0x3f800007
 800d9d8:	3eaaaaab 	.word	0x3eaaaaab
 800d9dc:	3fb8aa3b 	.word	0x3fb8aa3b
 800d9e0:	36eca570 	.word	0x36eca570
 800d9e4:	3fb8aa00 	.word	0x3fb8aa00
 800d9e8:	4b800000 	.word	0x4b800000
 800d9ec:	001cc471 	.word	0x001cc471
 800d9f0:	005db3d6 	.word	0x005db3d6
 800d9f4:	0800dfdc 	.word	0x0800dfdc
 800d9f8:	fffff000 	.word	0xfffff000
 800d9fc:	3e6c3255 	.word	0x3e6c3255
 800da00:	3e53f142 	.word	0x3e53f142
 800da04:	3e8ba305 	.word	0x3e8ba305
 800da08:	3edb6db7 	.word	0x3edb6db7
 800da0c:	3f19999a 	.word	0x3f19999a
 800da10:	3f76384f 	.word	0x3f76384f
 800da14:	3f763800 	.word	0x3f763800
 800da18:	369dc3a0 	.word	0x369dc3a0
 800da1c:	0800dfec 	.word	0x0800dfec
 800da20:	0800dfe4 	.word	0x0800dfe4
 800da24:	3338aa3c 	.word	0x3338aa3c
 800da28:	f040 8095 	bne.w	800db56 <__ieee754_powf+0x546>
 800da2c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800da24 <__ieee754_powf+0x414>
 800da30:	ee37 7a67 	vsub.f32	s14, s14, s15
 800da34:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800da38:	eef4 6ac7 	vcmpe.f32	s13, s14
 800da3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da40:	f73f aefa 	bgt.w	800d838 <__ieee754_powf+0x228>
 800da44:	15db      	asrs	r3, r3, #23
 800da46:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800da4a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800da4e:	4103      	asrs	r3, r0
 800da50:	4423      	add	r3, r4
 800da52:	494b      	ldr	r1, [pc, #300]	; (800db80 <__ieee754_powf+0x570>)
 800da54:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800da58:	3a7f      	subs	r2, #127	; 0x7f
 800da5a:	4111      	asrs	r1, r2
 800da5c:	ea23 0101 	bic.w	r1, r3, r1
 800da60:	ee07 1a10 	vmov	s14, r1
 800da64:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800da68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800da6c:	f1c2 0217 	rsb	r2, r2, #23
 800da70:	4110      	asrs	r0, r2
 800da72:	2c00      	cmp	r4, #0
 800da74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da78:	bfb8      	it	lt
 800da7a:	4240      	neglt	r0, r0
 800da7c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800da80:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800db84 <__ieee754_powf+0x574>
 800da84:	eddf 6a40 	vldr	s13, [pc, #256]	; 800db88 <__ieee754_powf+0x578>
 800da88:	ee17 3a10 	vmov	r3, s14
 800da8c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800da90:	f023 030f 	bic.w	r3, r3, #15
 800da94:	ee07 3a10 	vmov	s14, r3
 800da98:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da9c:	ee27 0a00 	vmul.f32	s0, s14, s0
 800daa0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800daa4:	eddf 7a39 	vldr	s15, [pc, #228]	; 800db8c <__ieee754_powf+0x57c>
 800daa8:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800daac:	eef0 7a40 	vmov.f32	s15, s0
 800dab0:	eee7 7a26 	vfma.f32	s15, s14, s13
 800dab4:	eeb0 6a67 	vmov.f32	s12, s15
 800dab8:	eea7 6a66 	vfms.f32	s12, s14, s13
 800dabc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800dac0:	ee30 0a46 	vsub.f32	s0, s0, s12
 800dac4:	eddf 6a32 	vldr	s13, [pc, #200]	; 800db90 <__ieee754_powf+0x580>
 800dac8:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800db94 <__ieee754_powf+0x584>
 800dacc:	eee7 6a06 	vfma.f32	s13, s14, s12
 800dad0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800db98 <__ieee754_powf+0x588>
 800dad4:	eea6 6a87 	vfma.f32	s12, s13, s14
 800dad8:	eddf 6a30 	vldr	s13, [pc, #192]	; 800db9c <__ieee754_powf+0x58c>
 800dadc:	eee6 6a07 	vfma.f32	s13, s12, s14
 800dae0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800dba0 <__ieee754_powf+0x590>
 800dae4:	eea6 6a87 	vfma.f32	s12, s13, s14
 800dae8:	eef0 6a67 	vmov.f32	s13, s15
 800daec:	eee6 6a47 	vfms.f32	s13, s12, s14
 800daf0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800daf4:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800daf8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800dafc:	eea7 0a80 	vfma.f32	s0, s15, s0
 800db00:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800db04:	ee37 0a40 	vsub.f32	s0, s14, s0
 800db08:	ee70 7a67 	vsub.f32	s15, s0, s15
 800db0c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800db10:	ee30 0a67 	vsub.f32	s0, s0, s15
 800db14:	ee10 3a10 	vmov	r3, s0
 800db18:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800db1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800db20:	da1f      	bge.n	800db62 <__ieee754_powf+0x552>
 800db22:	f000 f87d 	bl	800dc20 <scalbnf>
 800db26:	ee20 0a08 	vmul.f32	s0, s0, s16
 800db2a:	e589      	b.n	800d640 <__ieee754_powf+0x30>
 800db2c:	4a1d      	ldr	r2, [pc, #116]	; (800dba4 <__ieee754_powf+0x594>)
 800db2e:	4293      	cmp	r3, r2
 800db30:	dd07      	ble.n	800db42 <__ieee754_powf+0x532>
 800db32:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800db36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db3a:	bf4c      	ite	mi
 800db3c:	2001      	movmi	r0, #1
 800db3e:	2000      	movpl	r0, #0
 800db40:	e61f      	b.n	800d782 <__ieee754_powf+0x172>
 800db42:	d108      	bne.n	800db56 <__ieee754_powf+0x546>
 800db44:	ee37 7a67 	vsub.f32	s14, s14, s15
 800db48:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800db4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db50:	f6ff af78 	blt.w	800da44 <__ieee754_powf+0x434>
 800db54:	e7ed      	b.n	800db32 <__ieee754_powf+0x522>
 800db56:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800db5a:	f73f af73 	bgt.w	800da44 <__ieee754_powf+0x434>
 800db5e:	2000      	movs	r0, #0
 800db60:	e78c      	b.n	800da7c <__ieee754_powf+0x46c>
 800db62:	ee00 3a10 	vmov	s0, r3
 800db66:	e7de      	b.n	800db26 <__ieee754_powf+0x516>
 800db68:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800db6c:	e568      	b.n	800d640 <__ieee754_powf+0x30>
 800db6e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800dba8 <__ieee754_powf+0x598>
 800db72:	e565      	b.n	800d640 <__ieee754_powf+0x30>
 800db74:	eeb0 0a48 	vmov.f32	s0, s16
 800db78:	e562      	b.n	800d640 <__ieee754_powf+0x30>
 800db7a:	2700      	movs	r7, #0
 800db7c:	e58d      	b.n	800d69a <__ieee754_powf+0x8a>
 800db7e:	bf00      	nop
 800db80:	007fffff 	.word	0x007fffff
 800db84:	35bfbe8c 	.word	0x35bfbe8c
 800db88:	3f317200 	.word	0x3f317200
 800db8c:	3f317218 	.word	0x3f317218
 800db90:	b5ddea0e 	.word	0xb5ddea0e
 800db94:	3331bb4c 	.word	0x3331bb4c
 800db98:	388ab355 	.word	0x388ab355
 800db9c:	bb360b61 	.word	0xbb360b61
 800dba0:	3e2aaaab 	.word	0x3e2aaaab
 800dba4:	43160000 	.word	0x43160000
 800dba8:	00000000 	.word	0x00000000

0800dbac <__ieee754_sqrtf>:
 800dbac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800dbb0:	4770      	bx	lr

0800dbb2 <with_errnof>:
 800dbb2:	b513      	push	{r0, r1, r4, lr}
 800dbb4:	4604      	mov	r4, r0
 800dbb6:	ed8d 0a01 	vstr	s0, [sp, #4]
 800dbba:	f7fe fef7 	bl	800c9ac <__errno>
 800dbbe:	ed9d 0a01 	vldr	s0, [sp, #4]
 800dbc2:	6004      	str	r4, [r0, #0]
 800dbc4:	b002      	add	sp, #8
 800dbc6:	bd10      	pop	{r4, pc}

0800dbc8 <xflowf>:
 800dbc8:	b130      	cbz	r0, 800dbd8 <xflowf+0x10>
 800dbca:	eef1 7a40 	vneg.f32	s15, s0
 800dbce:	ee27 0a80 	vmul.f32	s0, s15, s0
 800dbd2:	2022      	movs	r0, #34	; 0x22
 800dbd4:	f7ff bfed 	b.w	800dbb2 <with_errnof>
 800dbd8:	eef0 7a40 	vmov.f32	s15, s0
 800dbdc:	e7f7      	b.n	800dbce <xflowf+0x6>
	...

0800dbe0 <__math_uflowf>:
 800dbe0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dbe8 <__math_uflowf+0x8>
 800dbe4:	f7ff bff0 	b.w	800dbc8 <xflowf>
 800dbe8:	10000000 	.word	0x10000000

0800dbec <__math_oflowf>:
 800dbec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dbf4 <__math_oflowf+0x8>
 800dbf0:	f7ff bfea 	b.w	800dbc8 <xflowf>
 800dbf4:	70000000 	.word	0x70000000

0800dbf8 <fabsf>:
 800dbf8:	ee10 3a10 	vmov	r3, s0
 800dbfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dc00:	ee00 3a10 	vmov	s0, r3
 800dc04:	4770      	bx	lr

0800dc06 <finitef>:
 800dc06:	b082      	sub	sp, #8
 800dc08:	ed8d 0a01 	vstr	s0, [sp, #4]
 800dc0c:	9801      	ldr	r0, [sp, #4]
 800dc0e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800dc12:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800dc16:	bfac      	ite	ge
 800dc18:	2000      	movge	r0, #0
 800dc1a:	2001      	movlt	r0, #1
 800dc1c:	b002      	add	sp, #8
 800dc1e:	4770      	bx	lr

0800dc20 <scalbnf>:
 800dc20:	ee10 3a10 	vmov	r3, s0
 800dc24:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800dc28:	d025      	beq.n	800dc76 <scalbnf+0x56>
 800dc2a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800dc2e:	d302      	bcc.n	800dc36 <scalbnf+0x16>
 800dc30:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dc34:	4770      	bx	lr
 800dc36:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800dc3a:	d122      	bne.n	800dc82 <scalbnf+0x62>
 800dc3c:	4b2a      	ldr	r3, [pc, #168]	; (800dce8 <scalbnf+0xc8>)
 800dc3e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800dcec <scalbnf+0xcc>
 800dc42:	4298      	cmp	r0, r3
 800dc44:	ee20 0a27 	vmul.f32	s0, s0, s15
 800dc48:	db16      	blt.n	800dc78 <scalbnf+0x58>
 800dc4a:	ee10 3a10 	vmov	r3, s0
 800dc4e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800dc52:	3a19      	subs	r2, #25
 800dc54:	4402      	add	r2, r0
 800dc56:	2afe      	cmp	r2, #254	; 0xfe
 800dc58:	dd15      	ble.n	800dc86 <scalbnf+0x66>
 800dc5a:	ee10 3a10 	vmov	r3, s0
 800dc5e:	eddf 7a24 	vldr	s15, [pc, #144]	; 800dcf0 <scalbnf+0xd0>
 800dc62:	eddf 6a24 	vldr	s13, [pc, #144]	; 800dcf4 <scalbnf+0xd4>
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	eeb0 7a67 	vmov.f32	s14, s15
 800dc6c:	bfb8      	it	lt
 800dc6e:	eef0 7a66 	vmovlt.f32	s15, s13
 800dc72:	ee27 0a27 	vmul.f32	s0, s14, s15
 800dc76:	4770      	bx	lr
 800dc78:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800dcf8 <scalbnf+0xd8>
 800dc7c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800dc80:	4770      	bx	lr
 800dc82:	0dd2      	lsrs	r2, r2, #23
 800dc84:	e7e6      	b.n	800dc54 <scalbnf+0x34>
 800dc86:	2a00      	cmp	r2, #0
 800dc88:	dd06      	ble.n	800dc98 <scalbnf+0x78>
 800dc8a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dc8e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800dc92:	ee00 3a10 	vmov	s0, r3
 800dc96:	4770      	bx	lr
 800dc98:	f112 0f16 	cmn.w	r2, #22
 800dc9c:	da1a      	bge.n	800dcd4 <scalbnf+0xb4>
 800dc9e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dca2:	4298      	cmp	r0, r3
 800dca4:	ee10 3a10 	vmov	r3, s0
 800dca8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dcac:	dd0a      	ble.n	800dcc4 <scalbnf+0xa4>
 800dcae:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800dcf0 <scalbnf+0xd0>
 800dcb2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800dcf4 <scalbnf+0xd4>
 800dcb6:	eef0 7a40 	vmov.f32	s15, s0
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	bf18      	it	ne
 800dcbe:	eeb0 0a47 	vmovne.f32	s0, s14
 800dcc2:	e7db      	b.n	800dc7c <scalbnf+0x5c>
 800dcc4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800dcf8 <scalbnf+0xd8>
 800dcc8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800dcfc <scalbnf+0xdc>
 800dccc:	eef0 7a40 	vmov.f32	s15, s0
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	e7f3      	b.n	800dcbc <scalbnf+0x9c>
 800dcd4:	3219      	adds	r2, #25
 800dcd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dcda:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800dcde:	eddf 7a08 	vldr	s15, [pc, #32]	; 800dd00 <scalbnf+0xe0>
 800dce2:	ee07 3a10 	vmov	s14, r3
 800dce6:	e7c4      	b.n	800dc72 <scalbnf+0x52>
 800dce8:	ffff3cb0 	.word	0xffff3cb0
 800dcec:	4c000000 	.word	0x4c000000
 800dcf0:	7149f2ca 	.word	0x7149f2ca
 800dcf4:	f149f2ca 	.word	0xf149f2ca
 800dcf8:	0da24260 	.word	0x0da24260
 800dcfc:	8da24260 	.word	0x8da24260
 800dd00:	33000000 	.word	0x33000000

0800dd04 <_init>:
 800dd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd06:	bf00      	nop
 800dd08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd0a:	bc08      	pop	{r3}
 800dd0c:	469e      	mov	lr, r3
 800dd0e:	4770      	bx	lr

0800dd10 <_fini>:
 800dd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd12:	bf00      	nop
 800dd14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd16:	bc08      	pop	{r3}
 800dd18:	469e      	mov	lr, r3
 800dd1a:	4770      	bx	lr
